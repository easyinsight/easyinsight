
package com.sforce.soap.partner;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import com.sforce.soap.partner.sobject.SObject;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.1 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebService(name = "Soap", targetNamespace = "urn:partner.soap.sforce.com")
@XmlSeeAlso({
    com.sforce.soap.partner.sobject.ObjectFactory.class,
    com.sforce.soap.partner.fault.ObjectFactory.class,
    com.sforce.soap.partner.ObjectFactory.class
})
public interface Soap {


    /**
     * Login to the Salesforce.com SOAP Api
     * 
     * @param username
     * @param password
     * @return
     *     returns com.sforce.soap.partner.LoginResultType
     * @throws InvalidIdFault
     * @throws UnexpectedErrorFault
     * @throws LoginFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "login", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.Login")
    @ResponseWrapper(localName = "loginResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.LoginResponse")
    public LoginResultType login(
        @WebParam(name = "username", targetNamespace = "urn:partner.soap.sforce.com")
        String username,
        @WebParam(name = "password", targetNamespace = "urn:partner.soap.sforce.com")
        String password)
        throws InvalidIdFault, LoginFault, UnexpectedErrorFault
    ;

    /**
     * Describe an sObject
     * 
     * @param sObjectType
     * @return
     *     returns com.sforce.soap.partner.DescribeSObjectResultType
     * @throws InvalidSObjectFault
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeSObject", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.DescribeSObject")
    @ResponseWrapper(localName = "describeSObjectResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.DescribeSObjectResponse")
    public DescribeSObjectResultType describeSObject(
        @WebParam(header=true, name="SessionHeader", targetNamespace = "urn:partner.soap.sforce.com") SessionHeader h,
        @WebParam(name = "sObjectType", targetNamespace = "urn:partner.soap.sforce.com")
        String sObjectType)
        throws InvalidSObjectFault, UnexpectedErrorFault
    ;

    /**
     * Describe a number sObjects
     * 
     * @param sObjectType
     * @return
     *     returns java.util.List<com.sforce.soap.partner.DescribeSObjectResultType>
     * @throws InvalidSObjectFault
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeSObjects", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.DescribeSObjects")
    @ResponseWrapper(localName = "describeSObjectsResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.DescribeSObjectsResponse")
    public List<DescribeSObjectResultType> describeSObjects(
        @WebParam(name = "sObjectType", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> sObjectType)
        throws InvalidSObjectFault, UnexpectedErrorFault
    ;

    /**
     * Describe the Global state
     * 
     * @return
     *     returns com.sforce.soap.partner.DescribeGlobalResultType
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeGlobal", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.DescribeGlobal")
    @ResponseWrapper(localName = "describeGlobalResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.DescribeGlobalResponse")
    public DescribeGlobalResultType describeGlobal()
        throws UnexpectedErrorFault
    ;

    /**
     * Describe the layout of an sObject
     * 
     * @param recordTypeIds
     * @param sObjectType
     * @return
     *     returns com.sforce.soap.partner.DescribeLayoutResultType
     * @throws InvalidSObjectFault
     * @throws InvalidIdFault
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeLayout", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.DescribeLayout")
    @ResponseWrapper(localName = "describeLayoutResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.DescribeLayoutResponse")
    public DescribeLayoutResultType describeLayout(
        @WebParam(name = "sObjectType", targetNamespace = "urn:partner.soap.sforce.com")
        String sObjectType,
        @WebParam(name = "recordTypeIds", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> recordTypeIds)
        throws InvalidIdFault, InvalidSObjectFault, UnexpectedErrorFault
    ;

    /**
     * Describe the layout of the SoftPhone
     * 
     * @return
     *     returns com.sforce.soap.partner.DescribeSoftphoneLayoutResultType
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeSoftphoneLayout", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.DescribeSoftphoneLayout")
    @ResponseWrapper(localName = "describeSoftphoneLayoutResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.DescribeSoftphoneLayoutResponse")
    public DescribeSoftphoneLayoutResultType describeSoftphoneLayout()
        throws UnexpectedErrorFault
    ;

    /**
     * Describe the tabs that appear on a users page
     * 
     * @return
     *     returns java.util.List<com.sforce.soap.partner.DescribeTabSetResultType>
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeTabs", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.DescribeTabs")
    @ResponseWrapper(localName = "describeTabsResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.DescribeTabsResponse")
    public List<DescribeTabSetResultType> describeTabs()
        throws UnexpectedErrorFault
    ;

    /**
     * Create a set of new sObjects
     * 
     * @param sObjects
     * @return
     *     returns java.util.List<com.sforce.soap.partner.SaveResultType>
     * @throws InvalidFieldFault
     * @throws InvalidSObjectFault
     * @throws InvalidIdFault
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "create", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.Create")
    @ResponseWrapper(localName = "createResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.CreateResponse")
    public List<SaveResultType> create(
        @WebParam(name = "sObjects", targetNamespace = "urn:partner.soap.sforce.com")
        List<SObject> sObjects)
        throws InvalidFieldFault, InvalidIdFault, InvalidSObjectFault, UnexpectedErrorFault
    ;

    /**
     * Update a set of sObjects
     * 
     * @param sObjects
     * @return
     *     returns java.util.List<com.sforce.soap.partner.SaveResultType>
     * @throws InvalidFieldFault
     * @throws InvalidSObjectFault
     * @throws InvalidIdFault
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "update", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.Update")
    @ResponseWrapper(localName = "updateResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.UpdateResponse")
    public List<SaveResultType> update(
        @WebParam(name = "sObjects", targetNamespace = "urn:partner.soap.sforce.com")
        List<SObject> sObjects)
        throws InvalidFieldFault, InvalidIdFault, InvalidSObjectFault, UnexpectedErrorFault
    ;

    /**
     * Update or insert a set of sObjects based on object id
     * 
     * @param externalIDFieldName
     * @param sObjects
     * @return
     *     returns java.util.List<com.sforce.soap.partner.UpsertResultType>
     * @throws InvalidFieldFault
     * @throws InvalidSObjectFault
     * @throws InvalidIdFault
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "upsert", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.Upsert")
    @ResponseWrapper(localName = "upsertResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.UpsertResponse")
    public List<UpsertResultType> upsert(
        @WebParam(name = "externalIDFieldName", targetNamespace = "urn:partner.soap.sforce.com")
        String externalIDFieldName,
        @WebParam(name = "sObjects", targetNamespace = "urn:partner.soap.sforce.com")
        List<SObject> sObjects)
        throws InvalidFieldFault, InvalidIdFault, InvalidSObjectFault, UnexpectedErrorFault
    ;

    /**
     * Merge and update a set of sObjects based on object id
     * 
     * @param request
     * @return
     *     returns java.util.List<com.sforce.soap.partner.MergeResultType>
     * @throws InvalidFieldFault
     * @throws InvalidSObjectFault
     * @throws InvalidIdFault
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "merge", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.Merge")
    @ResponseWrapper(localName = "mergeResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.MergeResponse")
    public List<MergeResultType> merge(
        @WebParam(name = "request", targetNamespace = "urn:partner.soap.sforce.com")
        List<MergeRequestType> request)
        throws InvalidFieldFault, InvalidIdFault, InvalidSObjectFault, UnexpectedErrorFault
    ;

    /**
     * Delete a set of sObjects
     * 
     * @param ids
     * @return
     *     returns java.util.List<com.sforce.soap.partner.DeleteResultType>
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "delete", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.Delete")
    @ResponseWrapper(localName = "deleteResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.DeleteResponse")
    public List<DeleteResultType> delete(
        @WebParam(name = "ids", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> ids)
        throws UnexpectedErrorFault
    ;

    /**
     * Undelete a set of sObjects
     * 
     * @param ids
     * @return
     *     returns java.util.List<com.sforce.soap.partner.UndeleteResultType>
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "undelete", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.Undelete")
    @ResponseWrapper(localName = "undeleteResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.UndeleteResponse")
    public List<UndeleteResultType> undelete(
        @WebParam(name = "ids", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> ids)
        throws UnexpectedErrorFault
    ;

    /**
     * Empty a set of sObjects from the recycle bin
     * 
     * @param ids
     * @return
     *     returns java.util.List<com.sforce.soap.partner.EmptyRecycleBinResultType>
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "emptyRecycleBin", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.EmptyRecycleBin")
    @ResponseWrapper(localName = "emptyRecycleBinResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.EmptyRecycleBinResponse")
    public List<EmptyRecycleBinResultType> emptyRecycleBin(
        @WebParam(name = "ids", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> ids)
        throws UnexpectedErrorFault
    ;

    /**
     * Get a set of sObjects
     * 
     * @param fieldList
     * @param sObjectType
     * @param ids
     * @return
     *     returns java.util.List<com.sforce.soap.partner.sobject.SObject>
     * @throws MalformedQueryFault
     * @throws InvalidFieldFault
     * @throws InvalidSObjectFault
     * @throws InvalidIdFault
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "retrieve", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.Retrieve")
    @ResponseWrapper(localName = "retrieveResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.RetrieveResponse")
    public List<SObject> retrieve(
        @WebParam(name = "fieldList", targetNamespace = "urn:partner.soap.sforce.com")
        String fieldList,
        @WebParam(name = "sObjectType", targetNamespace = "urn:partner.soap.sforce.com")
        String sObjectType,
        @WebParam(name = "ids", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> ids)
        throws InvalidFieldFault, InvalidIdFault, InvalidSObjectFault, MalformedQueryFault, UnexpectedErrorFault
    ;

    /**
     * Submit an entity to a workflow process or process a workitem
     * 
     * @param actions
     * @return
     *     returns java.util.List<com.sforce.soap.partner.ProcessResultType>
     * @throws InvalidIdFault
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "process", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.Process")
    @ResponseWrapper(localName = "processResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.ProcessResponse")
    public List<ProcessResultType> process(
        @WebParam(name = "actions", targetNamespace = "urn:partner.soap.sforce.com")
        List<ProcessRequestType> actions)
        throws InvalidIdFault, UnexpectedErrorFault
    ;

    /**
     * convert a set of leads
     * 
     * @param leadConverts
     * @return
     *     returns java.util.List<com.sforce.soap.partner.LeadConvertResultType>
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "convertLead", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.ConvertLead")
    @ResponseWrapper(localName = "convertLeadResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.ConvertLeadResponse")
    public List<LeadConvertResultType> convertLead(
        @WebParam(name = "leadConverts", targetNamespace = "urn:partner.soap.sforce.com")
        List<LeadConvertType> leadConverts)
        throws UnexpectedErrorFault
    ;

    /**
     * Logout the current user, invalidating the current session.
     * 
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @RequestWrapper(localName = "logout", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.Logout")
    @ResponseWrapper(localName = "logoutResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.LogoutResponse")
    public void logout()
        throws UnexpectedErrorFault
    ;

    /**
     * Logs out and invalidates session ids
     * 
     * @param sessionIds
     * @return
     *     returns java.util.List<com.sforce.soap.partner.InvalidateSessionsResultType>
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "invalidateSessions", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.InvalidateSessions")
    @ResponseWrapper(localName = "invalidateSessionsResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.InvalidateSessionsResponse")
    public List<InvalidateSessionsResultType> invalidateSessions(
        @WebParam(name = "sessionIds", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> sessionIds)
        throws UnexpectedErrorFault
    ;

    /**
     * Get the IDs for deleted sObjects
     * 
     * @param startDate
     * @param sObjectType
     * @param endDate
     * @return
     *     returns com.sforce.soap.partner.GetDeletedResultType
     * @throws InvalidSObjectFault
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "getDeleted", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.GetDeleted")
    @ResponseWrapper(localName = "getDeletedResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.GetDeletedResponse")
    public GetDeletedResultType getDeleted(
        @WebParam(name = "sObjectType", targetNamespace = "urn:partner.soap.sforce.com")
        String sObjectType,
        @WebParam(name = "startDate", targetNamespace = "urn:partner.soap.sforce.com")
        XMLGregorianCalendar startDate,
        @WebParam(name = "endDate", targetNamespace = "urn:partner.soap.sforce.com")
        XMLGregorianCalendar endDate)
        throws InvalidSObjectFault, UnexpectedErrorFault
    ;

    /**
     * Get the IDs for updated sObjects
     * 
     * @param startDate
     * @param sObjectType
     * @param endDate
     * @return
     *     returns com.sforce.soap.partner.GetUpdatedResultType
     * @throws InvalidSObjectFault
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "getUpdated", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.GetUpdated")
    @ResponseWrapper(localName = "getUpdatedResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.GetUpdatedResponse")
    public GetUpdatedResultType getUpdated(
        @WebParam(name = "sObjectType", targetNamespace = "urn:partner.soap.sforce.com")
        String sObjectType,
        @WebParam(name = "startDate", targetNamespace = "urn:partner.soap.sforce.com")
        XMLGregorianCalendar startDate,
        @WebParam(name = "endDate", targetNamespace = "urn:partner.soap.sforce.com")
        XMLGregorianCalendar endDate)
        throws InvalidSObjectFault, UnexpectedErrorFault
    ;

    /**
     * Create a Query Cursor
     * 
     * @param queryString
     * @return
     *     returns com.sforce.soap.partner.QueryResultType
     * @throws MalformedQueryFault
     * @throws InvalidFieldFault
     * @throws InvalidSObjectFault
     * @throws InvalidIdFault
     * @throws UnexpectedErrorFault
     * @throws InvalidQueryLocatorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "query", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.Query")
    @ResponseWrapper(localName = "queryResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.QueryResponse")
    public QueryResultType query(
        @WebParam(header=true, name="SessionHeader", targetNamespace = "urn:partner.soap.sforce.com") SessionHeader h,
        @WebParam(name = "queryString", targetNamespace = "urn:partner.soap.sforce.com")
        String queryString)
        throws InvalidFieldFault, InvalidIdFault, InvalidQueryLocatorFault, InvalidSObjectFault, MalformedQueryFault, UnexpectedErrorFault
    ;

    /**
     * Create a Query Cursor, including deleted sObjects
     * 
     * @param queryString
     * @return
     *     returns com.sforce.soap.partner.QueryResultType
     * @throws MalformedQueryFault
     * @throws InvalidFieldFault
     * @throws InvalidSObjectFault
     * @throws InvalidIdFault
     * @throws UnexpectedErrorFault
     * @throws InvalidQueryLocatorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "queryAll", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.QueryAll")
    @ResponseWrapper(localName = "queryAllResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.QueryAllResponse")
    public QueryResultType queryAll(
        @WebParam(name = "queryString", targetNamespace = "urn:partner.soap.sforce.com")
        String queryString)
        throws InvalidFieldFault, InvalidIdFault, InvalidQueryLocatorFault, InvalidSObjectFault, MalformedQueryFault, UnexpectedErrorFault
    ;

    /**
     * Gets the next batch of sObjects from a query
     * 
     * @param queryLocator
     * @return
     *     returns com.sforce.soap.partner.QueryResultType
     * @throws InvalidFieldFault
     * @throws UnexpectedErrorFault
     * @throws InvalidQueryLocatorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "queryMore", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.QueryMore")
    @ResponseWrapper(localName = "queryMoreResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.QueryMoreResponse")
    public QueryResultType queryMore(
        @WebParam(name = "queryLocator", targetNamespace = "urn:partner.soap.sforce.com")
        String queryLocator)
        throws InvalidFieldFault, InvalidQueryLocatorFault, UnexpectedErrorFault
    ;

    /**
     * Search for sObjects
     * 
     * @param searchString
     * @return
     *     returns com.sforce.soap.partner.SearchResultType
     * @throws MalformedSearchFault
     * @throws InvalidFieldFault
     * @throws InvalidSObjectFault
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "search", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.Search")
    @ResponseWrapper(localName = "searchResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.SearchResponse")
    public SearchResultType search(
        @WebParam(name = "searchString", targetNamespace = "urn:partner.soap.sforce.com")
        String searchString)
        throws InvalidFieldFault, InvalidSObjectFault, MalformedSearchFault, UnexpectedErrorFault
    ;

    /**
     * Gets server timestamp
     * 
     * @return
     *     returns com.sforce.soap.partner.GetServerTimestampResultType
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "getServerTimestamp", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.GetServerTimestamp")
    @ResponseWrapper(localName = "getServerTimestampResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.GetServerTimestampResponse")
    public GetServerTimestampResultType getServerTimestamp(@WebParam(header=true, name="SessionHeader", targetNamespace = "urn:partner.soap.sforce.com") SessionHeader h)
        throws UnexpectedErrorFault
    ;

    /**
     * Set a user's password
     * 
     * @param userId
     * @param password
     * @return
     *     returns com.sforce.soap.partner.SetPasswordResultType
     * @throws InvalidNewPasswordFault
     * @throws InvalidIdFault
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "setPassword", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.SetPassword")
    @ResponseWrapper(localName = "setPasswordResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.SetPasswordResponse")
    public SetPasswordResultType setPassword(
        @WebParam(name = "userId", targetNamespace = "urn:partner.soap.sforce.com")
        String userId,
        @WebParam(name = "password", targetNamespace = "urn:partner.soap.sforce.com")
        String password)
        throws InvalidIdFault, InvalidNewPasswordFault, UnexpectedErrorFault
    ;

    /**
     * Reset a user's password
     * 
     * @param userId
     * @return
     *     returns com.sforce.soap.partner.ResetPasswordResultType
     * @throws InvalidIdFault
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "resetPassword", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.ResetPassword")
    @ResponseWrapper(localName = "resetPasswordResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.ResetPasswordResponse")
    public ResetPasswordResultType resetPassword(
        @WebParam(name = "userId", targetNamespace = "urn:partner.soap.sforce.com")
        String userId)
        throws InvalidIdFault, UnexpectedErrorFault
    ;

    /**
     * Returns standard information relevant to the current user
     * 
     * @return
     *     returns com.sforce.soap.partner.GetUserInfoResultType
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "getUserInfo", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.GetUserInfo")
    @ResponseWrapper(localName = "getUserInfoResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.GetUserInfoResponse")
    public GetUserInfoResultType getUserInfo(@WebParam(header=true, name="SessionHeader", targetNamespace = "urn:partner.soap.sforce.com") SessionHeader h)
        throws UnexpectedErrorFault
    ;

    /**
     * Send outbound email
     * 
     * @param messages
     * @return
     *     returns java.util.List<com.sforce.soap.partner.SendEmailResultType>
     * @throws UnexpectedErrorFault
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "sendEmail", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.SendEmail")
    @ResponseWrapper(localName = "sendEmailResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "com.sforce.soap.partner.SendEmailResponse")
    public List<SendEmailResultType> sendEmail(
        @WebParam(name = "messages", targetNamespace = "urn:partner.soap.sforce.com")
        List<EmailType> messages)
        throws UnexpectedErrorFault
    ;

}
