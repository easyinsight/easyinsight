
/*
 * 
 */

package com.easyinsight.datafeeds.custom.client;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.2.3
 * Sun Nov 08 23:40:11 MST 2009
 * Generated source version: 2.2.3
 * 
 */


@WebServiceClient(name = "DataProviderService", 
                  wsdlLocation = "file:/ei/java/src/com/easyinsight/datafeeds/custom/client/DataProvider.wsdl",
                  targetNamespace = "http://sampleimpl.easyinsight.com/") 
public class DataProviderService extends Service {

    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("http://sampleimpl.easyinsight.com/", "DataProviderService");
    public final static QName DataProviderPort = new QName("http://sampleimpl.easyinsight.com/", "DataProviderPort");
    static {
        URL url = null;
        try {
            url = new URL("file:/ei/java/src/com/easyinsight/datafeeds/custom/client/DataProvider.wsdl");
        } catch (MalformedURLException e) {
            System.err.println("Can not initialize the default wsdl from file:/ei/java/src/com/easyinsight/datafeeds/custom/client/DataProvider.wsdl");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    public DataProviderService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public DataProviderService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public DataProviderService() {
        super(WSDL_LOCATION, SERVICE);
    }

    /**
     * 
     * @return
     *     returns DataProvider
     */
    @WebEndpoint(name = "DataProviderPort")
    public DataProvider getDataProviderPort() {
        return super.getPort(DataProviderPort, DataProvider.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DataProvider
     */
    @WebEndpoint(name = "DataProviderPort")
    public DataProvider getDataProviderPort(WebServiceFeature... features) {
        return super.getPort(DataProviderPort, DataProvider.class, features);
    }

}
