package com.easyinsight.datafeeds.netsuite;import com.easyinsight.PasswordStorage;import com.easyinsight.analysis.DataSourceInfo;import com.easyinsight.database.EIConnection;import com.easyinsight.datafeeds.CompositeFeedNode;import com.easyinsight.datafeeds.FeedType;import com.easyinsight.datafeeds.IServerDataSourceDefinition;import com.easyinsight.datafeeds.composite.ChildConnection;import com.easyinsight.datafeeds.composite.CompositeServerDataSource;import com.easyinsight.datafeeds.netsuite.client.*;import javax.xml.ws.BindingProvider;import java.net.MalformedURLException;import java.net.URL;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.*;/** * User: jamesboe * Date: 12/8/14 * Time: 8:45 AM */public class NetsuiteCompositeSource extends CompositeServerDataSource {    private String accountID;    private String nsUsername;    private String nsPassword;    private String netsuiteRole;    private List<String> tables;    private transient NetSuitePortType port;    public NetsuiteCompositeSource() {        setFeedName("Netsuite");    }    @Override    protected void beforeRefresh(Date lastRefreshTime) {        super.beforeRefresh(lastRefreshTime);        if (port == null) {            try {                NetSuiteService service = new NetSuiteService(new URL("https://webservices.na1.netsuite.com/wsdl/v2014_1_0/netsuite.wsdl"));                port = service.getNetSuitePort();                ((BindingProvider) port).getRequestContext().put(BindingProvider.SESSION_MAINTAIN_PROPERTY, true);                Passport passport = new Passport();                passport.setEmail(nsUsername);                passport.setAccount(accountID);                passport.setPassword(nsPassword);                RecordRef role = new RecordRef();                role.setInternalId(netsuiteRole);                passport.setRole(role);                Status status = port.login(passport).getStatus();            } catch (Exception e) {                throw new RuntimeException(e);            }        }    }    public NetSuitePortType getPort() {        return port;    }    @Override    protected void refreshDone() {        super.refreshDone();        try {            port.logout();            port = null;        } catch (Exception e) {            throw new RuntimeException(e);        }    }    @Override    public void customStorage(Connection conn) throws SQLException {        super.customStorage(conn);        PreparedStatement deleteStmt = conn.prepareStatement("DELETE FROM NETSUITE_COMPOSITE WHERE DATA_SOURCE_ID = ?");        deleteStmt.setLong(1, getDataFeedID());        deleteStmt.executeUpdate();        deleteStmt.close();        PreparedStatement insertStmt = conn.prepareStatement("INSERT INTO NETSUITE_COMPOSITE" +                " (DATA_SOURCE_ID, NETSUITE_ACCOUNT_ID, NETSUITE_USERNAME, NETSUITE_PASSWORD, NETSUITE_ROLE) " +                "VALUES (?, ?, ?, ?, ?)");        insertStmt.setLong(1, getDataFeedID());        insertStmt.setString(2, accountID);        insertStmt.setString(3, nsUsername);        insertStmt.setString(4, nsPassword != null ? PasswordStorage.encryptString(nsPassword) : null);        insertStmt.setString(5, netsuiteRole);        insertStmt.execute();        insertStmt.close();        PreparedStatement deleteTablesStmt = conn.prepareStatement("DELETE FROM netsuite_composite_tables WHERE DATA_SOURCE_ID = ?");        deleteTablesStmt.setLong(1, getDataFeedID());        deleteTablesStmt.executeUpdate();        deleteTablesStmt.close();        PreparedStatement insertTablesStmt = conn.prepareStatement("INSERT INTO netsuite_composite_tables (DATA_SOURCE_ID, included_table_name) " +                "VALUES (?, ?)");        if (tables != null) {            for (String table : tables) {                insertTablesStmt.setLong(1, getDataFeedID());                insertTablesStmt.setString(2, table);                insertTablesStmt.execute();            }        }        insertTablesStmt.close();    }    @Override    public void customLoad(Connection conn) throws SQLException {        super.customLoad(conn);        PreparedStatement queryStmt = conn.prepareStatement("SELECT NETSUITE_ACCOUNT_ID, NETSUITE_USERNAME, NETSUITE_PASSWORD, NETSUITE_ROLE " +                "FROM NETSUITE_COMPOSITE WHERE DATA_SOURCE_ID = ?");        queryStmt.setLong(1, getDataFeedID());        ResultSet rs = queryStmt.executeQuery();        if (rs.next()) {            accountID = rs.getString(1);            nsUsername = rs.getString(2);            String nsPassword = rs.getString(3);            if (nsPassword != null) {                this.nsPassword = PasswordStorage.decryptString(nsPassword);            }            netsuiteRole = rs.getString(4);        }        queryStmt.close();        PreparedStatement queryTableStmt = conn.prepareStatement("SELECT included_table_name FROM netsuite_composite_tables WHERE DATA_SOURCE_ID = ?");        queryTableStmt.setLong(1, getDataFeedID());        List<String> tables = new ArrayList<>();        ResultSet tableRS = queryTableStmt.executeQuery();        while (tableRS.next()) {            tables.add(tableRS.getString(1));        }        this.tables = tables;        queryTableStmt.close();    }    public String getNetsuiteRole() {        return netsuiteRole;    }    public void setNetsuiteRole(String netsuiteRole) {        this.netsuiteRole = netsuiteRole;    }    public String getAccountID() {        return accountID;    }    public void setAccountID(String accountID) {        this.accountID = accountID;    }    public String getNsUsername() {        return nsUsername;    }    public void setNsUsername(String nsUsername) {        this.nsUsername = nsUsername;    }    public String getNsPassword() {        return nsPassword;    }    public void setNsPassword(String nsPassword) {        this.nsPassword = nsPassword;    }    public List<String> getTables() {        return tables;    }    public void setTables(List<String> tables) {        this.tables = tables;    }    @Override    public FeedType getFeedType() {        return FeedType.NETSUITE_COMPOSITE;    }    @Override    public int getDataSourceType() {        return DataSourceInfo.COMPOSITE_PULL;    }    @Override    protected Set<FeedType> getFeedTypes() {        return new HashSet<>();    }    @Override    protected Collection<ChildConnection> getChildConnections() {        return new ArrayList<>();    }    @Override    protected List<IServerDataSourceDefinition> childDataSources(EIConnection conn) throws Exception {        if (port == null) {            beforeRefresh(null);        }        List<IServerDataSourceDefinition> defaultChildren = super.childDataSources(conn);        Map<String, NetsuiteTableSource> map = new HashMap<>();        for (IServerDataSourceDefinition child : defaultChildren) {            if (child instanceof NetsuiteTableSource) {                NetsuiteTableSource source = (NetsuiteTableSource) child;                map.put(source.getTable(), source);            }        }        for (String table : tables) {            if (!map.containsKey(table)) {                NetsuiteTableSource tableSource = new NetsuiteTableSource();                tableSource.setFeedName(table);                tableSource.setTable(table);                newDefinition(tableSource, conn, "", getUploadPolicy());                CompositeFeedNode node = new CompositeFeedNode();                node.setDataFeedID(tableSource.getDataFeedID());                getCompositeFeedNodes().add(node);                defaultChildren.add(tableSource);                map.put(table, tableSource);            }        }        return defaultChildren;    }    private void blah() {        Class[] possibleClasses = new Class[] { InventoryDetailSearchBasic.class,                TimeEntrySearchBasic.class,                ManufacturingRoutingSearchBasic.class,                AppPackageSearchBasic.class,                TransactionSearchBasic.class,                BudgetSearchBasic.class,                VendorSearchBasic.class,                SubsidiarySearchBasic.class,                IssueSearchBasic.class,                ProjectTaskSearchBasic.class,                CouponCodeSearchBasic.class,                TimeBillSearchBasic.class,                ChargeSearchBasic.class,                NexusSearchBasic.class,                ContactSearchBasic.class,                ResourceAllocationSearchBasic.class,                VendorCategorySearchBasic.class,                ItemSupplyPlanSearchBasic.class,                CustomRecordSearchBasic.class,                DepartmentSearchBasic.class,                ContactRoleSearchBasic.class,                GiftCertificateSearchBasic.class,                PaymentMethodSearchBasic.class,                OpportunitySearchBasic.class,                JobTypeSearchBasic.class,                TopicSearchBasic.class,                ContactCategorySearchBasic.class,                TimeSheetSearchBasic.class,                PartnerSearchBasic.class,                PricingGroupSearchBasic.class,                RevRecScheduleSearchBasic.class,                GroupMemberSearchBasic.class,                CustomerStatusSearchBasic.class,                AccountSearchBasic.class,                ItemRevisionSearchBasic.class,                OtherNameCategorySearchBasic.class,                RevRecTemplateSearchBasic.class,                ManufacturingCostTemplateSearchBasic.class,                PriceLevelSearchBasic.class,                ClassificationSearchBasic.class,                UnitsTypeSearchBasic.class,                GlobalAccountMappingSearchBasic.class,                BinSearchBasic.class,                EmployeeSearchBasic.class,                InventoryNumberSearchBasic.class,                EntitySearchBasic.class,                ManufacturingOperationTaskSearchBasic.class,                CurrencyRateSearchBasic.class,                InventoryNumberBinSearchBasic.class,                SupportCaseSearchBasic.class,                ExpenseCategorySearchBasic.class,                CustomerMessageSearchBasic.class,                CustomListSearchBasic.class,                ItemDemandPlanSearchBasic.class,                BillingScheduleSearchBasic.class,                JobSearchBasic.class,                PromotionCodeSearchBasic.class,                SolutionSearchBasic.class,                SiteCategorySearchBasic.class,                PartnerCategorySearchBasic.class,                MessageSearchBasic.class,                EntityGroupSearchBasic.class,                PayrollItemSearchBasic.class,                JobStatusSearchBasic.class,                FileSearchBasic.class,                CampaignSearchBasic.class,                LocationSearchBasic.class,                WinLossReasonSearchBasic.class,                CustomerCategorySearchBasic.class,                ItemBinNumberSearchBasic.class,                PhoneCallSearchBasic.class,                OriginatingLeadSearchBasic.class,                FolderSearchBasic.class,                PricingSearchBasic.class,                AccountingPeriodSearchBasic.class,                ItemAccountMappingSearchBasic.class,                AppDefinitionSearchBasic.class,                TermSearchBasic.class,                CalendarEventSearchBasic.class,                ProjectTaskAssignmentSearchBasic.class,                ItemSearchBasic.class,                CustomerSearchBasic.class,                SalesRoleSearchBasic.class,                NoteTypeSearchBasic.class,                NoteSearchBasic.class,                TaskSearchBasic.class };        for (Class clazz : possibleClasses) {        }    }}