<?xml version="1.0" ?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:dbservice="com.easyinsight.dbservice.*"
        creationComplete="setup()" doubleClickEnabled="true">
    <mx:Script><![CDATA[
        import com.easyinsight.dbservice.Column;
import com.easyinsight.dbservice.ConfigProgressionEvent;
        import com.easyinsight.dbservice.DatabaseConfiguration;
        import com.easyinsight.dbservice.EIConfiguration;
        import com.easyinsight.dbservice.EditDBCredentials;
import com.easyinsight.dbservice.PublishQueryWizard;
import com.easyinsight.dbservice.QueryConfiguration;
        import com.easyinsight.dbservice.QueryPublishedEvent;
import com.easyinsight.dbservice.TestQueryResults;
        import com.easyinsight.dbservice.EIQueryWindow;
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.events.ListEvent;
import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;
        import com.easyinsight.dbservice.ConfigurationWindow;
        import mx.validators.Validator;

        [Bindable]
        private var queryResult:String;

        [Bindable]
        private var testResults:ArrayCollection;

        [Bindable]
        private var testResultsExist:Boolean;

        [Bindable]
        private var tables:ArrayCollection;

        [Bindable]
        private var columns:ArrayCollection;

        [Bindable]
        private var columnMessage:String = "";

        private var dbValidators:Array;
        private var eiValidators:Array;

        private var eiConfiguration:EIConfiguration;
        private var dbConfiguration:DatabaseConfiguration;

        private var dataSourceAPIKey:String;
        [Bindable]
        private var publishAvailable:Boolean;

        private function setup():void {
            dbValidators = [ queryValidator];
            eiValidators = [ dataSourceValidator ];
            dbService.getEIConfiguration.send();
        }

        private function gotEIConfiguration():void {
            var eiConfig:EIConfiguration = dbService.getEIConfiguration.lastResult as EIConfiguration;
            if (eiConfig == null) {
                var configWindow:ConfigurationWindow = new ConfigurationWindow();
                configWindow.addEventListener(ConfigProgressionEvent.DB_CONFIGURED, dbConfigured);
                PopUpManager.addPopUp(configWindow, this, true);
                PopUpManager.centerPopUp(configWindow);
            } else {
                this.eiConfiguration = eiConfiguration;
                dbService.getDBConfiguration.send();
            }
        }

        private function gotDBConfiguration():void {
            var dbConfiguration:DatabaseConfiguration = dbService.getDBConfiguration.lastResult as DatabaseConfiguration;
            if (dbConfiguration == null) {
                var configWindow:ConfigurationWindow = new ConfigurationWindow();
                configWindow.addEventListener(ConfigProgressionEvent.DB_CONFIGURED, dbConfigured);
                PopUpManager.addPopUp(configWindow, this, true);
                PopUpManager.centerPopUp(configWindow);
            } else {
                this.dbConfiguration = dbConfiguration;
                dbService.getTables.send();
            }
        }

        private function editDBConfig():void {
            var editDBWindow:EditDBCredentials = new EditDBCredentials();
            editDBWindow.addEventListener(ConfigProgressionEvent.DB_CONFIGURED, dbConfigured);
        }

        private function justDBConfigured(event:ConfigProgressionEvent):void {
            this.dbConfiguration = event.dbConfig;
            dbService.getTables.send();
        }

        private function dbConfigured(event:ConfigProgressionEvent):void {
            this.eiConfiguration = event.eiConfig;
            this.dbConfiguration = event.dbConfig;
            dbService.getTables.send();
        }

        private function gotTables():void {
            this.tables = dbService.getTables.lastResult as ArrayCollection;
        }

        private function gotColumns():void {
            columnMessage = "Double click a column to add it to the query";
            this.columns = dbService.getColumns.lastResult as ArrayCollection;
        }

        private function forceRun():void {
        }

        private function onFault(event:FaultEvent):void {
            Alert.show(event.message.toString());
        }

        private function runQuery():void {
            var results:Array = Validator.validateAll(dbValidators);
            if (results.length > 0) {
                Alert.show("There are errors you must correct before you can submit a query.");
            } else {
                var queryConfiguration:QueryConfiguration = new QueryConfiguration();
                queryConfiguration.query = queryArea.text;
                queryConfiguration.dataSource = dataSourceNameInput.text;
                queryConfiguration.adHoc = true;
                dbService.testQuery.send(queryConfiguration);
            }
        }

        private function gotTestQuery():void {
            var results:TestQueryResults = dbService.testQuery.lastResult as TestQueryResults;
            this.testResultsExist = true;
            this.testResults = results.results;
        }

        private function onTableClick(event:ListEvent):void {
            var table:String = tables.getItemAt(event.rowIndex) as String;
            dbService.getColumns.send(table);
        }

        private function onColumnDoubleClick(event:ListEvent):void {
            var column:Column = columns.getItemAt(event.rowIndex) as Column;
            var table:String = tableList.selectedItem as String;
            queryArea.text = queryArea.text + table + "." + column.name;
        }

        private function sendToEI():void {
            var results:Array = Validator.validateAll(eiValidators);
            if (results.length == 0) {
                var queryConfiguration:QueryConfiguration = new QueryConfiguration();
                queryConfiguration.query = queryArea.text;
                queryConfiguration.dataSource = dataSourceNameInput.text;
                queryConfiguration.adHoc = true;
                dbService.queryToEI.send(queryConfiguration);
            }
        }

        private function sentToEI():void {
            var key:String = dbService.queryToEI.lastResult as String;
            this.dataSourceAPIKey = key;
            publishAvailable = true;
            var eiQueryWindow:EIQueryWindow = new EIQueryWindow();
            eiQueryWindow.link = "http://www.easy-insight.com/app/#feedKey= " + key;
            PopUpManager.addPopUp(eiQueryWindow, this);
            PopUpManager.centerPopUp(eiQueryWindow);
        }

        private function publish():void {
            var publishWizard:PublishQueryWizard = new PublishQueryWizard();
            publishWizard.query = queryArea.text;
            publishWizard.mode = applyDataGroup.selectedValue == "replaceExisting" ? 2 : 1;
            publishWizard.dataSource = dataSourceAPIKey;
            publishWizard.addEventListener(QueryPublishedEvent.QUERY_PUBLISHED, onQueryPublish);
            PopUpManager.addPopUp(publishWizard, this);
            PopUpManager.centerPopUp(publishWizard);
        }

        private function onQueryPublish(event:QueryPublishedEvent):void {
            tabNavigator.selectedIndex = 1;
            dataSourceNameInput.text = "";
        }

        
        ]]></mx:Script>
    <mx:RemoteObject id="dbService" destination="dbremote" fault="onFault(event)">
        <mx:method name="testQuery" result="gotTestQuery()"/>
        <mx:method name="getDBConfiguration" result="gotDBConfiguration()"/>
        <mx:method name="getEIConfiguration" result="gotEIConfiguration()"/>
        <mx:method name="getTables" result="gotTables()"/>
        <mx:method name="getColumns" result="gotColumns()"/>
        <mx:method name="queryToEI" result="sentToEI()"/>
    </mx:RemoteObject>
    <mx:Style source="com/easyinsight/skin/EI.css"/>
    <mx:VBox width="100%" height="100%">
        <mx:Image source="@Embed(source='logo.png')"/>
    <mx:TabNavigator width="100%" height="100%" tabWidth="200" id="tabNavigator">
        <mx:VBox label="Database Explorer" width="100%" height="100%" paddingLeft="5" paddingTop="5" paddingRight="5" paddingBottom="5" backgroundColor="0xEBEBEB">
            <mx:HBox width="100%">
                <mx:VBox verticalGap="0">
                    <mx:Box backgroundColor="#3370ce" width="100%">
                        <mx:Label text="General Settings" color="0xFFFFFF"/>
                    </mx:Box>
                    <mx:Form paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" backgroundColor="#88A5D0" width="100%">
                        <mx:FormItem label="How to Apply Data:">
                            <mx:RadioButtonGroup id="applyDataGroup"/>
                            <mx:RadioButton group="{applyDataGroup}" label="Replace Any Existing Data" value="replaceExisting" selected="true"/>
                            <mx:RadioButton group="{applyDataGroup}" label="Append Onto Any Existing Data" value="addToData"/>
                        </mx:FormItem>
                        <mx:FormItem label="">
                            <mx:Button label="Change EI Credentials"/>
                        </mx:FormItem>
                        <mx:FormItem label="">
                            <mx:Button label="Change DB Configuration"/>
                        </mx:FormItem>
                    </mx:Form>
                </mx:VBox>
                <mx:VRule height="100%"/>
                <mx:HBox width="100%">
                    <mx:VBox verticalGap="0" width="50%">
                        <mx:Box backgroundColor="#3370ce" width="100%">
                            <mx:Label text="Available Tables" color="0xFFFFFF"/>
                        </mx:Box>
                        <mx:Box backgroundColor="#6E95D1" width="100%">
                            <mx:Label text="Select a table to see its columns."/>
                        </mx:Box>
                        <mx:List dataProvider="{tables}" itemClick="onTableClick(event)" id="tableList" width="100%" fontSize="12"/>
                    </mx:VBox>
                    <mx:VBox verticalGap="0" width="50%">
                        <mx:Box backgroundColor="#3370ce" width="100%">
                            <mx:Label text="Available Columns" color="0xFFFFFF"/>
                        </mx:Box>
                        <mx:Box backgroundColor="#6E95D1" width="100%">
                            <mx:Label text="{columnMessage}"/>
                        </mx:Box>
                        <mx:DataGrid dataProvider="{columns}" itemDoubleClick="onColumnDoubleClick(event)" width="100%" fontSize="12">
                            <mx:columns>
                                <mx:DataGridColumn headerText="Name" dataField="name"/>
                                <mx:DataGridColumn headerText="Type" dataField="type"/>
                            </mx:columns>
                        </mx:DataGrid>
                    </mx:VBox>
                </mx:HBox>
            </mx:HBox>

            <mx:HRule width="100%"/>
            <mx:VBox horizontalAlign="center" width="100%" verticalGap="0" paddingLeft="20">
                <mx:Box backgroundColor="#3370ce" width="100%">
                    <mx:Label text="Write your select query here" color="#FFFFFF"/>
                </mx:Box>
                <mx:Box backgroundColor="#6E95D1" width="100%">
                    <mx:Spacer height="20"/>
                    <mx:Label text="Columns will be named in Easy Insight according to their names in the query, so we recommend using aliases. For example: "/>
                    <mx:Label text="select obscureinternalcolumnname AS friendlyname FROM table" fontSize="10"/>
                    <mx:Spacer height="20"/>
                </mx:Box>
                <mx:HBox width="100%">
                    <mx:TextArea width="100%" height="100" fontSize="11" id="queryArea"/>
                    <mx:VBox verticalAlign="middle" height="100%">
                        <mx:Button label="Test Query" click="runQuery()"/>
                    </mx:VBox>
                </mx:HBox>
                <mx:Spacer height="20"/>
                <mx:VBox width="100%" horizontalAlign="center">
                    <mx:VBox verticalGap="0">
                        <mx:Box backgroundColor="#3370ce" width="100%">
                            <mx:Label text="First Five Rows of Query Results" color="#FFFFFF"/>
                        </mx:Box>
                        <mx:DataGrid dataProvider="{testResults}" visible="{testResultsExist}"/>
                    </mx:VBox>
                </mx:VBox>
            </mx:VBox>
            <mx:HBox>
                <mx:Label text="Target Easy Insight Data Source:" visible="{testResultsExist}"/>
                <mx:TextInput id="dataSourceNameInput" visible="{testResultsExist}"/>
                <mx:Button label="Send Data to Easy Insight" click="sendToEI()" visible="{testResultsExist}"/>
                <mx:Button label="Publish as Scheduled Query" click="publish()" visible="{publishAvailable}"/>
            </mx:HBox>
        </mx:VBox>
        <mx:VBox label="Database Service" width="100%" height="100%">
            <dbservice:PublishedQueryList/>    
        </mx:VBox>
    </mx:TabNavigator>
    </mx:VBox>
    <mx:StringValidator minLength="6" source="{queryArea}" id="queryValidator" property="text"/>
    <mx:StringValidator minLength="3" source="{dataSourceNameInput}" id="dataSourceValidator" property="text"/>
</mx:Application>