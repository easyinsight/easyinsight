<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:framework="com.easyinsight.framework.*"
                creationComplete="handleFlashVars()" xmlns:dashboard="com.easyinsight.dashboard.*"
                paddingTop="0" top="0" borderThickness="0" left="0" paddingLeft="0" right="0" paddingRight="0"
                bottom="0" paddingBottom="0" backgroundColor="#FFFFFF">
    <mx:Script>
		<![CDATA[
        import com.easyinsight.account.Account;
        import com.easyinsight.analysis.AnalysisCalculation;
        import com.easyinsight.analysis.AnalysisDateDimension;
        import com.easyinsight.analysis.AnalysisDimension;
        import com.easyinsight.analysis.AnalysisHierarchyItem;
        import com.easyinsight.analysis.AnalysisLatitude;
        import com.easyinsight.analysis.AnalysisList;
        import com.easyinsight.analysis.AnalysisLongitude;
        import com.easyinsight.analysis.AnalysisMeasure;
        import com.easyinsight.analysis.AnalysisRangeDimension;
        import com.easyinsight.analysis.AnalysisStep;
        import com.easyinsight.analysis.ComplexAnalysisMeasure;
        import com.easyinsight.analysis.DefaultMenuFactory;
        import com.easyinsight.analysis.PopupMenuFactory;

        import com.easyinsight.analysis.SixSigmaMeasure;
        import com.easyinsight.framework.Constants;
        import com.easyinsight.framework.LoginEvent;
        import com.easyinsight.framework.User;
        import com.easyinsight.framework.UserServiceResponse;

        [Bindable]
        private var urlKey:String;

        [Bindable]
        private var reportType:int;

        [Bindable]
        private var dataSourceID:int;

        [Bindable]
        private var reportName:String;

        private function handleFlashVars():void {
            Constants.setup();
            PopupMenuFactory.menuFactory = new DefaultMenuFactory();
            this.urlKey = String(Application.application.parameters.analysisID);
            this.reportType = int(Application.application.parameters.reportType);
            this.dataSourceID = int(Application.application.parameters.dataSourceID);
            this.reportName = String(Application.application.parameters.reportName);
            // session check
            userService.getBuildPath.send();
        }

        private function gotBuildPath():void {
            Constants.instance().buildPath = userService.getBuildPath.lastResult as String;
            userService.isSessionLoggedIn.send();
        }

        private function dependancies():void {
            var analysisDate:AnalysisDateDimension;
            var dim:AnalysisDimension;
            var measure:AnalysisMeasure;
            var complex:ComplexAnalysisMeasure;
            var range:AnalysisRangeDimension;
            var list:AnalysisList;
            var hierarchy:AnalysisHierarchyItem;
            var step:AnalysisStep;
            var calculation:AnalysisCalculation;
            var sigma:SixSigmaMeasure;
            var latitude:AnalysisLatitude;
            var longitude:AnalysisLongitude;
        }

        [Bindable]
        private var stackIndex:int = 0;

        private function sessionCheck():void {
            var authResult:UserServiceResponse = userService.isSessionLoggedIn.lastResult as UserServiceResponse;
            if (authResult != null) {
                if (authResult.accountState == Account.DELINQUENT) {
                    //toLogin(1);
                } else {
                    quietLogin(authResult, false);
                    //toMain();
                }
            } else {
                stackIndex = 1;
            }
        }

        private function login(event:LoginEvent):void {
            quietLogin(event.authResponse, true);
        }

        private function quietLogin(authResponse:UserServiceResponse, navigate:Boolean):void {
            User.initializeUser(authResponse);
            User.getInstance().userName = authResponse.userName;            
            stackIndex = 2;
        }

        private function setup():void {
            User.getEventNotifier().addEventListener(LoginEvent.LOGIN, loginEvent);
            User.getEventNotifier().addEventListener(LoginEvent.LOGOUT, loginEvent);
        }

        private function loginEvent(event:LoginEvent):void {
            stackIndex = 2;
        }
            
		]]>
	</mx:Script>
    <mx:RemoteObject id="userService" destination="login">
        <mx:method name="isSessionLoggedIn" result="sessionCheck()"/>
        <mx:method name="getBuildPath" result="gotBuildPath()"/>
    </mx:RemoteObject>
    <mx:Style source="com/easyinsight/skin/osx/OSX.css"/>
    <mx:ViewStack selectedIndex="{stackIndex}" width="100%" height="100%">
        <mx:Box/>
        <framework:LoginComponent loginEvent2="stackIndex = 2"/>
        <dashboard:EmbeddedReportView id="panel" urlKey="{urlKey}" reportName="{reportName}"
                                      dataSourceID="{dataSourceID}" reportType="{reportType}"
                                      prefix="https://localhost"/>
    </mx:ViewStack>
</mx:Application>
