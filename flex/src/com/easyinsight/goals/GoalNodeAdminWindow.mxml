<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:filtering="com.easyinsight.filtering.*"
                xmlns:goals="com.easyinsight.goals.*"
                creationComplete="setupData()" width="1100" height="550" headerHeight="0">
    <mx:states>

        <mx:State name="problem">
            <mx:AddChild relativeTo="{targetBox}">
                <mx:VBox width="100%" height="180" horizontalAlign="center">

                </mx:VBox>
            </mx:AddChild>
        </mx:State>
        <mx:State name="goal">
            <mx:AddChild relativeTo="{targetBox}">
                
            </mx:AddChild>
        </mx:State>

    </mx:states>
    <mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.AnalysisItemEditEvent;
        import com.easyinsight.analysis.AnalysisItemEditWindow;
        import com.easyinsight.analysis.AnalysisItemNode;
        import com.easyinsight.analysis.AnalysisItemWrapper;
        import com.easyinsight.analysis.CalculationWindow;
        import com.easyinsight.analysis.CredentialRequirement;
        import com.easyinsight.analysis.FeedMetadata;
        import com.easyinsight.analysis.MeasureItemEditor;
        import com.easyinsight.analysis.RuntimeCredentialsWindow;
        import com.easyinsight.commands.CommandEvent;
        import com.easyinsight.commands.CommandProcessor;
        import com.easyinsight.framework.CredentialsCache;
        import com.easyinsight.filtering.FilterDefinition;
        import com.easyinsight.analysis.AnalysisMeasure;
        import com.easyinsight.analysis.AnalysisItemTypes;
        import com.easyinsight.analysis.AnalysisItem;

        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.managers.PopUpManager;
        import mx.collections.ArrayCollection;

        [Bindable]
        [Embed(source="../../../../assets/pencil.png")]
        private var editIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/navigate_cross.png")]
        private var deleteIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/data_blue_x16.png")]
        public var dataSourceIcon:Class;

        private var _goalTreeNode:GoalTreeNode;

        [Bindable]
        private var availableDimensions:ArrayCollection;

        [Bindable]
        private var problemFilters:ArrayCollection;

        [Bindable]
        private var insightBound:Boolean;
        [Bindable]
        private var availableItems:ArrayCollection;
        [Bindable]
        private var feedName:String;
        [Bindable]
        private var feedID:int;

        [Bindable]
        private var rangeOptions:ArrayCollection;

        [Bindable]
        private var measureSelected:Boolean;

        private var filterDefinition:FilterDefinition;

        [Bindable]
        private var analysisMeasure:AnalysisMeasure;

        [Bindable]
        private var filterDefinitions:ArrayCollection;

        [Bindable]
        private var problemDefinition:FilterDefinition;

        [Bindable]
        private var targetDefined:Boolean;

        [Bindable]
        private var iconPath:String;

        private var iconFile:String;

        private var newSolutions:ArrayCollection = new ArrayCollection();

        private var newChildren:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var allFields:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var associatedDataSources:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var associatedReports:ArrayCollection = new ArrayCollection();


        private var feedMetadata:FeedMetadata;

        [Bindable]
        private var milestone:GoalTreeMilestone;

        private static const NONE:AnalysisItem = new AnalysisItem();

        [Bindable]
        private var goalType:String = "none";

        private function setupData():void {
            commandProcessor = new CommandProcessor();
            addEventListener(CommandEvent.COMMAND, onCommand);
            NONE.displayName = "[ No Selection ]";
            addEventListener(DeleteAssociationEvent.DELETE_DATA_SOURCE, deleteDataSource);
            addEventListener(DeleteAssociationEvent.DELETE_REPORT, deleteReport);
            if (_goalTreeNode != null) {
                for each (var filter:FilterDefinition in _goalTreeNode.filters) {
                    transformContainer.addFilterDefinition(filter);
                }
                problemFilters = _goalTreeNode.problemConditions;
                /*for each (var problem:FilterDefinition in _goalTreeNode.problemConditions) {
                 problemContainer.addFilterDefinition(problem);
                 }*/
            }
            goalService.getMilestones.send();
        }

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }


        private function deleteDataSource(event:DeleteAssociationEvent):void {
            associatedDataSources.removeItemAt(associatedDataSources.getItemIndex(event.deleteObj));
        }

        private function deleteReport(event:DeleteAssociationEvent):void {
            associatedReports.removeItemAt(associatedReports.getItemIndex(event.deleteObj));
        }

        public function set goalTreeNode(goalTreeNode:GoalTreeNode):void {
            this._goalTreeNode = goalTreeNode;
            if (goalTreeNode.iconImage != null && "" != goalTreeNode.iconImage) {
                this.iconPath = "/app/assets/icons/32x32/" + goalTreeNode.iconImage;
                this.iconFile = goalTreeNode.iconImage;
            }
            associatedDataSources = goalTreeNode.associatedFeeds;
            associatedReports = goalTreeNode.associatedInsights;
            this.feedID = goalTreeNode.coreFeedID;
            if (goalTreeNode.coreFeedID > 0) {
                insightBound = true;
                this.feedName = goalTreeNode.coreFeedName;
                filterDefinitions = goalTreeNode.filters;
                if (goalTreeNode.problemConditions.length > 0) {
                    problemDefinition = goalTreeNode.problemConditions.getItemAt(0) as FilterDefinition;
                }

                this.analysisMeasure = goalTreeNode.analysisMeasure;
                this.milestone = goalTreeNode.milestone;
                if (goalTreeNode.goalDefined) {
                    goalType = "goal";
                    targetIndex = 1;
                } else if (goalTreeNode.problemConditions.length > 0) {
                    goalType = "condition";
                    targetIndex = 2;
                }
                dataService.getFeedMetadata.send(goalTreeNode.coreFeedID);
                targetDefined = goalTreeNode.goalDefined;
            }

        }

        [Bindable(event="goalTreeNodeChanged")]
        public function get goalTreeNode():GoalTreeNode {
            return _goalTreeNode;
        }

        [Bindable]
        private var targetIndex:int;

        private function clear():void {
            feedID = 0;
            feedName = "";
            insightBound = false;
        }

        private function save():void {
            _goalTreeNode.iconImage = this.iconFile;
            if (insightBound) {
                _goalTreeNode.coreFeedID = feedID;
                _goalTreeNode.coreFeedName = feedName;
                _goalTreeNode.analysisMeasure = availableItemBox.selectedItem as AnalysisMeasure;

                _goalTreeNode.filters = transformContainer.getFilterDefinitions();


                if (targetBox.selectedIndex == 1) {
                    _goalTreeNode.problemConditions = new ArrayCollection();
                    var goalWindow:GoalDefinitionWindow = targetBox.getChildAt(1) as GoalDefinitionWindow;
                    goalWindow.update(_goalTreeNode);
                } else if (targetBox.selectedIndex == 2) {
                    _goalTreeNode.goalDefined = false;
                    _goalTreeNode.goalValue = 0;
                    var problemWindow:ProblemDefinitionWindow = targetBox.getChildAt(2) as ProblemDefinitionWindow;
                    problemWindow.update(_goalTreeNode);
                } else {
                    _goalTreeNode.goalDefined = false;
                    _goalTreeNode.goalValue = 0;
                    _goalTreeNode.problemConditions = new ArrayCollection();
                }
            } else {
                _goalTreeNode.coreFeedID = 0;
                _goalTreeNode.analysisMeasure = null;
                _goalTreeNode.filters = new ArrayCollection();
                _goalTreeNode.milestone = null;
                _goalTreeNode.goalValue = 0;
                _goalTreeNode.goalDefined = false;
                _goalTreeNode.goalValue = 0;
                _goalTreeNode.problemConditions = new ArrayCollection();
            }
            dispatchEvent(new GoalEditEvent());
            PopUpManager.removePopUp(this);
        }

        private function cancel():void {
            PopUpManager.removePopUp(this);
        }

        private var commandProcessor:CommandProcessor;


        private function bindDataSource():void {
            var window:DataSourceChoiceWindow = DataSourceChoiceWindow(PopUpManager.createPopUp(this, DataSourceChoiceWindow, true));
            window.addEventListener(DataSourceChoiceEvent.DATA_SOURCE_CHOICE, boundDataSource);
            PopUpManager.centerPopUp(window);
        }

        private function boundDataSource(event:DataSourceChoiceEvent):void {
            currentState = "";
            transformContainer.removeAllFilters();
            this.feedName = event.feedDefinition.name;
            this.feedID = event.feedDefinition.id;
            insightBound = true;
            dataService.getFeedMetadata.send(feedID);
        }

        private function processFeed(feedDefinition:FeedMetadata):void {
            this.feedMetadata = feedDefinition;
            for each (var credential:CredentialRequirement in feedMetadata.credentials) {
                if (CredentialsCache.getCache().getCredentials(credential.dataSourceID) == null) {
                    var window:RuntimeCredentialsWindow = new RuntimeCredentialsWindow();
                    // window.addEventListener(CredentialsEvent.CREDENTIALS_SAVED, onCredentials);
                    window.requirement = credential;
                    PopUpManager.addPopUp(window, this, true);
                    PopUpManager.centerPopUp(window);
                }
            }
            availableDimensions = new ArrayCollection();
            var measures:ArrayCollection = new ArrayCollection();
            var dates:ArrayCollection = new ArrayCollection();
            allFields = new ArrayCollection();
            for each (var analysisItem:AnalysisItem in feedDefinition.fields) {
                if (analysisItem.hasType(AnalysisItemTypes.MEASURE)) {
                    measures.addItem(analysisItem);
                } else if (analysisItem.hasType(AnalysisItemTypes.DIMENSION)) {
                    availableDimensions.addItem(analysisItem);
                }
                var aNode:AnalysisItemNode = new AnalysisItemNode();
                aNode.analysisItem = analysisItem;
                allFields.addItem(new AnalysisItemWrapper(aNode));
            }
            var sort:Sort = new Sort();
            sort.fields = [ new SortField("display", false) ];
            availableDimensions.sort = sort;
            availableDimensions.refresh();
            this.availableItems = measures;
            var measureSort:Sort = new Sort();
            measureSort.fields = [ new SortField("display", false) ];
            measures.sort = measureSort;
            measures.refresh();
            feedID = feedDefinition.dataFeedID;
        }

        private function gotDefinition():void {
            var feedDefinition:FeedMetadata = dataService.getFeedMetadata.lastResult as FeedMetadata;
            processFeed(feedDefinition);
            if (transformContainer.getFilterDefinitions().length == 0) {
                for each (var filter:FilterDefinition in feedDefinition.intrinsicFilters) {
                    transformContainer.addFilterDefinition(filter);
                }
            }
            if (analysisMeasure != null) {
                var foundAnalysisItem:AnalysisItem = null;
                for (var i:int = 0; i < availableItems.length && foundAnalysisItem == null; i++) {
                    var analysisTest:AnalysisItem = availableItems.getItemAt(i) as AnalysisItem;
                    if (analysisTest.display == analysisMeasure.display) {
                        foundAnalysisItem = analysisTest;
                    }
                }
                if (foundAnalysisItem != null) {
                    var index:int = availableItems.getItemIndex(foundAnalysisItem);
                    availableItems.removeItemAt(index);
                    availableItems.addItemAt(analysisMeasure, index);
                    availableItemBox.selectedItem = analysisMeasure;
                }
            } else {
                if (availableItems.length > 0) {
                    analysisMeasure = availableItems.getItemAt(0) as AnalysisMeasure;
                }
            }
        }

        private function gotGoalTree():void {
            var goalTree:GoalTree = goalService.getGoalTree.lastResult as GoalTree;
            var rootNode:GoalTreeNode = goalTree.rootNode;
            var clonedNode:GoalTreeNode = rootNode.clone();
            clonedNode.parent = _goalTreeNode;
            _goalTreeNode.children.addItem(clonedNode);
        }


        private function itemEdited(event:AnalysisItemEditEvent):void {
            analysisMeasure = event.analysisItem as AnalysisMeasure;
            if (analysisMeasure != null) {
                var foundAnalysisItem:AnalysisItem = null;
                for (var i:int = 0; i < availableItems.length && foundAnalysisItem == null; i++) {
                    var analysisTest:AnalysisItem = availableItems.getItemAt(i) as AnalysisItem;
                    if (analysisTest.display == analysisMeasure.display) {
                        foundAnalysisItem = analysisTest;
                    }
                }
                if (foundAnalysisItem != null) {
                    var index:int = availableItems.getItemIndex(foundAnalysisItem);
                    availableItems.removeItemAt(index);
                    availableItems.addItemAt(analysisMeasure, index);
                    availableItemBox.selectedItem = analysisMeasure;
                }
            }
        }

        private function editMeasure():void {
            var analysisItemEditor:AnalysisItemEditWindow = new AnalysisItemEditWindow();
            if (analysisMeasure.hasType(AnalysisItemTypes.CALCULATION)) {
                analysisItemEditor.editorClass = CalculationWindow;
            } else {
                analysisItemEditor.editorClass = MeasureItemEditor;
            }
            analysisItemEditor.analysisItems = this.allFields;
            analysisItemEditor.analysisItem = this.analysisMeasure;
            PopUpManager.addPopUp(analysisItemEditor, this, true);
            PopUpManager.centerPopUp(analysisItemEditor);
            analysisItemEditor.addEventListener(AnalysisItemEditEvent.ANALYSIS_ITEM_EDIT, itemEdited);
        }

        private function toggleGoalState():void {
            if (goalTypeGroup.selectedValue == "goal") {
                targetBox.selectedIndex = 1;
            } else if (goalTypeGroup.selectedValue == "condition") {
                targetBox.selectedIndex = 2;
            } else {
                targetBox.selectedIndex = 0;
            }
        }
		]]>
    </mx:Script>
    <mx:RemoteObject destination="data" id="dataService">
        <mx:method name="getFeedMetadata" result="gotDefinition()"/>
    </mx:RemoteObject>
    <mx:RemoteObject destination="goalService" id="goalService">
        <mx:method name="getGoalTree" result="gotGoalTree()"/>
    </mx:RemoteObject>
    <mx:VBox styleName="TitleWindowContents" width="100%" height="100%">
        <mx:TabNavigator width="100%" height="100%" paddingTop="0" paddingBottom="0"
                         paddingLeft="0" paddingRight="0" creationPolicy="all" resizeToContent="true">
            <mx:Canvas width="100%" height="100%" label="Implementation">
                <mx:VBox width="100%" height="100%">
                    <mx:VBox width="100%" height="100%" id="coreBox">
                        <mx:HBox width="100%">
                            <mx:VBox paddingTop="10">
                                <mx:HBox width="100%" horizontalAlign="center">
                                    <mx:Label fontSize="14" text="Define the Measure" fontWeight="bold"
                                              fontFamily="Tahoma"/>
                                </mx:HBox>
                                <mx:Form paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
                                    <mx:FormItem label="Goal Data Source Binding:" direction="horizontal"
                                                 fontFamily="Tahoma"
                                                 fontWeight="bold">
                                        <mx:Label text="{feedName}" fontFamily="Lucida Grande" fontWeight="normal"/>
                                        <mx:Button icon="{dataSourceIcon}" toolTip="Bind Data Source"
                                                   click="bindDataSource()"/>
                                        <mx:Button icon="{deleteIcon}" toolTip="Clear" click="clear()"/>
                                    </mx:FormItem>
                                    <mx:FormItem label="Measure:" fontFamily="Tahoma" fontWeight="bold"
                                                 enabled="{insightBound}" direction="horizontal">
                                        <mx:ComboBox dataProvider="{availableItems}" labelField="display"
                                                     id="availableItemBox" fontFamily="Lucida Grande"
                                                     fontWeight="normal"/>
                                        <mx:Button icon="{editIcon}" toolTip="Edit Measure..." click="editMeasure()"/>
                                    </mx:FormItem>
                                </mx:Form>
                            </mx:VBox>
                            <mx:VRule height="100%"/>
                            <mx:VBox width="100%" enabled="{insightBound}" paddingTop="10" height="180">
                                <mx:HBox width="100%" horizontalAlign="center">
                                    <mx:Label fontSize="14" text="Define the Filters" fontWeight="bold"
                                              fontFamily="Tahoma"/>
                                </mx:HBox>
                                <mx:HDividedBox height="100%" width="100%">
                                    <mx:List dataProvider="{availableDimensions}" labelField="display"
                                             dragEnabled="true"
                                             dragMoveEnabled="false" enabled="{insightBound}" width="50%"
                                             height="100%"/>
                                    <mx:Canvas width="50%" height="100%">
                                        <filtering:TransformContainer id="transformContainer" width="100%" height="100%"
                                                                      borderStyle="solid"
                                                                      borderThickness="1" backgroundColor="#ffffff"
                                                                      backgroundAlpha=".1" feedID="{feedID}"
                                                                      analysisItems="{allFields}"
                                                                      showLabel="false"
                                                                      paddingBottom="5" paddingLeft="5" paddingRight="5"
                                                                      paddingTop="5"/>
                                    </mx:Canvas>
                                </mx:HDividedBox>
                            </mx:VBox>
                        </mx:HBox>
                        <mx:HRule width="100%"/>

                        <mx:HBox width="100%" height="100%" paddingLeft="5">
                            <goals:GoalAdminHistoryDisplay id="historyDisplay" analysisMeasure="{availableItemBox.selectedItem}" feedID="{feedID}"
                                    transformContainer="{transformContainer}"/>
                            <mx:VRule height="100%"/>
                            <mx:VBox>
                                <mx:HBox width="100%" horizontalAlign="center" verticalAlign="middle" enabled="{insightBound}">
                            <mx:Label fontSize="14" text="Define the Condition" fontWeight="bold"
                                              fontFamily="Tahoma"/>
                            <mx:RadioButtonGroup id="goalTypeGroup" selectedValue="{goalType}" change="toggleGoalState()"/>
                            <mx:RadioButton group="{goalTypeGroup}" value="none" label="None" fontSize="14"/>
                            <mx:RadioButton group="{goalTypeGroup}" value="goal" label="Goal" fontSize="14"/>
                            <mx:RadioButton group="{goalTypeGroup}" value="condition" label="Problem" fontSize="14"/>
                        </mx:HBox>
                                <mx:HRule width="100%"/>
                                <mx:ViewStack id="targetBox" width="100%" height="100%" selectedIndex="{targetIndex}">
                                    <mx:Box width="100%" height="100%"/>
                                    <goals:GoalDefinitionWindow milestone="{milestone}" node="{goalTreeNode}" width="100%" height="100%"/>
                                    <goals:ProblemDefinitionWindow id="problemWindow" analysisMeasure="{availableItemBox.selectedItem}"
                                            filterDefinition="{problemDefinition}" width="100%" height="100%"/>
                                </mx:ViewStack>
                            </mx:VBox>
                        </mx:HBox>
                    </mx:VBox>
                </mx:VBox>
            </mx:Canvas>
            <mx:Canvas width="100%" height="100%" label="Associations">
                <mx:VBox width="100%" height="100%" paddingTop="10" paddingBottom="10"
                         paddingLeft="10" paddingRight="10">
                    <mx:HBox width="100%" height="100%">
                        <mx:VBox verticalGap="0" height="100%">
                            <mx:Box width="100%" backgroundColor="#3B56AF" horizontalAlign="center">
                                <mx:Label text="Data Sources" color="0xFFFFFF"/>
                            </mx:Box>
                            <mx:DataGrid width="100%" height="100%" dataProvider="{associatedDataSources}">
                                <mx:columns>
                                    <mx:DataGridColumn headerText="Name" dataField="feedName"
                                                       headerRenderer="com.easyinsight.groups.CustomGroupHeader"/>
                                    <mx:DataGridColumn headerText="" dataField="feedName" sortable="false" width="50"
                                                       itemRenderer="com.easyinsight.goals.AssociatedFeedsAdminControls"/>
                                </mx:columns>
                            </mx:DataGrid>
                        </mx:VBox>
                        <mx:VBox verticalGap="0" height="100%">
                            <mx:Box width="100%" backgroundColor="#3B56AF" horizontalAlign="center">
                                <mx:Label text="Reports" color="0xFFFFFF" paddingBottom="5" paddingLeft="5"
                                          paddingRight="5"
                                          paddingTop="5"/>
                            </mx:Box>
                            <mx:DataGrid width="100%" height="100%" dataProvider="{associatedReports}">
                                <mx:columns>
                                    <mx:DataGridColumn headerText="Name" dataField="name"
                                                       headerRenderer="com.easyinsight.groups.CustomGroupHeader"/>
                                    <mx:DataGridColumn headerText="" dataField="name" sortable="false" width="50"
                                                       itemRenderer="com.easyinsight.goals.AssociatedInsightsAdminControls"/>
                                </mx:columns>
                            </mx:DataGrid>
                        </mx:VBox>
                    </mx:HBox>
                </mx:VBox>
            </mx:Canvas>
        </mx:TabNavigator>
        <mx:HBox width="100%" horizontalAlign="center">
            <mx:Button label="Save" click="save()"/>
            <mx:Button label="Cancel" click="cancel()"/>
        </mx:HBox>
    </mx:VBox>

</mx:TitleWindow>
