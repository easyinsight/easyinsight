<?xml version="1.0" ?>
<OrgChartItemRendererBase xmlns="com.easyinsight.goals.*" xmlns:mx="http://www.adobe.com/2006/mxml"
        borderStyle="solid" borderColor="#CCCCCC" cornerRadius="10" dropShadowEnabled="true" doubleClickEnabled="true" doubleClick="onDoubleClick()">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.PopupMenuFactory;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.kpi.KPIIconFactory;
        import com.easyinsight.util.ModelessWindowEvent;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.PrefixManager;

        import ilog.orgchart.OrgChartItem;

        
        import mx.events.CloseEvent;
import mx.formatters.NumberFormatter;
        import mx.managers.PopUpManager;

        [Bindable]
        private var trendImage:Class;
        [Bindable]
        private var treeName:String;
        [Bindable]
        private var trendTooltip:String;

        [Bindable]
        [Embed(source="../../../../assets/arrow2_up_green.png")]
        private var positiveUpIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/arrow2_down_green.png")]
        private var positiveDownIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/bullet_ball_green.png")]
        private var positiveIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/arrow2_up_red.png")]
        private var negativeUpIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/arrow2_down_red.png")]
        private var negativeDownIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/bullet_square_glass_red.png")]
        private var negativeIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/bullet_ball_blue.png")]
        private var neutralIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/bullet_square_grey.png")]
        private var noDataIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/branchx16.png")]
        private var subTreeIcon:Class;

        private var goalTreeNodeData:GoalTreeNode;

        private var orgChartItem:OrgChartItem;

        private var _startDate:Date;

        private var _endDate:Date;

        [Bindable]
        private var subTreePresent:Boolean;

        [Bindable]
        private var goalIcon:String;

        [Bindable]
        private var currentValue:String;

        [Bindable]
        private var iconExists:Boolean;

        [Bindable]
        private var currentValueExists:Boolean = false;

        private var numberFormatter:NumberFormatter = new NumberFormatter();

        override protected function configureLevelOfDetails():void {
            setLevelsOfDetails(layer2, [2]);
        }

        private function onDoubleClick():void {
            // TODO: fix behavior
            /*var window:GoalDetailWindow = new GoalDetailWindow();
            window.goalTreeNodeData = goalTreeNodeData;            
            window.addEventListener(AnalyzeEvent.ANALYZE, onAnalyze);
            window.addEventListener(CloseEvent.CLOSE, onClose);
            PopUpManager.addPopUp(window, this);
            PopUpUtil.centerPopUp(window);
            dispatchEvent(new ModelessWindowEvent(ModelessWindowEvent.WINDOW_ADDED, window));*/
        }

        private function onAnalyze(event:AnalyzeEvent):void {
            dispatchEvent(event);
        }

        private function onClose(event:CloseEvent):void {
            event.currentTarget.removeEventListener(CloseEvent.CLOSE, onClose);
            dispatchEvent(new ModelessWindowEvent(ModelessWindowEvent.WINDOW_REMOVED, event.currentTarget as DisplayObject));
        }

        override public function get data():Object {
            return this.orgChartItem;
        }


        public function set startDate(val:Date):void {
            _startDate = val;
        }

        public function set endDate(val:Date):void {
            _endDate = val;
        }

        override public function set data(value:Object):void {
            this.orgChartItem = value as OrgChartItem;
            goalTreeNodeData = orgChartItem.data as GoalTreeNode;

            if (goalTreeNodeData != null) {
                goalIcon = PrefixManager.prefix + "/app/assets/icons/32x32/" + goalTreeNodeData.iconImage;
                iconExists = goalTreeNodeData.iconImage != null && goalTreeNodeData.iconImage != "";
                treeName = goalTreeNodeData.name;
                subTreePresent = goalTreeNodeData.subTreeID > 0;
                if (goalTreeNodeData.kpi != null) {
                if (goalTreeNodeData.kpi.kpiOutcome != null) {
                    if (goalTreeNodeData.kpi.analysisMeasure == null) {
                        currentValue = numberFormatter.format(goalTreeNodeData.kpi.kpiOutcome.outcomeValue);
                    } else {
                        currentValue = goalTreeNodeData.kpi.analysisMeasure.getFormatter().format(goalTreeNodeData.kpi.kpiOutcome.outcomeValue);
                    }
                    currentValueExists = true;
                } else {
                    currentValueExists = false;
                    currentValue = null;
                }

                if (goalTreeNodeData.kpi.kpiOutcome != null && goalTreeNodeData.kpi.kpiOutcome.problemEvaluated) {
                    trendImage = negativeIcon;
                } /*else if (goalTreeNodeData.kpi.problemConditions.length > 0) {
                    trendImage = positiveIcon;
                }*/ else {
                    if (goalTreeNodeData.kpi.kpiOutcome != null) {
                        trendImage = KPIIconFactory.iconForKPI(goalTreeNodeData.kpi);
                    }
                }
                }
                
                defineContextMenu(goalTreeNodeData);
            } else {
                currentValue = null;
                currentValueExists = false;
                trendImage = noDataIcon;
            }
        }

        private function defineContextMenu(goalTreeNode:GoalTreeNode):void {
            var items:Array = [];
            if (goalTreeNode.subTreeID > 0) {
                var subTreeItem:ContextMenuItem = new ContextMenuItem("Navigate to Sub Tree", true);
                subTreeItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, navigateToSubTree);
                items.push(subTreeItem);
            }
            PopupMenuFactory.menuFactory.assignMenu(this, items);
        }

        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {

            super.updateDisplayList(unscaledWidth, unscaledHeight);

            var theData:OrgChartItem = data as OrgChartItem;

            if (theData != null) {

                //Have a different style depending on the state of the rendered item.
                //here the background of the item changes if the item is selected and/or highlighted.
                var isHightlighted:Boolean = theData.orgChart.isItemHighlighted(theData);
                var isSelected:Boolean = theData.orgChart.isItemSelected(theData);

                var color:uint;
                if (isHightlighted) {
                    color = isSelected ? getStyle("higlightedSelectedColor") : getStyle("highlightedUnselectedColor");
                } else {
                    color = isSelected ? getStyle("unhiglightedSelectedColor") : subTreePresent ? getStyle("subTreePresentColor") : getStyle("unhighlightedUnselectedColor");
                }

                setStyle("backgroundColor", color);

            }
        }

        private function navigateToSubTree(event:ContextMenuEvent):void {
            dispatchEvent(new AnalyzeEvent(new GoalDataAnalyzeSource(goalTreeNodeData.subTreeID)));
        }
        ]]></mx:Script>
    <mx:VBox id="layer2" verticalAlign="middle" paddingLeft="3"
           paddingRight="3" paddingTop="0" paddingBottom="0" width="180" height="80" horizontalAlign="center">
        <mx:HBox verticalAlign="middle" horizontalGap="3">
            <mx:Image source="{goalIcon}" visible="{iconExists}"/>
            <mx:Box backgroundColor="#000000" borderStyle="solid" cornerRadius="3" visible="{currentValueExists}" horizontalAlign="center" verticalAlign="middle" paddingLeft="0" horizontalGap="0">
                <mx:Label text="{currentValue}" fontFamily="Trebuchet MS" fontSize="14" color="#ffffff" maxWidth="110"/>
            </mx:Box>
            <mx:Image source="{trendImage}" toolTip="{trendTooltip}"/>
            <!--<mx:Button icon="{subTreeIcon}" toolTip="Navigate into Sub Tree" click="navigateToSubTree()" visible="{subTreePresent}"/>-->
        </mx:HBox>
        <mx:TextArea text="{treeName}" fontSize="12" maxWidth="160" maxHeight="38" editable="false" borderStyle="none" backgroundAlpha="0"
                textAlign="center" selectable="false"/>
    </mx:VBox>
</OrgChartItemRendererBase>