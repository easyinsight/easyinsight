<?xml version="1.0" ?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:filtering="com.easyinsight.filtering.*">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisMeasure;
        import com.easyinsight.filtering.FilterDefinition;

        import com.easyinsight.filtering.FilterRangeDefinition;
        import com.easyinsight.kpi.KPI;

        import mx.collections.ArrayCollection;

        private var _filterDefinition:FilterDefinition;

        private var _analysisMeasure:AnalysisMeasure;


        [Bindable(event="filterDefinitionChanged")]
        public function get filterDefinition():FilterDefinition {
            return _filterDefinition;
        }

        public function set filterDefinition(value:FilterDefinition):void {
            if (_filterDefinition == value) return;
            _filterDefinition = value;
            if (_filterDefinition != null) {
                var filter:FilterRangeDefinition = _filterDefinition as FilterRangeDefinition;
                if (filter.startValueDefined) {
                    lowValueString = String(filter.startValue);
                }
                if (filter.endValueDefined) {
                    highValueString = String(filter.endValue);
                }
            }
            dispatchEvent(new Event("filterDefinitionChanged"));
        }

        [Bindable(event="analysisMeasureChanged")]
        public function get analysisMeasure():Object {
            return _analysisMeasure;
        }

        public function set analysisMeasure(value:Object):void {
            if (_analysisMeasure == value) return;
            measureChanged = true;
            _analysisMeasure = value as AnalysisMeasure;
            dispatchEvent(new Event("analysisMeasureChanged"));
            invalidateProperties();
        }

        private var _lowValueString:String;

        private var _highValueString:String;


        [Bindable(event="lowValueStringChanged")]
        public function get lowValueString():String {
            return _lowValueString;
        }

        public function set lowValueString(value:String):void {
            if (_lowValueString == value) return;
            _lowValueString = value;
            dispatchEvent(new Event("lowValueStringChanged"));
        }

        [Bindable(event="highValueStringChanged")]
        public function get highValueString():String {
            return _highValueString;
        }

        public function set highValueString(value:String):void {
            if (_highValueString == value) return;
            _highValueString = value;
            dispatchEvent(new Event("highValueStringChanged"));
        }

        private var _items:ArrayCollection;


        [Bindable(event="itemsChanged")]
        public function get items():ArrayCollection {
            return _items;
        }

        public function set items(value:ArrayCollection):void {
            if (_items == value) return;
            _items = value;
            dispatchEvent(new Event("itemsChanged"));
        }

        private var measureChanged:Boolean;

        [Bindable]
        private var valueText:String = " < Value < ";

        override protected function commitProperties():void {
            super.commitProperties();
            if (filterDefinition == null) {
                filterDefinition = new FilterRangeDefinition();
            }
            if (measureChanged) {
                measureChanged = false;
                filterDefinition.field = analysisMeasure as AnalysisMeasure;
            }
        }

        public function update(node:KPI):void {
            var filter:FilterRangeDefinition = filterDefinition as FilterRangeDefinition;
            if (lowInput.text != "") {
                filter.startValue = int(lowInput.text);
                filter.startValueDefined = true;
            } else {
                filter.startValueDefined = false;
            }
            if (highInput.text != "") {
                filter.endValue = int(highInput.text);
                filter.endValueDefined = true;
            } else {
                filter.endValueDefined = false;
            }
            node.problemConditions = new ArrayCollection([ filter ]);
        }

        ]]></mx:Script>
    <mx:HBox width="100%" horizontalAlign="center">
        <mx:Label fontSize="14" text="Define the Problems" fontWeight="bold"
                  fontFamily="Tahoma"/>
    </mx:HBox>
    <mx:VBox width="100%" height="100%">
        <mx:HBox>
            <mx:TextInput id="lowInput" text="{lowValueString}"/>
            <mx:Label text="{valueText}"/>
            <mx:TextInput id="highInput" text="{highValueString}"/>
        </mx:HBox>
    </mx:VBox>
</mx:VBox>