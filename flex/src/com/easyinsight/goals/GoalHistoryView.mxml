<?xml version="1.0" ?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setup()" width="100%" height="100%">
    <mx:Script><![CDATA[
        import mx.charts.LinearAxis;
        import mx.charts.chartClasses.IAxis;
        import mx.charts.chartClasses.Series;
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.controls.Label;
        import mx.controls.VRule;
        import mx.graphics.BitmapFill;

        [Bindable]
        private var goalHistory:ArrayCollection;

        [Bindable]
        private var areaFill:BitmapFill;

        [Bindable]
        private var _startDate:Date;

        [Bindable]
        private var _endDate:Date;

        [Bindable]
        [Embed(source="../../../../assets/water4.JPG")]
        private var areaBackground:Class;

        [Bindable]
        [Embed(source="../../../../assets/add.png")]
        private var addIcon:Class;

        private var _goalTreeNodeData:GoalTreeNodeData;

        [Bindable]
        private var showSlope:Boolean;

        [Bindable]
        private var slopeData:ArrayCollection;

        private function setup():void {
            areaFill = new BitmapFill();
            areaFill.source = areaBackground;
            if (_startDate == null) {
                _startDate = new Date(new Date().getTime() - 24 * 7 * 1000 * 60 * 60);
                _endDate = new Date();
            }
            goalService.getGoalValues.send(_goalTreeNodeData.goalTreeNodeID, _startDate, _endDate);
            if (_goalTreeNodeData.milestone != null) {
                goalService.calculateSlope.send(_goalTreeNodeData.goalTreeNodeID, _startDate, _endDate);
            }
        }

        private function gotSlope():void {
            slopeData = goalService.calculateSlope.lastResult as ArrayCollection;
            showSlope = true;
        }

        public function set startDate(val:Date):void {
            _startDate = val;
        }

        public function set endDate(val:Date):void {
            _endDate = val;
        }

        public function set goalTreeNodeData(val:GoalTreeNodeData):void {
            _goalTreeNodeData = val;
        }

        private function gotValues():void {
            var history:ArrayCollection = goalService.getGoalValues.lastResult as ArrayCollection;
            if (history.length > 1) {
                goalHistory = history;
            }
        }

        private function onDatesChanged():void {
            _startDate = startChooser.selectedDate;
            _endDate = endChooser.selectedDate;
            goalService.getGoalValues.send(_goalTreeNodeData.goalTreeNodeID, _startDate, _endDate);
        }

        private function subscribe():void {
            goalService.subscribeToGoal.send(_goalTreeNodeData.goalTreeNodeID);
        }

        private function subscribedToGoal():void {
            Alert.show("This goal will now show for you in the My Goals page.");
        }

        private function drawLine():void {
            linesCanvas.removeAllChildren();
            var milestone:GoalTreeMilestone;
            /*var dateFormatter:DateFormatter = new DateFormatter();
            dateFormatter.formatString = "MM/DD/YY";
            var format:String = dateFormatter.format(milestone.milestoneDate);
            Alert.show(format);*/
            var chartXValue:Object = getNumericChartValue(milestone.milestoneDate, horAxis);
            var thePosition:Point = chartToScreen(chartXValue.numericValue, 0, horSeries);

            //creating the line
            var theLine:VRule = VRule(linesCanvas.addChild(new VRule()));
            theLine.x = thePosition.x;
            theLine.y = 0;
            theLine.setStyle("strokeColor", 0x000000);
            theLine.setStyle("strokeWidth", 5);
            theLine.height = linesCanvas.height;

            //creating the button
            var milestoneLabel:Label = Label(linesCanvas.addChild(new Label()));
            milestoneLabel.setStyle("fontSize", 13);
            milestoneLabel.text = milestone.milestoneName;
            //milestoneLabel.width = milestoneLabel.height = 20;
            milestoneLabel.x = thePosition.x - (milestoneLabel.width / 2) + 1;
            milestoneLabel.y = 5;
        }


        public function chartToScreen(chartX:Number, chartY:Number, theSeries:Series):Point {
            var tmpCache:Array = new Array({chartX:chartX, chartY:chartY});
            if (theSeries) {
                theSeries.dataTransform.transformCache(tmpCache, "chartX", "screenX", "chartY", "screenY");
            }
            return new Point(Math.round(tmpCache[0].screenX), Math.round(tmpCache[0].screenY));

        }


        public function getNumericChartValue(inValue:Object, theAxis:IAxis):Object {
            var axisCache:Array = new Array({inValue: inValue});
            if (!(theAxis is LinearAxis)) {
                theAxis.mapCache(axisCache, "inValue", "outValue", false);
                return {numericValue: axisCache[0].outValue};
            }
            else {
                return {numericValue: Number(inValue)};
            }
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="goalService" id="goalService">
        <mx:method name="getGoalValues" result="gotValues()"/>
        <mx:method name="calculateSlope" result="gotSlope()"/>
        <mx:method name="subscribeToGoal" result="subscribedToGoal()"/>
    </mx:RemoteObject>
    <mx:SeriesSlide id="slideIn" duration="1000" direction="up"/>
    <mx:SeriesSlide id="slideOut" duration="1000" direction="down"/>
    <mx:VBox width="100%" height="100%">
        <mx:HBox width="100%" horizontalAlign="center">
            <mx:DateField id="startChooser" selectedDate="{_startDate}" change="onDatesChanged()"/>
            <mx:Spacer width="30"/>
            <mx:DateField id="endChooser" selectedDate="{_endDate}" change="onDatesChanged()"/>
            <mx:Spacer width="100%"/>
            <mx:Button icon="{addIcon}" toolTip="Add this goal to My Goals" click="subscribe()"/>
        </mx:HBox>
        <mx:LineChart dataProvider="{goalHistory}" width="100%" height="100%">
            <mx:horizontalAxis>
                <mx:DateTimeAxis id="horAxis"/>
            </mx:horizontalAxis>
            <mx:series>
                <mx:LineSeries yField="value" xField="date" form="curve" showDataEffect="{slideIn}" hideDataEffect="{slideOut}" id="horSeries"/>
                <!--<mx:LineSeries yField="value" xField="date" form="segment" visible="{showSlope}" dataProvider="{slopeData}"/>-->
            </mx:series>
            <mx:annotationElements>
                <mx:Canvas id="linesCanvas" horizontalScrollPolicy="off"
                           verticalScrollPolicy="off"/>
            </mx:annotationElements>
        </mx:LineChart>
    </mx:VBox>
</mx:Canvas>