<?xml version="1.0" ?>
<mx:Module xmlns="com.easyinsight.*" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ilog="ilog.orgchart.*"
           xmlns:goals="com.easyinsight.goals.*" xmlns:skin="com.easyinsight.skin.*"
           xmlns:filtering="com.easyinsight.filtering.*" width="100%" height="100%"
           creationComplete="setup()"
           implements="com.easyinsight.util.IAsyncScreen, com.easyinsight.listing.IPerspective">
    <mx:states>
        <mx:State name="FullScreen">
            <mx:RemoveChild target="{leftButtonBar}"/>
            <mx:RemoveChild target="{hrule}"/>
        </mx:State>
    </mx:states>
    <mx:Script><![CDATA[
        import com.easyinsight.administration.feed.FeedConsumer;
        import com.easyinsight.administration.sharing.UserStub;
        import com.easyinsight.analysis.AnalysisCloseEvent;
        import com.easyinsight.framework.DataServiceLoadingEvent;
        import com.easyinsight.framework.InsightRequestMetadata;
        import com.easyinsight.framework.User;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.util.ModelessWindowEvent;

        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.ProgressAlert;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.Container;
        import mx.core.IFlexDisplayObject;
        import mx.managers.BrowserManager;
        import mx.managers.PopUpManager;
        import mx.utils.URLUtil;


        private function editTree():void {
            dispatchEvent(new AnalyzeEvent(new GoalTreeAdminAnalyzeSource(_goalTreeID, 0)));
        }


        [Bindable]
        [Embed(source="../../../../assets/document_out.png")]
        private var closeIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/edit.png")]
        private var editIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/refresh.png")]
        private var refreshIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/plasma_tv.png")]
        private var fullScreenIcon:Class;

        private var _goalTreeID:int;

        [Bindable]
        private var _goalTreeNodes:GoalTreeNode;

        private var goalTree:GoalTree;

        [Bindable]
        private var editAvailable:Boolean = false;

        [Bindable]
        public var startDate:Date;

        [Bindable]
        public var endDate:Date;

        private var windows:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var _embedded:Boolean;

        public function set embedded(value:Boolean):void {
            _embedded = value;
        }

        public function set goalTreeID(val:int):void {
            _goalTreeID = val;
        }

        private function setup():void {
            addEventListener(ModelessWindowEvent.WINDOW_REMOVED, onWindowRemove);
            addEventListener(ModelessWindowEvent.WINDOW_ADDED, onWindowAdd);
            ProgressAlert.alert(this, "Retrieving latest goal data", null, goalService.getGoalDataTree);
            var metadata:InsightRequestMetadata = new InsightRequestMetadata();
            metadata.utcOffset = new Date().getTimezoneOffset();
            goalService.getGoalDataTree.send(_goalTreeID, metadata);
        }


        private function onWindowRemove(event:ModelessWindowEvent):void {
            windows.removeItemAt(windows.getItemIndex(event.displayObject));
        }

        private function onWindowAdd(event:ModelessWindowEvent):void {
            windows.addItem(event.displayObject);
        }

        [Bindable]
        private var kpiTreeName:String;


        private function parentTreeClick(event:MouseEvent):void {
            var descriptor:GoalTreeDescriptor = event.currentTarget.data;
            dispatchEvent(new AnalyzeEvent(new GoalDataAnalyzeSource(descriptor.id)));
        }

        private function gotTree():void {
            var kpiTreeWrapper:KPITreeWrapper = goalService.getGoalDataTree.lastResult as KPITreeWrapper;

            goalTree = kpiTreeWrapper.goalTree;
            kpiTreeName = goalTree.name;
            dataSourceID = goalTree.dataSourceID;
            var feedFragmentObject:Object = new Object();
            feedFragmentObject.goalTreeID = String(goalTree.urlKey);
            var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
            BrowserManager.getInstance().setFragment(feedFragmentString);
            for each (var user:FeedConsumer in goalTree.administrators) {
                if (user is UserStub) {
                    var userStub:UserStub = user as UserStub;
                    if (userStub.userID == User.getInstance().userID) {
                        editAvailable = true;
                    }
                }
            }
            BrowserManager.getInstance().setTitle("Easy Insight - " + goalTree.name);
            processTree();
        }

        private function gotRefresh(event:GoalTreeRefreshEvent):void {
            goalTree = event.goalTree;
            processTree();
        }

        private function processTree():void {
            if (parentsBox.getChildren().length == 0 && goalTree.subTreeParents != null) {
                for each (var parent:GoalTreeDescriptor in goalTree.subTreeParents) {
                    var goalRenderer:GoalTreeIconRenderer = new GoalTreeIconRenderer();
                    goalRenderer.data = parent;
                    parentsBox.addChild(goalRenderer);
                }
            }
            _goalTreeNodes = goalTree.rootNode;
            myOrgChart.dataProvider = _goalTreeNodes;
            dispatchEvent(new DataServiceLoadingEvent(DataServiceLoadingEvent.LOADING_STOPPED));
        }

        private function close():void {

            dispatchEvent(new AnalysisCloseEvent());
        }

        public function getContainer():Container {
            return this;
        }

        private function toFullScreen():void {
            Alert.show("You can return to normal view by hitting Escape.");
            addEventListener(KeyboardEvent.KEY_UP, onKey);
            currentState = "FullScreen";
        }

        private function onKey(event:KeyboardEvent):void {
            if (Keyboard.ESCAPE == event.keyCode) {
                currentState = "";
            }
        }

        public function refreshData():void {
            var window:RefreshGoalTreeWindow = new RefreshGoalTreeWindow();
            window.goalTreeID = _goalTreeID;
            window.addEventListener(GoalTreeRefreshEvent.GOAL_TREE_REFRESH, gotRefresh);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        [Bindable]
        [Embed(source="../../../../assets/banner4.jpg")]
        public var backImage:Class;

        [Bindable]
        private var filterIndex:int = 1;

        [Bindable]
        private var filterDefinitions:ArrayCollection;

        [Bindable]
        private var dataSourceID:int;

        public function gotFocus():void {
        }

        public function cleanup():void {
            for each (var displayObject:DisplayObject in windows) {
                PopUpManager.removePopUp(displayObject as IFlexDisplayObject);
            }
        }]]></mx:Script>
    <mx:RemoteObject destination="goalService" id="goalService">
        <mx:method name="getGoalDataTree" result="gotTree()"/>
    </mx:RemoteObject>
    <mx:Style>
        GoalDataRenderer {
            highlightedSelectedColor: #8695FF;
            highlightedUnselectedColor: #FEFBBA;
            unhiglightedSelectedColor: #637DFF;
            unhighlightedUnselectedColor: #EAF1F6;
            subTreePresentColor: #99ccff;
        }
    </mx:Style>
    <skin:BackgroundImage width="100%" height="100%" applyCenterScreenLogic="false">
        <mx:VBox width="100%" height="100%" paddingBottom="10" paddingLeft="10" paddingRight="10" verticalGap="0"
                 horizontalAlign="center"
                 direction="vertical">
            <mx:VBox borderStyle="solid" borderThickness="1" borderColor="#DDDDDD" id="topDisplay"
                     backgroundColor="#FFFFFF">
                <mx:HBox width="100%" verticalAlign="middle" paddingLeft="5" paddingRight="5" paddingBottom="5"
                         paddingTop="5">
                    <mx:HBox width="1000" id="highBox">
                        <mx:HBox paddingTop="10" id="leftButtonBar" paddingBottom="10" width="100%">
                            <mx:Button id="backButton" icon="{closeIcon}" click="close()" toolTip="Close"/>
                            <mx:Button id="fullScreenButton" icon="{fullScreenIcon}" click="toFullScreen()"/>
                            <mx:Button id="refreshButton" icon="{refreshIcon}" click="refreshData()"
                                       toolTip="Refresh Data"/>
                            <!--<mx:Button icon="{exportToExcelIcon}" click="exportExcel()"
                                       labelPlacement="bottom"
                                       id="exportButton" toolTip="Export the report..."/>
                            <mx:Button click="toggleFilters()" icon="{filterIcon}" labelPlacement="bottom"
                                       id="filterButton" toolTip="{filterTooltip}"/>-->
                            <mx:Button id="editButton" icon="{editIcon}" click="editTree()" toolTip="Edit the Goal Tree"
                                       visible="{editAvailable}"/>
                            <mx:Spacer width="100%"/>
                            <mx:Label text="{kpiTreeName}" fontFamily="Tahoma" fontWeight="bold" maxWidth="350"
                                      fontSize="14"/>
                            <mx:Spacer width="100%"/>
                            <mx:HBox id="parentsBox"/>
                        </mx:HBox>
                    </mx:HBox>
                </mx:HBox>
                <mx:Box width="100%" backgroundImage="{backImage}" backgroundSize="100%" height="18"/>
            </mx:VBox>
            <mx:HRule width="100%" id="hrule"/>
            <mx:ViewStack width="100%" resizeToContent="true" creationPolicy="all" selectedIndex="{filterIndex}">
                <mx:Box/>
                <mx:VBox width="100%" horizontalAlign="center">
                    <filtering:TransformContainer id="transformContainer" filterEditable="false" borderStyle="solid"
                                                  borderThickness="1"
                                                  existingFilters="{filterDefinitions}"
                                                  width="100%" paddingLeft="10"
                                                  paddingTop="10" paddingBottom="10"
                                                  paddingRight="10" feedID="{dataSourceID}" borderColor="#AAAAAA"
                                                  backgroundColor="#FFFFFF"/>
                </mx:VBox>
            </mx:ViewStack>
            <mx:VBox width="100%" height="100%" paddingRight="15" paddingTop="15" paddingLeft="15" paddingBottom="15">
                <mx:Canvas height="100%" width="100%" backgroundAlpha="0">
                    <ilog:OrgChart id="myOrgChart" dataProvider="{_goalTreeNodes}"
                                   width="100%" height="100%" minZoomLevel="1" maxZoomLevel="1" allowSelection="false">
                        <ilog:itemRenderer>
                            <mx:Component>
                                <goals:GoalDataRenderer/>
                            </mx:Component>
                        </ilog:itemRenderer>
                    </ilog:OrgChart>
                </mx:Canvas>
            </mx:VBox>
        </mx:VBox>
    </skin:BackgroundImage>
</mx:Module>