<?xml version="1.0" ?>
<FullScreenPage xmlns="com.easyinsight.*" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ilog="ilog.orgchart.*"
                xmlns:goals="com.easyinsight.goals.*" width="100%" height="100%" creationComplete="setup()"
         implements="com.easyinsight.util.IAsyncScreen">
    <states>
        <mx:State name="FullScreen">
            <mx:RemoveChild target="{buttonBox}"/>
            <mx:RemoveChild target="{hrule}"/>
        </mx:State>
    </states>
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisCloseEvent;
        import com.easyinsight.analysis.CredentialRequirement;
        import com.easyinsight.analysis.CredentialsEvent;
        import com.easyinsight.analysis.RuntimeCredentialsWindow;
        import com.easyinsight.framework.CredentialsCache;
        import com.easyinsight.framework.DataServiceLoadingEvent;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.util.ModelessWindowEvent;

        import com.easyinsight.util.ProgressAlert;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.Container;
        import mx.core.IFlexDisplayObject;
        import mx.managers.BrowserManager;
        import mx.managers.PopUpManager;
        import mx.utils.URLUtil;



        [Bindable]
        [Embed(source="../../../../assets/background2.JPG")]
        private var background2:Class;

        [Bindable]
        [Embed(source="../../../../assets/document_out_x32.png")]
        private var closeIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/refresh_x32.png")]
        private var refreshIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/plasma_tv_x32.png")]
        private var fullScreenIcon:Class;

        private var _goalTreeID:int;

        [Bindable]
        private var _goalTreeNodes:GoalTreeNode;

        private var goalTree:GoalTree;

        [Bindable]
        public var startDate:Date;

        [Bindable]
        public var endDate:Date;

        private var windows:ArrayCollection = new ArrayCollection();

        private var neededCredentialCount:int = 0;
        private var receivedCredentialCount:int = 0;

        [Bindable]
        private var _embedded:Boolean;

        public function set embedded(value:Boolean):void {
            _embedded = value;
        }

        public function set goalTreeID(val:int):void {
            _goalTreeID = val;
        }

        private function setup():void {
            addEventListener(ModelessWindowEvent.WINDOW_REMOVED, onWindowRemove);
            addEventListener(ModelessWindowEvent.WINDOW_ADDED, onWindowAdd);
            var feedFragmentObject:Object = new Object();
            feedFragmentObject.goalTreeID = String(_goalTreeID);
            var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
            BrowserManager.getInstance().setFragment(feedFragmentString);
            ProgressAlert.alert(this, "Retrieving latest goal data", null, goalService.createDataTree);
            goalService.createDataTree.send(_goalTreeID, startChooser.selectedDate, endChooser.selectedDate);
        }



        private function onWindowRemove(event:ModelessWindowEvent):void {
            windows.removeItemAt(windows.getItemIndex(event.displayObject));
        }

        private function onWindowAdd(event:ModelessWindowEvent):void {
            windows.addItem(event.displayObject);
        }

        override protected function createChildren():void {
            super.createChildren();
            endDate = new Date();
            startDate = new Date(endDate.getTime() - (1000 * 60 * 60 * 24 * 7));
        }

        override protected function commitProperties():void {
            if (!_embedded) {
                setStyle("backgroundImage", background2);
                setStyle("backgroundSize", "100%");
            }
        }

        private function onDatesChanged():void {
            ProgressAlert.alert(this, "Retrieving latest goal data", null, goalService.createDataTree);
            goalService.createDataTree.send(_goalTreeID, startChooser.selectedDate, endChooser.selectedDate);
        }

        private function parentTreeClick(event:MouseEvent):void {
            var descriptor:GoalTreeDescriptor = event.currentTarget.data;
            dispatchEvent(new AnalyzeEvent(new GoalDataAnalyzeSource(descriptor.id)));
        }

        private function gotTree():void {
            goalTree = goalService.createDataTree.lastResult as GoalTree;
            BrowserManager.getInstance().setTitle("Easy Insight - " + goalTree.name);
            processTree();
        }

        private function gotRefresh():void {
            goalTree = goalService.forceRefresh.lastResult as GoalTree;
            processTree();
        }

        private function processTree():void {
            if (goalTree.subTreeParents != null) {
                for each (var descriptor:GoalTreeDescriptor in goalTree.subTreeParents) {
                    var button:Button = new Button();
                    button.label = descriptor.name;
                    button.data = descriptor;
                    button.addEventListener(MouseEvent.CLICK, parentTreeClick);
                    parentsBox.addChild(button);
                }
            }
            _goalTreeNodes = goalTree.rootNode;
            myOrgChart.dataProvider = _goalTreeNodes;
            dispatchEvent(new DataServiceLoadingEvent(DataServiceLoadingEvent.LOADING_STOPPED));
        }

        private function onCredentials(event:CredentialsEvent):void {
            CredentialsCache.getCache().addCredentials(event.dataSourceID, event.credentials);
            receivedCredentialCount++;
            if (receivedCredentialCount == neededCredentialCount) {
                ProgressAlert.alert(this, "Refreshing the goal tree...", null, goalService.forceRefresh);
                goalService.forceRefresh.send(_goalTreeID, startChooser.selectedDate, endChooser.selectedDate, CredentialsCache.getCache().createCredentials());
            }
        }

        private function gotCredentials():void {
            var credentials:ArrayCollection = goalService.getCredentialsForGoalTree.lastResult as ArrayCollection;
            for each (var credential:CredentialRequirement in credentials) {
                var window:RuntimeCredentialsWindow = new RuntimeCredentialsWindow();
                window.requirement = credential;
                window.addEventListener(CredentialsEvent.CREDENTIALS_SAVED, onCredentials);
                PopUpManager.addPopUp(window, this, true);
                PopUpManager.centerPopUp(window);
            }
        }

        private function close():void {
            for each (var displayObject:DisplayObject in windows) {
                PopUpManager.removePopUp(displayObject as IFlexDisplayObject);
            }
            dispatchEvent(new AnalysisCloseEvent(this));
        }

        public function getContainer():Container {
            return this;
        }

        private function toFullScreen():void {
            Alert.show("You can return to normal view by hitting Escape.");
            addEventListener(KeyboardEvent.KEY_UP, onKey);
            currentState = "FullScreen";
        }

        private function onKey(event:KeyboardEvent):void {
            if (Keyboard.ESCAPE == event.keyCode) {
                currentState = "";
            }
        }

        public function refreshData():void {
            ProgressAlert.alert(this, "Determining needed credentials...", null, goalService.getCredentialsForGoalTree);
            goalService.getCredentialsForGoalTree.send(_goalTreeID, true, true, CredentialsCache.getCache().createCredentials());
        }]]></mx:Script>
    <mx:RemoteObject destination="goalService" id="goalService">
        <mx:method name="createDataTree" result="gotTree()"/>
        <mx:method name="getCredentialsForGoalTree" result="gotCredentials()"/>
        <mx:method name="forceRefresh" result="gotRefresh()"/>
    </mx:RemoteObject>
    <mx:HBox id="buttonBox" paddingLeft="10" paddingTop="10" paddingRight="10" width="100%" verticalAlign="middle">
        <mx:Button id="wrapButton" icon="{closeIcon}" click="close()" toolTip="Close" visible="{!_embedded}" label="Back" labelPlacement="bottom"/>
        <mx:Button id="refreshButton" icon="{refreshIcon}" click="refreshData()" toolTip="Refresh Data" visible="{!_embedded}" label="Refresh" labelPlacement="bottom"/>
        <mx:Button id="fullScreenButton" icon="{fullScreenIcon}" click="toFullScreen()" toolTip="View in Full Screen" label="Full Screen" labelPlacement="bottom"/>
        <mx:VBox id="parentsBox"/>
        <mx:HBox width="100%" horizontalAlign="center">
            <mx:DateField id="startChooser" selectedDate="{startDate}" change="onDatesChanged()"/>
            <mx:Spacer width="200"/>
            <mx:DateField id="endChooser" selectedDate="{endDate}" change="onDatesChanged()"/>
        </mx:HBox>
    </mx:HBox>
    <mx:HRule width="100%" id="hrule"/>
    <mx:VBox width="100%" height="100%" paddingRight="15" paddingTop="15" paddingLeft="15" paddingBottom="15">
        <mx:Canvas height="100%" width="100%" backgroundAlpha="0">
            <ilog:OrgChart id="myOrgChart" dataProvider="{_goalTreeNodes}"
                           width="100%" height="100%" minZoomLevel="1" maxZoomLevel="1" allowSelection="false">
                <ilog:itemRenderer>
                    <mx:Component>
                        <goals:GoalDataRenderer/>
                    </mx:Component>
                </ilog:itemRenderer>
            </ilog:OrgChart>
        </mx:Canvas>
    </mx:VBox>

</FullScreenPage>