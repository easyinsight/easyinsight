<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:orgchart="ilog.orgchart.*"
        creationComplete="blah()" width="100%" height="100%" doubleClickEnabled="true"
        initialize="onInitialize()">
    <mx:Metadata>
        [Event(name="solutionInstall", type="com.easyinsight.goals.SolutionInstallRequiredEvent")]
        [Event(name="splitTree", type="com.easyinsight.goals.SplitGoalTreeEvent")]
    </mx:Metadata>
    <mx:Script>
		<![CDATA[

        import mx.collections.ArrayCollection;
        import mx.managers.PopUpManager;

        [Bindable]
        private var _goalTreeNodes:GoalTreeNode;

        [Bindable]
        private var itemSelected:Boolean;

        [Bindable]
        private var goalAdminRendererFactory:GoalAdminRendererFactory = new GoalAdminRendererFactory();

        [Bindable]
        [Embed(source="../../../../assets/element_down.png")]
        private var newParentIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/element_add.png")]
        private var addNodeIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/element_copy.png")]
        private var copyNodeIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/element_delete.png")]
        private var deleteNodeIcon:Class;

        private var _dataSourceID:int;

        private function onInitialize():void {
            var factory:ClassFactory = new ClassFactory(GoalAdminRenderer2);
            factory.properties = {adminContainer: this };
            this.factory = factory;
        }

        [Bindable(event="dataSourceIDChanged")]
        public function get dataSourceID():int {
            return _dataSourceID;
        }

        public function set dataSourceID(value:int):void {
            if (_dataSourceID == value) return;
            _dataSourceID = value;
            dispatchEvent(new Event("dataSourceIDChanged"));
        }

        public function set goalTreeNodes(nodes:GoalTreeNode):void {
            this._goalTreeNodes = nodes;
            invalidateProperties();
        }

        private function newTree(event:GoalContextEvent):void {
            var goalTreeNode:GoalTreeNode = event.goalTreeNode;
            var window:NewSubTreeWindow = new NewSubTreeWindow();
            window.node = goalTreeNode;
            window.addEventListener(SplitGoalTreeEvent.SPLIT_TREE, onSplitTree);
            PopUpManager.addPopUp(window, this, true);
        }

        private function onSplitTree(event:SplitGoalTreeEvent):void {
            dispatchEvent(event);
        }

        private function blah():void {
            myOrgChart.addEventListener(OrganizationChartRefreshEvent.ORG_CHART_REFRESH, orgRefresh);
            myOrgChart.addEventListener(GoalContextEvent.NEW_PARENT, newParent);
            myOrgChart.addEventListener(GoalContextEvent.NEW_TREE, newTree);

        }

        override protected function commitProperties():void {
            super.commitProperties();
            myOrgChart.dataProvider = _goalTreeNodes;
        }

        private function orgRefresh(event:OrganizationChartRefreshEvent):void {
            myOrgChart.dataProvider = _goalTreeNodes;
            dispatchEvent(new GoalTreeChangedEvent());
        }

        private function newNode():void {
            var goalTreeNode:GoalTreeNode = getSelectedNode();
            var newChild:GoalTreeNode = new GoalTreeNode();
            goalTreeNode.children.addItem(newChild);
            newChild.parent = goalTreeNode;
            myOrgChart.dataProvider = _goalTreeNodes;
        }

        private function getSelectedNode():GoalTreeNode {
            return myOrgChart.selectedItems[0];
        }

        private function newParent(event:GoalContextEvent):void {
            var node:GoalTreeNode = event.goalTreeNode;
            var newParent:GoalTreeNode = new GoalTreeNode();
            var children:ArrayCollection = new ArrayCollection();
            children.addItem(node);
            newParent.children = children;
            if (node == this._goalTreeNodes) {
                node.parent = newParent;
                _goalTreeNodes = newParent;
            } else {
                var existingParent:GoalTreeNode = node.parent;
                newParent.parent = existingParent;
                var index:int = existingParent.children.getItemIndex(node);
                existingParent.children.removeItemAt(index);
                existingParent.children.addItemAt(newParent, index);
                node.parent = newParent;
            }
            myOrgChart.dataProvider = _goalTreeNodes;
        }

        private function copyNode():void {
            var goalTreeNode:GoalTreeNode = getSelectedNode();

        }

        private function deleteNode():void {
            var goalTreeNode:GoalTreeNode = getSelectedNode();
            var parent:GoalTreeNode = goalTreeNode.parent;
            parent.children.removeItemAt(parent.children.getItemIndex(goalTreeNode));
            if (goalTreeNode.children != null) {
                for each (var childNode:GoalTreeNode in goalTreeNode.children) {
                    childNode.parent = parent;
                    parent.children.addItem(childNode);
                }
            }
            myOrgChart.dataProvider = _goalTreeNodes;
        }

        private function onOrgClick():void {
            itemSelected = myOrgChart.selectedItems.length > 0;
        }

        /*private function onItemDoubleClick(event:OrgChartEvent):void {
         //var item:OrgChartItem = event.item as OrgChartItem;
         var node:GoalTreeNode = event.item as GoalTreeNode;
         var goalNodeWindow:GoalNodeAdminWindow = new GoalNodeAdminWindow();
         goalNodeWindow.goalTreeNode = node;
         goalNodeWindow.addEventListener(GoalEditEvent.GOAL_EDIT, goalEdited);
         PopUpManager.addPopUp(goalNodeWindow, this, true);
         goalNodeWindow.x = 20;
         goalNodeWindow.y = 20;
         }*/

        private function goalEdited(event:GoalEditEvent):void {
            dispatchEvent(new GoalTreeChangedEvent());
        }

        [Bindable]
        private var factory:IFactory;
        ]]>
    </mx:Script>
    <mx:HBox width="100%" backgroundColor="#BDC5E2" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
        <mx:Label text="Right click on the KPIs in the tree below to manipulate the tree structure or edit properties."/>
    </mx:HBox>
    <mx:Canvas height="100%" width="100%">
        <orgchart:OrgChart id="myOrgChart"
                       width="100%" height="100%" minZoomLevel="1" maxZoomLevel="1" allowSelection="true" allowMultipleSelection="false"
                       allowNavigation="true" layoutXPadding="50" itemClick="onOrgClick()" itemRenderer="{factory}"/>
    </mx:Canvas>
</mx:VBox>
