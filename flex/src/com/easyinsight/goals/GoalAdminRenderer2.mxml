<?xml version="1.0" encoding="utf-8"?>
<OrgChartItemRendererBase xmlns="com.easyinsight.goals.*" xmlns:mx="http://www.adobe.com/2006/mxml"
	borderStyle="solid" borderColor="#CCCCCC" cornerRadius="10" creationComplete="setup()" implements="com.easyinsight.goals.IGoalRenderer">
	<mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.PopupMenuFactory;
        import com.easyinsight.icons.IconSelectionEvent;
        import com.easyinsight.icons.IconSelectionWindow;
        import com.easyinsight.kpi.KPI;
        import com.easyinsight.listing.DataFeedDescriptor;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.solutions.Solution;
        import com.easyinsight.util.PopUpUtil;

        import mx.controls.DataGrid;
        import mx.controls.List;
        import mx.core.IUIComponent;
        import mx.events.FlexEvent;
        import mx.managers.DragManager;
        import mx.managers.PopUpManager;
        import mx.events.DragEvent;
        import mx.collections.ArrayCollection;

        import ilog.orgchart.OrgChartItem;

        [Bindable]
        [Embed(source="../../../../assets/navigate_cross.png")]
        private var deleteIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/add.png")]
        private var addIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/pencil.png")]
        private var editIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/pencil.png")]
        private var chartIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/branchx16.png")]
        private var subTreeIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/data_blue_x16.png")]
        private var bindingIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/chart_pie2.png")]
        private var associationIcon:Class;

        private var orgChartItem:OrgChartItem;

        [Bindable]
        private var goalIcon:String;

        [Bindable]
        private var goalIconExists:Boolean;

        [Bindable]
        private var _goalName:String;

        public var blah:String;

        [Bindable]
        private var nodeText:String;

        [Bindable]
        private var rootNode:Boolean = true;

        [Bindable]
        private var subTreePresent:Boolean = false;

        [Bindable]
        private var showBinding:Boolean = false;

        [Bindable]
        private var showAssociations:Boolean = false;

        public function set goalName(val:String):void {
            _goalName = val;
            dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
          }

        private function setup():void {
            this.addEventListener(DragEvent.DRAG_ENTER, dragEnterHandler);
			this.addEventListener(DragEvent.DRAG_DROP, dragDropHandler);
			this.addEventListener(DragEvent.DRAG_OVER, dragOverHandler);
            this.addEventListener(MouseEvent.CLICK, onClick);
        }

        private function onClick(event:MouseEvent):void {
            focusManager.setFocus(goalNameInput);
        }

        private function dragEnterHandler(event:DragEvent):void {
            DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
        }

        private function dragDropHandler(event:DragEvent):void {
            var goalTreeNode:GoalTreeNode = orgChartItem.data as GoalTreeNode;
            var obj:Object;
            if (event.dragInitiator is List) {
                var list:List = List(event.dragInitiator);
                obj = list.selectedItem;
            } else if (event.dragInitiator is DataGrid) {
                var dataGrid:DataGrid = DataGrid(event.dragInitiator);
                obj = dataGrid.selectedItem;
            } else {
                var dragNode:GoalTreeNode = event.dragSource.dataForFormat("GoalTreeNode") as GoalTreeNode;
            }
           /* if (obj is Solution) {
                var solution:Solution = obj as Solution;
                var goalSolution:GoalSolution = new GoalSolution();
                goalSolution.solutionID = solution.solutionID;
                goalSolution.solutionName = solution.name;
                goalSolution.solutionArchiveName = solution.solutionArchiveName;
                goalTreeNode.associatedSolutions.addItem(goalSolution);
            } else if (obj is DataFeedDescriptor) {
                var descriptor:DataFeedDescriptor = obj as DataFeedDescriptor;
                var goalFeed:GoalFeed = new GoalFeed();
                goalFeed.feedID = descriptor.dataFeedID;
                goalFeed.feedName = descriptor.name;
                goalTreeNode.associatedFeeds.addItem(goalFeed);
            } else if (obj is InsightDescriptor) {
                var analysisDefinition:InsightDescriptor = obj as InsightDescriptor;
                goalTreeNode.associatedInsights.addItem(analysisDefinition);
            } else */
            if (obj is GoalTreeDescriptor) {
                var goalTreeDescriptor:GoalTreeDescriptor = obj as GoalTreeDescriptor;
                var window:GoalTreeDropWindow = new GoalTreeDropWindow();
                window.goalTreeNode = goalTreeNode;
                window.goalTreeDescriptor = goalTreeDescriptor;
                window.addEventListener(OrganizationChartRefreshEvent.ORG_CHART_REFRESH, passThrough);
                window.addEventListener(SolutionInstallRequiredEvent.SOLUTION_INSTALL, passThrough);
                window.addEventListener(SubTreeInstallEvent.SUB_TREE_INSTALL, subTreeInstall);
                PopUpManager.addPopUp(window, this, true);
                PopUpUtil.centerPopUp(window);
            } else if (obj is KPI) {
                var kpi:KPI = obj as KPI;
                goalTreeNode.kpi = kpi;
                goalTreeNode.iconImage = kpi.iconImage;
                goalTreeNode.name = kpi.name;
            }
            showBinding = goalTreeNode.kpi != null;
            /*showAssociations = goalTreeNode.associatedFeeds.length > 0 || goalTreeNode.associatedInsights.length > 0 ||
                               goalTreeNode.associatedSolutions.length > 0;*/
            dispatchEvent(new GoalTreeChangedEvent());
        }

        private function subTreeInstall(event:SubTreeInstallEvent):void {
            subTreePresent = true;
            this.orgChartItem = data as OrgChartItem;
            var goalTreeNode:GoalTreeNode = orgChartItem.data as GoalTreeNode;
            defineContextMenu(goalTreeNode);
        }

        private function passThrough(event:Event):void {
            dispatchEvent(event);
        }

        private function dragOverHandler(event:DragEvent):void {
            DragManager.showFeedback(DragManager.MOVE);	
        }

        private function moveNode(event:ContextMenuEvent):void {
            dispatchEvent(new GoalContextEvent(GoalContextEvent.MOVE_GOAL, orgChartItem.data as GoalTreeNode, this));
        }

        private function newGoalTree(event:ContextMenuEvent):void {
            dispatchEvent(new GoalContextEvent(GoalContextEvent.NEW_TREE, orgChartItem.data as GoalTreeNode, this));
        }

        override public function set data(value:Object):void {
            this.orgChartItem = value as OrgChartItem;
            var goalTreeNode:GoalTreeNode = orgChartItem.data as GoalTreeNode;
            if (goalTreeNode != null) {
                goalTreeNode.setRenderer(this);
                //BindingUtils.bindProperty(goalTreeNode, "name", goalNameInput, "text");
                if (goalTreeNode.parent == null) {
                    rootNode = false;
                }
                _goalName = goalTreeNode.name == null ? "" : new String(goalTreeNode.name);
                goalIcon = "/app/assets/icons/16x16/" + goalTreeNode.iconImage;
                goalIconExists = goalTreeNode.iconImage != null && goalTreeNode.iconImage != "";
                nodeText = "This goal is bound to a data source.";
                subTreePresent = goalTreeNode.subTreeID > 0;
                showBinding = goalTreeNode.kpi != null;
                /*showAssociations = goalTreeNode.associatedFeeds.length > 0 || goalTreeNode.associatedInsights.length > 0 ||
                                   goalTreeNode.associatedSolutions.length > 0;*/
                defineContextMenu(goalTreeNode);
            }
        }

        private function deleteSubTree(event:ContextMenuEvent):void {
            subTreePresent = false;
            this.orgChartItem = data as OrgChartItem;
            var goalTreeNode:GoalTreeNode = orgChartItem.data as GoalTreeNode;
            goalTreeNode.subTreeID = 0;
        }

        private function defineContextMenu(goalTreeNode:GoalTreeNode):void {

            var items:Array = [];
            var editItem:ContextMenuItem = new ContextMenuItem("Edit Goal", true);
            editItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, editNode);
            items.push(editItem);
            var createChildItem:ContextMenuItem = new ContextMenuItem("Create Child", true);
            createChildItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, addChildNode);
            items.push(createChildItem);
            if (goalTreeNode.parent != null || (goalTreeNode.children != null && goalTreeNode.children.length > 0)) {
                var deleteItem:ContextMenuItem = new ContextMenuItem("Delete Goal", true);
                deleteItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, deleteSelf);
                items.push(deleteItem);
            }
            var newParentItem:ContextMenuItem = new ContextMenuItem("Insert New Parent", true);
            newParentItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, newParent);
            items.push(newParentItem);
            /*var moveItem:ContextMenuItem = new ContextMenuItem("Move", true);
            moveItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, moveNode);
            items.push(moveItem);*/
            /*if (goalTreeNode.parent != null) {
                var newTreeItem:ContextMenuItem = new ContextMenuItem("Create New Goal Tree", true);
                newTreeItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, newGoalTree);
                items.push(newTreeItem);
            }*/
            if (goalTreeNode.subTreeID > 0) {
                var removeItem:ContextMenuItem = new ContextMenuItem("Remove Sub Tree", true);
                removeItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, deleteSubTree);
                items.push(removeItem);
            }
            PopupMenuFactory.assignMenu(this, items);
        }

        override public function get data():Object {
            return this.orgChartItem;
        }

        private function deleteSelf(event:ContextMenuEvent):void {
            var goalTreeNode:GoalTreeNode = orgChartItem.data as GoalTreeNode;
            var parent:GoalTreeNode = goalTreeNode.parent;
            parent.children.removeItemAt(parent.children.getItemIndex(goalTreeNode));
            if (goalTreeNode.children != null) {
                for each (var childNode:GoalTreeNode in goalTreeNode.children) {
                    childNode.parent = parent;
                    parent.children.addItem(childNode);
                }
            }
            dispatchEvent(new OrganizationChartRefreshEvent());
        }

        private function newParent(event:ContextMenuEvent):void {
            dispatchEvent(new GoalContextEvent(GoalContextEvent.NEW_PARENT, orgChartItem.data as GoalTreeNode, this));
        }

        private function copyNode():void {
            //var goalTreeNode:GoalTreeNode = getSelectedNode();

        }

        private function addChildNode(event:ContextMenuEvent):void {
            var goalTreeNode:GoalTreeNode = orgChartItem.data as GoalTreeNode;
            if (goalTreeNode.children == null) {
                goalTreeNode.children = new ArrayCollection();
            }
            var newChild:GoalTreeNode = new GoalTreeNode();
            goalTreeNode.children.addItem(newChild);
            newChild.parent = goalTreeNode;
            dispatchEvent(new OrganizationChartRefreshEvent(orgChartItem));
        }

        override protected function configureLevelOfDetails():void {
            //here we customize the visibility of children depending
            //on the current level of detail

            //As simple example we set 2 layers
            //At the first level of detail, only the background is visible

            //Layer1 is visible in level of detail 1 and layer 2 at level 2.
            //With this API you can share elements to be visible in several levels.

            //By default 3 levels of detail are specified, this can be customized
            //by the OrgChart.lodLevels property.

            //setLevelsOfDetails(layer1, [1]);
            setLevelsOfDetails(layer2, [2]);
        }

        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {

            super.updateDisplayList(unscaledWidth, unscaledHeight);

            var theData:OrgChartItem = data as OrgChartItem;

            if (theData != null) {

                //Have a different style depending on the state of the rendered item.
                //here the background of the item changes if the item is selected and/or highlighted.
                var isHightlighted:Boolean = theData.orgChart.isItemHighlighted(theData);
                var isSelected:Boolean = theData.orgChart.isItemSelected(theData);

                var color:uint;
                if (isHightlighted) {
                    color = isSelected ? 0x8695FF : 0xFEFBBA;
                } else {
                    color = isSelected ? 0x637DFF : 0xEAF1F6;
                }

                setStyle("backgroundColor", color);
            }
        }

        private function assignIcon():void {
            var iconWindow:IconSelectionWindow = IconSelectionWindow(PopUpManager.createPopUp(this, IconSelectionWindow, true));
            iconWindow.addEventListener(IconSelectionEvent.ICON_SELECTION, iconSelected);
            iconWindow.addEventListener(IconSelectionEvent.ICON_REMOVED, iconRemoved);
            PopUpUtil.centerPopUp(iconWindow);
        }

        private function iconSelected(event:IconSelectionEvent):void {
            var goalTreeNode:GoalTreeNode = orgChartItem.data as GoalTreeNode;
            goalTreeNode.iconImage = event.icon.path;
            goalIcon = "/app/assets/icons/16x16/" + event.icon.path;
        }

        private function iconRemoved(event:IconSelectionEvent):void {
            var goalTreeNode:GoalTreeNode = orgChartItem.data as GoalTreeNode;
            goalTreeNode.iconImage = null;
            goalIcon = null;
        }

        private function editNode(event:Event):void {
            var goalTreeNode:GoalTreeNode = orgChartItem.data as GoalTreeNode;
            goalTreeNode.updateName();
            var kpiWindow:GoalKPIWindow = new GoalKPIWindow();
            kpiWindow.goalTreeNode = goalTreeNode;
            kpiWindow.addEventListener(GoalEditEvent.GOAL_EDIT, goalEdited);
            PopUpManager.addPopUp(kpiWindow, this, true);
            PopUpUtil.centerPopUp(kpiWindow);
        }

        private function goalEdited(event:GoalEditEvent):void {
            event.currentTarget.removeEventListener(GoalEditEvent.GOAL_EDIT, goalEdited);
            var goalTreeNode:GoalTreeNode = orgChartItem.data as GoalTreeNode;
            goalNameInput.text = goalTreeNode.name;
            showBinding = goalTreeNode.kpi != null;
            dispatchEvent(new GoalTreeChangedEvent());
        }

        private function onNameChange():void {
            var goalTreeNode:GoalTreeNode = orgChartItem.data as GoalTreeNode;
            goalTreeNode.setBlah(goalNameInput.text);
            dispatchEvent(new GoalTreeChangedEvent());
            //goalNameInput.setFocus();
        }

        private function subTreeConfiguration():void {
            var goalTreeNode:GoalTreeNode = orgChartItem.data as GoalTreeNode;
            var window:SubTreeConfigWindow = new SubTreeConfigWindow();
            window.addEventListener(SubTreeInstallEvent.SUB_TREE_INSTALL, uninstall);
            window.goalTreeNode = goalTreeNode;
            window.subTreeName = goalTreeNode.subTreeName;
            PopUpManager.addPopUp(window, this);
            PopUpUtil.centerPopUp(window);
        }

        private function uninstall(event:SubTreeInstallEvent):void {
            subTreePresent = false;
        }
		]]>
	</mx:Script>
	<mx:VBox id="layer2" verticalAlign="middle" paddingLeft="10" 
           paddingRight="10" paddingTop="0" paddingBottom="0" width="140" height="60" horizontalAlign="center" mouseChildren="true">
		<mx:HBox width="100%">
            <mx:HBox horizontalAlign="center" width="100%">
                <mx:Box borderStyle="solid" borderThickness="1" click="assignIcon()" toolTip="Click to assign or change icon...">
                    <mx:Image id="iconImage" source="{goalIcon}" visible="{goalIconExists}"/>
                </mx:Box>
                <mx:Image source="{bindingIcon}" toolTip="{nodeText}" visible="{showBinding}"/>
                <mx:Image source="{associationIcon}" toolTip="Additional entities are associated to this goal." visible="{showAssociations}"/>
                <mx:Image source="{subTreeIcon}" toolTip="Navigate into Sub Tree" click="subTreeConfiguration()" visible="{subTreePresent}"/>
            </mx:HBox>
        </mx:HBox>
        <mx:HBox>
            <mx:TextInput id="goalNameInput" text="{_goalName}" fontSize="10" height="20" width="120" editable="true" change="onNameChange()"/>
        </mx:HBox>
	</mx:VBox>
</OrgChartItemRendererBase>
