<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" mouseWheel="onMouseWheel(event)" 
     	mouseDown="onMouseDown(event)" keyUp="onKeyHandler(event)" creationComplete="blah(event)">
 	<mx:Metadata>
 		[DefaultProperty("containedObject")]
 	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import mx.events.ResizeEvent;
			private var mouseIsDown:Boolean = false;
		    private var mouseXRef:Number;
		    private var mouseYRef:Number;
		    private var xRatio:Number;
		    private var yRatio:Number;
		    private var initialWidth:uint;
		    private var initialHeight:uint;
		    private var maxZoom:Number = 8;
		    private var zoomIntervalWidth:uint;
		    private var zoomIntervalHeight:uint;
		    private var zoomIntervals:Number = 0;
		    
		    private var myChart:DisplayObject;
		    
		    public function set containedObject(containedObject:DisplayObject):void {
		    	this.myChart = containedObject;
		    	//scrollPanel.addChild(this.myChart);		    	
		    }
		    
		    private function blah(event:Event):void {     	
		     	xRatio = myChart.width / scrollPanel.width;
		     	yRatio = myChart.height / scrollPanel.height;
		     	initialWidth = myChart.width * maxZoom;
		     	initialHeight = myChart.height * maxZoom;
		     	zoomIntervalWidth = myChart.width / 2;
		     	zoomIntervalHeight = myChart.height / 2;
		     }
		     
		     private function mouseLeft(event:Event):void {
		     	stopTracking();
		     }
		     
		     private function onMouseDown(event:MouseEvent):void {
		     	mouseIsDown = true;
		     	mouseXRef = this.mouseX;
		     	mouseYRef = this.mouseY;
		     	this.systemManager.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
		        this.systemManager.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
		        this.systemManager.stage.addEventListener(Event.MOUSE_LEAVE, mouseLeft);     	
		     }
		     
		     private function stopTracking():void {
		     	mouseIsDown = false;
		     	this.systemManager.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
		        this.systemManager.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);
		        this.systemManager.stage.removeEventListener(Event.MOUSE_LEAVE, mouseLeft);
		     }
		     
		     private function onMouseUp(event:MouseEvent):void {
		     	stopTracking();
		     }
		     
		     private function onMouseMove(event:MouseEvent):void {
		     	if (mouseIsDown) {
		     		var xDelta:int = (this.mouseX - mouseXRef) * xRatio;
		     		mouseXRef = this.mouseX;
		     		//if (xDelta > 5 || xDelta < -5) {   	
		     			scrollPanel.horizontalScrollPosition += (xDelta * 3);
		     		//}
		     		var yDelta:int = (this.mouseY - mouseYRef) * yRatio;
		     		mouseYRef = this.mouseY;
		     		//if (yDelta > 5 || yDelta < -5) {
		     			scrollPanel.verticalScrollPosition += (yDelta * 3);
		     		//}    		
		     	}     	
		     }
		     
		     private function onMouseWheel(event:MouseEvent):void {
		     	//var originX:Number = myChart.stage.mouseX;
		        //var originY:Number = myChart.stage.mouseY;
		        var newWidth:int;
		        var newHeight:int;
		        if (event.delta > 0) {                    
		            // zoom in
		            // must be > 400 AND < 1200, right
		            //newWidth = myChart.width * 6/5;
		            //newHeight = myChart.height * 6/5;
		            zoomIn();                        
		        } else {
		            // zoom out                    
		            //newWidth = myChart.width * 5/6;
		            //newHeight = myChart.height * 5/6;
		            zoomOut();            
		        }
		        // > 400...
		        /*newWidth = Math.max(scrollPanel.width, newWidth);
				// and < 1200
				newWidth = Math.min(initialWidth, newWidth);
				newHeight = Math.max(scrollPanel.height, newHeight);
				newHeight = Math.min(initialHeight, newHeight);
				myChart.width = newWidth;
				myChart.height = newHeight;  */    
		     }
		     
		     private function zoomIn():void {
		     	var newWidth:int;
		        var newHeight:int;
		        zoomIntervals++;
		        zoomIntervals = Math.min(maxZoom, zoomIntervals);
		        scrollSlider.value = zoomIntervals;        
		        newWidth = scrollPanel.width + (zoomIntervalWidth * zoomIntervals);
		        newHeight = scrollPanel.height + (zoomIntervalHeight * zoomIntervals);
		        newWidth = Math.min(initialWidth, newWidth);
		        newHeight = Math.min(initialHeight, newHeight);
		        myChart.width = newWidth;
		        myChart.height = newHeight;
		         
		     }
		     
		     private function zoomOut():void {
		     	var newWidth:int;
		        var newHeight:int;   
		        zoomIntervals--;
		        zoomIntervals = Math.max(0, zoomIntervals);
		        scrollSlider.value = zoomIntervals;     
		        newWidth = scrollPanel.width + (zoomIntervalWidth * zoomIntervals);
		        newHeight = scrollPanel.height + (zoomIntervalWidth * zoomIntervals);
		        newWidth = Math.max(scrollPanel.width, newWidth);
		        newHeight = Math.max(scrollPanel.height, newHeight);
		        myChart.width = newWidth;
		        myChart.height = newHeight;
		        
		     }
		     
		     private function changeSize():void {
		     	var newWidth:int;
		        var newHeight:int;
		        zoomIntervals = scrollSlider.value;
		        newWidth = scrollPanel.width + (zoomIntervalWidth * zoomIntervals);
		        newHeight = scrollPanel.height + (zoomIntervalWidth * zoomIntervals);
		        newWidth = Math.max(scrollPanel.width, newWidth);
		        newHeight = Math.max(scrollPanel.height, newHeight);
		        myChart.width = newWidth;
		        myChart.height = newHeight;	
		     }
		     
		     private function onKeyHandler(event:KeyboardEvent):void {
		     	if (event.keyCode == Keyboard.PAGE_DOWN) {
		     		zoomIn();
		     	} else if (event.keyCode == Keyboard.PAGE_UP) {
		     		zoomOut();
		     	}
		     } 
		     
		     private function scrollPanelBuilt():void {
		     	scrollPanel.addChild(this.myChart);
		     	this.myChart.addEventListener(ResizeEvent.RESIZE, blah);
		     }  
		]]>
	</mx:Script>
	
  	<mx:Canvas id="scrollPanel" width="100%" height="100%" creationComplete="scrollPanelBuilt()">
  	</mx:Canvas>
  	<mx:VSlider id="scrollSlider"
                    dataTipPlacement="bottom" 
                    minimum="0" maximum="8" value="0" 
                    tickColor="black" 
                    snapInterval="1" tickInterval="1"
                    labels="['1x', '8x']"  
                    allowTrackClick="true" 
                    liveDragging="true" 
                    change="changeSize();" x="350" y="20"/>  
</mx:Canvas>
