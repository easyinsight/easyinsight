<?xml version="1.0" ?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" label="Export (F5)" icon="@Embed(source='../../../../assets/tables_add.png')" paddingLeft="10"
             paddingTop="10" paddingBottom="10" paddingRight="10" creationComplete="onCreation()">
    <mx:states>
        <mx:State name="NotLoggedIn">            
            <mx:RemoveChild target="{createFeedButton}"/>
        </mx:State>
        <mx:State name="Professional">

        </mx:State>
        <mx:State name="Group" basedOn="Professional">

        </mx:State>
        <mx:State name="Individual" basedOn="Group">
            <mx:RemoveChild target="{createFeedButton}"/>
        </mx:State>
        <mx:State name="Free" basedOn="Individual">

        </mx:State>
    </mx:states>
    <mx:Script>
    <![CDATA[
        import com.easyinsight.account.Account;
        import com.easyinsight.analysis.feed.AnalysisBasedFeedCreationWindow;
        import com.easyinsight.framework.LoginEvent;
        import com.easyinsight.framework.User;
        import com.easyinsight.util.PopUpUtil;

        import mx.controls.Alert;
        import mx.managers.PopUpManager;

        private function onLogin(event:LoginEvent):void {
            setState();
            User.getEventNotifier().removeEventListener(LoginEvent.LOGIN, onLogin);
        }

        private function setState():void {
            switch (User.getInstance().getAccountType()) {
                case Account.PROFESSIONAL:
                    currentState = "Professional";
                    break;
                case Account.GROUP:
                    currentState = "Group";
                    break;
                case Account.INDIVIDUAL:
                    currentState = "Individual";
                    break;
                case Account.FREE:
                    currentState = "Free";
                    break;
            }
        }

        private function onCreation():void {
            if (User.getInstance() == null) {
                currentState = "NotLoggedIn";
                User.getEventNotifier().addEventListener(LoginEvent.LOGIN, onLogin);
            } else {
                setState();
            }
        }

        private var _analysisDefinition:AnalysisDefinition;

        [Bindable]
        private var _dataView:DataViewFactory;

        [Bindable]
        private var _exportVisible:Boolean;


        public function set exportVisible(value:Boolean):void {
            _exportVisible = value;
        }

        public function set dataView(value:DataViewFactory):void {
            _dataView = value;
        }

        [Bindable(event="analysisDefinitionChanged")]
        public function get analysisDefinition():AnalysisDefinition {
            return _analysisDefinition;
        }

        public function set analysisDefinition(value:AnalysisDefinition):void {
            if (_analysisDefinition == value) return;
            _analysisDefinition = value;
            dispatchEvent(new Event("analysisDefinitionChanged"));
        }

        private function createFeed():void {
            if (analysisDefinition.analysisID == 0) {
                Alert.show("You need to save the report first.");
            } else {
                var feedCreationWindow:AnalysisBasedFeedCreationWindow = AnalysisBasedFeedCreationWindow(PopUpManager.
                        createPopUp(this, AnalysisBasedFeedCreationWindow, true));
                feedCreationWindow.analysisDefinition = analysisDefinition;
                PopUpUtil.centerPopUp(feedCreationWindow);
            }
        }

        private function embed():void {
            if (analysisDefinition.analysisID > 0) {
                var embedWindow:EmbedInsightWindow = EmbedInsightWindow(PopUpManager.createPopUp(this, EmbedInsightWindow));
                embedWindow.analysisID = analysisDefinition.analysisID;
                embedWindow.reportType = analysisDefinition.reportType;
                embedWindow.dataSourceID = analysisDefinition.dataFeedID;
                embedWindow.reportName = analysisDefinition.name;
                embedWindow.reportHeight = 346;
                embedWindow.reportWidth = 450;
                PopUpUtil.centerPopUp(embedWindow);
            } else {
                Alert.show("You need to save the report first.");
            }
        }

        private function exportPNG():void {
            new PNGCreator().draw(_dataView.getCoreView());
        }

        private function exportExcel():void {
            _dataView.updateExportMetadata();
            new ExcelCreator().exportExcel(analysisDefinition, this);
        }

        private function netvibes():void {
            flash.net.navigateToURL(new URLRequest("http://www.netvibes.com/subscribe.php?module=UWA&moduleUrl=" + escape("https://www.easy-insight.com/app/widgets/UWAWidget.html?insightCombo=" + escape(String(analysisDefinition.analysisID)) + "&reportName=" + escape(analysisDefinition.name) + "&reportType=" + escape(String(analysisDefinition.type)) + "&dataSourceID=" + escape(String(analysisDefinition.dataFeedID)))));
        }

        private function igoogle():void {
            flash.net.navigateToURL(new URLRequest("http://www.google.com/ig/add?moduleurl=" + escape("http://www.netvibes.com/api/uwa/compile/google.php?moduleUrl=" + escape("https://www.easy-insight.com/app/widgets/UWAWidget.html?insightCombo=" + escape(String(analysisDefinition.analysisID)) + "&reportName=" + escape(analysisDefinition.name) + "&reportType=" + escape(String(analysisDefinition.type)) + "&dataSourceID=" + escape(String(analysisDefinition.dataFeedID))))));
        }
        ]]>
    </mx:Script>
    <mx:HBox >
        <mx:Button id="createFeedButton" toolTip="Create Derived Data Source" click="createFeed()"
                   icon="@Embed(source='../../../../assets/data_add.png')"/>
        <mx:Button id="embedButton" toolTip="Embed" click="embed()"
                   icon="@Embed(source='../../../../assets/link.png')"/>
        <mx:Button id="imageButton" toolTip="Export PNG Image"
                   icon="@Embed(source='../../../../assets/camera.png')" click="exportPNG()"/>
        <mx:Button id="excelButton" toolTip="Export to Excel"
                   icon="@Embed(source='../../../../assets/table.png')" click="exportExcel()"/>

        <mx:Button id="netvibesButton" toolTip="Add to netvibes"
                   icon="@Embed(source='../../../../assets/uwa-netvibes.png')" click="netvibes()"/>
        <mx:Button id="igoogleButton" toolTip="Add to iGoogle"
                   icon="@Embed(source='../../../../assets/uwa-google.png')" click="igoogle()"/>
    </mx:HBox>
</mx:HBox>