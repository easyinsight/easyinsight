<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:crosstab="com.easyinsight.analysis.crosstab.*" width="100%"
           height="100%" implements="com.easyinsight.analysis.IReportRenderer" horizontalScrollPolicy="off">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisMeasure;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.list.SizeOverrideEvent;

        import mx.collections.ArrayCollection;
        import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
        import mx.events.FlexEvent;
        import mx.formatters.Formatter;

        private var dimension1:AnalysisItem;

        private var crosstabDefinition:CrosstabDefinition;

        public function renderReport(data:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            crosstabDefinition = analysisDefinition as CrosstabDefinition;
            if (data.length > 3) {
                headerBackgroundColor = crosstabDefinition.headerBackgroundColor;
                summaryBackgroundColor = crosstabDefinition.summaryBackgroundColor;
                var translated:ArrayCollection = new ArrayCollection();
                for each (var row:CrosstabMapWrapper in data) {
                    translated.addItem(row.map);
                }
                var columnCount:int = additionalProperties["columnCount"];
                var columns:Array = [];

                //var measureFormatter:Formatter = AnalysisMeasure(crosstabDefinition.measures.getItemAt(0)).getFormatter();



                for (var i:int = 0; i < columnCount; i++) {
                    var maxWidth:int = 0;
                    for each (var testRow:Object in translated) {
                        var crosstabValue:CrosstabValue = testRow[String(i)];
                        if (crosstabValue == null) {
                            continue;
                        }
                        var text:String;
                        if (crosstabValue.header == null) {
                            if (crosstabValue.measure == null) {
                                text = "";
                            } else {
                                text = crosstabValue.measure.getFormatter().format(crosstabValue.value);
                            }
                        } else if (crosstabValue.headerLabel) {
                            text = String(crosstabValue.value.getValue());
                        } else {
                            text = crosstabValue.header.getFormatter().format(crosstabValue.value);
                        }
                        var metrics:TextLineMetrics = dataGrid.measureText(text);
                        maxWidth = Math.max(metrics.width + metrics.x + metrics.x + 4, maxWidth);
                        maxWidth = Math.min(maxWidth, 300);
                    }
                    var column:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                    var factory:ClassFactory = new ClassFactory(CrosstabCellRenderer);
                    factory.properties = { cellProperty: String(i), report: crosstabDefinition };
                    column.dataField = String(i);
                    column.width = maxWidth;
                    column.itemRenderer = factory;
                    columns.push(column);
                }

                var add:int = crosstabDefinition.measures.length > 1 ? 1 : 0;

                dataGrid.headerRows = crosstabDefinition.rows.length;
                dataGrid.rowItems = crosstabDefinition.columns.length + 1 + add;
                /*dataGrid.lockedColumnCount = crosstabDefinition.rows.length;
                dataGrid.lockedRowCount = crosstabDefinition.columns.length + 1;*/
                dataGrid.columns = columns;
                var reportWidth:int = 1;
                for each (var col:AdvancedDataGridColumn in columns) {
                    reportWidth += (col.width + 1);
                }
                var endWidth:int = 0;
                if (reportWidth < this.width) {
                    var delta:int = (this.width - reportWidth);
                    delta = Math.min(delta, 300);
                    var perColumnAdd:int = (delta) / columns.length;
                    for each (var colAdd:AdvancedDataGridColumn in columns) {
                        colAdd.width += perColumnAdd;
                        endWidth += colAdd.width;
                    }
                }
                //dataGrid.maxWidth = this.width;
                if (endWidth > 0) {
                    dataGrid.x = (this.width - endWidth) / 2;
                } else {
                    dataGrid.x = 0;
                }
                if (additionalProperties["preferredSize"]) {
                    box.verticalScrollPolicy = "off";
                    dataGrid.addEventListener(FlexEvent.UPDATE_COMPLETE, onUpdateComplete);
                }
                dataGrid.height = (translated.length) * 22 + 4;
                dataGrid.dataProvider = translated;

            }
        }

        private function onUpdateComplete(event:FlexEvent):void {
            event.currentTarget.removeEventListener(FlexEvent.UPDATE_COMPLETE, onUpdateComplete);
            dispatchEvent(new SizeOverrideEvent(-1, event.currentTarget.height));
        }

        public function updateExportMetadata():void {
        }

        private function passThrough(event:Event):void {
            dispatchEvent(event);
        }

        public function preserveValues():Boolean {
            return false;
        }

        [Bindable]
        private var headerBackgroundColor:uint;

        [Bindable]
        private var summaryBackgroundColor:uint;

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }]]></mx:Script>
    <mx:Canvas id="box" verticalScrollPolicy="auto" horizontalScrollPolicy="auto" width="100%" height="100%">
        <crosstab:CrosstabDataGrid id="dataGrid" fontFamily="Tahoma" horizontalGridLines="true" verticalGridLines="true" headerHeight="0"
            rowHeight="22" horizontalScrollPolicy="off" headerBackgroundColor="{headerBackgroundColor}" summaryBackgroundColor="{summaryBackgroundColor}"/>
    </mx:Canvas>
</mx:Module>