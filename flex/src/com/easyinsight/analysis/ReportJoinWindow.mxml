<?xml version="1.0"?>
<util:EISlimWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*"
        creationComplete="onCreation()">
    <mx:Script><![CDATA[
        import com.easyinsight.feedassembly.CompositeFeedConnection;
        import com.easyinsight.feedassembly.ConnectionControls;
        import com.easyinsight.feedassembly.ConnectionDeleteEvent;
        import com.easyinsight.feedassembly.DSPickJoinWindow;
        import com.easyinsight.feedassembly.JoinSelectionEvent;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.util.PopUpUtil;

        import com.easyinsight.util.ProgressAlert;

        import mx.collections.ArrayCollection;
        import mx.managers.PopUpManager;

        [Bindable]
        private var connections:ArrayCollection;

        private var dataSources:ArrayCollection;

        public var dataSourceID:int;
        public var fields:ArrayCollection;

        public var startJoins:ArrayCollection;

        private function onCreation():void {
            controlsFactory = new ClassFactory(ConnectionControls);
            ClassFactory(controlsFactory).properties = { fields: fields };
            addEventListener(ConnectionDeleteEvent.CONNECTION_DELETE, onConnectionDelete);
            ProgressAlert.alert(this, "Retrieving join information from data source...", null, analysisService.determineOverrides);
            analysisService.determineOverrides.send(dataSourceID, fields);
            /*if (startJoins == null || startJoins.length == 0) {

            } else {
                connections = new ArrayCollection();
                for each (var startJoin:JoinOverride in startJoins) {
                    connections.addItem(startJoin.toConnection());
                }
            }*/
        }

        [Bindable]
        private var configurableDataSources:ArrayCollection;

        private function gotOverrides():void {
            var results:ReportJoins = analysisService.determineOverrides.lastResult as ReportJoins;
            configurableDataSources = results.configurableDataSources;
            if (startJoins != null && startJoins.length) {
                for each (var joinOverride:JoinOverride in startJoins) {
                    if (joinOverride.dataSourceID == 0) {
                        joinOverride.dataSourceID = DataSourceDescriptor(configurableDataSources.getItemAt(0)).id;
                    }
                    var joins:ArrayCollection = customConnectionMap[String(joinOverride.dataSourceID)] as ArrayCollection;
                    if (joins == null) {
                        joins = new ArrayCollection();
                        customConnectionMap[String(joinOverride.dataSourceID)] = joins;
                    }
                    joins.addItem(joinOverride);
                }
            }

            joinMap = results.joinOverrideMap;
            dataSourceMap = results.dataSourceMap;
            selectedDataSource = configurableDataSources.getItemAt(0) as DataSourceDescriptor;
            populateJoins(selectedDataSource);
        }

        private function onConnectionDelete(event:ConnectionDeleteEvent):void {
            connections.removeItemAt(connections.getItemIndex(event.connection));
        }

        private function joinsSelected(event:JoinSelectionEvent):void {
            var edges:ArrayCollection = event.addedJoins;
            for each (var compositeFeedConnection:CompositeFeedConnection in edges) {
                connections.addItem(compositeFeedConnection);
            }
        }

        private function revert():void {
            startJoins = new ArrayCollection();
            customConnectionMap = new Object();
            ProgressAlert.alert(this, "Retrieving join information from data source...", null, analysisService.determineOverrides);
            analysisService.determineOverrides.send(dataSourceID, fields);
        }

        private var customConnectionMap:Object = new Object();

        private function save():void {
            var joins:ArrayCollection = new ArrayCollection();
            var saveJoins:ArrayCollection = new ArrayCollection();
            for each (var connection:CompositeFeedConnection in connections) {
                var saveJoin:JoinOverride = new JoinOverride();
                saveJoin.sourceItem = connection.sourceItem;
                saveJoin.targetItem = connection.targetItem;
                saveJoin.sourceName = connection.sourceFeedName;
                saveJoin.targetName = connection.targetFeedName;
                saveJoin.dataSourceID = selectedDataSource.id;
                saveJoin.sourceOuterJoin = connection.sourceOuterJoin;
                saveJoin.targetOuterJoin = connection.targetOuterJoin;
                saveJoin.sourceJoinOriginal = connection.sourceJoinOnOriginal;
                saveJoin.targetJoinOriginal = connection.targetJoinOnOriginal;
                saveJoins.addItem(saveJoin);
            }
            customConnectionMap[String(selectedDataSource.id)] = saveJoins;
            for each (var coll:ArrayCollection in customConnectionMap) {
                for each (var join:JoinOverride in coll) {
                    joins.addItem(join);
                }
            }
            dispatchEvent(new JoinOverrideEvent(JoinOverrideEvent.JOIN_OVERRIDE_SET, joins));
            PopUpManager.removePopUp(this);
        }

        private function addConnection():void {
            var window:DSPickJoinWindow = new DSPickJoinWindow();
            if (selectedDataSource.id == DataSourceDescriptor(configurableDataSources.getItemAt(0)).id) {
                window.metadataFields = fields;
                window.mode = DSPickJoinWindow.USE_SPECIFIED_FIELDS;
            } else {
                window.dataSourceID = selectedDataSource.id;
                window.mode = DSPickJoinWindow.SINGLE_FEED;
            }
            window.dataSources = dataSources;
            window.addEventListener(JoinSelectionEvent.JOIN_SELECTION, joinsSelected, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private var dataSourceMap:Object;

        private var joinMap:Object;

        private var selectedDataSource:DataSourceDescriptor;

        private function populateJoins(dataSource:DataSourceDescriptor):void {
            if (connections != null) {
                var saveJoins:ArrayCollection = new ArrayCollection();
                for each (var connection:CompositeFeedConnection in connections) {
                    var saveJoin:JoinOverride = new JoinOverride();
                    saveJoin.sourceItem = connection.sourceItem;
                    saveJoin.targetItem = connection.targetItem;
                    saveJoin.sourceName = connection.sourceFeedName;
                    saveJoin.targetName = connection.targetFeedName;
                    saveJoin.dataSourceID = selectedDataSource.id;
                    saveJoins.addItem(saveJoin);
                }
                customConnectionMap[String(selectedDataSource.id)] = saveJoins;
            }
            dataSources = dataSourceMap[String(dataSource.id)] as ArrayCollection;
            connections = new ArrayCollection();
            if (startJoins == null || startJoins.length == 0) {
                var joins:ArrayCollection = joinMap[String(dataSource.id)];
                for each (var join:JoinOverride in joins) {
                    connections.addItem(join.toConnection());
                }
            } else {
                var customJoins:ArrayCollection = customConnectionMap[String(dataSource.id)] as ArrayCollection;
                for each (var customJoin:JoinOverride in customJoins) {
                    var customConnection:CompositeFeedConnection = customJoin.toConnection();
                    for each (var ds:DataSourceDescriptor in dataSources) {
                        if (customConnection.sourceFeedID == ds.id) {
                            customConnection.sourceFeedName = ds.name;
                        }
                        if (customConnection.targetFeedID == ds.id) {
                            customConnection.targetFeedName = ds.name;
                        }
                    }
                    connections.addItem(customConnection);
                }
            }
        }

        [Bindable]
        private var controlsFactory:IFactory;

        private function onDataSourceChange():void {
            var dataSource:DataSourceDescriptor = dataSourceBox.selectedItem as DataSourceDescriptor;
            populateJoins(dataSource);
            selectedDataSource = dataSource;
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="analysisDefinition" id="analysisService">
        <mx:method name="determineOverrides" result="gotOverrides()"/>
    </mx:RemoteObject>
    <mx:ComboBox dataProvider="{configurableDataSources}" labelField="name" id="dataSourceBox" change="onDataSourceChange()"/>
    <mx:Button label="Add Join..." click="addConnection()" styleName="grayButton"/>
    <mx:DataGrid dataProvider="{connections}" width="600" rowHeight="28" dragMoveEnabled="true" dragEnabled="true" dropEnabled="true">
        <mx:columns>
            <util:EIDataGridColumn dataField="sourceFeedName" headerText="Source Data Source"/>
            <util:EIDataGridColumn dataField="sourceDisplay" headerText="Source Field"/>
            <util:EIDataGridColumn dataField="targetDisplay" headerText="Target Field"/>
            <util:EIDataGridColumn dataField="targetFeedName" headerText="Target Data Source"/>
            <util:EIDataGridColumn headerText="" dataField="name" width="100" sortable="false" itemRenderer="{controlsFactory}"/>
        </mx:columns>
    </mx:DataGrid>
    <mx:HBox width="100%" horizontalAlign="center">
        <util:SaveButton label="Save" click="save()"/>
        <util:SaveButton label="Revert to Data Source Default" click="revert()"/>
        <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
    </mx:HBox>
</util:EISlimWindow>
