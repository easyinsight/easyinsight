<?xml version="1.0"?>
<util:EISlimWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*"
        creationComplete="onCreation()">
    <mx:Script><![CDATA[
        import com.easyinsight.feedassembly.CompositeConnectionPair;
        import com.easyinsight.feedassembly.CompositeFeedCompositeConnection;
        import com.easyinsight.feedassembly.CompositeFeedCompositeConnectionEvent;
        import com.easyinsight.feedassembly.CompositeFeedConnection;
        import com.easyinsight.feedassembly.CompositeJoinWindow;
        import com.easyinsight.feedassembly.ConnectionControls;
        import com.easyinsight.feedassembly.ConnectionDeleteEvent;
        import com.easyinsight.feedassembly.DSPickJoinWindow;
        import com.easyinsight.feedassembly.JoinSelectionEvent;
        import com.easyinsight.quicksearch.EIDescriptor;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.PopUpUtil;

        import com.easyinsight.util.ProgressAlert;

        import mx.collections.ArrayCollection;
        import mx.managers.PopUpManager;

        [Bindable]
        private var connections:ArrayCollection;

        private var dataSources:ArrayCollection;

        public var dataSourceID:int;
        public var fields:ArrayCollection;

        public var startJoins:ArrayCollection;

        private function onCreation():void {
            controlsFactory = new ClassFactory(ConnectionControls);
            ClassFactory(controlsFactory).properties = { fields:fields };
            addEventListener(ConnectionDeleteEvent.CONNECTION_DELETE, onConnectionDelete);
            addEventListener(ConnectionDeleteEvent.CONNECTION_TO_TOP, onMoveToTop);
            addEventListener(ConnectionDeleteEvent.CONNECTION_TO_BOTTOM, onMoveToBottom);
            ProgressAlert.alert(this, "Retrieving join information from data source...", null, analysisService.determineOverrides);
            analysisService.determineOverrides.send(dataSourceID, fields);
            /*if (startJoins == null || startJoins.length == 0) {

             } else {
             connections = new ArrayCollection();
             for each (var startJoin:JoinOverride in startJoins) {
             connections.addItem(startJoin.toConnection());
             }
             }*/
        }

        [Bindable]
        private var configurableDataSources:ArrayCollection;

        [Bindable]
        private var dsAddonReports:ArrayCollection;

        private function gotOverrides():void {
            var results:ReportJoins = analysisService.determineOverrides.lastResult as ReportJoins;
            dsAddonReports = results.dataSourceAddonReports;
            configurableDataSources = results.configurableDataSources;
            if (startJoins != null && startJoins.length > 0) {
                for each (var joinOverride:JoinOverride in startJoins) {
                    if (joinOverride.dataSourceID == 0) {
                        joinOverride.dataSourceID = DataSourceDescriptor(configurableDataSources.getItemAt(0)).id;
                    }
                    var joins:ArrayCollection = customConnectionMap[String(joinOverride.dataSourceID)] as ArrayCollection;
                    if (joins == null) {
                        joins = new ArrayCollection();
                        customConnectionMap[String(joinOverride.dataSourceID)] = joins;
                    }
                    joins.addItem(joinOverride);
                }
            }

            joinMap = results.joinOverrideMap;
            dataSourceMap = results.dataSourceMap;
            selectedDataSource = configurableDataSources.getItemAt(0) as DataSourceDescriptor;
            populateJoins(selectedDataSource);
        }

        private function onMoveToTop(event:ConnectionDeleteEvent):void {
            connections.removeItemAt(connections.getItemIndex(event.connection));
            connections.addItemAt(event.connection, 0);
        }

        private function onMoveToBottom(event:ConnectionDeleteEvent):void {
            connections.removeItemAt(connections.getItemIndex(event.connection));
            connections.addItemAt(event.connection, connections.length - 1);
        }

        private function onConnectionDelete(event:ConnectionDeleteEvent):void {
            connections.removeItemAt(connections.getItemIndex(event.connection));
        }

        private function joinsSelected(event:JoinSelectionEvent):void {
            var edges:ArrayCollection = event.addedJoins;
            for each (var compositeFeedConnection:CompositeFeedConnection in edges) {
                connections.addItem(compositeFeedConnection);
            }
        }

        private function revert():void {
            startJoins = null;
            customConnectionMap = new Object();
            ProgressAlert.alert(this, "Retrieving join information from data source...", null, analysisService.determineOverrides);
            analysisService.determineOverrides.send(dataSourceID, fields);
        }

        private var customConnectionMap:Object = new Object();

        private function save():void {
            var joins:ArrayCollection = new ArrayCollection();
            var saveJoins:ArrayCollection = new ArrayCollection();
            for each (var connection:CompositeFeedConnection in connections) {
                if (connection is CompositeFeedCompositeConnection) {
                    var compConnection:CompositeFeedCompositeConnection = connection as CompositeFeedCompositeConnection;
                    var compJoin:JoinOverride = new JoinOverride();
                    compJoin.joinType = JoinOverride.COMPOSITE;
                    var sourceItems:ArrayCollection = new ArrayCollection();
                    var targetItems:ArrayCollection = new ArrayCollection();
                    for each (var pair:CompositeConnectionPair in compConnection.pairs) {
                        sourceItems.addItem(pair.sourceField);
                        targetItems.addItem(pair.targetField);
                    }
                    compJoin.sourceItems = sourceItems;
                    compJoin.targetItems = targetItems;
                    compJoin.dataSourceID = selectedDataSource.id;
                    saveJoins.addItem(compJoin);
                } else {
                    var saveJoin:JoinOverride = new JoinOverride();
                    saveJoin.sourceItem = connection.sourceItem;
                    saveJoin.targetItem = connection.targetItem;
                    saveJoin.sourceName = connection.sourceFeedName;
                    saveJoin.targetName = connection.targetFeedName;
                    saveJoin.dataSourceID = selectedDataSource.id;
                    saveJoin.sourceOuterJoin = connection.sourceOuterJoin;
                    saveJoin.targetOuterJoin = connection.targetOuterJoin;
                    saveJoin.sourceJoinOriginal = connection.sourceJoinOnOriginal;
                    saveJoin.targetJoinOriginal = connection.targetJoinOnOriginal;
                    saveJoin.marmotScript = connection.marmotScript;
                    saveJoins.addItem(saveJoin);
                }
            }
            customConnectionMap[String(selectedDataSource.id)] = saveJoins;
            for each (var coll:ArrayCollection in customConnectionMap) {
                for each (var join:JoinOverride in coll) {
                    joins.addItem(join);
                }
            }
            dispatchEvent(new JoinOverrideEvent(JoinOverrideEvent.JOIN_OVERRIDE_SET, joins));
            PopUpManager.removePopUp(this);
        }

        private function addConnection():void {
            var window:DSPickJoinWindow = new DSPickJoinWindow();
            if (selectedDataSource.id == DataSourceDescriptor(configurableDataSources.getItemAt(0)).id) {
                window.metadataFields = fields;
                window.mode = DSPickJoinWindow.USE_SPECIFIED_FIELDS;
            } else {
                window.dataSourceID = selectedDataSource.id;
                window.mode = DSPickJoinWindow.SINGLE_FEED;
            }
            window.dataSources = dataSources;
            window.addEventListener(JoinSelectionEvent.JOIN_SELECTION, joinsSelected, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function addCompositeConnection():void {
            var window:CompositeJoinWindow = new CompositeJoinWindow();
            window.dataSourceID = selectedDataSource.id;
            window.currentDataSourceID = DataSourceDescriptor(configurableDataSources.getItemAt(0)).id;
            window.fields = fields;
            window.dataSources = dataSources;
            window.addEventListener(CompositeFeedCompositeConnectionEvent.SAVE_CONNECTION, compositeJoinAdded, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function compositeJoinAdded(event:CompositeFeedCompositeConnectionEvent):void {
            connections.addItem(event.connection);
        }

        private var dataSourceMap:Object;

        private var joinMap:Object;

        private var selectedDataSource:DataSourceDescriptor;

        public var addonReports:ArrayCollection;

        private function populateJoins(dataSource:DataSourceDescriptor):void {
            if (connections != null) {
                var saveJoins:ArrayCollection = new ArrayCollection();
                for each (var connection:CompositeFeedConnection in connections) {
                    var saveJoin:JoinOverride = new JoinOverride();
                    saveJoin.sourceItem = connection.sourceItem;
                    saveJoin.targetItem = connection.targetItem;
                    saveJoin.sourceName = connection.sourceFeedName;
                    saveJoin.targetName = connection.targetFeedName;
                    saveJoin.dataSourceID = selectedDataSource.id;
                    saveJoin.marmotScript = connection.marmotScript;
                    saveJoins.addItem(saveJoin);
                }
                customConnectionMap[String(selectedDataSource.id)] = saveJoins;
            }
            var sources:ArrayCollection = dataSourceMap[String(dataSource.id)] as ArrayCollection;
            for each (var addonReport:AddonReport in addonReports) {
                var insightDescriptor:InsightDescriptor = new InsightDescriptor();
                insightDescriptor.id = addonReport.reportID;
                insightDescriptor.name = addonReport.reportName;
                sources.addItem(insightDescriptor);
            }
            if (dsAddonReports != null) {
                for each (var dsAddonReport:AddonReport in dsAddonReports) {
                    var dsInsightDescriptor:InsightDescriptor = new InsightDescriptor();
                    dsInsightDescriptor.id = dsAddonReport.reportID;
                    dsInsightDescriptor.name = dsAddonReport.reportName;
                    sources.addItem(dsInsightDescriptor);
                }
            }
            dataSources = sources;
            connections = new ArrayCollection();
            if (startJoins == null || startJoins.length == 0) {
                var joins:ArrayCollection = joinMap[String(dataSource.id)];
                for each (var join:JoinOverride in joins) {
                    if (join.joinType == JoinOverride.NORMAL) {
                        connections.addItem(join.toConnection());
                    } else {
                        connections.addItem(join.toCompositeConnection());
                    }
                }
            } else {
                var customJoins:ArrayCollection = customConnectionMap[String(dataSource.id)] as ArrayCollection;
                for each (var customJoin:JoinOverride in customJoins) {
                    if (customJoin.joinType == JoinOverride.NORMAL) {
                        var customConnection:CompositeFeedConnection = customJoin.toConnection();
                        for each (var desc:EIDescriptor in dataSources) {
                            if (desc.getType() == EIDescriptor.DATA_SOURCE && desc.id == customConnection.sourceFeedID) {
                                customConnection.sourceFeedName = desc.name;
                            } else if (desc.getType() == EIDescriptor.REPORT && desc.id == customConnection.sourceReportID) {
                                customConnection.sourceFeedName = desc.name;
                            }
                            if (desc.getType() == EIDescriptor.DATA_SOURCE && desc.id == customConnection.targetFeedID) {
                                customConnection.targetFeedName = desc.name;
                            } else if (desc.getType() == EIDescriptor.REPORT && desc.id == customConnection.targetReportID) {
                                customConnection.targetFeedName = desc.name;
                            }
                        }
                        connections.addItem(customConnection);
                    } else {
                        connections.addItem(customJoin.toCompositeConnection());
                    }
                }
            }
        }

        [Bindable]
        private var controlsFactory:IFactory;

        private function onDataSourceChange():void {
            var dataSource:DataSourceDescriptor = dataSourceBox.selectedItem as DataSourceDescriptor;
            populateJoins(dataSource);
            selectedDataSource = dataSource;
        }

        private var hits:ArrayCollection = new ArrayCollection();

        private function onKeyword(event:Event):void {
            var keyword:String = keywordInput.text;
            if (keyword.length > 1) {
                keyword = keyword.toLowerCase();
                var hitColl:ArrayCollection = new ArrayCollection();
                for each (var conn:CompositeFeedConnection in connections) {
                    var match:Boolean = (conn.sourceFeedName.toLowerCase().indexOf(keyword) != -1) ||
                            (conn.targetFeedName.toLowerCase().indexOf(keyword) != -1);
                    if (match) {
                        hitColl.addItem(conn);
                    }
                }
                hits = hitColl;
            } else {
                hits = new ArrayCollection();
            }
            dataGrid.invalidateDisplayList();
            dataGrid.validateNow();
            scrollFirstCurrent();
        }

        private function scrollGridUp():void {
            var currentVerticalPosition:int = dataGrid.verticalScrollPosition;
            for (var i:int = hits.length - 1; i >= 0; i--) {
                var obj:Object = hits.getItemAt(i);
                var index:int = connections.getItemIndex(obj);
                if (index < currentVerticalPosition && index >= 0) {
                    dataGrid.verticalScrollPosition = index;
                    break;
                }
            }
        }

        private function scrollFirstCurrent():void {
            var currentVerticalPosition:int = dataGrid.verticalScrollPosition;
            for each (var obj:Object in hits) {
                var index:int = connections.getItemIndex(obj);
                if (index == currentVerticalPosition) {
                    break;
                } else if (index > currentVerticalPosition && index <= dataGrid.maxVerticalScrollPosition) {
                    dataGrid.verticalScrollPosition = index;
                    break;
                }
            }
        }

        private function scrollGridDown():void {
            var currentVerticalPosition:int = dataGrid.verticalScrollPosition;
            for each (var obj:Object in hits) {
                var index:int = connections.getItemIndex(obj);
                if (index > currentVerticalPosition && index <= dataGrid.maxVerticalScrollPosition) {
                    dataGrid.verticalScrollPosition = index;
                    break;
                }
            }
        }

        private function rowColor(item:Object, color:uint):uint {
            if (hits.getItemIndex(item) > -1) {
                return 0xEBEF80;
            }
            return color;
        }

        [Bindable]
        [Embed(source="../../../../assets/arrow2_down_blue.png")]
        public var scrollDownIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/arrow2_up_blue.png")]
        public var scrollUpIcon:Class;

        private function addDateJoin():void {
            var window:DateJoinWindow = new DateJoinWindow();
            window.dataSourceID = selectedDataSource.id;
            window.currentDataSourceID = DataSourceDescriptor(configurableDataSources.getItemAt(0)).id;
            window.fields = fields;
            window.dataSources = dataSources;
            window.addEventListener(CompositeFeedCompositeConnectionEvent.SAVE_CONNECTION, compositeJoinAdded, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="analysisDefinition" id="analysisService">
        <mx:method name="determineOverrides" result="gotOverrides()"/>
    </mx:RemoteObject>
    <mx:ComboBox dataProvider="{configurableDataSources}" labelField="name" id="dataSourceBox" change="onDataSourceChange()"/>

    <mx:HBox width="100%">
        <mx:TextInput id="keywordInput" change="onKeyword(event)"/>
        <mx:Button icon="{scrollDownIcon}" click="scrollGridDown()" toolTip="Next Occurrence"/>
        <mx:Button icon="{scrollUpIcon}" click="scrollGridUp()" toolTip="Previous Occurrence"/>
        <mx:Button label="Add Direct Join..." click="addConnection()" styleName="grayButton"/>
        <!--<mx:Button label="Add Composite Join..." click="addCompositeConnection()" styleName="grayButton"/>-->
<!--        <mx:Button label="Add Date Join..." click="addDateJoin()" styleName="grayButton"/>-->
    </mx:HBox>
    <util:EIDataGrid dataProvider="{connections}" rowHeight="28" dragMoveEnabled="true" dragEnabled="true" dropEnabled="true" id="dataGrid"
            rowColorFunction="rowColor">
        <util:columns>
            <util:EIDataGridColumn dataField="display" headerText="Connection" sortable="false" width="650"/>
            <util:EIDataGridColumn headerText="" dataField="name" width="200" sortable="false" itemRenderer="{controlsFactory}"/>
        </util:columns>
    </util:EIDataGrid>
    <mx:HBox width="100%" horizontalAlign="center">
        <util:SaveButton label="Save" click="save()"/>
        <util:SaveButton label="Revert to Data Source Default" click="revert()"/>
        <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
    </mx:HBox>
</util:EISlimWindow>
