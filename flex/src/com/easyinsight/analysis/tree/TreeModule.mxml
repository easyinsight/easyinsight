<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" implements="com.easyinsight.analysis.IReportRenderer" width="100%" height="100%">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisCellRenderer;
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisHierarchyItem;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemTypes;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.HierarchyLevel;
        import com.easyinsight.analysis.ListViewHeaderRendererFactory;
        import com.easyinsight.analysis.TreeStubCellRenderer;
        import com.easyinsight.filtering.FilterRawData;

        import mx.collections.ArrayCollection;
        import mx.collections.Grouping;
        import mx.collections.GroupingCollection;
        import mx.collections.GroupingField;
        import mx.controls.Alert;
        import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;

        [Bindable]
        private var myData:ArrayCollection;

        private function handleLevel(level:HierarchyLevel, levels:ArrayCollection, row:Object, masterResult:Object, items:ArrayCollection):Object {
            var value:Object = row[level.analysisItem.qualifiedName()];
            var key:String = String(value);
            var result:Object = masterResult[key];
            var newResult:Boolean = false;
            if (result == null) {
                result = new Object();
                masterResult[key] = result;
                result[level.analysisItem.qualifiedName()] = String(value);
                result.children = new ArrayCollection();
                newResult = true;
            }
            var index:int = levels.getItemIndex(level);
            if (index < (levels.length - 1)) {
                var nextLevel:HierarchyLevel = levels.getItemAt(index + 1) as HierarchyLevel;
                var returnResult:Object = handleLevel(nextLevel, levels, row, result, items);
                if (returnResult != null) {
                    for (var existingKey:String in result) {
                        returnResult[existingKey] = result[existingKey];
                    }
                    result.children.addItem(returnResult);
                }
            } else {
                for each (var item:AnalysisItem in items) {
                    result[item.qualifiedName()] = row[item.qualifiedName()];
                }
            }
            if (newResult) {
                return result;
            } else {
                return null;
            }
        }

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            if (dataSet.length > 0) {
                var treeDefinition:TreeDefinition = analysisDefinition as TreeDefinition;
                var hierarchy:AnalysisHierarchyItem = treeDefinition.hierarchy as AnalysisHierarchyItem;
                /*var results:ArrayCollection = new ArrayCollection();
                 var masterResult:Object = new Object();*/
                /*for each (var row:Object in dataSet) {
                 handleLevel(hierarchy.hierarchyLevels.getItemAt(0) as HierarchyLevel, hierarchy.hierarchyLevels, row,
                 masterResult, treeDefinition.items);
                 }
                 for each (var obj:Object in masterResult) {
                 results.addItem(obj);
                 }*/
                var groupingColl:GroupingCollection = new GroupingCollection();
                groupingColl.source = dataSet;
                var columns:Array = [];
                var analysisItems:Array = [];
                var grouping:Grouping = new Grouping();
                var groupingFields:Array = [];
                //analysisItems.push(hierarchy.hierarchyLevels.getItemAt(0).analysisItem);
                for (var lvlCount:int = 0; lvlCount < hierarchy.hierarchyLevels.length - 1; lvlCount++) {
                    var level:HierarchyLevel = hierarchy.hierarchyLevels.getItemAt(lvlCount) as HierarchyLevel;
                    var groupingField:GroupingField = new GroupingField();
                    groupingField.name = level.analysisItem.qualifiedName();
                    groupingFields.push(groupingField);
                }
                /*for each (var level:HierarchyLevel in hierarchy.hierarchyLevels) {
                    //analysisItems.push(level.analysisItem);

                }*/
                grouping.fields = groupingFields;
                groupingColl.grouping = grouping;
                for each (var item:AnalysisItem in treeDefinition.items) {
                    analysisItems.push(item);
                }
                var hierarchyColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                hierarchyColumn.headerText = hierarchy.display;                                                                             
                hierarchyColumn.dataField = hierarchy.hierarchyLevels.getItemAt(hierarchy.hierarchyLevels.length - 1).analysisItem.qualifiedName();
                
                hierarchyColumn.headerRenderer = new ListViewHeaderRendererFactory(hierarchy.display);
                columns[0] = hierarchyColumn;
                for (var k:int = 0; k < analysisItems.length; k++) {
                    var myHeader:AnalysisItem = analysisItems[k] as AnalysisItem;
                    //columnMap[myHeader.qualifiedName()] = myHeader;
                    var columnHeaderObject:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                    columnHeaderObject.headerText = myHeader.display;
                    //columnHeaderObject.headerText = "";
                    columnHeaderObject.dataField = myHeader.qualifiedName();
                    columnHeaderObject.headerRenderer = new ListViewHeaderRendererFactory(myHeader.display);

                        var factory:ClassFactory = new ClassFactory(AnalysisCellRenderer);
                        factory.properties = { analysisItem: myHeader, renderer: clientProcessorMap[myHeader.qualifiedName()] };
                        columnHeaderObject.itemRenderer = factory;

                    /*columnHeaderObject.itemRenderer = new AnalysisCellRendererFactory(keyString, myHeader,
                     clientProcessorMap[keyString]);*/
                    /*var factory:ClassFactory = new ClassFactory(AnalysisCellRenderer);
                     factory.properties = { analysisItem: myHeader, renderer: clientProcessorMap[keyString] };
                     columnHeaderObject.itemRenderer = factory;*/
                    columns[k + 1] = columnHeaderObject;
                }
                myData = dataSet;
                groupingColl.refresh();
                coreGrid.dataProvider = groupingColl;
                coreGrid.columns = columns;
                coreGrid.visible = true;
            } else {
                myData = new ArrayCollection();
                coreGrid.visible = false;
            }
        }

        public function createFilterRawData():FilterRawData {
            return null;
        }

        public function updateExportMetadata():void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }]]></mx:Script>
    <mx:Box width="100%" height="100%">
        <mx:AdvancedDataGrid id="coreGrid" width="100%" height="100%" visible="true" fontFamily="Tahoma"/>
    </mx:Box>
</mx:Module>