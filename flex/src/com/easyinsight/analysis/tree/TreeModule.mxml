<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" implements="com.easyinsight.analysis.IReportRenderer" width="100%" height="100%"
        creationComplete="setupListeners()">
    <mx:states>
        <mx:State name="lookupTable">
            <mx:AddChild relativeTo="{topBar}">
                <mx:HBox width="100%" horizontalAlign="center">
                    <mx:Label text="You have unsaved changes to lookup tables."/>
                    <mx:Button label="Save Lookup Tables" click="updateLookupTables()"/>
                </mx:HBox>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AggregationTypes;
        import com.easyinsight.analysis.AnalysisCellRenderer;
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisHierarchyItem;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemTypes;
        import com.easyinsight.analysis.AnalysisMeasure;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.DateValue;
        import com.easyinsight.analysis.DerivedAnalysisDimension;
        import com.easyinsight.analysis.FeedMetadata;
        import com.easyinsight.analysis.HierarchyLevel;
        import com.easyinsight.analysis.ListViewHeaderRenderer;
        import com.easyinsight.analysis.LookupTableCellRenderer;
        import com.easyinsight.analysis.LookupTableDateCellRenderer;
        import com.easyinsight.analysis.NumericValue;
        import com.easyinsight.analysis.SortFunctionFactory;
        import com.easyinsight.analysis.StringValue;
        import com.easyinsight.analysis.TextCellRenderer;
        import com.easyinsight.analysis.TextReportFieldExtension;
        import com.easyinsight.analysis.Value;
        import com.easyinsight.analysis.list.EnableLookupEditingEvent;
        import com.easyinsight.analysis.list.LookupTableChangeEvent;
        import com.easyinsight.etl.LookupPair;
        import com.easyinsight.etl.LookupTable;
        import com.easyinsight.filtering.FilterRawData;

        import mx.collections.ArrayCollection;
        import mx.collections.Grouping;
        import mx.collections.GroupingCollection;
        import mx.collections.GroupingField;
        import mx.collections.SummaryField;
        import mx.collections.SummaryRow;
        import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
        import mx.controls.advancedDataGridClasses.AdvancedDataGridRendererProvider;
        import mx.controls.advancedDataGridClasses.SortInfo;
        import mx.formatters.Formatter;

        [Bindable]
        private var myData:ArrayCollection;

        private var lookupTables:ArrayCollection;

        public function set feedMetadata(feedMetadata:FeedMetadata):void {
            lookupTables = feedMetadata.lookupTables;
        }

        private function setupListeners():void {
            addEventListener(LookupTableChangeEvent.LOOKUP_TABLE_CHANGE, onLookupTableChange);
        }

        private function onLookupTableChange(event:LookupTableChangeEvent):void {
            currentState = "lookupTable";
        }

        private function handleLevel(level:HierarchyLevel, levels:ArrayCollection, row:Object, masterResult:Object, items:ArrayCollection):Object {
            var value:Object = row[level.analysisItem.qualifiedName()];
            var key:String = String(value);
            var result:Object = masterResult[key];
            var newResult:Boolean = false;
            if (result == null) {
                result = new Object();
                masterResult[key] = result;
                result[level.analysisItem.qualifiedName()] = String(value);
                result.children = new ArrayCollection();
                newResult = true;
            }
            var index:int = levels.getItemIndex(level);
            if (index < (levels.length - 1)) {
                var nextLevel:HierarchyLevel = levels.getItemAt(index + 1) as HierarchyLevel;
                var returnResult:Object = handleLevel(nextLevel, levels, row, result, items);
                if (returnResult != null) {
                    for (var existingKey:String in result) {
                        returnResult[existingKey] = result[existingKey];
                    }
                    result.children.addItem(returnResult);
                }
            } else {
                for each (var item:AnalysisItem in items) {
                    result[item.qualifiedName()] = row[item.qualifiedName()];
                }
            }
            if (newResult) {
                return result;
            } else {
                return null;
            }
        }

        private var treeDef:TreeDefinition;

        private var fieldLength:int;

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            var treeDefinition:TreeDefinition = analysisDefinition as TreeDefinition;
            if (dataSet.length > 0) {
                stackIndex = 0;

                activeLookupTables = new ArrayCollection();
                pairMaps = new ArrayCollection();

                var fieldsChanged:Boolean = false;
                if (treeDef != null) {
                    fieldsChanged = fieldLength != treeDefinition.items.length;
                }
                this.fieldLength = treeDefinition.items.length;
                //coreGrid.setStyle("fontFamily", "Lucida Grande");
                coreGrid.setStyle("fontSize", treeDefinition.fontSize);
                coreGrid.setStyle("color", treeDefinition.textColor);
                coreGrid.setStyle("alternatingItemColors", [ treeDefinition.rowColor1, treeDefinition.rowColor2 ]);
                coreGrid.setStyle("headerColors", [ treeDefinition.headerColor1, treeDefinition.headerColor2 ]);
                this.treeDef = treeDefinition;
                var explicitWidth:Boolean = true;
                for each (var treeItem:AnalysisItem in treeDef.getFields()) {
                    if (treeItem.width == 0) {
                        explicitWidth = false;
                    }
                }
                var hierarchy:AnalysisHierarchyItem = treeDefinition.hierarchy as AnalysisHierarchyItem;
                var groupingColl:GroupingCollection = new GroupingCollection();
                if (myData != null) {
                    dataSet.sort = myData.sort;
                    dataSet.refresh();
                }
                groupingColl.source = dataSet;
                var columns:Array = [];
                var analysisItems:Array = [];
                var grouping:Grouping = new Grouping();
                var groupingFields:Array = [];
                for (var lvlCount:int = 0; lvlCount < hierarchy.hierarchyLevels.length - 1; lvlCount++) {
                    var level:HierarchyLevel = hierarchy.hierarchyLevels.getItemAt(lvlCount) as HierarchyLevel;
                    var groupingField:GroupingField = new CustomGroupingField(level.analysisItem);
                    groupingField.name = level.analysisItem.qualifiedName();
                    groupingFields.push(groupingField);
                    var summaryRow:SummaryRow = new SummaryRow();
                    summaryRow.summaryPlacement = "group";
                    var fields:Array = [];
                    for each (var measure:AnalysisItem in treeDefinition.items) {
                        if (measure.hasType(AnalysisItemTypes.MEASURE)) {
                            var summaryField:SummaryField = new SummaryField();
                            var castMeasure:AnalysisMeasure = measure as AnalysisMeasure;
                            if (castMeasure.aggregation == AggregationTypes.SUM) {
                                summaryField.operation = "SUM";
                            } else if (castMeasure.aggregation == AggregationTypes.AVERAGE) {
                                summaryField.operation = "AVG";
                            } else if (castMeasure.aggregation == AggregationTypes.MAX) {
                                summaryField.operation = "MAX";
                            } else if (castMeasure.aggregation == AggregationTypes.MIN) {
                                summaryField.operation = "MIN";
                            } else if (castMeasure.aggregation == AggregationTypes.COUNT) {
                                summaryField.operation = "COUNT";
                            } else {
                                summaryField.operation = "SUM";
                            }
                            summaryField.dataField = measure.qualifiedName();
                            fields.push(summaryField);
                        }
                    }
                    summaryRow.fields = fields;
                    groupingField.summaries = [ summaryRow ];
                }
                grouping.fields = groupingFields;
                groupingColl.grouping = grouping;
                for each (var item:AnalysisItem in treeDefinition.items) {
                    analysisItems.push(item);
                }
                var hierarchyColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                var hierarchyFactory:ClassFactory = new ClassFactory(CustomTreeRenderer);
                hierarchyFactory.properties = { analysisItem: hierarchy, report: treeDef };
                coreGrid.groupItemRenderer = hierarchyFactory;
                hierarchyColumn.headerText = hierarchy.display;
                //hierarchyColumn.sortCompareFunction = SortFunctionFactory.createSortFunction(myHeader, hierarchyColumn.sortDescending);
                var rendererProviders:Array = [];
                var bottomItem:AnalysisItem = hierarchy.hierarchyLevels.getItemAt(hierarchy.hierarchyLevels.length - 1).analysisItem;
                hierarchyColumn.labelFunction = function(item:Object, column:AdvancedDataGridColumn):String {
                    var formatter:Formatter = bottomItem.getFormatter();
                    var field:String = bottomItem.qualifiedName();
                    var text:String = "";
                    if (item[field] is Value) {
                        var objVal:Value = item[field];
                        if (objVal == null) {
                            text = "";
                        } else {
                            text = formatter.format(objVal.getValue());
                        }
                    } else {
                        if (item[field] != null) {
                            text = formatter.format(item[field]);
                        } else {
                            text = "";
                        }

                    }
                    return text;
                };
                hierarchyColumn.dataField = bottomItem.qualifiedName();
                var existingHierarchyIndex:int = findColumnIndex(hierarchy.hierarchyLevels.getItemAt(hierarchy.hierarchyLevels.length - 1).analysisItem.qualifiedName());
                if (!fieldsChanged && existingHierarchyIndex != -1) {
                    var existingHierarchyColumn:AdvancedDataGridColumn = coreGrid.columns[existingIndex];
                    hierarchyColumn.width = existingHierarchyColumn.width;
                } else if (explicitWidth) {
                    hierarchyColumn.width = hierarchy.width;
                }
                var hierarchyHeaderFactory:ClassFactory = new ClassFactory(ListViewHeaderRenderer);
                hierarchyHeaderFactory.properties = { eiColor: treeDefinition.headerTextColor };
                hierarchyColumn.headerRenderer = hierarchyHeaderFactory;
                columns[0] = hierarchyColumn;
                for (var k:int = 0; k < analysisItems.length; k++) {
                    var myHeader:AnalysisItem = analysisItems[k] as AnalysisItem;
                    var myLookupTable:LookupTable = null;
                    if (lookupEditing) {
                        if (myHeader.lookupTableID > 0) {
                            for each (var lookupTable:LookupTable in lookupTables) {
                                if (lookupTable.lookupTableID == myHeader.lookupTableID) {
                                    myLookupTable = lookupTable;
                                    break;
                                }
                            }
                        }
                        if (myLookupTable != null) {
                            var found:Boolean = false;
                            for each (var lookupTest:AnalysisItem in analysisItems) {
                                if (lookupTest.key.internalString() == myLookupTable.sourceField.key.internalString()) {
                                    found = true;
                                    break;
                                }
                            }
                            if (!found) {
                                for each (var hierLevel:HierarchyLevel in hierarchy.hierarchyLevels) {
                                    if (hierLevel.analysisItem.key.internalString() == myLookupTable.sourceField.key.internalString()) {
                                        found = true;
                                        break;
                                    }
                                }
                                if (!found) {
                                    myLookupTable = null;
                                }
                            }
                        }

                        if (myLookupTable != null) {
                            var pairMap:Object = new Object();
                            for each (var pair:LookupPair in lookupTable.lookupPairs) {
                                pairMap[pair.sourceValue.getValue()] = pair.targetValue;
                            }
                            activeLookupTables.addItem(myLookupTable);
                            pairMaps.addItem(pairMap);
                        }
                    }
                    var columnHeaderObject:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                    var existingIndex:int = findColumnIndex(myHeader.qualifiedName());
                    if (!fieldsChanged && existingIndex != -1) {
                        var existingColumn:AdvancedDataGridColumn = coreGrid.columns[existingIndex];
                        columnHeaderObject.width = existingColumn.width;
                        columnHeaderObject.sortDescending = existingColumn.sortDescending;
                    } else if (explicitWidth) {
                        columnHeaderObject.width = myHeader.width;
                    }
                    columnHeaderObject.sortCompareFunction = SortFunctionFactory.createSortFunction(myHeader, columnHeaderObject.sortDescending);
                    columnHeaderObject.headerText = myHeader.display;
                    columnHeaderObject.dataField = myHeader.qualifiedName();
                    var headerFactory:ClassFactory = new ClassFactory(ListViewHeaderRenderer);
                    headerFactory.properties = { eiColor: treeDefinition.headerTextColor };
                    columnHeaderObject.headerRenderer = headerFactory;

                    var factory:ClassFactory = new ClassFactory(getCellRendererClass(myHeader, myLookupTable));
                    var ext:TextReportFieldExtension = myHeader.reportFieldExtension as TextReportFieldExtension;
                    if (ext != null) {
                        if (ext.fixedWidth > 0) {
                            columnHeaderObject.width = ext.fixedWidth;
                            columnHeaderObject.resizable = false;
                        }
                    }
                    if (myLookupTable == null) {
                        factory.properties = { analysisItem: myHeader, report: treeDef };
                        columnHeaderObject.itemRenderer = factory;
                    } else {
                        factory.properties = { analysisItem: myHeader, lookupTable: myLookupTable, pairMap: pairMap };
                        var provider:AdvancedDataGridRendererProvider = new AdvancedDataGridRendererProvider();
                        provider.depth = hierarchy.hierarchyLevels.length;
                        provider.column = columnHeaderObject;
                        provider.columnSpan =  1;
                        provider.renderer = factory;
                        rendererProviders.push(provider);
                    }


                    columns[k + 1] = columnHeaderObject;
                }
                if (rendererProviders.length > 0) {
                    coreGrid.rendererProviders = rendererProviders;
                }

                myData = dataSet;

                groupingColl.refresh();
                coreGrid.dataProvider = groupingColl;
                coreGrid.columns = columns;
            } else {
                if (treeDefinition.items.length > 0 && treeDefinition.hierarchy != null) stackIndex = 2;
                else stackIndex = 1;
                coreGrid.columns = [];
                myData = new ArrayCollection();
            }
        }

        private function updateLookupTables():void {
            for (var i:int = 0; i < activeLookupTables.length; i++) {
                var activeLookupTable:LookupTable = activeLookupTables.getItemAt(i) as LookupTable;
                var pairMap:Object = pairMaps.getItemAt(i) as Object;
                var pairs:ArrayCollection = new ArrayCollection();
                for (var key:String in pairMap) {
                    var result:Object = pairMap[key];
                    var lookupPair:LookupPair = new LookupPair();
                    lookupPair.sourceValue = new StringValue();
                    StringValue(lookupPair.sourceValue).value = key;
                    var resultValue:Value;
                    if (result == null) {
                        continue;
                    }
                    if (result is Value) {
                        resultValue = result as Value;
                    } else if (result is String) {
                        resultValue = new StringValue();
                        StringValue(resultValue).value = String(result);
                    } else if (result is Date) {
                        resultValue = new DateValue();
                        DateValue(resultValue).date = result as Date;
                    } else {
                        resultValue = new NumericValue();
                        NumericValue(resultValue).value = Number(result);
                    }
                    lookupPair.targetValue = resultValue;
                    pairs.addItem(lookupPair);
                }
                activeLookupTable.lookupPairs = pairs;
                feedService.updateLookupTable.send(activeLookupTable);
            }
            currentState = "";
        }

        private var activeLookupTables:ArrayCollection;

        private var pairMaps:ArrayCollection;

        private function getCellRendererClass(item:AnalysisItem, lookupTable:LookupTable):Class {
            if (lookupTable != null) {
                if (lookupTable.targetField.hasType(AnalysisItemTypes.DATE)) {
                    return LookupTableDateCellRenderer;
                } else {
                    return LookupTableCellRenderer;
                }
            }
            if (item.hasType(AnalysisItemTypes.TEXT)) {
                return TextCellRenderer;
            } else {
                if (item.hasType(AnalysisItemTypes.DERIVED_GROUPING)) {
                    var d:DerivedAnalysisDimension = item as DerivedAnalysisDimension;
                    return d.wordWrap ? TextCellRenderer : AnalysisCellRenderer;
                }
                var ext:TextReportFieldExtension = item.reportFieldExtension as TextReportFieldExtension;
                if (ext != null && ext.wordWrap) {
                    return TextCellRenderer;
                }
                return AnalysisCellRenderer;
            }
        }

        public function updateExportMetadata():void {
            var hierarchy:AnalysisHierarchyItem = treeDef.hierarchy as AnalysisHierarchyItem;
            var hierarchyIndex:int = findColumnIndex(hierarchy.hierarchyLevels.getItemAt(hierarchy.hierarchyLevels.length - 1).analysisItem.qualifiedName());
            updateItem(hierarchy, hierarchyIndex);
            for (var i:int = 0; i < treeDef.items.length; i++) {
                var item:AnalysisItem = treeDef.items.getItemAt(i) as AnalysisItem;
                var columnIndex:int = findColumnIndex(item.qualifiedName());
                updateItem(item, columnIndex);
            }
        }

        private function onStretch(event:Event):void {
            var hierarchy:AnalysisHierarchyItem = treeDef.hierarchy as AnalysisHierarchyItem;
            var hierarchyIndex:int = findColumnIndex(hierarchy.hierarchyLevels.getItemAt(hierarchy.hierarchyLevels.length - 1).analysisItem.qualifiedName());
            updateItem(hierarchy, hierarchyIndex);
            for (var i:int = 0; i < treeDef.items.length; i++) {
                var item:AnalysisItem = treeDef.items.getItemAt(i) as AnalysisItem;
                var columnIndex:int = findColumnIndex(item.qualifiedName());
                updateItem(item, columnIndex);
            }
        }

        private function findColumnIndex(qualifiedName:String):int {
            for (var i:int = 0; i < coreGrid.columns.length; i++) {
                var column:AdvancedDataGridColumn = coreGrid.columns[i];
                if (column.dataField == qualifiedName) {
                    return i;
                }
            }
            return -1;
        }

        public function preserveValues():Boolean {
            return true;
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
            if (event is EnableLookupEditingEvent) {
                lookupEditing = !lookupEditing;
            }
        }

        private var lookupEditing:Boolean;

        private function updateItem(item:AnalysisItem, columnIndex:int):void {
            item.itemPosition = columnIndex;
            var column:AdvancedDataGridColumn = coreGrid.columns[columnIndex];

            item.width = column.width;

            var sortInfo:SortInfo = coreGrid.getFieldSortInfo(column);
            if (sortInfo != null && sortInfo.status == SortInfo.ACTUALSORT) {
                item.sortSequence = sortInfo.sequenceNumber;
                if (sortInfo.descending) {
                    item.sort = 2;
                } else {
                    item.sort = 1;
                }
            } else {
                item.sort = 0;
            }
        }

        [Bindable]
        private var stackIndex:int = 0;
        ]]></mx:Script>
    <mx:RemoteObject id="feedService" destination="feeds">
        <mx:method name="updateLookupTable"/>
    </mx:RemoteObject>
    <mx:Canvas width="100%" height="100%">
        <mx:VBox width="100%" height="100%">
            <mx:Box id="topBar" width="100%"/>
            <mx:AdvancedDataGrid id="coreGrid" width="100%" height="100%" visible="true" columnStretch="onStretch(event)"
                    variableRowHeight="true"/>
        </mx:VBox>
        <mx:ViewStack width="100%" height="100%" selectedIndex="{stackIndex}" creationPolicy="all" mouseChildren="false" mouseEnabled="false">
            <mx:Canvas width="100%" height="100%"/>
            <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" backgroundColor="#000000" backgroundAlpha=".1">
                <mx:Box borderStyle="solid" borderThickness="1" cornerRadius="10" horizontalAlign="center" verticalAlign="middle"
                        backgroundColor="#FFFFFF" paddingBottom="15" paddingLeft="15" paddingRight="15" paddingTop="15">
                    <mx:TextArea fontSize="22" text="You haven't set up a tree report yet. Drag a Hierarchy into the area labeled 'Drop Hierarchy Here' and drag any other fields into the 'Drop Field Area' area. If you don't have any hierarchies defined yet, you can define one under Data - Add Hierarchy."
                        borderStyle="none" backgroundAlpha="0" width="500" height="175" editable="false" selectable="false" focusEnabled="false"/>
                </mx:Box>
            </mx:Box>
            <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" backgroundColor="#000000" backgroundAlpha=".1">
                <mx:Box borderStyle="solid" borderThickness="1" cornerRadius="10" horizontalAlign="center" verticalAlign="middle"
                        backgroundColor="#FFFFFF" paddingBottom="15" paddingLeft="15" paddingRight="15" paddingTop="15">
                    <mx:TextArea fontSize="22" text="We didn't find any data for the fields and filters that you specified in the report."
                        borderStyle="none" backgroundAlpha="0" width="500" height="65" editable="false" selectable="false" focusEnabled="false"/>
                </mx:Box>
            </mx:Box>
        </mx:ViewStack>
    </mx:Canvas>

</mx:Module>