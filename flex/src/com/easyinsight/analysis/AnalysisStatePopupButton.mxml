<?xml version="1.0" encoding="utf-8"?>
<mx:Box xmlns:mx="http://www.adobe.com/2006/mxml" toolTip="(F5)">
	<mx:Metadata>
		[Event(name="analysisStateChange", type="com.easyinsight.analysis.AnalysisStateChangeEvent")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
        import com.easyinsight.framework.User;

        import mx.events.MenuEvent;

        [Bindable]
        private var xmlList:XMLList;

        public function set mode(mode:String):void {
            if (mode == "all") {
                xmlList = all;

            }
        }

        private var _reportTypeOptions:ReportTypeOptions = User.getInstance().reportTypeOptions;

        public function set reportTypeOptions(value:ReportTypeOptions):void {
            _reportTypeOptions = value;
            invalidateProperties();
        }

        override protected function commitProperties():void {
            super.commitProperties();
            if (_reportTypeOptions != null) {
                recurse(all);
            }
        }

        private function recurse(nodes:XMLList):void {
            for (var i:int = 0; i < nodes.length(); i++) {
                var xmlNode:XMLList = XMLList(nodes[i]);
                var type:int = xmlNode.@type;
                var keep:Boolean = _reportTypeOptions.hasType(type);
                if (!keep) {
                    delete nodes[i];
                } else {
                    recurse(XMLList(xmlNode.children()));
                }
            }
        }

        private function itemClickHandler(event:MenuEvent):void {
            if (event.item != null && event.item.@controller != null) {
                event.currentTarget.label = event.label;
                var controllerClass:Class = ControllerLookup.controllerForType(event.item.@type);
                if (controllerClass != null) {
                    var controller:IReportController = new controllerClass();
                    dispatchEvent(new AnalysisStateChangeEvent(controller));
                }
            }
        }

        public function set selectedLabel(type:int):void {
            setLabel(all, type);
            //p2.label = selectedLabel;
        }

        private function setLabel(parent:XMLList, type:int):void {
            var nodes:XMLList = parent.children();
            for (var i:int = 0; i < nodes.length(); i++) {
                var node:XMLList = XMLList(nodes[i]);
                if (node.@type == type) {
                    p2.label = node.@label;
                }
                setLabel(node, type);
            }
        }

        public function openPopup():void {
            p2.open();
        }
        ]]>
	</mx:Script>
	  <mx:XMLList id="all">
        <node label="Grid        ">
        	<node label="List" type="{AnalysisDefinition.LIST}"/>
        	<node label="Crosstab" type="{AnalysisDefinition.CROSSTAB}"/>
        	<node label="Tree" type="{AnalysisDefinition.TREE}"/>
        </node>
        <node label="Chart" icon="">
        	<node label="Column">
                <node label="2D Column" type="{AnalysisDefinition.COLUMN}"/>
                <node label="3D Column" type="{AnalysisDefinition.COLUMN3D}"/>
                <node label="Stacked Column" type="{AnalysisDefinition.STACKED_COLUMN}"/>
            </node>
        	<node label="Bar" icon="">
                <node label="2D Bar" type="{AnalysisDefinition.BAR}"/>
                <node label="3D Bar" type="{AnalysisDefinition.BAR3D}"/>
                <node label="Stacked Bar" type="{AnalysisDefinition.STACKED_BAR}"/>
            </node>
            <node label="Line" icon="">
                <node label="2D Line" type="{AnalysisDefinition.LINE}"/>
                <node label="3D Line" type="{AnalysisDefinition.LINE3D}"/>
            </node>
            <node label="Pie" icon="">
                <node label="2D Pie" type="{AnalysisDefinition.PIE}"/>
                <node label="3D Pie" type="{AnalysisDefinition.PIE3D}"/>
            </node>
            <node label="Area" icon="">
                <node label="2D Area" type="{AnalysisDefinition.AREA}"/>
                <node label="3D Area" type="{AnalysisDefinition.AREA3D}"/>
            </node>
        	<node label="Plot" type="{AnalysisDefinition.PLOT}"/>
        	<node label="Bubble" type="{AnalysisDefinition.BUBBLE}"/>
        </node>
        <node label="Chart" icon="">
            <node label="Trends" type="{AnalysisDefinition.TREND}"/>
        	<node label="Trend Grid" type="{AnalysisDefinition.TREND_GRID}"/>
            <node label="Diagram" type="{AnalysisDefinition.DIAGRAM}"/>
        </node>
        <node label="Google Map" type="{AnalysisDefinition.HEATMAP}"/>
        <node label="Tree Map" type="{AnalysisDefinition.TREEMAP}"/>
        <node label="Gauge" type="{AnalysisDefinition.GAUGE}"/>
        <node label="Gantt" type="{AnalysisDefinition.GANTT}"/>
        <node label="Form" type="{AnalysisDefinition.FORM}"/>
        <node label="Advanced" icon="">
            <node label="Vertical List" type="{AnalysisDefinition.VERTICAL_LIST}"/>
            <node label="Combined Vertical List" type="{AnalysisDefinition.COMBINED_VERTICAL_LIST}"/>
        </node>
    </mx:XMLList>
    <mx:PopUpMenuButton id="p2" 
            dataProvider="{xmlList}"
            labelField="@label" width="100" popUpStyleName="CustomPopupMenu"
            showRoot="false" itemClick="itemClickHandler(event);"/>
</mx:Box>
