<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:bubble="com.easyinsight.analysis.charts.bubble.*"
           width="100%" height="100%" implements="com.easyinsight.analysis.IReportRenderer"
           creationComplete="createRenderer()">
    <!--<mx:Style>
        .axisTitles {
            fontSize: 14;
            fontFamily: "Tahoma";
        }

        CartesianChart {
            axisTitleStyleName:axisTitles;
            fontFamily: "Tahoma";
            fontSize: 14;
        }
    </mx:Style>-->
	<mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.ClickUtil;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.FillProvider;
        import com.easyinsight.analysis.Link;
        import com.easyinsight.analysis.charts.ChartUtil;
        import com.easyinsight.filtering.FilterRawData;

        import com.easyinsight.pseudocontext.PseudoContextWindow;

        import mx.charts.ChartItem;
        import mx.charts.chartClasses.IAxis;
        import mx.charts.chartClasses.Series;
        import mx.charts.events.ChartItemEvent;
        import mx.charts.renderers.CircleItemRenderer;
        import mx.charts.series.items.BubbleSeriesItem;
        import mx.formatters.Formatter;
        import mx.charts.HitData;
        import mx.collections.ArrayCollection;
        import mx.managers.PopUpManager;

        [Bindable]
        private var graphData:ArrayCollection = new ArrayCollection();

        private function createRenderer():void {
            //bubbleSeries.setStyle("itemRenderer", new ClassFactory(CircleItemRenderer));
            bubbleSeries.setStyle("fills", FillProvider.createRadialGradients2());
            //bubbleSeries.setStyle("stroke", borderStroke);
        }

        [Bindable]
        private var dimension:String = "";

        [Bindable]
        private var measure1:String = "";

        [Bindable]
        private var measure1Name:String = "";
        [Bindable]
        private var measure2Name:String = "";

        [Bindable]
        private var measure3:String = "";

        private var measure3Formatter:Formatter;

        private var measure1Formatter:Formatter;

        private var dimensionItem:AnalysisItem;

        [Bindable]
        private var measure2:String = "";

        private var measure2Formatter:Formatter;

        private var bubbleChart:BubbleChartDefinition;

        private var showLabels:Boolean;

        [Bindable]
        private var chartRenderer:ClassFactory;

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            var plotChartDef:BubbleChartDefinition = analysisDefinition as BubbleChartDefinition;
            if (dataSet.length > 0) {
                this.bubbleChart = plotChartDef;
                xAxisBaseAtZero = plotChartDef.xAxisBaseAtZero;
                yAxisBaseAtZero = plotChartDef.yAxisBaseAtZero;
                this.defaultLink = ChartUtil.setup(plotChartDef.dimension, plotChart, onChartClick);
                plotChart.setStyle("fontFamily", plotChartDef.getFont());
                plotChart.setStyle("fontSize", plotChartDef.fontSize);
                plotChart.setStyle("backgroundAlpha", plotChartDef.backgroundAlpha);
                measure1 = plotChartDef.xaxisMeasure.qualifiedName();
                measure1Name = plotChartDef.xaxisMeasure.display;
                measure2 = plotChartDef.yaxisMeasure.qualifiedName();
                measure2Name = plotChartDef.yaxisMeasure.display;
                measure3 = plotChartDef.zaxisMeasure.qualifiedName();
                measure1Formatter = plotChartDef.xaxisMeasure.getFormatter();
                measure2Formatter = plotChartDef.yaxisMeasure.getFormatter();
                measure3Formatter = plotChartDef.zaxisMeasure.getFormatter();
                dimension = plotChartDef.dimension.qualifiedName();
                dimensionItem = plotChartDef.dimension;
                if (chartRenderer == null) {
                    showLabels = plotChartDef.showLabels;
                    chartRenderer = plotChartDef.showLabels ? new ClassFactory(LabeledBubbleRenderer) : new ClassFactory(CircleItemRenderer);
                } else {
                    if (showLabels && !plotChartDef.showLabels) {
                        showLabels = false;
                        chartRenderer = new ClassFactory(CircleItemRenderer);
                    } else if (!showLabels && plotChartDef.showLabels) {
                        showLabels = true;
                        chartRenderer = new ClassFactory(LabeledBubbleRenderer);
                    }
                }
            }
            graphData = dataSet;
        }

        private var defaultLink:Link;

        private function onChartClick(event:ChartItemEvent):void {
            ClickUtil.doStuff(defaultLink, event.hitData.item, bubbleChart.dimension, this, bubbleChart, null, plotChart);
        }


        protected function formatDataTip(hd:HitData):String {
            var dt:String = "";
            dt += "<b>" + hd.item[bubbleChart.dimension.qualifiedName()] + "</b><BR/>";

            dt += "<i>" + bubbleChart.xaxisMeasure.display + ":</i> ";
            dt += measure1Formatter.format(BubbleSeriesItem(hd.chartItem).xValue) + "\n";

            dt += "<i>" + bubbleChart.yaxisMeasure.display + ":</i> ";
            dt += measure2Formatter.format(BubbleSeriesItem(hd.chartItem).yValue) + "\n";

            dt += "<i>" + bubbleChart.zaxisMeasure.display + ":</i> ";
            dt += measure3Formatter.format(BubbleSeriesItem(hd.chartItem).zValue) + "\n";

            return dt;
        }

        private function renderXAxis(labelValue:Object, previousValue:Object, axis:IAxis):String {
            if (measure1Formatter != null) {
                return measure1Formatter.format(labelValue);
            } else {
                return String(labelValue);
            }
        }

        private function renderYAxis(labelValue:Object, previousValue:Object, axis:IAxis):String {
            if (measure2Formatter != null) {
                return measure2Formatter.format(labelValue);
            } else {
                return String(labelValue);
            }
        }


        public function updateExportMetadata():void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }

        private var _selectionEnabled:Boolean;

        [Bindable(event="selectionEnabledChanged")]
        public function get selectionEnabled():Boolean {
            return _selectionEnabled;
        }

        public function set selectionEnabled(value:Boolean):void {
            if (_selectionEnabled == value) return;
            _selectionEnabled = value;
            dispatchEvent(new Event("selectionEnabledChanged"));
            if (value)
                plotChart.selectionMode = "multiple";
            else
                plotChart.selectionMode = "none";
        }

        private function passThrough(event:Event):void {
            dispatchEvent(event);
        }

        public function preserveValues():Boolean {
            return false;
        }

        [Bindable]
        private var xAxisBaseAtZero:Boolean;

        [Bindable]
        private var yAxisBaseAtZero:Boolean;
		]]>
	</mx:Script>

	<mx:SeriesZoom id="zoomIn" duration="1000"/>
    <mx:SeriesZoom id="zoomOut" duration="1000"/>

	<mx:BubbleChart id="plotChart" dataProvider="{graphData}" width="100%" height="100%" showDataTips="true" dataTipFunction="formatDataTip"
		selectionMode="multiple" backgroundElements="{ChartUtil.gridLine('both')}">
		<mx:horizontalAxis>
			<mx:LinearAxis labelFunction="renderXAxis" baseAtZero="{xAxisBaseAtZero}" title="{measure1Name}" id="xAxis"/>
		</mx:horizontalAxis>
		<mx:horizontalAxisRenderers>
			<mx:AxisRenderer axis="{xAxis}" axisStroke="{ChartUtil.axisStroke()}">

			</mx:AxisRenderer>
		</mx:horizontalAxisRenderers>
		<mx:verticalAxis>
			<mx:LinearAxis labelFunction="renderYAxis" baseAtZero="{yAxisBaseAtZero}" title="{measure2Name}" id="yAxis"/>
		</mx:verticalAxis>
		<mx:verticalAxisRenderers>
			<mx:AxisRenderer axis="{yAxis}" axisStroke="{ChartUtil.axisStroke()}">

			</mx:AxisRenderer>
		</mx:verticalAxisRenderers>
		<mx:series>
			<bubble:LabeledBubbleSeries xField="{measure1}" yField="{measure2}" radiusField="{measure3}" hideDataEffect="zoomOut" showDataEffect="zoomIn"
                    id="bubbleSeries" labelField="{dimension}" textAlign="center" itemRenderer="{chartRenderer}"
                    textVAlign="middle"/>
		</mx:series>
	</mx:BubbleChart>
</mx:Module>