<?xml version="1.0" encoding="utf-8"?>
<ChartAdapter xmlns="com.easyinsight.analysis.charts.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%">
	<mx:Script>
		<![CDATA[
			import com.easyinsight.analysis.AnalysisItem;
			import com.easyinsight.filtering.FilterRawData;
			import mx.charts.ChartItem;
			import mx.charts.chartClasses.IAxis;
			import mx.formatters.Formatter;
			import mx.charts.HitData;
			import mx.charts.renderers.DiamondItemRenderer;
			import mx.collections.ArrayCollection;
			[Bindable]
			private var graphData:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var dimension:String = "";
			
			[Bindable]
			private var measure1:String = "";
			
			[Bindable]
			private var measure3:String = "";
			
			private var measure3Formatter:Formatter;
			
			private var measure1Formatter:Formatter;
			
			private var dimensionItem:AnalysisItem;
			
			[Bindable]
			private var measure2:String = "";
			
			private var measure2Formatter:Formatter;
			
			override public function dataChange(dataSet:ArrayCollection, dimensions:Array, measures:Array):void {
				if (measures.length == 3) {
					measure1 = measures[0].key.createString();
					measure2 = measures[1].key.createString();
					measure3 = measures[2].key.createString();
					measure1Formatter = measures[0].getFormatter();
					measure2Formatter = measures[1].getFormatter();
					measure3Formatter = measures[2].getFormatter();
					dimension = dimensions[0].key.createString();
					dimensionItem = dimensions[0] as AnalysisItem;
					graphData = dataSet;
				}								
			}
			
			override public function getMaxMeasures():int {
				return 3;
			}
			
			override public function getMaxDimensions():int {
				return 1;
			}
			
			private function dtFunc(hd:HitData):String {
				return hd.item[dimension];		        
		     }
		     
		    override public function createFilterRawData():FilterRawData {
				var filterRawData:FilterRawData = new FilterRawData();
				for (var i:int = 0; i < plotChart.selectedChartItems.length; i++) {
                	var obj:ChartItem = plotChart.selectedChartItems[i];
					filterRawData.addPair(dimensionItem, obj.item[dimensionItem.key.createString()]);                	
                }
				return filterRawData;
			}
			
			private function renderXAxis(labelValue:Object, previousValue:Object, axis:IAxis):String {
				if (measure1Formatter != null) {
					return measure1Formatter.format(labelValue);
				} else {
					return String(labelValue);
				}
			}
			
			private function renderYAxis(labelValue:Object, previousValue:Object, axis:IAxis):String {
				if (measure2Formatter != null) {
					return measure2Formatter.format(labelValue);
				} else {
					return String(labelValue);
				}
			}
		]]>
	</mx:Script>
	
	<mx:SeriesZoom id="zoomIn" duration="1000"/>
    <mx:SeriesZoom id="zoomOut" duration="1000"/>
	
	<mx:BubbleChart id="plotChart" dataProvider="{graphData}" width="100%" height="100%" showDataTips="true" dataTipFunction="dtFunc" 
		selectionMode="multiple">
		<mx:horizontalAxis>
			<mx:LinearAxis labelFunction="renderXAxis" baseAtZero="false" title="{measure1}" id="xAxis"/> 
		</mx:horizontalAxis>
		<mx:horizontalAxisRenderers>
			<mx:AxisRenderer axis="{xAxis}">
				
			</mx:AxisRenderer>
		</mx:horizontalAxisRenderers>		
		<mx:verticalAxis>
			<mx:LinearAxis labelFunction="renderYAxis" baseAtZero="false" title="{measure2}" id="yAxis"/>
		</mx:verticalAxis>
		<mx:verticalAxisRenderers>
			<mx:AxisRenderer axis="{yAxis}">
				
			</mx:AxisRenderer>
		</mx:verticalAxisRenderers>
		<mx:series>
			<mx:BubbleSeries xField="{measure1}" yField="{measure2}" radiusField="{measure3}" hideDataEffect="zoomOut" showDataEffect="zoomIn"/>
		</mx:series>
	</mx:BubbleChart>
</ChartAdapter>
