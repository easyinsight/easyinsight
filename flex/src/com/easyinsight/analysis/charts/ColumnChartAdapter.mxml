<?xml version="1.0" encoding="utf-8"?>
<analysis:ChartAdapter xmlns:analysis="com.easyinsight.analysis.charts.*" xmlns:mx="http://www.adobe.com/2006/mxml" height="100%" width="100%" creationComplete="setup()">
	<mx:Metadata>
		[Event(name="chartSort", type="com.easyinsight.analysis.ChartSortEvent")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.easyinsight.analysis.AnalysisItemTypes;
            import com.easyinsight.skin.CustomChartRendererFactory;
import mx.charts.chartClasses.AxisBase;
			import com.easyinsight.analysis.SortableAxisTitleFactory;
			import com.easyinsight.analysis.AnalysisItem;
			import mx.events.FlexEvent;
			import mx.controls.TextInput;
			import mx.charts.ColumnChart;
			import mx.charts.AxisRenderer;
			import com.easyinsight.filtering.FilterRawData;
            import mx.graphics.BitmapFill;
import mx.graphics.SolidColor;
			import mx.graphics.IFill;
			import com.easyinsight.analysis.conditions.ConditionRenderer;
			import mx.charts.chartClasses.IAxis;
			import mx.charts.LinearAxis;
			import mx.formatters.Formatter;
			import mx.charts.series.items.ColumnSeriesItem;
			import mx.charts.chartClasses.Series;
			import mx.charts.ChartItem;
			import mx.charts.CategoryAxis;
			import mx.charts.series.ColumnSeries;
			import mx.collections.ArrayCollection;

            [Bindable]
            [Embed(source="../../../../../assets/water4.JPG")]
            private var backgroundDesktop:Class;

			[Bindable]
			private var graphData:ArrayCollection = new ArrayCollection();

			[Bindable]
			private var xAxisTitle:String = "";

			[Bindable]
			private var yAxisTitle:String = "";

			[Bindable]
			private var xAxisItem:AnalysisItem;
			[Bindable]
			private var yAxisItem:AnalysisItem;

			[Bindable]
			private var _xField:String;
			[Bindable]
			private var yField:String;

			private var measureFormatter:Formatter;

			private var customColors:Boolean = false;
			private var conditionRenderer:ConditionRenderer;

			private var columnChart:ColumnChart;

			private var xAxis:CategoryAxis;
			private var yAxis:LinearAxis;

			private var xAxisTitleRendererFactory:SortableAxisTitleFactory;

			private var yAxisTitleRendererFactory:SortableAxisTitleFactory;

			private var columnSeries:ColumnSeries;

            private var bgFills:Array;

			private function setup():void {
                bgFills = [];
                for (var i:int = 0; i < 15; i++) {
                    var bgFill:BitmapFill = new BitmapFill();
                    bgFill.source = backgroundDesktop;
                    bgFill.originX = Math.random() * 60;
                    bgFill.originY = Math.random() * 60;
                    bgFills.push(bgFill);
                }
            }

			[Bindable]
			public function get xField():String {
				return _xField;
			}

			public function set xField(xField:String):void {
				this._xField = xField;
				dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
			}

			override public function get chartType():int {
				return ChartTypes.COLUMN_2D;
			}

			private function createChart():void {
				if (columnChart == null) {

					// define the chart itself

					columnChart = new ColumnChart();
					columnChart.percentHeight = 100;
					columnChart.percentWidth = 100;
					columnChart.showDataTips = true;
					columnChart.selectionMode = "multiple";
					columnChart.dataProvider = graphData;

					// define the X axis

					xAxis = new CategoryAxis();
					xAxis.categoryField = xField;
					xAxis.dataProvider = graphData;
					xAxis.title = xAxisTitle;
					columnChart.horizontalAxis = xAxis;
					var axisRenderer:AxisRenderer = new AxisRenderer();
			        axisRenderer.axis = xAxis;
			        xAxisTitleRendererFactory = new SortableAxisTitleFactory(xAxisItem, true);
			        axisRenderer.titleRenderer = xAxisTitleRendererFactory;
			        //axisRenderer.setStyle("color", "#FFFFFF");
			        axisRenderer.placement = "bottom";
			        columnChart.horizontalAxisRenderers = [ axisRenderer ];

			        // define the Y axis

			        yAxis = new LinearAxis();
			        yAxis.title = yAxisTitle;
			        yAxis.labelFunction = renderAxis;
			        columnChart.verticalAxis = yAxis;
			        var yAxisRenderer:AxisRenderer = new AxisRenderer();
			        yAxisRenderer.axis = yAxis;
			        //yAxisRenderer.setStyle("color", "#FFFFFF");
			        yAxisTitleRendererFactory = new SortableAxisTitleFactory(yAxisItem, false);
			        yAxisRenderer.titleRenderer = yAxisTitleRendererFactory;
			        yAxisRenderer.placement = "left";
			        columnChart.verticalAxisRenderers = [ yAxisRenderer ];

			        // create the data series

					columnSeries = new ColumnSeries();
                    columnSeries.setStyle("itemRenderer", new CustomChartRendererFactory());
                    columnSeries.setStyle("stroke", s1);
                    columnSeries.fillFunction = customFill;
					columnSeries.xField = xField;
					columnSeries.yField = yField;
					columnSeries.labelFunction = renderChartLabel;
					columnSeries.dataProvider = graphData;
					columnSeries.displayName = xAxisTitle;
					columnSeries.setStyle("showDataEffect", interpolateIn);
					//columnSeries.setStyle("fills", standardBlue);
					var mySeries:Array = new Array();
					columnChart.series = mySeries;
					mySeries.push(columnSeries);
					addChild(columnChart);
				}
			}

			override public function dataChange(dataSet:ArrayCollection, dimensions:Array, measures:Array):void {

				createChart();

				if (measures.length == 1) {
					measureFormatter = measures[0].getFormatter();
					var conditionRenderer:ConditionRenderer = measures[0].createClientRenderer();
					if (conditionRenderer.hasCustomColor()) {
						customColors = true;
						this.conditionRenderer = conditionRenderer;
					}
				}

				var newXAxisItem:AnalysisItem = dimensions[0];
				if (xAxisItem == null || newXAxisItem.key.createString() != xAxisItem.key.createString()) {
					xAxisItem = newXAxisItem;
					xAxisTitleRendererFactory.analysisItem = xAxisItem;
				}

				var newYAxisItem:AnalysisItem = measures[0];
				if (yAxisItem == null || newYAxisItem.key.createString() != yAxisItem.key.createString()) {
					yAxisItem = newYAxisItem;
					yAxisTitleRendererFactory.analysisItem = yAxisItem;
				}

				var newXField:String = dimensions[0].key.createString();
				if (newXField != xField) {
					xField = newXField;
					xAxis.categoryField = xField;
					columnSeries.xField = xField;
				}

				var newXAxisTitle:String = dimensions[0].display;
				if (newXAxisTitle != xAxisTitle) {
					xAxisTitle = newXAxisTitle;
					xAxis.title = xAxisTitle;
					columnSeries.displayName = xAxisTitle;
				}

				var newYField:String = measures[0].key.createString();
				if (newYField != yField) {
					yField = newYField;
					columnSeries.yField = yField;
				}

				var newYAxisTitle:String = measures[0].display;
				if (newYAxisTitle != yAxisTitle) {
					yAxisTitle = newYAxisTitle;
					yAxis.title = yAxisTitle;
				}

				columnChart.dataProvider = dataSet;
				columnSeries.dataProvider = dataSet;
				xAxis.dataProvider = dataSet;
				graphData = dataSet;
			}

			private function renderChartLabel(element:ChartItem, series:Series):String {
				var columnSeriesItem:ColumnSeriesItem = element as ColumnSeriesItem;
				return measureFormatter.format(columnSeriesItem.xNumber);
			}

			private function customFill(element:ChartItem, index:Number):IFill {
				return bgFills[index % 15];
			}

			private function renderAxis(labelValue:Object, previousValue:Object, axis:IAxis):String {
				return measureFormatter.format(labelValue);
			}

			override public function getMaxMeasures():int {
				return 1;
			}

			override public function getMaxDimensions():int {
				return 1;
			}

			override public function createFilterRawData():FilterRawData {
				var filterRawData:FilterRawData = new FilterRawData();
				for (var i:int = 0; i < columnChart.selectedChartItems.length; i++) {
                	var obj:ChartItem = columnChart.selectedChartItems[i];
					filterRawData.addPair(xAxisItem, obj.item[xAxisItem.key.createString()]);
                }
				return filterRawData;
			}
		]]>
	</mx:Script>
    <mx:Stroke id="s1" color="#2A7E93" weight="2"/>
	<mx:SeriesInterpolate id="interpolateIn" duration="1000"/>

</analysis:ChartAdapter>
