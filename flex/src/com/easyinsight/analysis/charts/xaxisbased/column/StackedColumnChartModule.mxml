<?xml version="1.0" ?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           implements="com.easyinsight.analysis.IReportRenderer"
           width="100%" height="100%">
    <mx:states>
        <mx:State name="hideLegend">
            <mx:RemoveChild target="{legend}"/>
        </mx:State>
    </mx:states>
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.ChartDefinition;
        import com.easyinsight.analysis.ChartReportFieldExtension;
        import com.easyinsight.analysis.ClickUtil;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.FillProvider;
        import com.easyinsight.analysis.Link;
        import com.easyinsight.analysis.MultiColor;
        import com.easyinsight.analysis.Value;
        import com.easyinsight.analysis.charts.ChartUtil;
        import com.easyinsight.analysis.charts.EILegend;

        import mx.binding.utils.BindingUtils;
        import mx.charts.AxisRenderer;
        import mx.charts.CategoryAxis;
        import mx.charts.ChartItem;
        import mx.charts.ColumnChart;
        import mx.charts.LinearAxis;
        import mx.charts.chartClasses.CartesianCanvasValue;
        import mx.charts.chartClasses.CartesianDataCanvas;
        import mx.charts.chartClasses.IAxis;
        import mx.charts.chartClasses.Series;
        import mx.charts.events.ChartItemEvent;
        import mx.charts.series.ColumnSeries;
        import mx.charts.series.items.ColumnSeriesItem;
        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.controls.Label;
        import mx.events.FlexEvent;
        import mx.formatters.Formatter;
        import mx.graphics.SolidColor;

        [Bindable]
        private var graphData:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var xAxisTitle:String = "";

        [Bindable]
        private var yAxisTitle:String = "";

        [Bindable]
        private var xAxisItem:AnalysisItem;
        [Bindable]
        private var yAxisItem:AnalysisItem;

        private var _xField:String;
        [Bindable]
        private var yField:String;

        private var measureFormatter:Formatter;

        private var dimensionFormatter:Formatter;

        private var customColors:Boolean = false;

        private var columnChart:ColumnChart;

        private var xAxis:CategoryAxis;
        private var yAxis:LinearAxis;

        private var xAxisTitleRendererFactory:ClassFactory;

        private var yAxisTitleRendererFactory:ClassFactory;

        private var sortable:Boolean = true;
        private var selectable:Boolean = true;

        [Bindable]
        public function get xField():String {
            return _xField;
        }

        public function set xField(val:String):void {
            _xField = val;
            dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
        }

        private var dataCanvas:CartesianDataCanvas;

        private function drawGoalLine(data:ArrayCollection, additionalProps:Object):void {
            if (data.length > 0 && xAxisItem.reportFieldExtension != null && xAxisItem.reportFieldExtension is ChartReportFieldExtension) {
                var cfre:ChartReportFieldExtension = xAxisItem.reportFieldExtension as ChartReportFieldExtension;
                if (cfre.goal != null) {

                    var value:Value = additionalProps["goal" + cfre.goal.qualifiedName()];

                    if (value != null) {
                        var num:Number = Number(value.getValue());
                        var left:Object = (data).getItemAt(0);
                        var midPoint:int = data.length / 2;
                        var mid:Object = data.getItemAt(midPoint);
                        var right:Object = (data).getItemAt((data).length - 1);
                        dataCanvas.clear();


                        //dataCanvas.addDataChild(hbox);
                        dataCanvas.lineStyle(4,
                                0x888888,
                                .75,
                                true,
                                LineScaleMode.NORMAL,
                                CapsStyle.ROUND,
                                JointStyle.MITER,
                                2
                        );

                        dataCanvas.moveTo(new CartesianCanvasValue(left[xAxisItem.qualifiedName()], -200), num);
                        dataCanvas.lineTo(new CartesianCanvasValue(right[xAxisItem.qualifiedName()], 200), num);
                        var label:Label = new Label();
                        label.text = "Team Goal";
                        dataCanvas.addDataChild(label, new CartesianCanvasValue(mid[xAxisItem.qualifiedName()], -50), num);
                    }
                }
            }

        }

        private function createChart():void {
            if (columnChart == null) {

                // define the chart itself

                columnChart = new ColumnChart();
                dataCanvas = new CartesianDataCanvas();
                dataCanvas.includeInRanges = true;
                columnChart.annotationElements = [ dataCanvas ];

                columnChart.percentHeight = 100;
                columnChart.percentWidth = 100;
                columnChart.showDataTips = true;
                columnChart.backgroundElements = ChartUtil.gridLine("horizontal");
                //columnChart.cacheAsBitmap = true;
                //columnChart.dataTipFunction = formatDataTip;
                /*if (selectable) {
                 columnChart.selectionMode = "multiple";
                 }*/

                // define the X axis

                xAxis = new CategoryAxis();
                BindingUtils.bindProperty(xAxis, "categoryField", this, "xField");
                //xAxis.categoryField = xField;
                xAxis.labelFunction = renderDimensionAxis;
                //xAxis.dataProvider = graphData;
                xAxis.title = xAxisTitle;
                var horizontalAxisRenderer:AxisRenderer = new AxisRenderer();
                horizontalAxisRenderer.setStyle("axisStroke", ChartUtil.axisStroke());
                horizontalAxisRenderer.axis = xAxis;
                columnChart.horizontalAxisRenderer = horizontalAxisRenderer;
                columnChart.horizontalAxis = xAxis;

                // define the Y axis

                yAxis = new LinearAxis();

                yAxis.title = yAxisTitle;
                yAxis.labelFunction = renderAxis;
                var verticalAxisRenderer:AxisRenderer = new AxisRenderer();
                verticalAxisRenderer.setStyle("axisStroke", ChartUtil.axisStroke());
                verticalAxisRenderer.axis = xAxis;
                columnChart.verticalAxisRenderer = verticalAxisRenderer;
                columnChart.verticalAxis = yAxis;

                // create the data series


                canvas.addChild(columnChart);
                legend = new EILegend();
                legend.percentHeight = 100;
                //legend.dataProvider = columnChart;
                canvas.addChild(legend);
                columnChart.addEventListener("legendDataChanged", legendDataChanged);
            } else {
                columnChart.visible = true;
            }
        }

        private function legendDataChanged(event:Event):void {
            legend.dataProvider = columnChart.legendData;
        }

        [Bindable]
        private var legend:EILegend;

        private function myDataFunction(series:Series, item:Object, fieldName:String):Object {
            if (fieldName == 'yValue')
                return(item[yAxisItem.qualifiedName()].toNumber());
            else if (fieldName == "xValue")
                return(item[xAxisItem.qualifiedName()].toString());
            else
                return null;
        }


        private function renderChartLabel(element:ChartItem, series:Series):String {
            var columnSeriesItem:ColumnSeriesItem = element as ColumnSeriesItem;
            return measureFormatter.format(columnSeriesItem.xNumber);
        }

        private function renderAxis(labelValue:Object, previousValue:Object, axis:IAxis):String {
            return measureFormatter.format(labelValue);
        }

        private function renderDimensionAxis(item:Object, prevValue:Object, axis:CategoryAxis, categoryItem:Object):String {
            return dimensionFormatter.format(item);
        }

        private var columnChartDef:StackedColumnChartDefinition;

        private var stackItem:AnalysisItem;

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            columnChartDef = analysisDefinition as StackedColumnChartDefinition;


            if (dataSet.length > 0) {

                stackIndex = 0;

                xField = columnChartDef.xaxis.qualifiedName();
                createChart();

                if (columnChartDef.yAxisMinimumDefined) {
                    LinearAxis(yAxis).minimum = columnChartDef.yAxisMininum;
                }
                if (columnChartDef.yAxisMaximumDefined) {
                    LinearAxis(yAxis).maximum = columnChartDef.yAxisMaximum;
                }


                stackItem = columnChartDef.stackItem;

                var mySeries:Array = new Array();

                var uniques:ArrayCollection = new ArrayCollection();


                var dataObjs:ArrayCollection = columnChartDef.populateGroupings(dataSet, uniques);

                if (columnChartDef.stackSort == ChartDefinition.STACK_SORT_ASCENDING || columnChartDef.stackSort == ChartDefinition.STACK_SORT_DESCENDING) {
                    var stackSort:Sort = new Sort();
                    stackSort.fields = [ new SortField(null, true, columnChartDef.stackSort != ChartDefinition.STACK_SORT_ASCENDING)];
                    uniques.sort = stackSort;
                    uniques.refresh();
                }

                var columnSet:EIColumnSet = new EIColumnSet();
                measureFormatter = columnChartDef.measures.getItemAt(0).getFormatter();
                dimensionFormatter = columnChartDef.xaxis.getFormatter();
                columnSet.xAxisFormatter = dimensionFormatter;
                columnSet.yAxisFormatter = measureFormatter;
                columnSet.stackFormatter = stackItem.getFormatter();
                columnSet.type = "stacked";

                var useCustomColors:Boolean;
                var colors:Array;
                useCustomColors = (columnChartDef.multiColors != null && columnChartDef.multiColors.length && MultiColor(columnChartDef.multiColors.getItemAt(0)).color1StartEnabled);
                if (useCustomColors) {
                    colors = [];
                    for each (var mc:MultiColor in columnChartDef.multiColors) {
                        if (mc.color1StartEnabled) {
                            colors.push(new SolidColor(mc.color1Start));
                        }
                    }
                } else {
                    colors = FillProvider.createLinearGradients(0);
                }

                if (columnChartDef.stackSort == ChartDefinition.SORT_X_ASCENDING) {

                } else if (columnChartDef.stackSort == ChartDefinition.SORT_X_ASCENDING) {

                } else {

                }

                for (var i:int = 0; i < uniques.length; i++) {
                    var key:String = uniques.getItemAt(i) as String;

                    var uniqueLineSeries:ColumnSeries = new ColumnSeries();
                    if (columnChartDef.labelPosition == "inside") {
                        var cFactory:ClassFactory = new ClassFactory(StackedBetterBoxRenderer);
                        cFactory.properties = { labelFontSize:columnChartDef.labelFontSize, labelFontWeight:columnChartDef.labelFontWeight, formatter:measureFormatter,
                            labelInsideFontColor:columnChartDef.useInsideLabelFontColor ? columnChartDef.labelInsideFontColor : 0xFFFFFF};
                        uniqueLineSeries.setStyle("itemRenderer", cFactory);
                    }
                    uniqueLineSeries.setStyle("fill", colors[i % colors.length]);
                    //uniqueLineSeries.xField = columnChartDef.xaxis.qualifiedName();
                    if (key == null || key == "") {
                        key = "[ No Value ]";
                    }
                    //uniqueLineSeries.setStyle("labelPosition",columnChartDef.labelPosition);
                    uniqueLineSeries.labelFunction = function (element:ChartItem, series:Series):String {
                        var columnSeriesItem:ColumnSeriesItem = element as ColumnSeriesItem;

                        return AnalysisItem(columnChartDef.measures.getItemAt(0)).getFormatter().format(columnSeriesItem.yNumber - columnSeriesItem.minNumber);
                    };
                    uniqueLineSeries.yField = key;
                    uniqueLineSeries.displayName = key;
                    mySeries.push(uniqueLineSeries);
                }

                if (columnChartDef.showLegend && uniques.length > 1) {
                    currentState = "";
                } else {
                    currentState = "hideLegend";
                }

                columnSet.series = mySeries;
                columnChart.series = [ columnSet ];

                legend.maxWidth = columnChartDef.legendMaxWidth;
                columnChartDef.styleChart(columnChart);

                this.defaultLink = ChartUtil.setup(columnChartDef.stackItem, columnChart, onChartClick);


                var newXAxisItem:AnalysisItem = columnChartDef.xaxis;
                xAxisItem = newXAxisItem;


                var newYAxisItem:AnalysisItem = columnChartDef.measures.getItemAt(0) as AnalysisItem;
                if (yAxisItem == null || newYAxisItem.qualifiedName() != yAxisItem.qualifiedName()) {
                    yAxisItem = newYAxisItem;
                }

                xAxis.categoryField = newXAxisItem.qualifiedName();

                var newXAxisTitle:String = (columnChartDef.xAxisLabel != null && columnChartDef.xAxisLabel != "") ? columnChartDef.xAxisLabel : newXAxisItem.unqualifiedDisplay;
                if (newXAxisTitle != xAxisTitle) {
                    xAxisTitle = newXAxisTitle;
                    xAxis.title = xAxisTitle;
                }

                var newYField:String = newYAxisItem.qualifiedName();
                if (newYField != yField) {
                    yField = newYField;
                }

                var newYAxisTitle:String = (columnChartDef.yAxisLabel != null && columnChartDef.yAxisLabel != "") ? columnChartDef.yAxisLabel : newYAxisItem.unqualifiedDisplay;
                if (newYAxisTitle != yAxisTitle) {
                    yAxisTitle = newYAxisTitle;
                    yAxis.title = yAxisTitle;
                }

                columnChart.dataProvider = dataObjs;
                drawGoalLine(dataObjs, additionalProperties);
            } else {
                if (columnChartDef.measures != null && columnChartDef.measures.length > 0 && columnChartDef.xaxis != null) stackIndex = 2;
                else stackIndex = 1;
                if (columnChart != null) {
                    columnChart.dataProvider = new ArrayCollection();
                    xAxis.dataProvider = new ArrayCollection();
                    columnChart.visible = false;
                }
            }

            graphData = dataSet;
        }

        private var defaultLink:Link;

        private function onChartClick(event:ChartItemEvent):void {
            var series:ColumnSeries = event.hitData.chartItem.element as ColumnSeries;
            var key:String = series.yField;
            ClickUtil.doStuff(defaultLink, event.hitData.item, columnChartDef.stackItem, this, columnChartDef, key, columnChart);
        }

        [Bindable]
        private var stackIndex:int = 0;

        public function preserveValues():Boolean {
            return true;
        }

        public function updateExportMetadata(report:AnalysisDefinition = null):void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }
        ]]></mx:Script>
    <mx:Stroke id="s1" color="#2A7E93" weight="2"/>
    <mx:SeriesInterpolate id="interpolateIn" duration="1000"/>
    <mx:Canvas width="100%" height="100%" backgroundAlpha="1" backgroundColor="#FFFFFF">
        <mx:HBox width="100%" height="100%" id="canvas">

        </mx:HBox>
    </mx:Canvas>
</mx:Canvas>