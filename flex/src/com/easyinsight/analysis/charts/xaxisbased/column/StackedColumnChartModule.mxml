<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml"
           implements="com.easyinsight.analysis.IReportRenderer"
           width="100%" height="100%">
    <mx:states>
        <mx:State name="hideLegend">
            <mx:RemoveChild target="{legend}"/>
        </mx:State>
    </mx:states>
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;


        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.ChartDefinition;
        import com.easyinsight.analysis.ClickUtil;

        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.FillProvider;
        import com.easyinsight.analysis.Link;
        import com.easyinsight.analysis.SortFunctionFactory;
        import com.easyinsight.analysis.charts.ChartUtil;
        import com.easyinsight.analysis.charts.EILegend;


        import com.easyinsight.filtering.FilterRawData;


        import mx.binding.utils.BindingUtils;
        import mx.charts.AxisRenderer;

        import mx.charts.CategoryAxis;
        import mx.charts.ChartItem;
        import mx.charts.ColumnChart;
        import mx.charts.Legend;
        import mx.charts.LinearAxis;
        import mx.charts.chartClasses.IAxis;
        import mx.charts.chartClasses.Series;
        import mx.charts.events.ChartItemEvent;
        import mx.charts.series.ColumnSeries;
        import mx.charts.series.ColumnSet;
        import mx.charts.series.items.ColumnSeriesItem;
        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.events.FlexEvent;
        import mx.formatters.Formatter;
        import mx.graphics.IFill;

        [Bindable]
        private var graphData:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var xAxisTitle:String = "";

        [Bindable]
        private var yAxisTitle:String = "";

        [Bindable]
        private var xAxisItem:AnalysisItem;
        [Bindable]
        private var yAxisItem:AnalysisItem;

        private var _xField:String;
        [Bindable]
        private var yField:String;

        private var measureFormatter:Formatter;

        private var dimensionFormatter:Formatter;

        private var customColors:Boolean = false;

        private var columnChart:ColumnChart;

        private var xAxis:CategoryAxis;
        private var yAxis:LinearAxis;

        private var xAxisTitleRendererFactory:ClassFactory;

        private var yAxisTitleRendererFactory:ClassFactory;

        private var sortable:Boolean = true;
        private var selectable:Boolean = true;

        [Bindable]
        public function get xField():String {
            return _xField;
        }

        public function set xField(val:String):void {
            _xField = val;
            dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
        }

        private function createChart():void {
            if (columnChart == null) {

                // define the chart itself

                columnChart = new ColumnChart();
                columnChart.percentHeight = 100;
                columnChart.percentWidth = 100;
                columnChart.showDataTips = true;
                columnChart.backgroundElements = ChartUtil.gridLine("horizontal");
                //columnChart.cacheAsBitmap = true;
                //columnChart.dataTipFunction = formatDataTip;
                /*if (selectable) {
                 columnChart.selectionMode = "multiple";
                 }*/

                // define the X axis

                xAxis = new CategoryAxis();
                BindingUtils.bindProperty(xAxis, "categoryField", this, "xField");
                //xAxis.categoryField = xField;
                xAxis.labelFunction = renderDimensionAxis;
                //xAxis.dataProvider = graphData;
                xAxis.title = xAxisTitle;
                var horizontalAxisRenderer:AxisRenderer = new AxisRenderer();
                horizontalAxisRenderer.setStyle("axisStroke", ChartUtil.axisStroke());
                horizontalAxisRenderer.axis = xAxis;
                columnChart.horizontalAxisRenderer = horizontalAxisRenderer;
                columnChart.horizontalAxis = xAxis;

                // define the Y axis

                yAxis = new LinearAxis();
                yAxis.title = yAxisTitle;
                yAxis.labelFunction = renderAxis;
                var verticalAxisRenderer:AxisRenderer = new AxisRenderer();
                verticalAxisRenderer.setStyle("axisStroke", ChartUtil.axisStroke());
                verticalAxisRenderer.axis = xAxis;
                columnChart.verticalAxisRenderer = verticalAxisRenderer;
                columnChart.verticalAxis = yAxis;

                // create the data series


                canvas.addChild(columnChart);
                legend = new EILegend();
                legend.percentHeight = 100;
                legend.dataProvider = columnChart;
                canvas.addChild(legend);
            } else {
                columnChart.visible = true;
            }
        }

        [Bindable]
        private var legend:EILegend;

        private function myDataFunction(series:Series, item:Object, fieldName:String):Object {
            if (fieldName == 'yValue')
                return(item[yAxisItem.qualifiedName()].toNumber());
            else if (fieldName == "xValue")
                return(item[xAxisItem.qualifiedName()].toString());
            else
                return null;
        }


        private function renderChartLabel(element:ChartItem, series:Series):String {
            var columnSeriesItem:ColumnSeriesItem = element as ColumnSeriesItem;
            return measureFormatter.format(columnSeriesItem.xNumber);
        }

        private function renderAxis(labelValue:Object, previousValue:Object, axis:IAxis):String {
            return measureFormatter.format(labelValue);
        }

        private function renderDimensionAxis(item:Object, prevValue:Object, axis:CategoryAxis, categoryItem:Object):String {
            return dimensionFormatter.format(item);
        }

        public function createFilterRawData():FilterRawData {
            var filterRawData:FilterRawData = new FilterRawData();
            for (var i:int = 0; i < columnChart.selectedChartItems.length; i++) {
                var obj:ChartItem = columnChart.selectedChartItems[i];
                filterRawData.addPair(xAxisItem, obj.item[xAxisItem.key.createString()]);
            }
            return filterRawData;
        }

        private var columnChartDef:StackedColumnChartDefinition;

        private var stackItem:AnalysisItem;

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            columnChartDef = analysisDefinition as StackedColumnChartDefinition;

            if (dataSet.length > 0) {

                canvas.setStyle("backgroundAlpha", columnChartDef.backgroundAlpha);
                stackIndex = 0;
                if (columnChartDef.columnSort != ChartDefinition.SORT_UNSORTED) {
                    var sort:Sort = new Sort();
                    if (columnChartDef.columnSort == ChartDefinition.SORT_X_ASCENDING) {
                        sort.compareFunction = SortFunctionFactory.createSortFunction(columnChartDef.xaxis, false);
                    } else if (columnChartDef.columnSort == ChartDefinition.SORT_X_DESCENDING) {
                        sort.compareFunction = SortFunctionFactory.createSortFunction(columnChartDef.xaxis, true);
                    } else if (columnChartDef.columnSort == ChartDefinition.SORT_Y_ASCENDING) {
                        sort.compareFunction = SortFunctionFactory.createSortFunction(columnChartDef.measures.getItemAt(0) as AnalysisItem, false);
                    } else if (columnChartDef.columnSort == ChartDefinition.SORT_Y_DESCENDING) {
                        sort.compareFunction = SortFunctionFactory.createSortFunction(columnChartDef.measures.getItemAt(0) as AnalysisItem, true);
                    }
                    dataSet.sort = sort;
                    dataSet.refresh();
                }

                xField = columnChartDef.xaxis.qualifiedName();
                createChart();



                stackItem = columnChartDef.stackItem;

                var mySeries:Array = new Array();

                var uniques:ArrayCollection = new ArrayCollection();


                var dataObjs:ArrayCollection = columnChartDef.populateGroupings(dataSet, uniques);
                var columnSet:ColumnSet = new ColumnSet();
                columnSet.type = "stacked";
                for (var i:int = 0; i < uniques.length; i++) {
                    var key:String = uniques.getItemAt(i) as String;

                    var uniqueLineSeries:ColumnSeries = new ColumnSeries();
                    var cFactory:ClassFactory = new ClassFactory(ContextMenuBoxItemRenderer);
                    cFactory.properties = { stackItem: stackItem, seriesField: key};
                    uniqueLineSeries.setStyle("itemRenderer", cFactory);
                    uniqueLineSeries.setStyle("fill", FillProvider.getColor(columnChartDef.colorScheme, i));
                    //uniqueLineSeries.xField = columnChartDef.xaxis.qualifiedName();
                    if (key == null || key == "") {
                        key = "[ No Value ]";
                    }
                    uniqueLineSeries.yField = key;
                    uniqueLineSeries.displayName = key;
                    mySeries.push(uniqueLineSeries);
                }

                if (columnChartDef.showLegend && uniques.length > 1) {
                    currentState = "";
                } else {
                    currentState = "hideLegend";
                }

                columnSet.series = mySeries;
                columnChart.series = [ columnSet ];

                columnChart.setStyle("fontFamily", "Lucida Grande");
                columnChart.setStyle("fontSize", columnChartDef.fontSize);

                this.defaultLink = ChartUtil.setup(columnChartDef.stackItem, columnChart, onChartClick);

                measureFormatter = columnChartDef.measures.getItemAt(0).getFormatter();
                dimensionFormatter = columnChartDef.xaxis.getFormatter();

                var newXAxisItem:AnalysisItem = columnChartDef.xaxis;
                if (xAxisItem == null || newXAxisItem.qualifiedName() != xAxisItem.qualifiedName()) {
                    xAxisItem = newXAxisItem;
                }



                var newYAxisItem:AnalysisItem = columnChartDef.measures.getItemAt(0) as AnalysisItem;
                if (yAxisItem == null || newYAxisItem.qualifiedName() != yAxisItem.qualifiedName()) {
                    yAxisItem = newYAxisItem;
                }

                xAxis.categoryField = newXAxisItem.qualifiedName();
                var newXField:String = newXAxisItem.qualifiedName();

                var newXAxisTitle:String = newXAxisItem.display;
                if (newXAxisTitle != xAxisTitle) {
                    xAxisTitle = newXAxisTitle;
                    xAxis.title = xAxisTitle;
                }

                var newYField:String = newYAxisItem.qualifiedName();
                if (newYField != yField) {
                    yField = newYField;
                }

                var newYAxisTitle:String = newYAxisItem.display;
                if (newYAxisTitle != yAxisTitle) {
                    yAxisTitle = newYAxisTitle;
                    yAxis.title = yAxisTitle;
                }

                columnChart.dataProvider = dataObjs;
            } else {
                if (columnChartDef.measures != null && columnChartDef.measures.length > 0 && columnChartDef.xaxis != null) stackIndex = 2;
                else stackIndex = 1;
                if (columnChart != null) {
                    columnChart.dataProvider = new ArrayCollection();
                    xAxis.dataProvider = new ArrayCollection();
                    columnChart.visible = false;
                }
            }

            graphData = dataSet;
        }

        private var defaultLink:Link;

        private function onChartClick(event:ChartItemEvent):void {
            var series:ColumnSeries = event.hitData.chartItem.element as ColumnSeries;
            var key:String = series.yField;
            ClickUtil.doStuff(defaultLink, event.hitData.item, columnChartDef.stackItem, this, key, columnChart);
        }

        private function customFill(element:ChartItem, index:Number):IFill {
            return FillProvider.getColor(columnChartDef.colorScheme, index);
        }

        [Bindable]
        private var stackIndex:int = 0;

        public function preserveValues():Boolean {
            return true;
        }

        public function updateExportMetadata():void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }]]></mx:Script>
    <mx:Stroke id="s1" color="#2A7E93" weight="2"/>
    <mx:SeriesInterpolate id="interpolateIn" duration="1000"/>
    <mx:Canvas width="100%" height="100%" backgroundAlpha="1" backgroundColor="#FFFFFF">
        <mx:HBox width="100%" height="100%" id="canvas">

        </mx:HBox>
    </mx:Canvas>
</mx:Module>