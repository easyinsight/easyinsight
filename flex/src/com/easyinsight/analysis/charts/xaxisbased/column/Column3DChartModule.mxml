<?xml version="1.0" ?>
<charts:CartesianChartModule xmlns:mx="http://www.adobe.com/2006/mxml"
                             implements="com.easyinsight.analysis.IReportRenderer"
                             width="100%" height="100%" xmlns:charts="com.easyinsight.analysis.charts.*"
        creationComplete="onCreation()">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisItem;

        import com.easyinsight.analysis.AnalysisMeasure;

        import com.easyinsight.analysis.ChartDefinition;

        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.SortFunctionFactory;

        import com.easyinsight.analysis.charts.Chart3DVisuals;

        import ilog.charts3d.ColumnChart3D;

        import ilog.charts3d.charts3dClasses.CartesianChart3D;

        import ilog.charts3d.charts3dClasses.Series3D;
        import ilog.charts3d.series.ColumnSeries3D;

        import ilog.charts3d.series.items.ColumnSeries3DItem;

        import mx.charts.CategoryAxis;
        import mx.charts.ChartItem;
        import mx.charts.HitData;
        import mx.charts.LinearAxis;
        import mx.charts.chartClasses.CartesianTransform;
        import mx.charts.chartClasses.ChartBase;
        import mx.charts.chartClasses.DataTransform;
        import mx.charts.chartClasses.Series;
        import mx.charts.series.items.ColumnSeriesItem;
        import mx.collections.ArrayCollection;
        import mx.collections.Sort;

        private function onCreation():void {
            visuals.addEventListener(CustomChangeEvent.CUSTOM_CHANGE, onCustomChange);
        }

        private function onCustomChange(event:CustomChangeEvent):void {
            dispatchEvent(event);
        }

        override protected function getDimensionItem():AnalysisItem {
            return Column3DChartDefinition(chartDef).xaxis;
        }

        override protected function getMeasures():ArrayCollection {
            return Column3DChartDefinition(chartDef).measures;
        }

        override protected function createChartObject():ChartBase {
            var chart:ColumnChart3D = new ColumnChart3D();
            visuals.chart = chart;
            return chart;
        }

        override protected function useChartColor():Boolean {
            return Column3DChartDefinition(chartDef).useChartColor;
        }

        override protected function getChartColor():uint {
            return Column3DChartDefinition(chartDef).chartColor;
        }

        override protected function getColorScheme():String {
            return Column3DChartDefinition(chartDef).colorScheme;
        }

        private var visuals:Chart3DVisuals = new Chart3DVisuals();

        override protected function sortData(dataSet:ArrayCollection):void {
            var columnChartDef:Column3DChartDefinition = chartDef as Column3DChartDefinition;
            var firstMeasure:AnalysisMeasure = columnChartDef.measures.getItemAt(0) as AnalysisMeasure;
            if (columnChartDef.columnSort != ChartDefinition.SORT_UNSORTED) {
                var sort:Sort = new Sort();
                if (columnChartDef.columnSort == ChartDefinition.SORT_X_ASCENDING) {
                    sort.compareFunction = SortFunctionFactory.createSortFunction(getDimensionItem(), false);
                } else if (columnChartDef.columnSort == ChartDefinition.SORT_X_DESCENDING) {
                    sort.compareFunction = SortFunctionFactory.createSortFunction(getDimensionItem(), true);
                } else if (columnChartDef.columnSort == ChartDefinition.SORT_Y_ASCENDING) {
                    sort.compareFunction = SortFunctionFactory.createSortFunction(firstMeasure, false);
                } else if (columnChartDef.columnSort == ChartDefinition.SORT_Y_DESCENDING) {
                    sort.compareFunction = SortFunctionFactory.createSortFunction(firstMeasure, true);
                }
                dataSet.sort = sort;
                dataSet.refresh();
            }
        }

        override protected function formatDataTip(hd:HitData):String {
            var dt:String = "";
            var columnSeriesItem:ColumnSeries3DItem = hd.chartItem as ColumnSeries3DItem;
            var series:Series3D = columnSeriesItem.element as Series3D;
            var dataTransform:DataTransform = series.dataTransform;
            var n:String = series.displayName;
            if (n != null && n.length > 0)
                dt += "<b>" + n + "</b><BR/>";

            var xName:String = dataTransform.getAxis(CartesianTransform.HORIZONTAL_AXIS).displayName;
            if (xName != "")
                dt += "<i>" + xName + ":</i> ";
            dt += dataTransform.getAxis(CartesianTransform.HORIZONTAL_AXIS).formatForScreen(ColumnSeriesItem(hd.chartItem).xValue) + "\n";

            var yName:String = dataTransform.getAxis(CartesianTransform.VERTICAL_AXIS).displayName;

            if (yName != "")
                dt += "<i>" + yName + ":</i> ";
            dt += measureFormatter.format(ColumnSeriesItem(hd.chartItem).yValue) + "\n";

            return dt;
        }

        override public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            super.renderReport(dataSet, analysisDefinition, clientProcessorMap, additionalProperties);
            var chartDef:Column3DChartDefinition = analysisDefinition as Column3DChartDefinition;
            if (chartDef.elevationAngle > 0) {
                visuals.elevationAngle = chartDef.elevationAngle;
                visuals.rotationAngle = chartDef.rotationAngle;
            }
        }

        override protected function assignDimensionAxis(axis:CategoryAxis, chart:ChartBase):void {
            CartesianChart3D(chart).horizontalAxis = axis;
        }

        override protected function assignMeasureAxis(axis:LinearAxis, chart:ChartBase):void {
            CartesianChart3D(chart).verticalAxis = axis;
        }

        override protected function createSeries(measure:AnalysisMeasure, dataSet:ArrayCollection, xField:String, measureNumber:int):Series {
            var columnSeries:ColumnSeries3D = new ColumnSeries3D();
            columnSeries.xField = xField;
            columnSeries.yField = measure.qualifiedName();
            columnSeries.labelFunction = function (element:ChartItem, series:Series):String {
                var columnSeriesItem:ColumnSeries3DItem = element as ColumnSeries3DItem;
                return measure.getFormatter().format(columnSeriesItem.xNumber);
            };
            columnSeries.dataProvider = dataSet;
            columnSeries.dataFunction = function(series:Series, item:Object, fieldName:String):Object {
                if (fieldName == 'yValue')
                    return(item[measure.qualifiedName()].toNumber());
                else if (fieldName == "xValue")
                    return(item[xField].toString());
                else
                    return null;
            };
            columnSeries.displayName = measure.display;
            columnSeries.setStyle("showDataEffect", interpolateIn);
            columnSeries.setStyle("hideDataEffect", interpolateIn);
            return columnSeries;
        }
        ]]></mx:Script>
    <mx:SeriesSlide id="interpolateIn" duration="1000" direction="up"/>
    <mx:SeriesSlide id="interpolateOut" duration="1000" direction="down"/>
</charts:CartesianChartModule>