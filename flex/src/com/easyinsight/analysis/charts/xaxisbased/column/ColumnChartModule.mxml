<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:analysis="com.easyinsight.analysis.*" implements="com.easyinsight.analysis.IReportRenderer"
        width="100%" height="100%">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;

        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.SortableAxisTitleFactory;
        import com.easyinsight.analysis.conditions.ConditionRenderer;

        import com.easyinsight.filtering.FilterRawData;
        import com.easyinsight.skin.CustomChartRendererFactory;

        import mx.binding.utils.BindingUtils;
        import mx.charts.AxisRenderer;
        import mx.charts.CategoryAxis;
        import mx.charts.ChartItem;
        import mx.charts.ColumnChart;
        import mx.charts.LinearAxis;
        import mx.charts.chartClasses.IAxis;
        import mx.charts.chartClasses.Series;
        import mx.charts.series.ColumnSeries;
        import mx.charts.series.items.ColumnSeriesItem;
        import mx.collections.ArrayCollection;
        import mx.events.FlexEvent;
        import mx.formatters.Formatter;
        import mx.graphics.BitmapFill;
        import mx.graphics.IFill;

        [Bindable]
        private var graphData:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var xAxisTitle:String = "";

        [Bindable]
        private var yAxisTitle:String = "";

        [Bindable]
        private var xAxisItem:AnalysisItem;
        [Bindable]
        private var yAxisItem:AnalysisItem;

        private var _xField:String;
        [Bindable]
        private var yField:String;

        private var measureFormatter:Formatter;

        private var customColors:Boolean = false;
        private var conditionRenderer:ConditionRenderer;

        private var columnChart:ColumnChart;

        private var xAxis:CategoryAxis;
        private var yAxis:LinearAxis;

        private var xAxisTitleRendererFactory:SortableAxisTitleFactory;

        private var yAxisTitleRendererFactory:SortableAxisTitleFactory;

        private var columnSeries:ColumnSeries;

        private var bgFills:Array;

        private var sortable:Boolean = true;
        private var selectable:Boolean = true;

        [Bindable]
        [Embed(source="../../../../../../../assets/water4.JPG")]
        private var standardFill:Class;

        [Bindable]
        [Embed(source="../../../../../../../assets/magenta.jpg")]
        private var selectedFill:Class;

        [Bindable]
        [Embed(source="../../../../../../../assets/darkwater.jpg")]
        private var rolloverFill:Class;

        [Bindable]
        public function get xField():String {
            return _xField;
        }

        public function set xField(val:String):void {
            _xField = val;
            dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
        }

        override protected function createChildren():void {
            super.createChildren();
            bgFills = [];
            for (var i:int = 0; i < 15; i++) {
                var bgFill:BitmapFill = new BitmapFill();
                bgFill.source = standardFill;
                bgFill.originX = Math.random() * 60;
                bgFill.originY = Math.random() * 60;
                bgFills.push(bgFill);
            }
        }

        private function createChart():void {
            if (columnChart == null) {

                // define the chart itself

                columnChart = new ColumnChart();
                columnChart.percentHeight = 100;
                columnChart.percentWidth = 100;
                columnChart.showDataTips = true;
                if (selectable) {
                    columnChart.selectionMode = "multiple";
                }
                columnChart.dataProvider = graphData;

                // define the X axis

                xAxis = new CategoryAxis();
                BindingUtils.bindProperty(xAxis, "categoryField", this, "xField");
                //xAxis.categoryField = xField;
                xAxis.dataProvider = graphData;
                xAxis.title = xAxisTitle;
                columnChart.horizontalAxis = xAxis;
                if (sortable) {
                    var axisRenderer:AxisRenderer = new AxisRenderer();
                    axisRenderer.axis = xAxis;
                    xAxisTitleRendererFactory = new SortableAxisTitleFactory(xAxisItem, true);
                    axisRenderer.titleRenderer = xAxisTitleRendererFactory;
                    //axisRenderer.setStyle("color", "#FFFFFF");
                    axisRenderer.placement = "bottom";
                    columnChart.horizontalAxisRenderers = [ axisRenderer ];
                }

                // define the Y axis

                yAxis = new LinearAxis();
                yAxis.title = yAxisTitle;
                yAxis.labelFunction = renderAxis;
                columnChart.verticalAxis = yAxis;
                if (sortable) {
                    var yAxisRenderer:AxisRenderer = new AxisRenderer();
                    yAxisRenderer.axis = yAxis;
                    //yAxisRenderer.setStyle("color", "#FFFFFF");
                    yAxisTitleRendererFactory = new SortableAxisTitleFactory(yAxisItem, false);
                    yAxisRenderer.titleRenderer = yAxisTitleRendererFactory;
                    yAxisRenderer.placement = "left";
                    columnChart.verticalAxisRenderers = [ yAxisRenderer ];
                }

                // create the data series

                columnSeries = new ColumnSeries();
                columnSeries.setStyle("itemRenderer", new CustomChartRendererFactory(selectedFill, rolloverFill));
                columnSeries.setStyle("stroke", s1);
                columnSeries.fillFunction = customFill;
                BindingUtils.bindProperty(columnSeries, "xField", this, "xField");
                //columnSeries.xField = xField;
                columnSeries.yField = yField;
                columnSeries.labelFunction = renderChartLabel;
                columnSeries.dataProvider = graphData;
                columnSeries.displayName = xAxisTitle;
                columnSeries.setStyle("showDataEffect", interpolateIn);
                //columnSeries.setStyle("fills", standardBlue);
                var mySeries:Array = new Array();
                columnChart.series = mySeries;
                mySeries.push(columnSeries);
                addChild(columnChart);
            }
        }

        private function renderChartLabel(element:ChartItem, series:Series):String {
            var columnSeriesItem:ColumnSeriesItem = element as ColumnSeriesItem;
            return measureFormatter.format(columnSeriesItem.xNumber);
        }

        private function customFill(element:ChartItem, index:Number):IFill {
            return bgFills[index % 15];
        }

        private function renderAxis(labelValue:Object, previousValue:Object, axis:IAxis):String {
            return measureFormatter.format(labelValue);
        }

        public function createFilterRawData():FilterRawData {
            var filterRawData:FilterRawData = new FilterRawData();
            for (var i:int = 0; i < columnChart.selectedChartItems.length; i++) {
                var obj:ChartItem = columnChart.selectedChartItems[i];
                filterRawData.addPair(xAxisItem, obj.item[xAxisItem.key.createString()]);
            }
            return filterRawData;
        }

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object):void {
            var columnChartDef:ColumnChartDefinition = analysisDefinition as ColumnChartDefinition;

            xField = columnChartDef.xaxis.qualifiedName();
            createChart();

            measureFormatter = columnChartDef.measure.getFormatter();
            var conditionRenderer:ConditionRenderer = columnChartDef.measure.createClientRenderer();
            if (conditionRenderer.hasCustomColor()) {
                customColors = true;
                this.conditionRenderer = conditionRenderer;
            }

            var newXAxisItem:AnalysisItem = columnChartDef.xaxis;
            if (xAxisItem == null || newXAxisItem.qualifiedName() != xAxisItem.qualifiedName()) {
                xAxisItem = newXAxisItem;
                if (sortable) {
                    xAxisTitleRendererFactory.analysisItem = xAxisItem;
                }
            }

            var newYAxisItem:AnalysisItem = columnChartDef.measure;
            if (yAxisItem == null || newYAxisItem.qualifiedName() != yAxisItem.qualifiedName()) {
                yAxisItem = newYAxisItem;
                if (sortable) {
                    yAxisTitleRendererFactory.analysisItem = yAxisItem;
                }
            }

            var newXField:String = newXAxisItem.qualifiedName();
            if (newXField != xField) {
                xAxis.categoryField = xField;
                columnSeries.xField = xField;
            }

            var newXAxisTitle:String = newXAxisItem.display;
            if (newXAxisTitle != xAxisTitle) {
                xAxisTitle = newXAxisTitle;
                xAxis.title = xAxisTitle;
                columnSeries.displayName = xAxisTitle;
            }

            var newYField:String = newYAxisItem.qualifiedName();
            if (newYField != yField) {
                yField = newYField;
                columnSeries.yField = yField;
            }

            var newYAxisTitle:String = newYAxisItem.display;
            if (newYAxisTitle != yAxisTitle) {
                yAxisTitle = newYAxisTitle;
                yAxis.title = yAxisTitle;
            }

            columnChart.dataProvider = dataSet;
            columnSeries.dataProvider = dataSet;
            xAxis.dataProvider = dataSet;
            graphData = dataSet;
        }

        public function updateExportMetadata():void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }]]></mx:Script>
    <mx:Stroke id="s1" color="#2A7E93" weight="2"/>
    <mx:SeriesInterpolate id="interpolateIn" duration="1000"/>
</mx:Module>