<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:analysis="com.easyinsight.analysis.*"
           implements="com.easyinsight.analysis.IReportRenderer"
           width="100%" height="100%" creationComplete="setupListeners()">
    <mx:Style>
        .axisTitles {
            fontSize: 14;
            fontFamily: "Tahoma";
        }

        CartesianChart {
            axisTitleStyleName:axisTitles;
            fontFamily: "Tahoma";
            fontSize: 14;
        }
    </mx:Style>
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;


        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.ChartSortButton;
        import com.easyinsight.analysis.ChartSortEvent;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.SortFunctionFactory;
        import com.easyinsight.analysis.SortableAxisTitle;

        import com.easyinsight.filtering.FilterRawData;
        import com.easyinsight.pseudocontext.PseudoContextWindow;


        import mx.binding.utils.BindingUtils;
        import mx.charts.AxisRenderer;
        import mx.charts.CategoryAxis;
        import mx.charts.ChartItem;
        import mx.charts.ColumnChart;
        import mx.charts.LinearAxis;
        import mx.charts.chartClasses.IAxis;
        import mx.charts.chartClasses.Series;
        import mx.charts.events.ChartItemEvent;
        import mx.charts.series.ColumnSeries;
        import mx.charts.series.items.ColumnSeriesItem;
        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.events.FlexEvent;
        import mx.formatters.Formatter;
        import mx.graphics.BitmapFill;
        import mx.graphics.IFill;
        import mx.managers.PopUpManager;

        [Bindable]
        private var graphData:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var xAxisTitle:String = "";

        [Bindable]
        private var yAxisTitle:String = "";

        [Bindable]
        private var xAxisItem:AnalysisItem;
        [Bindable]
        private var yAxisItem:AnalysisItem;

        private var _xField:String;
        [Bindable]
        private var yField:String;

        private var measureFormatter:Formatter;

        private var dimensionFormatter:Formatter;

        private var customColors:Boolean = false;

        private var columnChart:ColumnChart;

        private var xAxis:CategoryAxis;
        private var yAxis:LinearAxis;

        private var xAxisTitleRendererFactory:ClassFactory;

        private var yAxisTitleRendererFactory:ClassFactory;

        private var columnSeries:ColumnSeries;

        private var bgFills:Array;

        private var sortable:Boolean = true;
        private var selectable:Boolean = true;

        [Bindable]
        [Embed(source="../../../../../../../assets/water4.JPG")]
        private var standardFill:Class;

        [Bindable]
        public function get xField():String {
            return _xField;
        }

        public function set xField(val:String):void {
            _xField = val;
            dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
        }

        private function setupListeners():void {
            addEventListener(ChartSortEvent.CHART_SORT, onChartSort);
        }

        override protected function createChildren():void {
            super.createChildren();
            var bgFill:BitmapFill = new BitmapFill();
            bgFill.source = standardFill;
            bgFills = [ bgFill ];
        }

        private function onChartSort(event:ChartSortEvent):void {
            if (event.sortState == ChartSortButton.ASCENDING ||
                    event.sortState == ChartSortButton.DESCENDING) {
                var sort:Sort = new Sort();
                sort.compareFunction = SortFunctionFactory.createSortFunction(event.analysisItem, event.analysisItem.sort == ChartSortButton.DESCENDING);
                graphData.sort = sort;
                graphData.refresh();
            }
        }

        private function onClick(event:ChartItemEvent):void {

                var window:PseudoContextWindow = new PseudoContextWindow(xAxisItem, passThrough, this, columnChartDef);
                window.data = event.hitData.item;
                PopUpManager.addPopUp(window, this);
                window.x = event.stageX + 5;
                window.y = event.stageY + 5;
        }

        private function passThrough(event:Event):void {
            dispatchEvent(event);
        }

        private function createChart():void {
            if (columnChart == null) {

                // define the chart itself

                columnChart = new ColumnChart();
                columnChart.addEventListener(ChartItemEvent.ITEM_CLICK, onClick);
                columnChart.percentHeight = 100;
                columnChart.percentWidth = 100;
                columnChart.showDataTips = true;
                columnChart.cacheAsBitmap = true;
                /*if (selectable) {
                 columnChart.selectionMode = "multiple";
                 }*/
                columnChart.dataProvider = graphData;

                // define the X axis

                xAxis = new CategoryAxis();
                BindingUtils.bindProperty(xAxis, "categoryField", this, "xField");
                //xAxis.categoryField = xField;
                xAxis.labelFunction = renderDimensionAxis;
                xAxis.dataProvider = graphData;
                xAxis.title = xAxisTitle;
                columnChart.horizontalAxis = xAxis;
                if (sortable) {
                    var axisRenderer:AxisRenderer = new AxisRenderer();
                    axisRenderer.axis = xAxis;
                    var xClassFactory:ClassFactory = new ClassFactory(SortableAxisTitle);
                    xClassFactory.properties = { analysisItem: xAxisItem, axisDirection: true};
                    xAxisTitleRendererFactory = xClassFactory;
                    axisRenderer.titleRenderer = xAxisTitleRendererFactory;
                    //axisRenderer.setStyle("color", "#FFFFFF");
                    axisRenderer.placement = "bottom";
                    columnChart.horizontalAxisRenderers = [ axisRenderer ];
                }

                // define the Y axis

                yAxis = new LinearAxis();
                yAxis.title = yAxisTitle;
                yAxis.labelFunction = renderAxis;
                columnChart.verticalAxis = yAxis;
                if (sortable) {
                    var yAxisRenderer:AxisRenderer = new AxisRenderer();
                    yAxisRenderer.axis = yAxis;
                    //yAxisRenderer.setStyle("color", "#FFFFFF");
                    yAxisTitleRendererFactory = new ClassFactory(SortableAxisTitle);
                    yAxisTitleRendererFactory.properties = { analysisItem: yAxisItem, axisDirection: false};
                    yAxisRenderer.titleRenderer = yAxisTitleRendererFactory;
                    yAxisRenderer.placement = "left";
                    columnChart.verticalAxisRenderers = [ yAxisRenderer ];
                }

                // create the data series

                columnSeries = new ColumnSeries();
                //columnSeries.setStyle("itemRenderer", new CustomChartRendererFactory(null, null, xAxisItem));
                columnSeries.setStyle("stroke", s1);
                columnSeries.fillFunction = customFill;
                BindingUtils.bindProperty(columnSeries, "xField", this, "xField");
                //columnSeries.xField = xField;
                columnSeries.yField = yField;
                columnSeries.labelFunction = renderChartLabel;
                columnSeries.dataProvider = graphData;
                columnSeries.dataFunction = myDataFunction;
                columnSeries.displayName = xAxisTitle;
                columnSeries.setStyle("showDataEffect", interpolateIn);
                //columnSeries.setStyle("fills", standardBlue);
                var mySeries:Array = new Array();
                columnChart.series = mySeries;
                mySeries.push(columnSeries);
                canvas.addChild(columnChart);
            } else {
                columnChart.visible = true;
            }
        }

        private function myDataFunction(series:Series, item:Object, fieldName:String):Object {
            if (fieldName == 'yValue')
                return(item[yAxisItem.qualifiedName()].toNumber());
            else if (fieldName == "xValue")
                return(item[xAxisItem.qualifiedName()].toString());
            else
                return null;
        }


        private function renderChartLabel(element:ChartItem, series:Series):String {
            var columnSeriesItem:ColumnSeriesItem = element as ColumnSeriesItem;
            return measureFormatter.format(columnSeriesItem.xNumber);
        }

        private function customFill(element:ChartItem, index:Number):IFill {
            return bgFills[0];
        }

        private function renderAxis(labelValue:Object, previousValue:Object, axis:IAxis):String {
            return measureFormatter.format(labelValue);
        }

        private function renderDimensionAxis(item:Object, prevValue:Object, axis:CategoryAxis, categoryItem:Object):String {
            return dimensionFormatter.format(item);
        }

        public function createFilterRawData():FilterRawData {
            var filterRawData:FilterRawData = new FilterRawData();
            for (var i:int = 0; i < columnChart.selectedChartItems.length; i++) {
                var obj:ChartItem = columnChart.selectedChartItems[i];
                filterRawData.addPair(xAxisItem, obj.item[xAxisItem.key.createString()]);
            }
            return filterRawData;
        }

        private var columnChartDef:ColumnChartDefinition;

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            columnChartDef = analysisDefinition as ColumnChartDefinition;

            if (dataSet.length > 0) {
                stackIndex = 0;
                if (columnChartDef.xaxis.sort > 0) {
                    var sort:Sort = new Sort();
                    //sort.fields = [ new SortField(columnChartDef.xaxis.qualifiedName(), false, )];
                    sort.compareFunction = SortFunctionFactory.createSortFunction(columnChartDef.xaxis, columnChartDef.xaxis.sort == ChartSortButton.DESCENDING);
                    dataSet.sort = sort;
                    dataSet.refresh();
                } else if (columnChartDef.measure.sort > 0) {
                    var measureSort:Sort = new Sort();
                    measureSort.compareFunction = SortFunctionFactory.createSortFunction(columnChartDef.measure, columnChartDef.measure.sort == ChartSortButton.DESCENDING);
                    dataSet.sort = measureSort;
                    dataSet.refresh();
                }

                xField = columnChartDef.xaxis.qualifiedName();
                createChart();

                measureFormatter = columnChartDef.measure.getFormatter();
                dimensionFormatter = columnChartDef.xaxis.getFormatter();

                var newXAxisItem:AnalysisItem = columnChartDef.xaxis;
                if (xAxisItem == null || newXAxisItem.qualifiedName() != xAxisItem.qualifiedName()) {
                    xAxisItem = newXAxisItem;
                    if (sortable) {
                        //xAxisTitleRendererFactory = new ClassFactory(SortableAxisTitle);
                        xAxisTitleRendererFactory.properties = { analysisItem: xAxisItem, axisDirection: true};
                    }
                }

                var newYAxisItem:AnalysisItem = columnChartDef.measure;
                if (yAxisItem == null || newYAxisItem.qualifiedName() != yAxisItem.qualifiedName()) {
                    yAxisItem = newYAxisItem;
                    if (sortable) {
                        //yAxisTitleRendererFactory = new ClassFactory(SortableAxisTitle);
                        yAxisTitleRendererFactory.properties = { analysisItem: yAxisItem, axisDirection: false};
                    }
                }

                var newXField:String = newXAxisItem.qualifiedName();
                if (newXField != xField) {
                    xAxis.categoryField = xField;
                    columnSeries.xField = xField;
                }

                var newXAxisTitle:String = newXAxisItem.display;
                if (newXAxisTitle != xAxisTitle) {
                    xAxisTitle = newXAxisTitle;
                    xAxis.title = xAxisTitle;
                    columnSeries.displayName = xAxisTitle;
                }

                var newYField:String = newYAxisItem.qualifiedName();
                if (newYField != yField) {
                    yField = newYField;
                    columnSeries.yField = yField;
                }

                var newYAxisTitle:String = newYAxisItem.display;
                if (newYAxisTitle != yAxisTitle) {
                    yAxisTitle = newYAxisTitle;
                    yAxis.title = yAxisTitle;
                }

                //columnSeries.setStyle("itemRenderer", new CustomChartRendererFactory(selectedFill, rolloverFill, xAxisItem));
                columnChart.dataProvider = dataSet;
                columnSeries.dataProvider = dataSet;
                xAxis.dataProvider = dataSet;
            } else {
                if (columnChartDef.measure != null && columnChartDef.xaxis != null) stackIndex = 2;
                else stackIndex = 1;
                if (columnChart != null) {
                    columnChart.dataProvider = new ArrayCollection();
                    columnSeries.dataProvider = new ArrayCollection();
                    xAxis.dataProvider = new ArrayCollection();
                    columnChart.visible = false;
                }
            }

            graphData = dataSet;
        }

        [Bindable]
        private var stackIndex:int = 0;

        public function preserveValues():Boolean {
            return true;
        }

        public function updateExportMetadata():void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }]]></mx:Script>
    <mx:Stroke id="s1" color="#2A7E93" weight="2"/>
    <mx:SeriesInterpolate id="interpolateIn" duration="1000"/>
    <mx:Canvas width="100%" height="100%" id="canvas">
        <mx:ViewStack width="100%" height="100%" selectedIndex="{stackIndex}" creationPolicy="all" mouseChildren="false"
                      mouseEnabled="false">
            <mx:Canvas width="100%" height="100%"/>
            <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" backgroundColor="#000000"
                    backgroundAlpha=".1">
                <mx:Box borderStyle="solid" borderThickness="1" cornerRadius="10" horizontalAlign="center"
                        verticalAlign="middle"
                        backgroundColor="#FFFFFF" paddingBottom="15" paddingLeft="15" paddingRight="15" paddingTop="15">
                    <mx:TextArea fontSize="22"
                                 text="You haven't set up a report yet. Drag one Grouping and one Measure into the labeled areas above the canvas to create a report."
                                 borderStyle="none" backgroundAlpha="0" width="500" height="95"/>
                </mx:Box>
            </mx:Box>
            <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" backgroundColor="#000000"
                    backgroundAlpha=".1">
                <mx:Box borderStyle="solid" borderThickness="1" cornerRadius="10" horizontalAlign="center"
                        verticalAlign="middle"
                        backgroundColor="#FFFFFF" paddingBottom="15" paddingLeft="15" paddingRight="15" paddingTop="15">
                    <mx:TextArea fontSize="22"
                                 text="We didn't find any data for the fields and filters that you specified in the report."
                                 borderStyle="none" backgroundAlpha="0" width="500" height="65"/>
                </mx:Box>
            </mx:Box>
        </mx:ViewStack>
    </mx:Canvas>
</mx:Module>