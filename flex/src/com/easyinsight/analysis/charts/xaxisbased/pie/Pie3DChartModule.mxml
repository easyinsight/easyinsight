<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:analysis="com.easyinsight.analysis.*"
           xmlns:ilog="http://www.ilog.com/2007/ilog/flex"
           implements="com.easyinsight.analysis.IReportRenderer"
           width="100%" height="100%" creationComplete="onCreation()">
    <mx:Style>
        PieSeries {
            fontSize: 10;
            fontFamily: "Lucida Grande";
            fontWeight: normal;
        }

        LegendItem {
            fontSize: 12;
            fontFamily: "Lucida Grande";
            fontWeight: normal;
        }
    </mx:Style>
    <mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.FillProvider;
        import com.easyinsight.analysis.charts.Chart3DVisuals;
        import com.easyinsight.filtering.FilterRawData;

        import com.easyinsight.pseudocontext.PseudoContextWindow;

        import mx.charts.ChartItem;
        import mx.charts.series.PieSeries;
        import mx.formatters.Formatter;
        import mx.charts.series.items.PieSeriesItem;
        import mx.charts.events.ChartItemEvent;
        import mx.collections.ArrayCollection;
        import mx.managers.PopUpManager;

        private function onCreation():void {
            visuals.chart = pieChart;
            visuals.addEventListener(CustomChangeEvent.CUSTOM_CHANGE, onCustomChange);
        }

        private function onClick(event:ChartItemEvent):void {

                var window:PseudoContextWindow = new PseudoContextWindow(dimensionItem, passThrough, this, pieChartDef);
                window.data = event.hitData.item;
                PopUpManager.addPopUp(window, this);
                window.x = event.stageX + 5;
                window.y = event.stageY + 5;
        }

        private function passThrough(event:Event):void {
            dispatchEvent(event);
        }

        private var visuals:Chart3DVisuals = new Chart3DVisuals();

        [Bindable]
        private var graphData:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var dimension:String;

        [Bindable]
        private var measureName:String;

        private var measureFormatter:Formatter;

        [Bindable]
        private var explodeData:Array = [];

        private var dimensionItem:AnalysisItem;

        private var pieChartDef:Pie3DChartDefinition;

        private function onCustomChange(event:CustomChangeEvent):void {
            dispatchEvent(event);
        }

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            pieChartDef = analysisDefinition as Pie3DChartDefinition;
            if (pieChartDef.elevationAngle > 0) {
                visuals.elevationAngle = pieChartDef.elevationAngle;
                visuals.rotationAngle = pieChartDef.rotationAngle;
            }
            graphData = dataSet;
            if (dataSet.length > 0) {
                stackIndex = 0;
                pieChart.visible = true;
                legend.visible = true;
                labelPosition = pieChartDef.labelPosition;
                pieChart.setStyle("fontFamily", pieChartDef.fontName);
                pieChart.setStyle("fontSize", pieChartDef.fontSize);
                pieSeries.setStyle("fontFamily", pieChartDef.fontName);
                pieSeries.setStyle("fontSize", pieChartDef.fontSize);
                if (pieChartDef.colorScheme == FillProvider.spectral) {
                    pieSeries.setStyle("fills", FillProvider.createSpectralColors());
                } else if (pieChartDef.colorScheme == FillProvider.highContrast) {
                    pieSeries.setStyle("fills", FillProvider.createSAPColors());
                } else if (pieChartDef.colorScheme == FillProvider.warmColors) {
                    pieSeries.setStyle("fills", FillProvider.createWarmColors());
                } else {
                    pieSeries.setStyle("fills", FillProvider.createSampleGradient());
                }
                this.measureFormatter = pieChartDef.measure.getFormatter();
                measureName = pieChartDef.measure.qualifiedName();
                dimension = pieChartDef.xaxis.qualifiedName();
                this.dimensionItem = pieChartDef.xaxis;
            } else {
                if (pieChartDef.measure != null && pieChartDef.xaxis != null) stackIndex = 2;
                else stackIndex = 1;
                pieChart.visible = false;
                legend.visible = false;
            }
        }

        [Bindable]
        private var labelPosition:String;

        private function chartSelection(event:ChartItemEvent):void {
            for (var j:int = 0; j < graphData.length; j++) {
                var graphObj:Object = graphData.getItemAt(j);
                var explode:Boolean = false;
                for (var i:int = 0; i < pieChart.selectedChartItems.length; i++) {
                    var obj:PieSeriesItem = pieChart.selectedChartItems[i];
                    if (obj.item == graphObj) {
                        explode = true;
                    }
                }
                if (explode) {
                    explodeData[j] = .2;
                } else {
                    explodeData[j] = 0;
                }
            }
            var pieChartSeries:PieSeries = pieChart.series[0] as PieSeries;
            pieChartSeries.perWedgeExplodeRadius = explodeData;
        }

        private function renderPieLabel(data:Object, field:String, index:Number, percentValue:Number):String {
            return data[dimension] + ": " + '\n' + this.measureFormatter.format(data[measureName]);
        }

        public function createFilterRawData():FilterRawData {
            var filterRawData:FilterRawData = new FilterRawData();
            for (var i:int = 0; i < pieChart.selectedChartItems.length; i++) {
                var obj:ChartItem = pieChart.selectedChartItems[i];
                filterRawData.addPair(dimensionItem, obj.item[dimensionItem.key.createString()]);
            }
            return filterRawData;
        }

        public function updateExportMetadata():void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }

        [Bindable]
        private var stackIndex:int = 0;

        public function preserveValues():Boolean {
            return false;
        }
		]]>
    </mx:Script>
    <mx:Canvas width="100%" height="100%">
        <mx:HBox width="100%" height="100%">
            <ilog:PieChart3D id="pieChart" dataProvider="{graphData}" selectionMode="multiple" height="100%" width="100%"
                                  paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" depth="5" showDataTips="true"
                    itemClick="onClick(event)">
                <ilog:series>
                    <ilog:PieSeries3D field="{measureName}" nameField="{dimension}" labelPosition="{labelPosition}"
                                      labelFunction="renderPieLabel" id="pieSeries">
                    </ilog:PieSeries3D>
                </ilog:series>
            </ilog:PieChart3D>
            <mx:Legend dataProvider="{pieChart}" height="100%" id="legend"/>
        </mx:HBox>

        <mx:ViewStack width="100%" height="100%" selectedIndex="{stackIndex}" creationPolicy="all" mouseChildren="false"
                      mouseEnabled="false">
            <mx:Canvas width="100%" height="100%"/>
            <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" backgroundColor="#000000"
                    backgroundAlpha=".1">
                <mx:Box borderStyle="solid" borderThickness="1" cornerRadius="10" horizontalAlign="center"
                        verticalAlign="middle"
                        backgroundColor="#FFFFFF" paddingBottom="15" paddingLeft="15" paddingRight="15" paddingTop="15">
                    <mx:TextArea fontSize="22"
                                 text="You haven't set up a report yet. Drag one Grouping and one Measure into the labeled areas above the canvas to create a report."
                                 borderStyle="none" backgroundAlpha="0" width="500" height="95"/>
                </mx:Box>
            </mx:Box>
            <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" backgroundColor="#000000"
                    backgroundAlpha=".1">
                <mx:Box borderStyle="solid" borderThickness="1" cornerRadius="10" horizontalAlign="center"
                        verticalAlign="middle"
                        backgroundColor="#FFFFFF" paddingBottom="15" paddingLeft="15" paddingRight="15" paddingTop="15">
                    <mx:TextArea fontSize="22"
                                 text="We didn't find any data for the fields and filters that you specified in the report."
                                 borderStyle="none" backgroundAlpha="0" width="500" height="65"/>
                </mx:Box>
            </mx:Box>
        </mx:ViewStack>
    </mx:Canvas>
</mx:Module>