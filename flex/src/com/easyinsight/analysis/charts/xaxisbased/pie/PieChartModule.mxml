<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" implements="com.easyinsight.analysis.IReportRenderer"
        width="100%" height="100%" creationComplete="setupListeners()">
    <mx:states>
        <mx:State name="hideLegend">
            <mx:RemoveChild target="{legend}"/>
        </mx:State>
    </mx:states>
    <!--<mx:Style>
        PieSeries {
            fontSize: 10;
            fontFamily: "Lucida Grande";
            fontWeight: normal;
        }

        LegendItem {
            fontSize: 12;
            fontFamily: "Lucida Grande";
            fontWeight: normal;
        }
    </mx:Style>-->
    <mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;

        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.ClickUtil;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.FillProvider;
        import com.easyinsight.analysis.Link;
        import com.easyinsight.analysis.MultiColor;
        import com.easyinsight.analysis.charts.ChartUtil;

        import mx.controls.Alert;

        import mx.graphics.SolidColor;

        //import com.easyinsight.pseudocontext.PseudoContextWindow;

        import mx.charts.series.PieSeries;
        import mx.formatters.Formatter;
        import mx.charts.series.items.PieSeriesItem;
        import mx.charts.events.ChartItemEvent;
        import mx.collections.ArrayCollection;
        import mx.managers.PopUpManager;

        [Bindable]
        private var graphData:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var dimension:String;

        [Bindable]
        private var measureName:String;

        private var measureFormatter:Formatter;

        [Bindable]
        private var explodeData:Array = [];

        private var dimensionItem:AnalysisItem;

        private function setupListeners():void {
        }

        private var pieChartDef:PieChartDefinition;

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            pieChartDef = analysisDefinition as PieChartDefinition;

            if (dataSet.length > 0) {
                var endData:ArrayCollection = new ArrayCollection();
                measureName = pieChartDef.measures.getItemAt(0).qualifiedName();
                for each (var obj:Object in dataSet) {
                    var num:Number = obj[measureName];
                    if (num != 0) {
                        endData.addItem(obj);
                    }
                }
                canvas.setStyle("backgroundAlpha", pieChartDef.backgroundAlpha);
                if (pieChartDef.showLegend) {
                    currentState = "";
                } else {
                    currentState = "hideLegend";
                }
                stackIndex = 0;
                pieChart.visible = true;
                legend.visible = true;
                labelPosition = pieChartDef.labelPosition;
                pieChartDef.styleChart(pieChart);
                legend.maxWidth = pieChartDef.legendMaxWidth;
                var fills:Array = [];
                var useCustomColors:Boolean;
                var colors:Array;
                useCustomColors = (pieChartDef.multiColors != null && pieChartDef.multiColors.length && MultiColor(pieChartDef.multiColors.getItemAt(0)).color1StartEnabled);
                if (useCustomColors) {
                    colors = [];
                    for each (var mc:MultiColor in pieChartDef.multiColors) {
                        if (mc.color1StartEnabled) {
                            colors.push(new SolidColor(mc.color1Start));
                        }
                    }
                } else {
                    colors = FillProvider.createRadialGradients();
                }
                pieSeries.setStyle("fills", colors);
                this.defaultLink = ChartUtil.setup(pieChartDef.xaxis, pieChart, onChartClick);
                this.measureFormatter = pieChartDef.measures.getItemAt(0).getFormatter();

                dimension = pieChartDef.xaxis.qualifiedName();
                this.dimensionItem = pieChartDef.xaxis;
                graphData = endData;
            } else {
                if (pieChartDef.measures != null && pieChartDef.measures.length > 0 && pieChartDef.xaxis != null) stackIndex = 2;
                else stackIndex = 1;
                pieChart.visible = false;
                legend.visible = false;
                graphData = dataSet;
            }
        }

        private function renderPieLabel(data:Object, field:String, index:Number, percentValue:Number):String {
            return data[dimension] + ": " + '\n' + this.measureFormatter.format(data[measureName]);
        }

        private function passThrough(event:Event):void {
            dispatchEvent(event);
        }

        public function updateExportMetadata():void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }

        public function preserveValues():Boolean {
            return false;
        }
        
        private var defaultLink:Link;

        private function onChartClick(event:ChartItemEvent):void {
            ClickUtil.doStuff(defaultLink, event.hitData.item, pieChartDef.xaxis, this, pieChartDef);
        }

        [Bindable]
        private var labelPosition:String;

        [Bindable]
        private var stackIndex:int = 0;
        ]]>
	</mx:Script>
    <mx:Canvas width="100%" height="100%" id="canvas" backgroundAlpha="1" backgroundColor="#FFFFFF">
        <mx:HBox width="100%" height="100%" id="hbox">
            <mx:PieChart id="pieChart" dataProvider="{graphData}" selectionMode="none" height="100%" width="100%"
                        paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0"
                    showDataTips="true" fontFamily="Tahoma" fontSize="14">
                <mx:series>
                    <mx:PieSeries field="{measureName}" nameField="{dimension}" labelPosition="{labelPosition}"
                        labelFunction="renderPieLabel" id="pieSeries">
                        <mx:showDataEffect>
                            <mx:SeriesInterpolate duration="1000" />
                        </mx:showDataEffect>
                    </mx:PieSeries>
                </mx:series>
            </mx:PieChart>
            <mx:Legend id="legend" dataProvider="{pieChart}" height="100%" legendItemClass="com.easyinsight.analysis.charts.EILegendItem"/>
        </mx:HBox>
    </mx:Canvas>
</mx:Module>