<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" implements="com.easyinsight.analysis.IReportRenderer"
        width="100%" height="100%" creationComplete="setupListeners()">
    <mx:states>
        <mx:State name="hideLegend">
            <mx:RemoveChild target="{legend}"/>
        </mx:State>
    </mx:states>
    <!--<mx:Style>
        PieSeries {
            fontSize: 10;
            fontFamily: "Lucida Grande";
            fontWeight: normal;
        }

        LegendItem {
            fontSize: 12;
            fontFamily: "Lucida Grande";
            fontWeight: normal;
        }
    </mx:Style>-->
    <mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;

        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.ClickUtil;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.FillProvider;
        import com.easyinsight.analysis.Link;
        import com.easyinsight.analysis.charts.ChartUtil;

        //import com.easyinsight.pseudocontext.PseudoContextWindow;

        import mx.charts.series.PieSeries;
        import mx.formatters.Formatter;
        import mx.charts.series.items.PieSeriesItem;
        import mx.charts.events.ChartItemEvent;
        import mx.collections.ArrayCollection;
        import mx.managers.PopUpManager;

        [Bindable]
        private var graphData:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var dimension:String;

        [Bindable]
        private var measureName:String;

        private var measureFormatter:Formatter;

        [Bindable]
        private var explodeData:Array = [];

        private var dimensionItem:AnalysisItem;

        private function setupListeners():void {
        }

        private var pieChartDef:PieChartDefinition;

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            pieChartDef = analysisDefinition as PieChartDefinition;
            graphData = dataSet;
            if (dataSet.length > 0) {
                canvas.setStyle("backgroundAlpha", pieChartDef.backgroundAlpha);
                if (pieChartDef.showLegend) {
                    currentState = "";
                } else {
                    currentState = "hideLegend";
                }
                stackIndex = 0;
                pieChart.visible = true;
                legend.visible = true;
                labelPosition = pieChartDef.labelPosition;
                pieChart.setStyle("fontFamily", pieChartDef.getFont());
                pieChart.setStyle("fontSize", pieChartDef.fontSize);
                pieSeries.setStyle("fontFamily", pieChartDef.getFont());
                pieSeries.setStyle("fontSize", pieChartDef.fontSize);
                if (pieChartDef.colorScheme == FillProvider.radialGradients) {
                    pieSeries.setStyle("fills", FillProvider.createRadialGradients());
                } else if (pieChartDef.colorScheme == FillProvider.highContrast) {
                    pieSeries.setStyle("fills", FillProvider.createSAPColors());
                } else {
                    pieSeries.setStyle("fills", FillProvider.createRadialGradients());
                }
                this.defaultLink = ChartUtil.setup(pieChartDef.xaxis, pieChart, onChartClick);
                this.measureFormatter = pieChartDef.measures.getItemAt(0).getFormatter();
                measureName = pieChartDef.measures.getItemAt(0).qualifiedName();
                dimension = pieChartDef.xaxis.qualifiedName();
                this.dimensionItem = pieChartDef.xaxis;
            } else {
                if (pieChartDef.measures != null && pieChartDef.measures.length > 0 && pieChartDef.xaxis != null) stackIndex = 2;
                else stackIndex = 1;
                pieChart.visible = false;
                legend.visible = false;
            }
        }

        private function chartSelection(event:ChartItemEvent):void {
            /*for (var j:int = 0; j < graphData.length; j++) {
                var graphObj:Object = graphData.getItemAt(j);
                var explode:Boolean = false;
                for (var i:int = 0; i < pieChart.selectedChartItems.length; i++) {
                    var obj:PieSeriesItem = pieChart.selectedChartItems[i];
                    if (obj.item == graphObj) {
                        explode = true;
                    }
                }
                if (explode) {
                    explodeData[j] = .2;
                } else {
                    explodeData[j] = 0;
                }
            }
            var pieChartSeries:PieSeries = pieChart.series[0] as PieSeries;
            pieChartSeries.perWedgeExplodeRadius = explodeData;*/
        }

        private function renderPieLabel(data:Object, field:String, index:Number, percentValue:Number):String {
            return data[dimension] + ": " + '\n' + this.measureFormatter.format(data[measureName]);
        }

        private function onClick(event:ChartItemEvent):void {

            /*var window:PseudoContextWindow = new PseudoContextWindow(dimensionItem, passThrough, this, pieChartDef, event.hitData.item);
            PopUpManager.addPopUp(window, this);
            window.x = event.stageX + 5;
            window.y = event.stageY + 5;*/
        }

        private function passThrough(event:Event):void {
            dispatchEvent(event);
        }

        public function updateExportMetadata():void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }

        public function preserveValues():Boolean {
            return false;
        }
        
        private var defaultLink:Link;

        private function onChartClick(event:ChartItemEvent):void {
            ClickUtil.doStuff(defaultLink, event.hitData.item, pieChartDef.xaxis, this);
        }

        [Bindable]
        private var labelPosition:String;

        [Bindable]
        private var stackIndex:int = 0;
        ]]>
	</mx:Script>
    <mx:Canvas width="100%" height="100%" id="canvas" backgroundAlpha="1" backgroundColor="#FFFFFF">
        <mx:HBox width="100%" height="100%" id="hbox">
            <mx:PieChart id="pieChart" dataProvider="{graphData}" selectionMode="none" height="100%" width="100%"
                        paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" itemClick="onClick(event)"
                    showDataTips="true" fontFamily="Tahoma" fontSize="14">
                <mx:series>
                    <mx:PieSeries field="{measureName}" nameField="{dimension}" labelPosition="{labelPosition}"
                        labelFunction="renderPieLabel" id="pieSeries">
                        <mx:showDataEffect>
                            <mx:SeriesInterpolate duration="1000" />
                        </mx:showDataEffect>
                    </mx:PieSeries>
                </mx:series>
            </mx:PieChart>
            <mx:Legend id="legend" dataProvider="{pieChart}" height="100%" legendItemClass="com.easyinsight.analysis.charts.EILegendItem"/>
        </mx:HBox>
    </mx:Canvas>
</mx:Module>