<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" implements="com.easyinsight.analysis.IReportRenderer"
        width="100%" height="100%" creationComplete="onCreation()">
    <mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.charts.Chart3DVisuals;
import com.easyinsight.filtering.FilterRawData;

        import ilog.charts3d.series.BarSeries3D;
        import ilog.charts3d.series.BarSet3D;
        import ilog.charts3d.BarChart3D;

        import com.easyinsight.analysis.AnalysisItem;

        import mx.binding.utils.BindingUtils;
        import mx.events.FlexEvent;
        import mx.graphics.BitmapFill;
        import mx.graphics.IFill;

        import com.easyinsight.analysis.conditions.ConditionRenderer;

        import mx.charts.chartClasses.IAxis;
        import mx.charts.LinearAxis;
        import mx.formatters.Formatter;
        import mx.charts.series.items.BarSeriesItem;
        import mx.charts.chartClasses.Series;
        import mx.charts.ChartItem;
        import mx.charts.CategoryAxis;
        import mx.collections.ArrayCollection;

        [Bindable]
        private var graphData:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var xAxisTitle:String = "";

        [Bindable]
        private var yAxisTitle:String = "";

        [Bindable]
        private var xAxisItem:AnalysisItem;
        [Bindable]
        private var yAxisItem:AnalysisItem;

        [Bindable]
        private var sortable:Boolean;

        [Bindable]
        private var xField:String;
        private var _yField:String;

        private var visuals:Chart3DVisuals = new Chart3DVisuals();

        [Bindable]
        public function get yField():String {
            return _yField;
        }

        public function set yField(val:String):void {
            _yField = val;
            dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
        }

        private function onCreation():void {
            visuals.addEventListener(CustomChangeEvent.CUSTOM_CHANGE, onCustomChange);
        }

        private function onCustomChange(event:CustomChangeEvent):void {
            dispatchEvent(event);
        }

        private var measureFormatter:Formatter;

        private var customColors:Boolean = false;
        private var conditionRenderer:ConditionRenderer;

        private var barChart:BarChart3D;

        private var xAxis:LinearAxis;
        private var yAxis:CategoryAxis;

        private var xAxisTitleRendererFactory:ClassFactory;

        private var yAxisTitleRendererFactory:ClassFactory;

        private var barSeries:BarSeries3D;

        private var bgFills:Array;

        [Bindable]
        [Embed(source="../../../../../../../assets/water4.JPG")]
        private var standardFill:Class;

        [Bindable]
        [Embed(source="../../../../../../../assets/magenta.jpg")]
        private var selectedFill:Class;

        [Bindable]
        [Embed(source="../../../../../../../assets/darkwater.jpg")]
        private var rolloverFill:Class;

        override protected function createChildren():void {
            super.createChildren();
            bgFills = [];
            for (var i:int = 0; i < 15; i++) {
                var bgFill:BitmapFill = new BitmapFill();
                bgFill.source = standardFill;
                bgFill.originX = Math.random() * 60;
                bgFill.originY = Math.random() * 60;
                bgFills.push(bgFill);
            }
        }

        private function createChart():void {
            if (barChart == null) {

                // define the chart itself

                barChart = new BarChart3D();
                barChart.percentHeight = 100;
                barChart.percentWidth = 100;
                barChart.showDataTips = true;
                barChart.dataProvider = graphData;
                visuals.chart = barChart;

                // define the X axis

                yAxis = new CategoryAxis();
                BindingUtils.bindProperty(yAxis, "categoryField", this, "yField");
                yAxis.dataProvider = graphData;
                yAxis.title = yAxisTitle;
                barChart.verticalAxis = yAxis;
                /*var axisRenderer:AxisRenderer = new AxisRenderer();
                 axisRenderer.axis = yAxis;
                 yAxisTitleRendererFactory = new SortableAxisTitleFactory(yAxisItem, false);
                 axisRenderer.titleRenderer = yAxisTitleRendererFactory;
                 axisRenderer.placement = "left";
                 barChart.verticalAxisRenderers = [ axisRenderer ];*/

                // define the Y axis

                xAxis = new LinearAxis();
                xAxis.title = xAxisTitle;
                xAxis.labelFunction = renderAxis;
                barChart.horizontalAxis = xAxis;
                /*var xAxisRenderer:AxisRenderer = new AxisRenderer();
                 xAxisRenderer.axis = xAxis;
                 xAxisTitleRendererFactory = new SortableAxisTitleFactory(xAxisItem, true);
                 xAxisRenderer.titleRenderer = xAxisTitleRendererFactory;
                 xAxisRenderer.placement = "bottom";
                 barChart.horizontalAxisRenderers = [ xAxisRenderer ];*/

                // create the data series

                barSeries = new BarSeries3D();
                barSeries.setStyle("stroke", s1);
                barSeries.fillFunction = customFill;
                barSeries.xField = xField;
                barSeries.yField = yField;
                barSeries.labelFunction = renderChartLabel;
                barSeries.dataProvider = graphData;
                barSeries.displayName = yAxisTitle;
                barSeries.setStyle("showDataEffect", interpolateIn);
                var barSet:BarSet3D = new BarSet3D();
                barSet.series = [ barSeries ];
                barChart.series = [ barSet ];
                addChild(barChart);
            }
        }

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object):void {
            var barChartDef:Bar3DChartDefinition = analysisDefinition as Bar3DChartDefinition;


            if (dataSet.length > 0) {
                yField = barChartDef.yaxis.qualifiedName();
                createChart();

                if (barChartDef.elevationAngle > 0) {
                    visuals.elevationAngle = barChartDef.elevationAngle;
                    visuals.rotationAngle = barChartDef.rotationAngle;
                }

                measureFormatter = barChartDef.measure.getFormatter();
                var conditionRenderer:ConditionRenderer = barChartDef.measure.createClientRenderer();
                if (conditionRenderer.hasCustomColor()) {
                    customColors = true;
                    this.conditionRenderer = conditionRenderer;
                }

                var newXAxisItem:AnalysisItem = barChartDef.measure;
                if (xAxisItem == null || newXAxisItem.qualifiedName() != xAxisItem.qualifiedName()) {
                    xAxisItem = newXAxisItem;
                    if (sortable) {
                        //xAxisTitleRendererFactory.analysisItem = xAxisItem;
                    }
                }

                var newYAxisItem:AnalysisItem = barChartDef.yaxis;
                if (yAxisItem == null || newYAxisItem.qualifiedName() != yAxisItem.qualifiedName()) {
                    yAxisItem = newYAxisItem;
                    if (sortable) {
                        //yAxisTitleRendererFactory.analysisItem = yAxisItem;
                    }
                }

                var newXField:String = newXAxisItem.qualifiedName();
                if (newXField != xField) {
                    xField = newXField;
                    barSeries.xField = xField;
                }

                var newXAxisTitle:String = newXAxisItem.display;
                if (newXAxisTitle != xAxisTitle) {
                    xAxisTitle = newXAxisTitle;
                    xAxis.title = xAxisTitle;
                }

                var newYField:String = newYAxisItem.qualifiedName();
                if (newYField != yField) {
                    yField = newYField;
                    yAxis.categoryField = yField;
                    barSeries.yField = yField;
                }

                var newYAxisTitle:String = newYAxisItem.display;
                if (newYAxisTitle != yAxisTitle) {
                    yAxisTitle = newYAxisTitle;
                    yAxis.title = yAxisTitle;
                    barSeries.displayName = yAxisTitle;
                }
                barChart.dataProvider = dataSet;
            barSeries.dataProvider = dataSet;
            yAxis.dataProvider = dataSet;
            }


            graphData = dataSet;
        }

        private function renderChartLabel(element:ChartItem, series:Series):String {
            var barSeriesItem:BarSeriesItem = element as BarSeriesItem;
            return measureFormatter.format(barSeriesItem.xNumber);
        }

        private function customFill(element:ChartItem, index:Number):IFill {
            return bgFills[index % 15];
        }

        private function renderAxis(labelValue:Object, previousValue:Object, axis:IAxis):String {
            return measureFormatter.format(labelValue);
        }

        public function createFilterRawData():FilterRawData {
            var filterRawData:FilterRawData = new FilterRawData();
            for (var i:int = 0; i < barChart.selectedChartItems.length; i++) {
                var obj:ChartItem = barChart.selectedChartItems[i];
                filterRawData.addPair(xAxisItem, obj.item[xAxisItem.key.createString()]);
            }
            return filterRawData;
        }

        public function updateExportMetadata():void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }
		]]>
	</mx:Script>
    <mx:Stroke id="s1" color="#2A7E93" weight="2"/>
	<mx:SeriesInterpolate id="interpolateIn" duration="1000"/>
</mx:Module>