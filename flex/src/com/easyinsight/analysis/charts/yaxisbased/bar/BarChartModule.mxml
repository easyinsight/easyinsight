<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:analysis="com.easyinsight.analysis.*" implements="com.easyinsight.analysis.IReportRenderer"
        width="100%" height="100%" creationComplete="setupListeners()">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;


        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.ChartSortButton;
        import com.easyinsight.analysis.ChartSortEvent;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.FillProvider;
        import com.easyinsight.analysis.SortFunctionFactory;
        import com.easyinsight.analysis.SortableAxisTitle;

        import com.easyinsight.filtering.FilterRawData;


        import com.easyinsight.pseudocontext.PseudoContextWindow;

        import mx.binding.utils.BindingUtils;
        import mx.charts.AxisRenderer;
        import mx.charts.CategoryAxis;
        import mx.charts.ChartItem;
        import mx.charts.BarChart;
        import mx.charts.LinearAxis;
        import mx.charts.chartClasses.IAxis;
        import mx.charts.chartClasses.Series;
        import mx.charts.events.ChartItemEvent;
        import mx.charts.series.BarSeries;
        import mx.charts.series.items.BarSeriesItem;
        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.events.FlexEvent;
        import mx.formatters.Formatter;
        import mx.graphics.BitmapFill;
        import mx.graphics.IFill;
        import mx.managers.PopUpManager;

        [Bindable]
        private var graphData:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var xAxisTitle:String = "";

        [Bindable]
        private var yAxisTitle:String = "";

        [Bindable]
        private var xAxisItem:AnalysisItem;
        [Bindable]
        private var yAxisItem:AnalysisItem;

        private var xField:String;
        [Bindable]
        private var _yField:String;

        private var measureFormatter:Formatter;
        private var dimensionFormatter:Formatter;

        private var customColors:Boolean = false;

        private var barChart:BarChart;

        private var xAxis:LinearAxis;
        private var yAxis:CategoryAxis;

        private var xAxisTitleRendererFactory:ClassFactory;

        private var yAxisTitleRendererFactory:ClassFactory;

        private var barSeries:BarSeries;

        private var bgFills:Array;

        private var sortable:Boolean = true;
        private var selectable:Boolean = true;

        [Bindable]
        [Embed(source="../../../../../../../assets/water4.JPG")]
        private var standardFill:Class;

        [Bindable]
        public function get yField():String {
            return _yField;
        }

        public function set yField(val:String):void {
            _yField = val;
            dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
        }

        private function onChartSort(event:ChartSortEvent):void {
            if (event.sortState == ChartSortButton.ASCENDING ||
                    event.sortState == ChartSortButton.DESCENDING) {
                var sort:Sort = new Sort();
                sort.fields = [ new SortField(event.analysisItem.qualifiedName(), false,
                        event.sortState == ChartSortButton.DESCENDING) ];
                graphData.sort = sort;
                graphData.refresh();
            }
        }

        /*private function onDrill(chartItem:ChartItem):void {
         if (yAxisItem is AnalysisHierarchyItem) {
         var data:Object = chartItem.item;
         var hierarchyItem:AnalysisHierarchyItem = yAxisItem as AnalysisHierarchyItem;
         var index:int = hierarchyItem.hierarchyLevels.getItemIndex(hierarchyItem.hierarchyLevel);
         if (index < (hierarchyItem.hierarchyLevels.length - 1)) {
         var dataField:String = hierarchyItem.qualifiedName();
         var dataString:String = data[dataField];
         var filterRawData:FilterRawData = new FilterRawData();
         filterRawData.addPair(hierarchyItem.hierarchyLevel.analysisItem, dataString);
         hierarchyItem.hierarchyLevel = hierarchyItem.hierarchyLevels.getItemAt(index + 1) as HierarchyLevel;
         dispatchEvent(new HierarchyDrilldownEvent(HierarchyDrilldownEvent.DRILLDOWN, filterRawData,
         hierarchyItem, index + 1));
         }
         }
         }

         private function onRollup(chartItem:ChartItem):void {
         if (yAxisItem is AnalysisHierarchyItem) {
         var hierarchyItem:AnalysisHierarchyItem = yAxisItem as AnalysisHierarchyItem;
         var index:int = hierarchyItem.hierarchyLevels.getItemIndex(hierarchyItem.hierarchyLevel);
         if (index > 0) {
         hierarchyItem.hierarchyLevel = hierarchyItem.hierarchyLevels.getItemAt(index - 1) as HierarchyLevel;
         dispatchEvent(new HierarchyRollupEvent(hierarchyItem.hierarchyLevel.analysisItem, hierarchyItem, index - 1));
         }
         }
         }

         private function drilldown(event:ChartItemEvent):void {
         onDrill(event.hitData.chartItem);
         }

         private function drilldownEvent(event:ChartDrilldownEvent):void {
         if (event.type == ChartDrilldownEvent.ROLLUP) {
         onRollup(event.chartItem);
         } else {
         onDrill(event.chartItem);
         }
         }*/

        private function setupListeners():void {
            addEventListener(ChartSortEvent.CHART_SORT, onChartSort);
        }

        override protected function createChildren():void {
            super.createChildren();
            bgFills = [];
            for (var i:int = 0; i < 15; i++) {
                var bgFill:BitmapFill = new BitmapFill();
                bgFill.source = standardFill;
                bgFill.originX = Math.random() * 60;
                bgFill.originY = Math.random() * 60;
                bgFills.push(bgFill);
            }
        }

        private function onClick(event:ChartItemEvent):void {
            if (event.shiftKey) {

                var window:PseudoContextWindow = new PseudoContextWindow(yAxisItem, passThrough, this, barChartDef, event.hitData.item);
                PopUpManager.addPopUp(window, this);
                window.x = event.stageX + 5;
                window.y = event.stageY + 5;
            }
        }

        private function passThrough(event:Event):void {
            dispatchEvent(event);
        }

        private function createChart():void {
            if (barChart == null) {

                // define the chart itself

                barChart = new BarChart();
                barChart.percentHeight = 100;
                barChart.percentWidth = 100;
                barChart.addEventListener(ChartItemEvent.ITEM_CLICK, onClick);
                /*barChart.addEventListener(ChartItemEvent.ITEM_CLICK, drilldown);
                 barChart.addEventListener(ChartDrilldownEvent.DRILLDOWN, drilldownEvent);
                 barChart.addEventListener(ChartDrilldownEvent.ROLLUP, drilldownEvent);*/
                barChart.showDataTips = true;
                /*if (selectable) {
                 barChart.selectionMode = "multiple";
                 }*/
                barChart.dataProvider = graphData;

                // define the X axis

                yAxis = new CategoryAxis();
                BindingUtils.bindProperty(yAxis, "categoryField", this, "yField");
                //xAxis.categoryField = xField;
                yAxis.labelFunction = renderDimensionAxis;
                yAxis.dataProvider = graphData;
                yAxis.title = yAxisTitle;
                barChart.verticalAxis = yAxis;
                var axisRenderer:AxisRenderer = new AxisRenderer();
                axisRenderer.axis = yAxis;
                yAxisTitleRendererFactory = new ClassFactory(SortableAxisTitle);
                yAxisTitleRendererFactory.properties = { analysisItem: yAxisItem, axisDirection: false};
                axisRenderer.titleRenderer = yAxisTitleRendererFactory;
                axisRenderer.placement = "left";
                barChart.verticalAxisRenderers = [ axisRenderer ];

                // define the Y axis

                xAxis = new LinearAxis();
                xAxis.title = xAxisTitle;
                xAxis.labelFunction = renderAxis;
                barChart.horizontalAxis = xAxis;
                var xAxisRenderer:AxisRenderer = new AxisRenderer();
                xAxisRenderer.axis = xAxis;
                xAxisTitleRendererFactory = new ClassFactory(SortableAxisTitle);
                xAxisTitleRendererFactory.properties = { analysisItem: xAxisItem, axisDirection: true};
                xAxisRenderer.titleRenderer = xAxisTitleRendererFactory;
                xAxisRenderer.placement = "bottom";
                barChart.horizontalAxisRenderers = [ xAxisRenderer ];

                // create the data series

                barSeries = new BarSeries();
                //barSeries.setStyle("itemRenderer", new CustomChartRendererFactory(selectedFill, rolloverFill));
                barSeries.setStyle("stroke", s1);
                barSeries.fillFunction = customFill;
                barSeries.xField = xField;
                barSeries.yField = yField;
                barSeries.labelFunction = renderChartLabel;
                barSeries.dataProvider = graphData;
                barSeries.displayName = yAxisTitle;
                barSeries.setStyle("showDataEffect", interpolateIn);
                barSeries.dataFunction = myDataFunction;
                //barSeries.setStyle("fills", standardBlue);
                var mySeries:Array = new Array();
                barChart.series = mySeries;
                mySeries.push(barSeries);
                canvas.addChild(barChart);
            } else {
                barChart.visible = true;
            }
        }

        private function myDataFunction(series:Series, item:Object, fieldName:String):Object {
            if (fieldName == 'xValue')
                return(item[xAxisItem.qualifiedName()].toNumber());
            else if (fieldName == "yValue")
                return(item[yAxisItem.qualifiedName()].toString());
            else
                return null;
        }

        private function renderChartLabel(element:ChartItem, series:Series):String {
            var barSeriesItem:BarSeriesItem = element as BarSeriesItem;
            return measureFormatter.format(barSeriesItem.xNumber);
        }

        private function customFill(element:ChartItem, index:Number):IFill {
            return FillProvider.getColor(barChartDef.colorScheme, bgFills, index);
        }

        private function renderAxis(labelValue:Object, previousValue:Object, axis:IAxis):String {
            return measureFormatter.format(labelValue);
        }

        private function renderDimensionAxis(item:Object, prevValue:Object, axis:CategoryAxis, categoryItem:Object):String {
            return dimensionFormatter.format(item);
        }

        public function createFilterRawData():FilterRawData {
            var filterRawData:FilterRawData = new FilterRawData();
            for (var i:int = 0; i < barChart.selectedChartItems.length; i++) {
                var obj:ChartItem = barChart.selectedChartItems[i];
                filterRawData.addPair(xAxisItem, obj.item[xAxisItem.key.createString()]);
            }
            return filterRawData;
        }

        private var barChartDef:BarChartDefinition;

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object,
                                     additionalProperties:Object):void {
            barChartDef = analysisDefinition as BarChartDefinition;

            if (dataSet.length > 0) {
                canvas.setStyle("backgroundAlpha", barChartDef.backgroundAlpha);
                stackIndex = 0;
                if (barChartDef.yaxis.sort > 0) {
                    var sort:Sort = new Sort();
                    //sort.fields = [ new SortField(columnChartDef.xaxis.qualifiedName(), false, )];
                    sort.compareFunction = SortFunctionFactory.createSortFunction(barChartDef.yaxis, barChartDef.yaxis.sort == ChartSortButton.DESCENDING);
                    dataSet.sort = sort;
                    dataSet.refresh();
                } else if (barChartDef.measure.sort > 0) {
                    var measureSort:Sort = new Sort();
                    measureSort.compareFunction = SortFunctionFactory.createSortFunction(barChartDef.measure, barChartDef.measure.sort == ChartSortButton.DESCENDING);
                    dataSet.sort = measureSort;
                    dataSet.refresh();
                }

                yField = barChartDef.yaxis.qualifiedName();
                createChart();

                measureFormatter = barChartDef.measure.getFormatter();
                dimensionFormatter = barChartDef.yaxis.getFormatter();

                var newXAxisItem:AnalysisItem = barChartDef.measure;
                if (xAxisItem == null || newXAxisItem.qualifiedName() != xAxisItem.qualifiedName()) {
                    xAxisItem = newXAxisItem;
                    if (sortable) {
                        xAxisTitleRendererFactory.properties = { analysisItem: xAxisItem, axisDirection: true};
                    }
                }

                var newYAxisItem:AnalysisItem = barChartDef.yaxis;
                if (yAxisItem == null || newYAxisItem.qualifiedName() != yAxisItem.qualifiedName()) {
                    yAxisItem = newYAxisItem;
                    if (sortable) {
                        yAxisTitleRendererFactory.properties = { analysisItem: yAxisItem, axisDirection: false};
                    }
                }

                var newXField:String = newXAxisItem.qualifiedName();
                if (newXField != xField) {
                    xField = newXField;
                    barSeries.xField = xField;
                }

                var newXAxisTitle:String = newXAxisItem.display;
                if (newXAxisTitle != xAxisTitle) {
                    xAxisTitle = newXAxisTitle;
                    xAxis.title = xAxisTitle;
                }

                var newYField:String = newYAxisItem.qualifiedName();
                if (newYField != yField) {
                    yField = newYField;
                    yAxis.categoryField = yField;
                    barSeries.yField = yField;
                }

                var newYAxisTitle:String = newYAxisItem.display;
                if (newYAxisTitle != yAxisTitle) {
                    yAxisTitle = newYAxisTitle;
                    yAxis.title = yAxisTitle;
                    barSeries.displayName = yAxisTitle;
                }

                barChart.dataProvider = dataSet;
                barSeries.dataProvider = dataSet;
                yAxis.dataProvider = dataSet;
            } else {
                if (barChartDef.measure != null && barChartDef.yaxis != null) stackIndex = 2;
                else stackIndex = 1;
                if (barChart != null) {
                    barChart.dataProvider = new ArrayCollection();
                    barSeries.dataProvider = new ArrayCollection();
                    yAxis.dataProvider = new ArrayCollection();
                    barChart.visible = false;
                }
            }

            graphData = dataSet;
        }

        [Bindable]
        private var stackIndex:int = 0;

        public function preserveValues():Boolean {
            return true;
        }

        public function updateExportMetadata():void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }]]></mx:Script>
    <mx:Stroke id="s1" color="#2A7E93" weight="2"/>
    <mx:SeriesInterpolate id="interpolateIn" duration="1000"/>
    <mx:Canvas width="100%" height="100%" id="canvas" backgroundAlpha="1" backgroundColor="#FFFFFF">
        <mx:ViewStack width="100%" height="100%" selectedIndex="{stackIndex}" creationPolicy="all" mouseChildren="false"
                      mouseEnabled="false">
            <mx:Canvas width="100%" height="100%"/>
            <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" backgroundColor="#000000"
                    backgroundAlpha=".1">
                <mx:Box borderStyle="solid" borderThickness="1" cornerRadius="10" horizontalAlign="center"
                        verticalAlign="middle"
                        backgroundColor="#FFFFFF" paddingBottom="15" paddingLeft="15" paddingRight="15" paddingTop="15">
                    <mx:TextArea fontSize="22"
                                 text="You haven't set up a report yet. Drag one Grouping and one Measure into the labeled areas above the canvas to create a report."
                                 borderStyle="none" backgroundAlpha="0" width="500" height="95"/>
                </mx:Box>
            </mx:Box>
            <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" backgroundColor="#000000"
                    backgroundAlpha=".1">
                <mx:Box borderStyle="solid" borderThickness="1" cornerRadius="10" horizontalAlign="center"
                        verticalAlign="middle"
                        backgroundColor="#FFFFFF" paddingBottom="15" paddingLeft="15" paddingRight="15" paddingTop="15">
                    <mx:TextArea fontSize="22"
                                 text="We didn't find any data for the fields and filters that you specified in the report."
                                 borderStyle="none" backgroundAlpha="0" width="500" height="65"/>
                </mx:Box>
            </mx:Box>
        </mx:ViewStack>
    </mx:Canvas>
</mx:Module>