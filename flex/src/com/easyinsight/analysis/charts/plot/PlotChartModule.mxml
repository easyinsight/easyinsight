<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" implements="com.easyinsight.analysis.ISelectableReportRenderer"
        width="100%" height="100%">
    <mx:Style>
        .axisTitles {
            fontSize: 14;
            fontFamily: "Tahoma";
        }

        CartesianChart {
            axisTitleStyleName:axisTitles;
            fontFamily: "Tahoma";
            fontSize: 14;
        }
    </mx:Style>
    <mx:states>
        <mx:State name="Legend">
            <mx:AddChild relativeTo="{coreBox}">
               <mx:Legend id="legend" dataProvider="{plotChart}" height="100%"/>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.filtering.FilterRawData;

        import com.easyinsight.pseudocontext.PseudoContextWindow;

        import mx.charts.ChartItem;
        import mx.charts.chartClasses.IAxis;

        import mx.charts.events.ChartItemEvent;
        import mx.charts.series.PlotSeries;
        import mx.formatters.Formatter;
        import mx.charts.HitData;
        import mx.collections.ArrayCollection;
        import mx.formatters.NumberFormatter;
        import mx.managers.PopUpManager;

        [Bindable]
        private var correlation:String;

        [Bindable]
        private var graphData:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var dimension:String = "";

        [Bindable]
        private var measure1:String = "";
        [Bindable]
        private var measure1Name:String = "";

        private var measure1Formatter:Formatter;

        private var dimensionItem:AnalysisItem;

        [Bindable]
        private var measure2:String = "";
        [Bindable]
        private var measure2Name:String = "";

        private var measure2Formatter:Formatter;

        private var plotChartDef:PlotChartDefinition;

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            this.plotChartDef = analysisDefinition as PlotChartDefinition;
            var seriesMap:Object = new Object();
            if (dataSet.length > 0) {
                coreBox.setStyle("backgroundAlpha", plotChartDef.backgroundAlpha);
                if (additionalProperties != null) {
                    var correlation:Number = additionalProperties.correlation;
                }
                this.correlation = new NumberFormatter().format(correlation);
                measure1 = plotChartDef.xaxisMeasure.qualifiedName();
                measure1Name = plotChartDef.xaxisMeasure.display;
                measure2 = plotChartDef.yaxisMeasure.qualifiedName();
                measure2Name = plotChartDef.yaxisMeasure.display;
                measure1Formatter = plotChartDef.xaxisMeasure.getFormatter();
                measure2Formatter = plotChartDef.yaxisMeasure.getFormatter();
                dimension = plotChartDef.dimension.qualifiedName();
                dimensionItem = plotChartDef.dimension;
                if (plotChartDef.iconGrouping != null) {
                    // if an icon grouping is defined, we need to break out items by
                    for each (var obj:Object in dataSet) {
                        var key:String = String(obj[plotChartDef.iconGrouping.qualifiedName()]);
                        var seriesData:ArrayCollection = seriesMap[key];
                        if (seriesData == null) {
                            seriesData = new ArrayCollection();
                            seriesMap[key] = seriesData;
                        }
                        seriesData.addItem(obj);
                    }
                    var seriesArray:Array = [];
                    for (var seriesKey:String in seriesMap) {
                        var obj1:Object = seriesMap[seriesKey].getItemAt(0);
                        var splitPlotSeries:PlotSeries = new PlotSeries();
                        splitPlotSeries.dataProvider = seriesMap[seriesKey];
                        splitPlotSeries.xField = measure1;
                        splitPlotSeries.displayName = obj1[plotChartDef.iconGrouping.qualifiedName()];
                        splitPlotSeries.yField = measure2;
                        seriesArray.push(splitPlotSeries);
                    }
                    plotChart.series = seriesArray;
                    currentState = "Legend";
                } else {
                    var defaultSeries:PlotSeries = new PlotSeries();
                    defaultSeries.xField = measure1;
                    defaultSeries.radius = 10;
                    defaultSeries.yField = measure2;
                    defaultSeries.displayName = plotChartDef.dimension.display;
                    plotChart.series = [ defaultSeries ];
                    currentState = "";
                }
            }
            graphData = dataSet;
        }

        private function dtFunc(hd:HitData):String {
            return hd.item[dimension];
        }

        public function createFilterRawData():FilterRawData {
            var filterRawData:FilterRawData = new FilterRawData();
            for (var i:int = 0; i < plotChart.selectedChartItems.length; i++) {
                var obj:ChartItem = plotChart.selectedChartItems[i];
                filterRawData.addPair(dimensionItem, obj.item[dimensionItem.qualifiedName()]);
            }
            return filterRawData;
        }

        private function renderXAxis(labelValue:Object, previousValue:Object, axis:IAxis):String {
            if (measure1Formatter != null) {
                return measure1Formatter.format(labelValue);
            } else {
                return String(labelValue);
            }
        }

        private function renderYAxis(labelValue:Object, previousValue:Object, axis:IAxis):String {
            if (measure2Formatter != null) {
                return measure2Formatter.format(labelValue);
            } else {
                return String(labelValue);
            }
        }


        public function updateExportMetadata():void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }

        private function onClick(event:ChartItemEvent):void {
            if (!selectionEnabled) {
                var window:PseudoContextWindow = new PseudoContextWindow(dimensionItem, passThrough, this, plotChartDef, event.hitData.item);
                PopUpManager.addPopUp(window, this);
                window.x = event.stageX + 5;
                window.y = event.stageY + 5;
            }
        }

        private function passThrough(event:Event):void {
            dispatchEvent(event);
        }

        public function preserveValues():Boolean {
            return false;
        }

        private var _selectionEnabled:Boolean;

        [Bindable(event="selectionEnabledChanged")]
        public function get selectionEnabled():Boolean {
            return _selectionEnabled;
        }

        public function set selectionEnabled(value:Boolean):void {
            if (_selectionEnabled == value) return;
            _selectionEnabled = value;
            dispatchEvent(new Event("selectionEnabledChanged"));
            if (value)
                plotChart.selectionMode = "multiple";
            else
                plotChart.selectionMode = "none";
        }
		]]>
	</mx:Script>

	<mx:SeriesZoom id="zoomIn" duration="1000"/>
    <mx:SeriesZoom id="zoomOut" duration="1000"/>

    <mx:HBox width="100%" height="100%" backgroundColor="#FFFFFF" id="coreBox">
        <mx:VBox width="100%" height="100%">
            <!--<mx:Label text="{correlation}"/>-->
        <mx:PlotChart id="plotChart" dataProvider="{graphData}" width="100%" height="100%" showDataTips="true" dataTipFunction="dtFunc"
            selectionMode="none" itemClick="onClick(event)">
            <mx:horizontalAxis>
                <mx:LinearAxis labelFunction="renderXAxis" baseAtZero="false" title="{measure1Name}" id="xAxis"/>
            </mx:horizontalAxis>
            <mx:horizontalAxisRenderers>
                <mx:AxisRenderer axis="{xAxis}">

                </mx:AxisRenderer>
            </mx:horizontalAxisRenderers>
            <mx:verticalAxis>
                <mx:LinearAxis labelFunction="renderYAxis" baseAtZero="false" title="{measure2Name}" id="yAxis"/>
            </mx:verticalAxis>
            <mx:verticalAxisRenderers>
                <mx:AxisRenderer axis="{yAxis}">

                </mx:AxisRenderer>
            </mx:verticalAxisRenderers>
            <!--<mx:series>
                <mx:PlotSeries xField="{measure1}" yField="{measure2}" hideDataEffect="zoomOut" showDataEffect="zoomIn"/>
            </mx:series>-->
        </mx:PlotChart>
        </mx:VBox>
    </mx:HBox>
</mx:Module>