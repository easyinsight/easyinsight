<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" implements="com.easyinsight.analysis.IReportRenderer"
        width="100%" height="100%">
    <mx:Script><![CDATA[

        import com.easyinsight.analysis.AnalysisDateDimension;
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemTypes;
        import com.easyinsight.analysis.AnalysisMeasure;

        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.filtering.FilterRawData;

        import mx.charts.CategoryAxis;
        import mx.charts.DateTimeAxis;
        import mx.charts.Legend;
        import mx.charts.LineChart;
        import mx.charts.chartClasses.IAxis;
        import mx.charts.series.LineSeries;
        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;

        [Bindable]
        private var chartData:ArrayCollection;

        private var lineChart:LineChart;

        private var legend:Legend;

        override protected function createChildren():void {
            super.createChildren();
            if (lineChart == null) {
                lineChart = new LineChart();
                lineChart.percentHeight = 100;
                lineChart.percentWidth = 100;
                //lineChart.dataProvider = chartData;
                lineChart.selectionMode = "multiple";
            }
            hbox.addChild(lineChart);
            if (legend == null) {
                legend = new Legend();
                legend.direction = "vertical";
                legend.percentHeight = 100;
            }
            hbox.addChild(legend);
        }

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object):void {

            var lineChartDef:LineChartDefinition = analysisDefinition as LineChartDefinition;

            this.chartData = new ArrayCollection(dataSet.toArray());

            hbox.removeChild(lineChart);

            lineChart = new LineChart();
            lineChart.percentHeight = 100;
            lineChart.percentWidth = 100;
            lineChart.dataProvider = chartData;
            lineChart.showDataTips = true;
            lineChart.selectionMode = "multiple";

            var xAxisDimension:AnalysisItem = lineChartDef.xaxis;

            var sort:Sort = new Sort();
            var sortField:SortField = new SortField(xAxisDimension.qualifiedName(), true);
            sort.fields = [ sortField ];
            if (chartData.length > 0) {
                var firstObj:Object = chartData.getItemAt(0);
                var firstVal:Object = firstObj[xAxisDimension.qualifiedName()];
                if (firstVal is Number) {
                    sortField.numeric = true;
                }

                chartData.sort = sort;
                chartData.refresh();

                if (firstVal is Number) {
                    var categories:ArrayCollection = new ArrayCollection();
                    for each (var obj:Object in chartData) {
                        var valObj:Object = obj[xAxisDimension.qualifiedName()];
                        if (categories.getItemIndex(valObj) == -1) {
                            categories.addItem(valObj);
                        }
                    }
                }
            }


            var xAxis:IAxis;

            if (xAxisDimension.hasType(AnalysisItemTypes.DATE)) {
                var dateDimension:AnalysisDateDimension = xAxisDimension as AnalysisDateDimension;
                var dateAxis:DateTimeAxis = new DateTimeAxis();
                switch (dateDimension.dateLevel) {
                    case AnalysisItemTypes.YEAR_LEVEL:
                        dateAxis.dataUnits = "years";
                        break;
                    case AnalysisItemTypes.MONTH_LEVEL:
                        dateAxis.dataUnits = "months";
                        break;
                    case AnalysisItemTypes.DAY_LEVEL:
                        dateAxis.dataUnits = "days";
                        break;
                    case AnalysisItemTypes.HOUR_LEVEL:
                        dateAxis.dataUnits = "hours";
                        break;
                    case AnalysisItemTypes.MINUTE_LEVEL:
                        dateAxis.dataUnits = "minutes";
                        break;
                }
                dateAxis.displayName = dateDimension.display;
                xAxis = dateAxis;
            } else {
                var categoryAxis:CategoryAxis = new CategoryAxis();
                categoryAxis.displayName = xAxisDimension.display;
                categoryAxis.dataProvider = categories;
                xAxis = categoryAxis;
            }

            lineChart.horizontalAxis = xAxis;

            var mySeries:Array = new Array();
            var analysisMeasure:AnalysisMeasure = lineChartDef.measure as AnalysisMeasure;
            var uniques:ArrayCollection = new ArrayCollection();

            var seriesData:Object = new Object();
            for (var i:int = 0; i < dataSet.length; i++) {
                var object:Object = dataSet.getItemAt(i);
                var dimensionValue:String = object[lineChartDef.yaxis.qualifiedName()];
                if (dimensionValue == null || dimensionValue == "") {
                    dimensionValue = "[ No Value ]";
                }
                var newSeriesData:ArrayCollection = seriesData[dimensionValue];
                if (newSeriesData == null) {
                    newSeriesData = new ArrayCollection();
                    seriesData[dimensionValue] = newSeriesData;
                }
                var newObject:Object = new Object();
                newObject[lineChartDef.xaxis.qualifiedName()] = object[lineChartDef.xaxis.qualifiedName()];
                newObject[dimensionValue] = object[analysisMeasure.qualifiedName()];
                newSeriesData.addItem(newObject);
                //allItems.addItem(newObject);
                if (!uniques.contains(dimensionValue)) {
                    uniques.addItem(dimensionValue);
                }
            }
            for (i = 0; i < uniques.length; i++) {
                var key:String = uniques.getItemAt(i) as String;
                var uniqueLineSeries:LineSeries = new LineSeries();
                uniqueLineSeries.xField = lineChartDef.xaxis.qualifiedName();
                if (key == null || key == "") {
                    key = "[ No Value ]";
                }
                uniqueLineSeries.yField = key;
                uniqueLineSeries.displayName = key;
                uniqueLineSeries.dataProvider = seriesData[key];
                mySeries.push(uniqueLineSeries);
            }

            lineChart.series = mySeries;

            legend.dataProvider = lineChart;
            legend.direction = "vertical";
            hbox.addChildAt(lineChart, 0);
        }


        public function createFilterRawData():FilterRawData {
            return null;
        }

        public function updateExportMetadata():void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }]]></mx:Script>
    <mx:HBox width="100%" height="100%" id="hbox"/>
</mx:Module>