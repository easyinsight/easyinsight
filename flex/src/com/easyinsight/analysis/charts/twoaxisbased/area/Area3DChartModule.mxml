<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" implements="com.easyinsight.analysis.IReportRenderer"
        width="100%" height="100%">
    <mx:Script><![CDATA[

        import com.easyinsight.analysis.AnalysisDateDimension;
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemTypes;
        import com.easyinsight.analysis.AnalysisMeasure;

        import com.easyinsight.filtering.FilterRawData;

        import ilog.charts3d.AreaChart3D;
        import ilog.charts3d.series.AreaSeries3D;
        import mx.charts.CategoryAxis;
        import mx.charts.DateTimeAxis;
        import mx.charts.Legend;
        import mx.charts.chartClasses.IAxis;
        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;

        [Bindable]
        private var chartData:ArrayCollection;

        private var areaChart:AreaChart3D;

        private var legend:Legend;

        override protected function createChildren():void {
            super.createChildren();
            if (areaChart == null) {
                areaChart = new AreaChart3D();
                areaChart.type = "stacked";
                areaChart.percentHeight = 100;
                areaChart.percentWidth = 100;
                //areaChart.dataProvider = chartData;
                areaChart.selectionMode = "multiple";
            }
            hbox.addChild(areaChart);
            if (legend == null) {
                legend = new Legend();
                legend.direction = "vertical";
                legend.percentHeight = 100;
            }
            hbox.addChild(legend);
        }

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object):void {

            var areaChartDef:Area3DChartDefinition = analysisDefinition as Area3DChartDefinition;

            this.chartData = new ArrayCollection(dataSet.toArray());

            hbox.removeChild(areaChart);

            areaChart = new AreaChart3D();
            areaChart.percentHeight = 100;
            areaChart.percentWidth = 100;
            areaChart.dataProvider = chartData;
            areaChart.selectionMode = "multiple";

            var xAxisDimension:AnalysisItem = areaChartDef.xaxis;

            var sort:Sort = new Sort();
            var sortField:SortField = new SortField(xAxisDimension.qualifiedName(), true);
            sort.fields = [ sortField ];
            if (chartData.length > 0) {
                var firstObj:Object = chartData.getItemAt(0);
                var firstVal:Object = firstObj[xAxisDimension.qualifiedName()];
                if (firstVal is Number) {
                    sortField.numeric = true;
                }

                chartData.sort = sort;
                chartData.refresh();

                if (firstVal is Number) {
                    var categories:ArrayCollection = new ArrayCollection();
                    for each (var obj:Object in chartData) {
                        var valObj:Object = obj[xAxisDimension.qualifiedName()];
                        if (categories.getItemIndex(valObj) == -1) {
                            categories.addItem(valObj);
                        }
                    }
                }
            }


            var xAxis:IAxis;

            if (xAxisDimension.hasType(AnalysisItemTypes.DATE)) {
                var dateDimension:AnalysisDateDimension = xAxisDimension as AnalysisDateDimension;
                var dateAxis:DateTimeAxis = new DateTimeAxis();
                switch (dateDimension.dateLevel) {
                    case AnalysisItemTypes.YEAR_LEVEL:
                        dateAxis.dataUnits = "years";
                        break;
                    case AnalysisItemTypes.MONTH_LEVEL:
                        dateAxis.dataUnits = "months";
                        break;
                    case AnalysisItemTypes.DAY_LEVEL:
                        dateAxis.dataUnits = "days";
                        break;
                    case AnalysisItemTypes.HOUR_LEVEL:
                        dateAxis.dataUnits = "hours";
                        break;
                    case AnalysisItemTypes.MINUTE_LEVEL:
                        dateAxis.dataUnits = "minutes";
                        break;
                }
                dateAxis.displayName = dateDimension.display;
                xAxis = dateAxis;
            } else {
                var categoryAxis:CategoryAxis = new CategoryAxis();
                categoryAxis.displayName = xAxisDimension.display;
                categoryAxis.dataProvider = categories;
                xAxis = categoryAxis;
            }

            areaChart.horizontalAxis = xAxis;

            var mySeries:Array = new Array();
           var analysisMeasure:AnalysisMeasure = areaChartDef.measure as AnalysisMeasure;
					var uniques:ArrayCollection = new ArrayCollection();

					var seriesData:Object = new Object();
					for (var i:int = 0; i < dataSet.length; i++) {
						var object:Object = dataSet.getItemAt(i);
						var dimensionValue:String = object[areaChartDef.yaxis.qualifiedName()];
						var newSeriesData:ArrayCollection = seriesData[dimensionValue];
						if (newSeriesData == null) {
							newSeriesData = new ArrayCollection();
							seriesData[dimensionValue] = newSeriesData;
						}
						var newObject:Object = new Object();
						newObject[areaChartDef.xaxis.qualifiedName()] = object[areaChartDef.xaxis.qualifiedName()];
						newObject[dimensionValue] = object[analysisMeasure.qualifiedName()];
						newSeriesData.addItem(newObject);
						//allItems.addItem(newObject);
						if (!uniques.contains(dimensionValue)) {
							uniques.addItem(dimensionValue);
						}
					}
					for (i = 0; i < uniques.length; i++) {
						var key:String = uniques.getItemAt(i) as String;
						var uniqueAreaSeries:AreaSeries3D = new AreaSeries3D();
						uniqueAreaSeries.xField = areaChartDef.xaxis.qualifiedName();
						uniqueAreaSeries.yField = key;
						uniqueAreaSeries.displayName = key;
						uniqueAreaSeries.dataProvider = seriesData[key];
						mySeries.push(uniqueAreaSeries);
					}

            areaChart.series = mySeries;

            legend.dataProvider = areaChart;
            legend.direction = "vertical";
            hbox.addChildAt(areaChart, 0);
        }



        public function createFilterRawData():FilterRawData {
            return null;
        }

        public function updateExportMetadata():void {
        }]]></mx:Script>
    <mx:HBox width="100%" height="100%" id="hbox"/>
</mx:Module>