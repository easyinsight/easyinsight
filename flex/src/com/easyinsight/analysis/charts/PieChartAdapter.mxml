<?xml version="1.0" encoding="utf-8"?>
<ChartAdapter xmlns="com.easyinsight.analysis.charts.*" xmlns:mx="http://www.adobe.com/2006/mxml" height="100%" width="100%"
        creationComplete="setup()">
	<mx:Script>
		<![CDATA[
			import com.easyinsight.analysis.AnalysisItem;
			import com.easyinsight.filtering.FilterRawData;
			import mx.charts.ChartItem;
            import mx.charts.series.PieSeries;
import mx.formatters.Formatter;
			import mx.charts.series.items.PieSeriesItem;
			import mx.charts.events.ChartItemEvent;
			import mx.collections.ArrayCollection;
            import mx.graphics.BitmapFill;
            import mx.graphics.IFill;
			[Bindable]
			private var graphData:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var dimension:String;
			
			[Bindable]
			private var measureName:String;
			
			private var measureFormatter:Formatter;
			
			[Bindable]
			private var explodeData:Array = [];
			
			private var dimensionItem:AnalysisItem;

            private var bgFills:Array;

            

            [Bindable]
            [Embed(source="../../../../../assets/magenta.jpg")]
            private var magenta:Class;

            [Bindable]
            [Embed(source="../../../../../assets/darkwater.jpg")]
            private var darkWater:Class;

			private function setup():void {
                bgFills = [];
                for (var i:int = 0; i < 3; i++) {
                    var bgFill:BitmapFill = new BitmapFill();
                    bgFill.source = backgroundDesktop;
                    bgFill.originX = Math.random() * 60;
                    bgFill.originY = Math.random() * 60;
                    bgFills.push(bgFill);
                }
            }

            private function customFill(element:ChartItem, index:Number):IFill {
				return bgFills[index % 3];
			}
			
			override public function get chartType():int {
				return ChartTypes.PIE_2D;
			}
			
			override public function dataChange(dataSet:ArrayCollection, dimensions:Array, measures:Array):void {
				graphData = dataSet;
				this.measureFormatter = measures[0].getFormatter();
				measureName = measures[0].key.createString();
				dimension = dimensions[0].key.createString();
				this.dimensionItem = dimensions[0];	
			}
			
			private function chartSelection(event:ChartItemEvent):void {
				for (var j:int = 0; j < graphData.length; j++) {
					var graphObj:Object = graphData.getItemAt(j);
					var explode:Boolean = false;				
					for (var i:int = 0; i < pieChart.selectedChartItems.length; i++) {
						var obj:PieSeriesItem = pieChart.selectedChartItems[i];
						if (obj.item == graphObj) {
							explode = true;
						}																
					}
					if (explode) {
						explodeData[j] = .2;
					} else {
						explodeData[j] = 0;
					}
				}
				var pieChartSeries:PieSeries = pieChart.series[0] as PieSeries;
				pieChartSeries.perWedgeExplodeRadius = explodeData;
			}
			
			private function renderPieLabel(data:Object, field:String, index:Number, percentValue:Number):String {
				return data[dimension] + ": " + '\n' + this.measureFormatter.format(data[measureName]);	
			} 
			
			override public function getMaxMeasures():int {
				return 1;
			}
			
			override public function getMaxDimensions():int {
				return 1;
			}
			
			override public function createFilterRawData():FilterRawData {
				var filterRawData:FilterRawData = new FilterRawData();
				for (var i:int = 0; i < pieChart.selectedChartItems.length; i++) {
                	var obj:ChartItem = pieChart.selectedChartItems[i];
					filterRawData.addPair(dimensionItem, obj.item[dimensionItem.key.createString()]);                	
                }
				return filterRawData;
			}
		]]>
	</mx:Script>
	<mx:PieChart id="pieChart" dataProvider="{graphData}" selectionMode="multiple" height="100%" width="100%"
					paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0">
		<mx:series>
			<mx:PieSeries field="{measureName}" nameField="{dimension}" labelPosition="insideWithCallout" fills="{linearGradients2}"
				labelFunction="renderPieLabel">				               
            </mx:PieSeries> 
		</mx:series>
	</mx:PieChart>
	<mx:Legend dataProvider="{pieChart}" height="100%"/>
</ChartAdapter>
