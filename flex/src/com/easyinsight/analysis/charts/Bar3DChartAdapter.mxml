<?xml version="1.0" encoding="utf-8"?>
<ChartAdapter xmlns="com.easyinsight.analysis.charts.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" creationComplete="setup()">
	<mx:Metadata>
		[Event(name="chartSort", type="com.easyinsight.analysis.ChartSortEvent")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import ilog.charts3d.series.BarSeries3D;
			import ilog.charts3d.series.BarSet3D;
			import ilog.charts3d.BarChart3D;
			import com.easyinsight.analysis.AnalysisItemTypes;
			import mx.charts.chartClasses.AxisBase;
			import com.easyinsight.analysis.SortableAxisTitleFactory;
			import com.easyinsight.analysis.AnalysisItem;
			import mx.events.FlexEvent;
			import mx.controls.TextInput;
			import mx.charts.BarChart;
			import mx.charts.AxisRenderer;
			import com.easyinsight.filtering.FilterRawData;
            import mx.graphics.BitmapFill;
import mx.graphics.SolidColor;
			import mx.graphics.IFill;
			import com.easyinsight.analysis.conditions.ConditionRenderer;
			import mx.charts.chartClasses.IAxis;
			import mx.charts.LinearAxis;
			import mx.formatters.Formatter;
			import mx.charts.series.items.BarSeriesItem;
			import mx.charts.chartClasses.Series;
			import mx.charts.ChartItem;
			import mx.charts.CategoryAxis;
			import mx.charts.series.BarSeries;
			import mx.collections.ArrayCollection;
			
			[Bindable]
			private var graphData:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var xAxisTitle:String = "";
			
			[Bindable]
			private var yAxisTitle:String = "";
			
			[Bindable]
			private var xAxisItem:AnalysisItem;					
			[Bindable]
			private var yAxisItem:AnalysisItem;
			
			[Bindable]
			private var xField:String;
			[Bindable]
			private var yField:String;
			
			private var measureFormatter:Formatter;
			
			private var customColors:Boolean = false;
			private var conditionRenderer:ConditionRenderer;
			
			private var barChart:BarChart3D;
			
			private var xAxis:LinearAxis;
			private var yAxis:CategoryAxis;
			
			private var xAxisTitleRendererFactory:SortableAxisTitleFactory;
			
			private var yAxisTitleRendererFactory:SortableAxisTitleFactory;
			
			private var barSeries:BarSeries3D;

            private var bgFills:Array;

			private function setup():void {
                bgFills = [];
                for (var i:int = 0; i < 15; i++) {
                    var bgFill:BitmapFill = new BitmapFill();
                    bgFill.source = standardFill;
                    bgFill.originX = Math.random() * 60;
                    bgFill.originY = Math.random() * 60;
                    bgFills.push(bgFill);
                }
            }
			
			override public function get chartType():int {
				return ChartTypes.BAR_3D;
			}
			
			private function createChart():void {
				if (barChart == null) {
					
					// define the chart itself
					
					barChart = new BarChart3D();
					barChart.percentHeight = 100;
					barChart.percentWidth = 100;
					barChart.showDataTips = true;
					barChart.dataProvider = graphData;
					
					// define the X axis
					
					yAxis = new CategoryAxis();				
					yAxis.categoryField = yField;
					yAxis.dataProvider = graphData;
					yAxis.title = yAxisTitle;
					barChart.verticalAxis = yAxis;
					/*var axisRenderer:AxisRenderer = new AxisRenderer();
			        axisRenderer.axis = yAxis;
			        yAxisTitleRendererFactory = new SortableAxisTitleFactory(yAxisItem, false);
			        axisRenderer.titleRenderer = yAxisTitleRendererFactory;			        
			        axisRenderer.placement = "left";
			        barChart.verticalAxisRenderers = [ axisRenderer ];*/
			        
			        // define the Y axis
			        
			        xAxis = new LinearAxis();
			        xAxis.title = xAxisTitle;
			        xAxis.labelFunction = renderAxis;
			        barChart.horizontalAxis = xAxis;
			        /*var xAxisRenderer:AxisRenderer = new AxisRenderer();
			        xAxisRenderer.axis = xAxis;			        
			        xAxisTitleRendererFactory = new SortableAxisTitleFactory(xAxisItem, true); 
			        xAxisRenderer.titleRenderer = xAxisTitleRendererFactory;
			        xAxisRenderer.placement = "bottom";
			        barChart.horizontalAxisRenderers = [ xAxisRenderer ];*/
			        
			        // create the data series
			        
					barSeries = new BarSeries3D();
                    barSeries.setStyle("stroke", s1);
                    barSeries.fillFunction = customFill;
					barSeries.xField = xField;
					barSeries.yField = yField;					
					barSeries.labelFunction = renderChartLabel;
					barSeries.dataProvider = graphData;
					barSeries.displayName = yAxisTitle;
					barSeries.setStyle("showDataEffect", interpolateIn);					
					var barSet:BarSet3D = new BarSet3D();
					barSet.series = [ barSeries ];					
					barChart.series = [ barSet ];						
					addChild(barChart);
				}	
			}
			
			override public function dataChange(dataSet:ArrayCollection, dimensions:Array, measures:Array):void {
				
				createChart();
				
				if (measures.length == 1) {
					measureFormatter = measures[0].getFormatter();
					var conditionRenderer:ConditionRenderer = measures[0].createClientRenderer();
					if (conditionRenderer.hasCustomColor()) {
						customColors = true;
						this.conditionRenderer = conditionRenderer;
					}
				}
				
				var newXAxisItem:AnalysisItem = measures[0];
				if (xAxisItem == null || newXAxisItem.key.createString() != xAxisItem.key.createString()) {
					xAxisItem = newXAxisItem;
					//xAxisTitleRendererFactory.analysisItem = xAxisItem;
				}
				
				var newYAxisItem:AnalysisItem = dimensions[0];
				if (yAxisItem == null || newYAxisItem.key.createString() != yAxisItem.key.createString()) {
					yAxisItem = newYAxisItem;
					//yAxisTitleRendererFactory.analysisItem = yAxisItem;
				}

				var newXField:String = measures[0].key.createString();
				if (newXField != xField) {
					xField = newXField;									
					barSeries.xField = xField;
				}
				
				var newXAxisTitle:String = measures[0].display;
				if (newXAxisTitle != xAxisTitle) {
					xAxisTitle = newXAxisTitle;
					xAxis.title = xAxisTitle;					
				}
				
				var newYField:String = dimensions[0].key.createString();
				if (newYField != yField) {
					yField = newYField;
					yAxis.categoryField = yField;
					barSeries.yField = yField;
				}
				
				var newYAxisTitle:String = dimensions[0].display;
				if (newYAxisTitle != yAxisTitle) {
					yAxisTitle = newYAxisTitle;
					yAxis.title = yAxisTitle;
					barSeries.displayName = yAxisTitle;					
				}		
				
				barChart.dataProvider = dataSet;
				barSeries.dataProvider = dataSet;
				yAxis.dataProvider = dataSet;
				graphData = dataSet;		
			}
			
			private function renderChartLabel(element:ChartItem, series:Series):String {
				var barSeriesItem:BarSeriesItem = element as BarSeriesItem;
				return measureFormatter.format(barSeriesItem.xNumber);
			}
			
			private function customFill(element:ChartItem, index:Number):IFill {
				return bgFills[index % 15];
			}
			
			private function renderAxis(labelValue:Object, previousValue:Object, axis:IAxis):String {
				return measureFormatter.format(labelValue);
			}
			
			override public function getMaxMeasures():int {
				return 1;
			}
			
			override public function getMaxDimensions():int {
				return 1;
			}
			
			override public function createFilterRawData():FilterRawData {
				var filterRawData:FilterRawData = new FilterRawData();
				for (var i:int = 0; i < barChart.selectedChartItems.length; i++) {
                	var obj:ChartItem = barChart.selectedChartItems[i];
					filterRawData.addPair(xAxisItem, obj.item[xAxisItem.key.createString()]);                	
                }
				return filterRawData;
			}
		]]>
	</mx:Script>
	<mx:SeriesInterpolate id="interpolateIn" duration="1000"/>
</ChartAdapter>
