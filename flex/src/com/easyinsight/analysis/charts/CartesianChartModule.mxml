<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml"
           implements="com.easyinsight.analysis.IReportRenderer"
           width="100%" height="100%">
    <mx:states>
        <mx:State name="hideLegend">
            <mx:RemoveChild target="{legend}"/>
        </mx:State>
    </mx:states>
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemTypes;
        import com.easyinsight.analysis.AnalysisMeasure;
        import com.easyinsight.analysis.ChartDefinition;
        import com.easyinsight.analysis.ClickUtil;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.DrillThrough;
        import com.easyinsight.analysis.DrillThroughEvent;
        import com.easyinsight.analysis.DrillThroughExecutor;
        import com.easyinsight.analysis.FillProvider;
        import com.easyinsight.analysis.Link;
        import com.easyinsight.analysis.ReportWindowEvent;
        import com.easyinsight.analysis.URLLink;
        import com.easyinsight.analysis.Value;
        import com.easyinsight.analysis.charts.xaxisbased.column.ContextMenuBoxItemRenderer;
        import com.easyinsight.filtering.FilterRawData;
        import com.easyinsight.filtering.FilterValueDefinition;
        import com.easyinsight.report.ReportNavigationEvent;
        import com.easyinsight.solutions.InsightDescriptor;

        import mx.charts.AxisRenderer;

        import mx.charts.CategoryAxis;
        import mx.charts.ChartItem;
        import mx.charts.HitData;
        import mx.charts.Legend;
        import mx.charts.LinearAxis;
        import mx.charts.chartClasses.ChartBase;
        import mx.charts.chartClasses.IAxis;
        import mx.charts.chartClasses.IAxisRenderer;
        import mx.charts.chartClasses.Series;
        import mx.charts.events.ChartEvent;
        import mx.charts.events.ChartItemEvent;
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.formatters.Formatter;
        import mx.graphics.GradientEntry;
        import mx.graphics.LinearGradient;
        import mx.graphics.SolidColor;

        [Bindable]
        private var graphData:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var dimensionAxisItem:AnalysisItem;

        protected var measureFormatter:Formatter;

        protected var dimensionFormatter:Formatter;

        private var chart:ChartBase;

        private var dimensionAxis:CategoryAxis;
        private var measureAxis:LinearAxis;

        [Bindable]
        private var legend:Legend;

        private var sortable:Boolean = true;
        private var selectable:Boolean = true;

        protected function formatDataTip(hd:HitData):String {
            return null;
        }

        protected function createChartObject():ChartBase {
            return null;
        }

        private function onChartClick(event:ChartItemEvent):void {
            ClickUtil.doStuff(defaultLink, event.hitData.item, dimensionAxisItem, this, null, chart);
        }

        protected function direction():String {
            return null;
        }

        private function createChart():void {
            if (chart == null) {

                // define the chart itself

                chart = createChartObject();
                chart.percentHeight = 100;
                chart.percentWidth = 100;
                chart.showDataTips = true;
                chart.cacheAsBitmap = true;
                chart.dataProvider = graphData;
                chart.backgroundElements = ChartUtil.gridLine(direction());
                chart.dataTipFunction = formatDataTip;

                // define the X axis

                dimensionAxis = new CategoryAxis();
                dimensionAxis.labelFunction = renderDimensionAxis;
                dimensionAxis.dataProvider = graphData;
                var dAxisRenderer:AxisRenderer = new AxisRenderer();
                dAxisRenderer.setStyle("minorTickPlacement", "none");

                dAxisRenderer.setStyle("tickPlacement", "none");
                dAxisRenderer.setStyle("axisStroke", ChartUtil.axisStroke());
                dAxisRenderer.axis = dimensionAxis;
                assignDimensionAxis(dimensionAxis, chart, dAxisRenderer);

                // define the Y axis

                measureAxis = new LinearAxis();
                measureAxis.title = "Blah";
                measureAxis.labelFunction = renderAxis;

                var mAxisRenderer:AxisRenderer = new AxisRenderer();
                mAxisRenderer.setStyle("axisStroke", ChartUtil.axisStroke());
                mAxisRenderer.axis = measureAxis;
                assignMeasureAxis(measureAxis, chart, mAxisRenderer);

                // create the data series
                canvas.addChild(chart);
                legend = new Legend();
                legend.direction = "vertical";
                legend.percentHeight = 100;
                legend.visible = true;
                canvas.addChild(legend);
            } else {
                chart.visible = true;
            }
        }

        protected function assignDimensionAxis(axis:CategoryAxis, chart:ChartBase, axisRenderer:IAxisRenderer):void {

        }

        protected function assignMeasureAxis(axis:LinearAxis, chart:ChartBase, axisRenderer:IAxisRenderer):void {

        }

        protected function createSeries(measure:AnalysisMeasure, dataSet:ArrayCollection, xField:String, measureNumber:int):Series {
            return null;
        }

        private function renderAxis(labelValue:Object, previousValue:Object, axis:IAxis):String {
            return measureFormatter.format(labelValue);
        }

        private function renderDimensionAxis(item:Object, prevValue:Object, axis:CategoryAxis, categoryItem:Object):String {
            var value:Value = categoryItem[dimensionAxisItem.qualifiedName()];
            return dimensionFormatter.format(value.getValue());
        }

        public function createFilterRawData():FilterRawData {
            var filterRawData:FilterRawData = new FilterRawData();
            for (var i:int = 0; i < chart.selectedChartItems.length; i++) {
                var obj:ChartItem = chart.selectedChartItems[i];
                filterRawData.addPair(dimensionAxisItem, obj.item[dimensionAxisItem.key.createString()]);
            }
            return filterRawData;
        }

        protected var chartDef:ChartDefinition;

        protected function sortData(dataSet:ArrayCollection):void {
        }

        private function applyGeneralStyling():void {
            canvas.setStyle("backgroundAlpha", chartDef.backgroundAlpha);
            chart.setStyle("fontFamily", chartDef.getFont());
            chart.setStyle("fontSize", chartDef.fontSize);

            /*var style:CSSStyleDeclaration = new CSSStyleDeclaration(".chartAxis");
            style.setStyle("fontFamily", chartDef.fontName);
            style.setStyle("fontSize", chartDef.fontSize);
            StyleManager.setStyleDeclaration(".chartAxis", style, true);*/

            chart.setStyle("axisTitleStyleName", "chartAxis");
        }

        protected function getDimensionItem():AnalysisItem {
            return null;
        }

        protected function getMeasures():ArrayCollection {
            return null;
        }

        private function onMeasureChange(event:Event):void {

        }

        private var defaultLink:Link;

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            chartDef = analysisDefinition as ChartDefinition;

            if (dataSet.length > 0) {

                stackIndex = 0;

                var firstMeasure:AnalysisMeasure = getMeasures().getItemAt(0) as AnalysisMeasure;

                sortData(dataSet);

                createChart();

                applyGeneralStyling();

                measureFormatter = firstMeasure.getFormatter();

                dimensionAxisItem = getDimensionItem();
                
                this.defaultLink = ChartUtil.setup(dimensionAxisItem, chart, onChartClick);

                dimensionFormatter = dimensionAxisItem.getFormatter();
                dimensionAxis.categoryField = dimensionAxisItem.qualifiedName();
                dimensionAxis.title = dimensionAxisItem.display;

                var mySeries:Array = new Array();
                for (var i:int = 0; i < getMeasures().length; i++) {
                    var measure:AnalysisMeasure = getMeasures().getItemAt(i) as AnalysisMeasure;
                    var series:Series = createSeries(measure, dataSet, dimensionAxisItem.qualifiedName(), i);
                    var cFactory:ClassFactory = new ClassFactory(ContextMenuBoxItemRenderer);
                    cFactory.properties = { stackItem: dimensionAxisItem };
                    series.setStyle("itemRenderer", cFactory);
                    mySeries.push(series);
                }
                var legendItems:Array = styleColumns(mySeries);
                chart.series = mySeries;

                measureAxis.title = firstMeasure.display;



                chart.dataProvider = dataSet;
                dimensionAxis.dataProvider = dataSet;
                legend.dataProvider = legendItems;

                if (!chartDef.showLegend || getMeasures().length == 1) {
                    currentState = "hideLegend";
                } else {
                    currentState = "";
                }
            } else {
                if (getMeasures() != null && getMeasures().length > 0 && getDimensionItem() != null) stackIndex = 2;
                else stackIndex = 1;
                if (chart != null) {
                    chart.dataProvider = new ArrayCollection();
                    dimensionAxis.dataProvider = new ArrayCollection();
                    chart.visible = false;
                }
            }

            graphData = dataSet;
        }

        protected function useGradientColor():Boolean {
            return false;
        }

        protected function useChartColor():Boolean {
            return false;
        }

        protected function getChartColor():uint {
            return 0;
        }

        protected function getGradientColor():uint {
            return 0;
        }

        protected function getColorScheme():String {
            return null;
        }

        protected function getAngle():int {
            return 0;
        }

        private function styleColumns(mySeries:Array):Array {
            var legendItems:Array = [];
            for (var j:int = 0; j < getMeasures().length; j++) {
                var measure:AnalysisMeasure = getMeasures().getItemAt(j) as AnalysisMeasure;
                var fills:Array;
                if (getMeasures().length == 1) {
                    if (useGradientColor()) {
                        var gradient:LinearGradient = new LinearGradient();
                        gradient.angle = 90;
                        gradient.entries = [ new GradientEntry(getChartColor(), 0.0), new GradientEntry(getGradientColor(), 0.95)];
                        fills = [ gradient ];
                    } else if (useChartColor()) {
                        fills = [new SolidColor(getChartColor())];
                    } else {
                        fills = FillProvider.getColors(getColorScheme(), getAngle());
                    }
                } else {
                    fills = [FillProvider.getColor(getColorScheme(), j, getAngle())];
                }
                mySeries[j].setStyle("fills", fills);

                var legendItem:EILegendData = new EILegendData();
                legendItem.label = measure.display;
                var markerRenderer:EILegendItemRenderer = new EILegendItemRenderer();
                markerRenderer.fill = fills[0];
                legendItem.marker = markerRenderer;
                legendItems.push(legendItem);
            }
            return legendItems;
        }

        [Bindable]
        private var stackIndex:int = 0;

        public function preserveValues():Boolean {
            return true;
        }

        public function updateExportMetadata():void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }
        ]]></mx:Script>
    <mx:Canvas width="100%" height="100%" backgroundAlpha="1" backgroundColor="#FFFFFF">
        <!--

        -->
        <mx:HBox width="100%" height="100%" id="canvas"/>
    </mx:Canvas>
</mx:Module>