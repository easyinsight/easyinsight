<?xml version="1.0" ?>
<mx:HBox label="Metadata (F1)" icon="@Embed(source='../../../../assets/note.png')" paddingLeft="10" paddingTop="10"
         paddingBottom="10" xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="onCreation()"
         xmlns:datasources="com.easyinsight.datasources.*">
    <mx:states>
        <mx:State name="NotLoggedIn">
            <mx:SetProperty target="{analysisNameInput}" name="editable" value="false"/>
            <mx:SetProperty target="{analysisTagsInput}" name="editable" value="false"/>
        </mx:State>
        <mx:State name="Professional">

        </mx:State>
        <mx:State name="Group" basedOn="Professional">

        </mx:State>
        <mx:State name="Individual" basedOn="Group">
        </mx:State>
        <mx:State name="Free" basedOn="Individual">

        </mx:State>
    </mx:states>
    <mx:Script><![CDATA[
        import com.easyinsight.account.Account;
        import com.easyinsight.administration.feed.TagCloud;
        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.framework.LoginEvent;
        import com.easyinsight.framework.User;
        import com.easyinsight.util.PopUpUtil;

        import mx.managers.PopUpManager;
        import mx.validators.Validator;

        private function onCreation():void {
            this.analysisValidators = [ analysisNameValidator ];
            if (User.getInstance() == null) {
                currentState = "NotLoggedIn";
                User.getEventNotifier().addEventListener(LoginEvent.LOGIN, onLogin);
            } else {
                setState();
            }
        }

        private var _dataView:DataViewFactory;

        [Bindable(event="dataViewChanged")]
        public function get dataView():DataViewFactory {
            return _dataView;
        }

        public function set dataView(value:DataViewFactory):void {
            if (_dataView == value) return;
            _dataView = value;
            dispatchEvent(new Event("dataViewChanged"));
        }

        private var _analysisDefinition:AnalysisDefinition;

        private var analysisValidators:Array;

        [Bindable]
        private var labelNameField:String;

        [Bindable]
        private var tags:String;

        private var _dataSourceInfo:DataSourceInfo;


        [Bindable(event="dataSourceInfoChanged")]
        public function get dataSourceInfo():DataSourceInfo {
            return _dataSourceInfo;
        }

        public function set dataSourceInfo(value:DataSourceInfo):void {
            if (_dataSourceInfo == value) return;
            _dataSourceInfo = value;
            dispatchEvent(new Event("dataSourceInfoChanged"));
        }

        public function cleanup():void {
            dataSourceDisplay.cleanup();
        }

        public function updateName(name:String):void {
            labelNameField = name;
        }

        private function onLogin(event:LoginEvent):void {
            setState();
            User.getEventNotifier().removeEventListener(LoginEvent.LOGIN, onLogin);
        }

        private function setState():void {
            switch (User.getInstance().getAccountType()) {
                case Account.PROFESSIONAL:
                    currentState = "Professional";
                    break;
                case Account.GROUP:
                    currentState = "Group";
                    break;
                case Account.INDIVIDUAL:
                    currentState = "Individual";
                    break;
                case Account.FREE:
                    currentState = "Free";
                    break;
            }
        }

        [Bindable(event="analysisDefinitionChanged")]
        public function get analysisDefinition():AnalysisDefinition {
            return _analysisDefinition;
        }

        public function set analysisDefinition(value:AnalysisDefinition):void {
            if (_analysisDefinition == value) return;
            _analysisDefinition = value;
            labelNameField = analysisDefinition.name;
            tags = TagCloud.toString(analysisDefinition.tagCloud);            
            dispatchEvent(new Event("analysisDefinitionChanged"));
        }

        public function updateReport():Array {
            var results:Array = Validator.validateAll(analysisValidators);
            if (results.length == 0) {
                analysisDefinition.name = analysisNameInput.text;
                analysisDefinition.tagCloud = TagCloud.fromString(analysisTagsInput.text);
            } else {
                analysisNameInput.setFocus();
                analysisNameInput.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
            }
            return results;
        }

        private function onDescriptionUpdate(event:DescriptionUpdateEvent):void {
            analysisDefinition.description = event.text;
        }

        private function editDescription():void {
            var window:DescriptionEditWindow = new DescriptionEditWindow();
            window.addEventListener(DescriptionUpdateEvent.DESCRIPTION_UPDATE, onDescriptionUpdate);
            window.text = analysisDefinition.description;
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }
        ]]></mx:Script>
    <mx:Form paddingTop="0" paddingBottom="0" id="analysisNameForm">
        <mx:FormItem label="Report Name:">
            <mx:TextInput text="{labelNameField}" id="analysisNameInput" width="300"/>
        </mx:FormItem>
        <mx:FormItem label="Tags:">
            <mx:TextInput text="{tags}" id="analysisTagsInput" width="300"/>
        </mx:FormItem>
        <mx:FormItem label="Description:">
            <mx:Button icon="@Embed(source='../../../../assets/text.png')" toolTip="Edit Description..."
                       click="editDescription()"/>
        </mx:FormItem>
    </mx:Form>
    <datasources:DataSourceDisplay dataSource="{dataSourceInfo}" dataView="{dataView}" id="dataSourceDisplay"/>
    <mx:StringValidator id="analysisNameValidator" source="{analysisNameInput}" property="text" minLength="3"
                        maxLength="80"/>
</mx:HBox>