<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:formatter="com.easyinsight.analysis.formatter.*" xmlns:schedule="com.easyinsight.schedule.*"
           xmlns:util="com.easyinsight.util.*"
           implements="com.easyinsight.analysis.IAnalysisItemEditor" width="100%" height="100%"
           creationComplete="onCreation()" verticalGap="20">
    <mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.formatter.FormattingConfiguration;

        import mx.binding.utils.BindingUtils;
        import mx.collections.ArrayCollection;
        import mx.collections.XMLListCollection;
        import mx.controls.AdvancedDataGrid;
        import mx.controls.DataGrid;
        import mx.controls.TextArea;
        import mx.controls.Tree;
        import mx.events.ListEvent;
        import mx.managers.DragManager;
        import mx.controls.List;
        import mx.events.DragEvent;
        import mx.validators.Validator;

        [Bindable]
        private var failureMessage:String;

        private var _report:AnalysisDefinition;

        public function set report(value:AnalysisDefinition):void {
            _report = value;
        }

        [Bindable]
        protected var calcText:String;

        [Bindable]
        protected var calcName:String;

        [Bindable]
        private var functions:XMLListCollection = new XMLListCollection(new XMLList(<functions>
            <group label="Data Type">
                <function label="castsum" signature="castsum(Field)" description="Forces Field to be calculated as a Sum"/>
                <function label="castaverage" signature="castaverage(Field)" description="Forces Field to be calculated as an Average"/>
                <function label="castmax" signature="castmax(Field)" description="Forces Field to be calculated as a Maximum"/>
                <function label="castmin" signature="castmin(Field)" description="Forces Field to be calculated as a Minimum"/>
                <function label="castcount" signature="castcount(Field)" description="Forces Field to be calculated as a Count"/>
                <function label="castmedian" signature="castmedian(Field)" description="Forces Field to be calculated as a Median"/>
                <function label="castvariance" signature="castvariance(Field)" description="Forces Field to be calculated as a Variance"/>
            </group>
            <group label="Dates">
                <function label="date" signature="date(Numeric Field)" description="If no parameter, constructs a date with the present time, if Numeric Field passed in, constructs a date from the number of milliseconds"/>
                <function label="dayofmonth" signature="dayofmonth(Date Field)" description="Returns the day of month of the date contained in Field"/>
                <function label="dayofquarter" signature="dayofmonth(Date Field)" description="Returns the quarter of the date contained in Field"/>
                <function label="dayofyear" signature="dayofyear(Date Field)" description="Returns the day of year of the date contained in Field"/>
                <function label="days" signature="days(Number of Days)" description="Translates the specified number of days into milliseconds"/>
                <function label="daysinmonth" signature="daysinmonth(Date Field)" description="Returns the number of days in the month of the date contained in Field"/>
                <function label="daysinquarter" signature="daysinquarter(Date Field)" description="Returns the number of days in the quarter of the date contained in Field"/>
                <function label="month" signature="month(Date Field)" description="Returns the month of the date contained in Field"/>
                <function label="months" signature="months(Number)" description="Returns the specified number of months as an interval"/>
                <function label="now" signature="now()" description="Returns the current time in milliseconds"/>
                <function label="quarters" signature="quarters(Number)" description="Returns the specified number of quarters as an interval"/>
                <function label="weekofyear" signature="weekofyear(Date Field)" description="Returns the week of the year of the date contained in Field"/>
                <function label="year" signature="year(Date Field)" description="Returns the year of the date contained in Field"/>
            </group>
            <group label="Logic">
                <function label="equalto" signature="equalto(Field1, Field2, Field3, Field4)" description="If Field1 is equal to Field2, return Field3, else return Field 4. Field 4 is optional, will return empty if not specified."/>
                <function label="greaterthan" signature="greaterthan(Field1, Field2, Field3, Field4)" description="If Field1 is greater than Field2, return Field3, else return Field 4. Field 4 is optional, will return empty if not specified."/>
                <function label="greaterthanorequal" signature="greaterthan(Field1, Field2, Field3, Field4)" description="If Field1 is greater than or equal to Field2, return Field3, else return Field 4. Field 4 is optional, will return empty if not specified."/>
            </group>
            <group label="Math">
                <function label="abs" signature="abs(Number)" description="Calculate the absolute value of Number"/>
                <function label="acos" signature="acos(Number)" description="Calculate the arccosine of Number"/>
                <function label="asin" signature="asin(Number)" description="Calculate the arcsine of Number"/>
                <function label="atan" signature="atan(Number)" description="Calculate the arctangent of Number"/>
                <function label="ceil" signature="ceil(Number)" description="Calculate the ceiling of Number"/>
                <function label="cos" signature="cos(Number)" description="Calculate the cosine of Number"/>
                <function label="floor" signature="floor(Number)" description="Calculate the floor of Number"/>
                <function label="ln" signature="ln(Number)" description="Calculate the natural logarithm of Number"/>
                <function label="max" signature="max(Number, Number)" description="Returns the maximum of the two parameters"/>
                <function label="min" signature="min(Number. Number)" description="Returns the minimum of the two parameters"/>
                <function label="sin" signature="sin(Number)" description="Calculate the sine of Number"/>
                <function label="sqrt" signature="sqrt(Number)" description="Calculate the square root of Number"/>
                <function label="tan" signature="tan(Number)" description="Calculate the tangent of Number"/>
            </group>
            <group label="Other">
                <function label="concat" signature="concat(Instance Field, Target Field)" description="Dividing up the data by Instance Field, concatenate all of the values of Target Field into a list such that the end result is Value1, Value2, Value3."/>
                <function label="first" signature="first(Instance Field, Label, Date Field, Target Field)" description="Dividing up the data by Instance Field and ordering the results by Date Field, return the value of Target Field for the first row of each result."/>
                <function label="last" signature="first(Instance Field, Label, Date Field, Target Field)" description="Dividing up the data by Instance Field and ordering the results by Date Field, return the value of Target Field for the last row of each result."/>
            </group>
            <group label="Text">
                <function label="bracketvalue" signature="bracketvalue(String)" description="Returns the first bracketed value found in String. For example, bracketvalue(Deal [John]) would produce a value of John."/>
                <function label="dateformat" signature="dateformat(Date, String)" description="Formats Date based on the formatting specified in String."/>
                <function label="decimaldegrees" signature="decimaldegrees(String)" description="Converts the longitude or latitude coordinate passed in as String into the decimal degrees format required for mapping in Easy Insight."/>
                <function label="firstValue" signature="firstValue(String, String)" description="Returns the first non empty value passed into the function."/>
                <function label="format" signature="firstValue(Field)" description="Formats the value of Field based on its configured formatting and returns the result as a String."/>
                <function label="lower" signature="lower(String)" description="Returns a fully lower case version of String."/>
                <function label="namedbracketdate" signature="namedbracketdate(String, Name, Date Pattern)" description="Returns the named bracketed value found in String. For example, namedbracketvalue(Deal Description, &quot;Target Close&quot;, &quot;MM-dd-YYYY&quot;) will construct a date of &quot;12-15-2010&quot; out of a sample value of [Target Close: 12-15-2010] in the Deal Description field."/>
                <function label="namedbracketvalue" signature="namedbracketvalue(String, String)" description="Returns the named bracketed value found in String. For example, namedbracketvalue(Deal Name, &quot;Type&quot;) will construct the string &quot;Direct Sales&quot; out of a sample value of [Type: Direct Sales] in the Deal Name field."/>
                <function label="parsedate" signature="parsedate(Field1, String)" description="Parses Field1 into a date using the format specified in String. For example, parsedate(Date String, &quot;yyyy-MM-dd&quot;) will construct a date using the format of yyyy-MM-dd."/>
                <function label="replace" signature="replace(Field, Regular Expression, Target String)" description="Replace each substring of this string that matches the given regular expression with the given replacement."/>
                <function label="substring" signature="substring(String, Start Index, End Index)" description="Returns the value found between Start Index and End Index on String."/>
                <function label="upper" signature="upper(String)" description="Returns a fully upper case version of String."/>
            </group>
        </functions>));

        [Bindable]
        protected var formattingConfiguration:int;


        private var _applyBefore:Boolean;

        private function onCreation():void {

        }


        [Bindable(event="applyBeforeChanged")]
        public function get applyBefore():Boolean {
            return _applyBefore;
        }

        public function set applyBefore(value:Boolean):void {
            if (_applyBefore == value) return;
            _applyBefore = value;
            dispatchEvent(new Event("applyBeforeChanged"));
        }

        public function save(dataSourceID:int):void {
            calculationInput.errorString = null;
            analysisService.validateCalculation.send(calculationInput.text, dataSourceID, items, _report);
        }

        public function validatedCalculation():void {
            failureMessage = analysisService.validateCalculation.lastResult as String;
            if (failureMessage == null) {
                actualSave();
                dispatchEvent(new AnalysisItemSaveEvent(calculationItem));
            } else {
                calculationInput.errorString = failureMessage;
                calculationInput.setFocus();
                calculationInput.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
            }

        }

        protected function actualSave():AnalysisItem {
            return null;
        }

        public function validate():Boolean {
            var results:Array = Validator.validateAll([nameValidator]);
            if (results.length > 0) {
                nameInput.setFocus();
                nameInput.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
                return false;
            }
            return true;
        }

        private function dragEnterHandler(event:DragEvent):void {
            var analysisItem:AnalysisItem;
            var accept:Boolean = false;
            if (event.dragInitiator is Tree) {
                var tree:Tree = event.dragInitiator as Tree;
                var xml:XML = tree.selectedItem as XML;
                if (xml != null) {
                    var name:String = String(xml.name());
                    if (name == "function") {
                        accept = true;
                    }
                }
            } else if (event.dragInitiator is List) {
                var initialList:List = List(event.dragInitiator);
                analysisItem = initialList.selectedItem as AnalysisItem;
                accept = analysisItem != null;
            } else if (event.dragInitiator is DropArea) {
                var dropArea:DropArea = event.dragInitiator as DropArea;
                accept = dropArea.analysisItem != null;
            } else if (event.dragInitiator is AdvancedDataGrid) {
                var analysisItemLabel:AdvancedDataGrid = event.dragInitiator as AdvancedDataGrid;
                var analysisItemWrapper:AnalysisItemWrapper = analysisItemLabel.selectedItem as AnalysisItemWrapper;
                if (analysisItemWrapper.isAnalysisItem()) {
                    analysisItem = analysisItemWrapper.analysisItem;
                }
                accept = analysisItemWrapper.isAnalysisItem();
            }
            if (accept) DragManager.acceptDragDrop(event.target as TextArea);
        }

        private var explanationFunction:String;

        private function dragDropHandler(event:DragEvent):void {
            var functionOutput:Boolean = false;
            var outputStr:String;
            if (event.dragInitiator is DataGrid) {
                var initialList:DataGrid = DataGrid(event.dragInitiator);
                var analysisItemWrapper:AnalysisItemWrapper = initialList.selectedItem as AnalysisItemWrapper;
                outputStr = analysisItemWrapper.analysisItem.display;
            } else if (event.dragInitiator is DropArea) {
                var dropArea:DropArea = event.dragInitiator as DropArea;
                outputStr = dropArea.analysisItem.display;
            } else if (event.dragInitiator is AdvancedDataGrid) {
                var analysisItemLabel:AdvancedDataGrid = event.dragInitiator as AdvancedDataGrid;
                analysisItemWrapper = analysisItemLabel.selectedItem as AnalysisItemWrapper;
                if (analysisItemWrapper.isAnalysisItem()) {
                    outputStr = analysisItemWrapper.analysisItem.display;
                }
            } else if (event.dragInitiator is Tree) {
                var tree:Tree = event.dragInitiator as Tree;
                var xml:XML = tree.selectedItem as XML;
                if (xml != null) {
                    var name:String = String(xml.name());
                    if (name == "function") {
                        functionOutput = true;
                        outputStr = String(xml.@signature);
                    }
                }
            }
            if (!functionOutput) {
                outputStr = "[" + outputStr + "]";
            }
            calculationInput.insertTextAtCursor(outputStr);
        }

        private function appendSymbol(symbol:String):void {
            calculationInput.insertTextAtCursor(symbol);
        }

        protected function get calculationItem():AnalysisItem {
            return null;
        }

        public function set analysisItem(analysisItem:AnalysisItem):void {
        }

        protected var items:ArrayCollection;

        [Bindable]
        protected var sortItems:ArrayCollection;

        [Bindable]
        protected var dateFields:ArrayCollection;

        public function set analysisItems(analysisItems:ArrayCollection):void {
            var items:ArrayCollection = new ArrayCollection();
            var dates:ArrayCollection = new ArrayCollection();
            var sortItems:ArrayCollection;
            for each (var analysisItemWrapper:AnalysisItemWrapper in analysisItems) {
                items.addItem(analysisItemWrapper.analysisItem);
                if (analysisItemWrapper.analysisItem.hasType(AnalysisItemTypes.DATE)) {
                    dates.addItem(analysisItemWrapper.analysisItem);
                }
            }
            sortItems = new ArrayCollection(items.toArray());
            var noDate:Object = { display: "[ No Date ]"};
            dates.addItemAt(noDate, 0);
            var noSort:Object = { display: "[ No Sort ]"};
            sortItems.addItemAt(noSort, 0);
            this.sortItems = sortItems;
            this.items = items;
            this.dateFields = dates;
        }

        public function set dataSourceID(dataSourceID:int):void {
        }

        [Bindable]
        protected var showMeasures:Boolean;

        [Bindable]
        protected var aggregation:int = AggregationTypes.SUM;

        [Bindable]
        private var functionExplanation:String;

        [Bindable]
        private var functionSignature:String;

        private function onFunctionClick(event:ListEvent):void {
            var xml:XML = event.currentTarget.selectedItem;
            if (xml != null) {
                var name:String = String(xml.name());
                if (name == "function") {
                    explanationFunction = String(xml.@label);
                    functionExplanation = String(xml.@description);
                    functionSignature = String(xml.@signature);
                }
            }
        }

        private var _detailItemLabel:String;

        private var _detailIndex:int;

        private var _dateLevel:int;

        [Bindable(event="detailItemLabelChanged")]
        public function get detailItemLabel():String {
            return _detailItemLabel;
        }

        public function set detailItemLabel(value:String):void {
            if (_detailItemLabel == value) return;
            _detailItemLabel = value;
            dispatchEvent(new Event("detailItemLabelChanged"));
        }

        [Bindable(event="detailIndexChanged")]
        public function get detailIndex():int {
            return _detailIndex;
        }

        public function set detailIndex(value:int):void {
            if (_detailIndex == value) return;
            _detailIndex = value;
            dispatchEvent(new Event("detailIndexChanged"));
        }

        [Bindable(event="dateLevelChanged")]
        public function get dateLevel():int {
            return _dateLevel;
        }

        public function set dateLevel(value:int):void {
            if (_dateLevel == value) return;
            _dateLevel = value;
            dispatchEvent(new Event("dateLevelChanged"));
        }

        [Bindable]
        protected var summaryRecalc:Boolean;

        [Bindable]
        protected var example1:String;

        [Bindable]
        protected var example1Explanation:String;

        [Bindable]
        protected var example2:String;

        [Bindable]
        protected var example3:String;

        [Bindable]
        protected var example2Explanation:String;

        [Bindable]
        protected var example3Explanation:String;

        [Bindable]
        protected var underline:Boolean;

        [Bindable]
        protected var precision:int = 2;

        [Bindable]
        protected var minPrecision:int;

        [Bindable]
        protected var html:Boolean;

        [Bindable]
        protected var dateApplyBeforeAggregation:Boolean = true;

        [Bindable]
        protected var groupingApplyBeforeAggregation:Boolean = true;

        [Bindable]
        protected var wordWrap:Boolean;

        [Bindable]
        protected var dateTime:Boolean;

        public function higlight():void {
            calculationInput.setStyle("borderColor", 0x00AA00);
            calculationInput.setStyle("backgroundColor", 0xBBFFBB);
        }

        public function normal():void {
            calculationInput.setStyle("borderColor", 0xB7BABC);
            calculationInput.setStyle("backgroundColor", 0xFFFFFF);
        }

        private var _editable:Boolean;

        public function set editable(editable:Boolean):void {
            _editable = editable;
        }

        override protected function commitProperties():void {
            super.commitProperties();
            if (!_editable) {
                this.enabled = false;
            }
        }

        [Bindable]
        protected var sortDimension:String;

        [Bindable]
        protected var customFormatChoice:int;

        [Bindable]
        protected var formatIndex:int;

        [Bindable]
        protected var defaultDate:String;

        public function editorLabel():String {
            return "Define the calculation";
        }
        ]]>
	</mx:Script>
    <mx:RemoteObject destination="analysisDefinition" id="analysisService">
        <mx:method name="validateCalculation" result="validatedCalculation()"/>
    </mx:RemoteObject>
    <mx:HBox horizontalGap="20">
        <mx:VBox>
            <mx:HBox width="100%" height="100%">
                <mx:Form paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
                    <mx:FormItem label="What should the field be named?" direction="vertical" width="100%">
                        <mx:TextInput id="nameInput" width="100%" text="{calcName}"/>
                    </mx:FormItem>
                </mx:Form>
            </mx:HBox>
            <mx:HBox>
                <mx:Text text="What should the calculation be?" fontWeight="bold" fontFamily="Tahoma"/>
            </mx:HBox>
            <schedule:CursorTextArea id="calculationInput" dragEnter="dragEnterHandler(event)"
                                     dragDrop="dragDropHandler(event)"
                                     width="400" height="250"
                                     text="{calcText}" borderStyle="solid" borderThickness="1"/>

        </mx:VBox>
        <mx:VBox horizontalAlign="center">
            <mx:TabBar id="tabBar">
                <mx:dataProvider>
                    <mx:ArrayCollection>
                        <mx:Array>
                            <mx:String>Help</mx:String>
                            <mx:String>Examples</mx:String>
                            <mx:String>Functions</mx:String>
                        </mx:Array>
                    </mx:ArrayCollection>
                </mx:dataProvider>
            </mx:TabBar>
            <!--<mx:Button fontSize="14" label="Calculation Documentation" click="navigateToURL(new URLRequest('https:/www.easy-insight.com/app/docs/Scripting'), '_blank')"
                       styleName="flatCreateButton"/>-->
            <mx:ViewStack resizeToContent="true" selectedIndex="{tabBar.selectedIndex}">
                <mx:VBox width="300">
                    <mx:Text text="You can build calculations using fields from the field list to the left and the functions under the Functions tab. You can directly drag fields from the field list into the Calculation area."
                             styleName="fallThroughFonts" fontSize="14" width="280"/>
                </mx:VBox>
                <mx:VBox width="300">
                    <mx:Grid horizontalGap="0" styleName="fallThroughFonts">
                        <mx:GridRow>
                            <mx:GridItem>
                                <mx:Text text="{example1}" selectable="true" maxWidth="280"/>
                            </mx:GridItem>
                        </mx:GridRow>
                        <mx:GridRow>
                            <mx:GridItem>
                                <mx:Text text="{example1Explanation}" selectable="true" maxWidth="280"/>
                            </mx:GridItem>
                        </mx:GridRow>
                        <mx:GridRow>
                            <mx:GridItem>
                                <mx:Text text="{example2}" selectable="true" maxWidth="280"/>
                            </mx:GridItem>
                        </mx:GridRow>
                        <mx:GridRow>
                            <mx:GridItem>
                                <mx:Text text="{example2Explanation}" selectable="true" maxWidth="280"/>
                            </mx:GridItem>
                        </mx:GridRow>
                        <mx:GridRow>
                            <mx:GridItem>
                                <mx:Text text="{example3}" selectable="true" maxWidth="280"/>
                            </mx:GridItem>
                        </mx:GridRow>
                        <mx:GridRow>
                            <mx:GridItem>
                                <mx:Text text="{example3Explanation}" selectable="true" maxWidth="280"/>
                            </mx:GridItem>
                        </mx:GridRow>
                    </mx:Grid>
                </mx:VBox>
                <mx:VBox styleName="fallThroughFonts">
                    <mx:Label text="Available Functions" fontFamily="Tahoma" fontWeight="bold"/>
                    <mx:Tree labelField="@label" width="300" itemClick="onFunctionClick(event)" dragEnabled="true" dragMoveEnabled="false"
                             dataProvider="{functions}" showRoot="false" folderOpenIcon="{null}" folderClosedIcon="{null}">
                    </mx:Tree>
                    <mx:VBox borderStyle="inset" borderThickness="1" backgroundColor="#FFFFFF" visible="{functionSignature != null}">
                        <mx:Label text="{functionSignature}"/>
                        <mx:Text text="{functionExplanation}"
                                 selectable="true"
                                 width="300" height="80"/>
                    </mx:VBox>
                </mx:VBox>
            </mx:ViewStack>

        </mx:VBox>
    </mx:HBox>
    <mx:StringValidator id="nameValidator" source="{nameInput}" property="text" minLength="3"/>
</mx:VBox>
