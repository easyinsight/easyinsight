<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ilog="ilog.maps.*"
           xmlns:maps="com.easyinsight.analysis.maps.*"
           width="100%" height="100%"
           xmlns:analysis="com.easyinsight.analysis.*" xmlns:map="com.easyinsight.map.*"
           implements="com.easyinsight.analysis.IReportRenderer" removedFromStage="cleanup()">
    <mx:states>
        <mx:State name="USA">
            <mx:AddChild relativeTo="{coreCanvas}">
                <ilog:USStatesMap width="100%" height="100%" id="unitedStatesMap" allowNavigation="false"
                                  allowMultipleSelection="false" click="onClick(event)" mapItemRollOver="onover(event)"
                                  mapItemRollOut="onout(event)" filterEvents="true"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="World">
            <mx:AddChild relativeTo="{coreCanvas}">
                <ilog:WorldCountriesMap width="100%" height="100%" id="worldMap" allowNavigation="false"
                                  allowMultipleSelection="false" click="onClick(event)" mapItemRollOver="onover(event)"
                                  mapItemRollOut="onout(event)" filterEvents="true"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="Europe">
            <mx:AddChild relativeTo="{coreCanvas}">
                <ilog:ContinentalEuropeMap width="100%" height="100%" id="europeMap" allowNavigation="false"
                                  allowMultipleSelection="false" click="onClick(event)" mapItemRollOver="onover(event)"
                                  mapItemRollOut="onout(event)" filterEvents="true"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="AsiaPac">
            <mx:AddChild relativeTo="{coreCanvas}">
                <ilog:AsiaPacificMap width="100%" height="100%" id="asiaMap" allowNavigation="false"
                                  allowMultipleSelection="false" click="onClick(event)" mapItemRollOver="onover(event)"
                                  mapItemRollOut="onout(event)" filterEvents="true"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="Americas">
            <mx:AddChild relativeTo="{coreCanvas}">
                <ilog:AmericasMap width="100%" height="100%" id="americasMap" allowNavigation="false"
                                  allowMultipleSelection="false" click="onClick(event)" mapItemRollOver="onover(event)"
                                  mapItemRollOut="onout(event)" filterEvents="true"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="MiddleEast">
            <mx:AddChild relativeTo="{coreCanvas}">
                <ilog:EuropeMiddleEastAfricaMap width="100%" height="100%" id="middleEastMap" allowNavigation="false"
                                  allowMultipleSelection="false" click="onClick(event)" mapItemRollOver="onover(event)"
                                  mapItemRollOut="onout(event)" filterEvents="true"/>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.AnalysisDimension;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.ReportRendererEvent;
        import com.easyinsight.filtering.FilterRawData;

        import com.easyinsight.pseudocontext.PseudoContextWindow;

        import ilog.maps.MapBase;

        import com.easyinsight.analysis.conditions.ConditionRenderer;

        import ilog.maps.MapEvent;
        import ilog.maps.MapFeature;

        import com.easyinsight.map.util.MapLocationLookup;

        import com.easyinsight.analysis.AnalysisDefinition;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.controls.ToolTip;
        import mx.formatters.Formatter;
        import mx.managers.PopUpManager;
        import mx.managers.ToolTipManager;

        private function onMouseOut(event:MouseEvent):void {
            if (tooltip != null) {
                ToolTipManager.destroyToolTip(tooltip);
                selectedPoint = null;
                tooltip = null;
            }
        }

        private function cleanup():void {
            if (tooltip != null) {
                ToolTipManager.destroyToolTip(tooltip);
                selectedPoint = null;
                tooltip = null;
            }
        }

        private var tooltip:ToolTip;

        private var selectedPoint:String;

        public function onover(event:MapEvent):void {
            if (event.mapFeature != null && event.mapFeature.key != selectedPoint) {
                if (tooltip != null && event.mapFeature.key != selectedPoint) {
                    ToolTipManager.destroyToolTip(tooltip);
                }
                var mf:MapFeature = event.mapFeature;
                var point:Point = mf.mapBarycenter;
                var canvasPoint:Point = map.drawingCanvas.localToGlobal(point);
                selectedPoint = event.mapFeature.key;
                tooltip = ToolTipManager.createToolTip(mf.data.label + " - " + mf.data.data,
                        canvasPoint.x, canvasPoint.y) as ToolTip;
            }
        }

        public function onout(event:MapEvent):void {
            if (tooltip != null) {
                ToolTipManager.destroyToolTip(tooltip);
                selectedPoint = null;
                tooltip = null;
            }
        }

        private function onClick(event:MouseEvent):void {
            if (dimension != null && event.shiftKey) {
                var feature:MapFeature = map.getFeatureAt(event.localX, event.localY);
                if (feature != null) {
                    var window:PseudoContextWindow = new PseudoContextWindow(dimension, passThrough, this);
                    window.data = feature.data;
                    PopUpManager.addPopUp(window, this);
                    window.x = event.stageX + 5;
                    window.y = event.stageY + 5;
                }
            }
        }

        private function passThrough(event:Event):void {
            dispatchEvent(event);
        }

        [Bindable]
        private var graphData:ArrayCollection = new ArrayCollection();

        private var masterDataSet:ArrayCollection = new ArrayCollection();

        private var map:MapBase;

        private var mapType:int = MapDefinition.WORLD;

        private var hasDropAreas:Boolean = true;

        private var dimension:AnalysisItem;

        [Bindable]
        private var conditionRenderer:ConditionRenderer;

        [Bindable]
        private var minValue:Number;

        [Bindable]
        private var maxValue:Number;

        [Bindable]
        private var formatter:Formatter;

        private function createRenderer(rows:ArrayCollection, mapDefinition:MapDefinition):ConditionRenderer {
            var renderer:ConditionRenderer = mapDefinition.measure.createClientRenderer();
            for (var i:int = 0; i < rows.length; i++) {
                var row:Object = rows.getItemAt(i);
                var values:Array = row.values as Array;
                var dimensionValue:String;
                var measureValue:Object;
                dimensionValue = row[mapDefinition.geography.qualifiedName()];
                measureValue = row[mapDefinition.measure.qualifiedName()];
                var location:String = MapLocationLookup.instance().getLocation(dimensionValue, String(mapType));
                if (location != null) {
                    renderer.addValue(measureValue);
                }
            }
            return renderer;
        }

        private function customChange(customChangeEvent:CustomChangeEvent, analysisDefinition:AnalysisDefinition):void {
            var mapTypeEvent:MapTypeEvent = customChangeEvent as MapTypeEvent;
            var mapDefinition:MapDefinition = analysisDefinition as MapDefinition;
            mapDefinition.mapType = mapTypeEvent.mapType;
            dispatchEvent(new ReportRendererEvent(ReportRendererEvent.FORCE_RENDER));
        }

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object):void {
            var mapDefinition:MapDefinition = analysisDefinition as MapDefinition;
            dimension = mapDefinition.geography;
            if (mapDefinition.mapType == MapDefinition.USA) {
                currentState = "USA";
                mapType = MapDefinition.USA;
                map = unitedStatesMap;
            } else if (mapDefinition.mapType == MapDefinition.WORLD) {
                currentState = "World";
                mapType = MapDefinition.WORLD;
                if (worldMap != null) {
                    map = worldMap;
                }
            } else if (mapDefinition.mapType == MapDefinition.EUROPE) {
                currentState = "Europe";
                mapType = MapDefinition.EUROPE;
                if (europeMap != null) {
                    map = europeMap;
                }
            } else if (mapDefinition.mapType == MapDefinition.ASIA) {
                currentState = "AsiaPac";
                mapType = MapDefinition.ASIA;
                if (asiaMap != null) {
                    map = asiaMap;
                }
            } else if (mapDefinition.mapType == MapDefinition.AMERICAS) {
                currentState = "Americas";
                mapType = MapDefinition.AMERICAS;
                if (americasMap != null) {
                    map = americasMap;
                }
            } else if (mapDefinition.mapType == MapDefinition.MIDDLE_EAST) {
                currentState = "MiddleEast";
                mapType = MapDefinition.MIDDLE_EAST;
                if (middleEastMap != null) {
                    map = middleEastMap;
                }
            }
            graphData = new ArrayCollection();
            if (dataSet.length > 0) {
                this.formatter = mapDefinition.measure.getFormatter();
                var renderer:ConditionRenderer = createRenderer(dataSet, mapDefinition);
                this.conditionRenderer = renderer;
                this.minValue = Number.MAX_VALUE;
                this.maxValue = Number.MIN_VALUE;
                for (var i:int = 0; i < dataSet.length; i++) {
                    var row:Object = dataSet.getItemAt(i);
                    var dimensionValue:String = row[mapDefinition.geography.qualifiedName()];
                    var measureValue:Number = Number(row[mapDefinition.measure.qualifiedName()]);
                    this.minValue = Math.min(this.minValue, measureValue);
                    this.maxValue = Math.max(this.maxValue, measureValue);

                    var location:String = MapLocationLookup.instance().getLocation(dimensionValue, String(mapType));
                    if (location != null) {
                        var mapFeature:MapFeature = map.getFeature(location);
                        if (mapFeature != null) {
                            var dataObj:Object = new Object();
                            dataObj.label = dimensionValue;
                            dataObj.data = mapDefinition.measure.getFormatter().format(measureValue);
                            var color:uint = renderer.getColor(measureValue);
                            mapFeature.data = dataObj;
                            mapFeature.setStyle(MapBase.FILL, color);
                        }
                    }
                }
                if (minValue != Number.MAX_VALUE && maxValue != Number.MIN_VALUE) {                    
                    legend.recreate();
                }
            }
        }

        public function createFilterRawData():FilterRawData {
            return null;
        }

        public function updateExportMetadata():void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
            if (event is MapTypeEvent) {
                cleanup();
                var mapDefinition:MapTypeEvent = event as MapTypeEvent;
                if (mapDefinition.mapType == MapDefinition.USA) {
                    currentState = "USA";
                    mapType = MapDefinition.USA;
                    map = unitedStatesMap;
                } else if (mapDefinition.mapType == MapDefinition.WORLD) {
                    currentState = "World";
                    mapType = MapDefinition.WORLD;
                    if (worldMap != null) {
                        map = worldMap;
                    }
                } else if (mapDefinition.mapType == MapDefinition.EUROPE) {
                    currentState = "Europe";
                    mapType = MapDefinition.EUROPE;
                    if (europeMap != null) {
                        map = europeMap;
                    }
                } else if (mapDefinition.mapType == MapDefinition.ASIA) {
                    currentState = "AsiaPac";
                    mapType = MapDefinition.ASIA;
                    if (asiaMap != null) {
                        map = asiaMap;
                    }
                } else if (mapDefinition.mapType == MapDefinition.AMERICAS) {
                    currentState = "Americas";
                    mapType = MapDefinition.AMERICAS;
                    if (americasMap != null) {
                        map = americasMap;
                    }
                } else if (mapDefinition.mapType == MapDefinition.MIDDLE_EAST) {
                    currentState = "MiddleEast";
                    mapType = MapDefinition.MIDDLE_EAST;
                    if (middleEastMap != null) {
                        map = middleEastMap;
                    }
                }
            }
        }
		]]>
    </mx:Script>
    <mx:HBox id="chartVBox" width="100%" height="100%">
        <mx:Canvas id="coreCanvas" width="100%" height="100%">

        </mx:Canvas>
        <maps:ColorRangeLegend points="5" conditionRenderer="{conditionRenderer}" maxValue="{maxValue}" minValue="{minValue}"
                formatter="{formatter}" id="legend"/>
    </mx:HBox>
</mx:Module>