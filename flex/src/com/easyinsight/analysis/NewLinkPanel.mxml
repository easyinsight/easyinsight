<?xml version="1.0" ?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*"
         creationComplete="feedService.getDescriptorsForDataSource.send(_dataSourceID)">
    <mx:Script><![CDATA[
        import com.easyinsight.quicksearch.EIDescriptor;

        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.controls.Alert;
        import mx.validators.Validator;

        private function gotDescriptors():void {
            var descriptors:ArrayCollection = feedService.getDescriptorsForDataSource.lastResult as ArrayCollection;
            var reports:Array = [];
            for each (var desc:EIDescriptor in descriptors) {
                if (desc.getType() == EIDescriptor.DASHBOARD || desc.getType() == EIDescriptor.REPORT) {
                    reports.push(desc);
                }
            }
            var reportList:ArrayCollection = new ArrayCollection(reports);
            var sort:Sort = new Sort();
            sort.fields = [ new SortField("name", true) ];
            reportList.sort = sort;
            reportList.refresh();
            this.reports = reportList;
        }

        private var _link:Link;

        private var _sourceItem:AnalysisItem;

        [Bindable]
        private var typeValue:String = "URL";

        [Bindable]
        private var urlText:String;

        [Bindable]
        private var reports:ArrayCollection;

        private var linkID:int;

        [Bindable]
        private var linkLabel:String;

        [Bindable]
        private var defaultLink:Boolean = true;

        [Bindable]
        private var qualifiedName:String;

        [Bindable]
        private var miniWindow:Boolean = false;

        [Bindable]
        private var stackIndex:int = 0;

        [Bindable]
        private var urlSampleText:String = "URL links will connect the report to external URLs. You can use fields to dynamically construct URLs by surrounding the field name with brackets.";

        public function set link(value:Link):void {
            _link = value;
            if (value != null) {
                typeValue = _link.type;
                linkLabel = _link.label;
                linkID = _link.linkID;
                defaultLink = _link.defaultLink;
                if (typeValue == "URL") {
                    stackIndex = 0;
                    var urlLink:URLLink = _link as URLLink;
                    urlText = urlLink.url;
                } else if (typeValue == "Drillthrough") {
                    stackIndex = 1;
                    var drillthrough:DrillThrough = _link as DrillThrough;
                    if (drillthrough.reportID > 0) {
                        qualifiedName = EIDescriptor.REPORT + "-" + drillthrough.reportID;
                    } else if (drillthrough.dashboardID > 0) {
                        qualifiedName = EIDescriptor.DASHBOARD + "-" + drillthrough.dashboardID;
                    }
                    allFilters = drillthrough.addAllFilters;
                    script = drillthrough.marmotScript;
                    miniWindow = drillthrough.miniWindow;
                    showFilters = drillthrough.showDrillThroughFilters;
                    createFiltersOnGroupings = drillthrough.filterRowGroupings;
                }
            }
        }

        private var _dataSourceID:int;


        public function set dataSourceID(value:int):void {
            _dataSourceID = value;
        }

        public function validate():Boolean {
            var valid:Boolean = true;
            if (typeGroup.selectedValue == "URL") {
                var results:Array = Validator.validateAll([ urlValidator ]);
                if (results.length > 0) {
                    valid = false;
                    urlInput.setFocus();
                    urlInput.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
                }
            } else {
                reportChooser.errorString = "";
                if(reportChooser.selectedItem == null) {
                    valid = false;
                    reportChooser.errorString = "Please select a report.";
                    reportChooser.setFocus();
                    reportChooser.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
                }

            }
            return valid;
        }

        public function save():Link {
            var firstLink:Link = _link;
            var valid:Boolean = true;
            var typeChanged:Boolean = false;
            if (typeGroup.selectedValue == "URL") {
                var results:Array = Validator.validateAll([ urlValidator ]);
                if (results.length == 0) {
                    if (_link != null && _link is DrillThrough) {
                        typeChanged = true;
                    }
                    var urlLink:URLLink = new URLLink();
                    urlLink.label = "";
                    urlLink.defaultLink = urlDefaultLinkCheckbox.selected;
                    urlLink.url = urlInput.text;
                    _link = urlLink;
                } else {
                    valid = false;
                    urlInput.setFocus();
                    urlInput.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
                }
            } else {
                if (_link != null && _link is URLLink) {
                    typeChanged = true;
                }

                var drillThrough:DrillThrough = new DrillThrough();
                drillThrough.defaultLink = drillthroughDefaultLinkCheckbox.selected;
                drillThrough.label = "";
                drillThrough.addAllFilters = allCheckbox.selected;
                drillThrough.showDrillThroughFilters = showFiltersCheckbox.selected;
                drillThrough.filterRowGroupings = createFiltersOnRowGroupingsCheckbox.selected;
                var desc:EIDescriptor = reportChooser.selectedItem as EIDescriptor;
                if (desc.getType() == EIDescriptor.REPORT) {
                    drillThrough.reportID = desc.id;
                } else if (desc.getType() == EIDescriptor.DASHBOARD) {
                    drillThrough.dashboardID = desc.id;
                }
                drillThrough.miniWindow = miniWindowCheckbox.selected;
                drillThrough.marmotScript = scriptArea.text;
                _link = drillThrough;

            }
            if (valid) {
                /*if (!typeChanged) {
                 Alert.show("type didn't change, assigning to " + linkID);
                 _link.linkID = linkID;
                 }*/

                if (firstLink == null) {
                    dispatchEvent(new LinkMetadataEvent(LinkMetadataEvent.LINK_DEFINED, _link));
                } else {
                    dispatchEvent(new LinkMetadataEvent(LinkMetadataEvent.LINK_EDITED, _link, firstLink));
                }
            }
            return _link;
        }

        [Bindable]
        private var createFiltersOnGroupings:Boolean;

        [Bindable]
        private var showFilters:Boolean;

        [Bindable]
        private var allFilters:Boolean;

        [Bindable]
        private var script:String;
        ]]></mx:Script>
    <mx:RemoteObject destination="feeds" id="feedService">
        <mx:method name="getDescriptorsForDataSource" result="gotDescriptors()"/>
    </mx:RemoteObject>
    <mx:RadioButtonGroup id="typeGroup" selectedValue="{typeValue}"/>

    <mx:HBox width="100%" horizontalAlign="center">
        <mx:RadioButton group="{typeGroup}" label="URL" value="URL" click="stackIndex = 0" fontSize="16"/>
        <mx:RadioButton group="{typeGroup}" label="Drillthrough" value="Drillthrough" click="stackIndex = 1"
                        fontSize="16"/>
    </mx:HBox>
    <mx:ViewStack id="viewStack" resizeToContent="true" creationPolicy="all"
                  selectedIndex="{stackIndex}">
        <mx:VBox width="100%">
            <mx:HBox width="100%">
                <mx:Label text="URL: " width="200" fontFamily="Tahoma" fontWeight="bold"/>
                <mx:TextInput id="urlInput" text="{urlText}" width="450"/>
            </mx:HBox>
            <mx:HBox width="100%">
                <mx:Label text="Default Link: " width="200" fontFamily="Tahoma" fontWeight="bold"/>
                <mx:CheckBox id="urlDefaultLinkCheckbox" selected="{defaultLink}"/>
            </mx:HBox>
        </mx:VBox>
        <mx:VBox>
            <mx:HBox>
                <mx:Label text="Target Report:" width="200" fontFamily="Tahoma" fontWeight="bold"/>
                <util:SmartComboBox id="reportChooser" dataProvider="{reports}" labelField="name"
                                    selectedProperty="qualifiedName"
                                    selectedValue="{qualifiedName}" rowCount="12" maxWidth="400" />
            </mx:HBox>
            <mx:HBox>
                <mx:Label text="Use Popup Window:" width="200" fontFamily="Tahoma" fontWeight="bold"/>
                <mx:CheckBox label="" id="miniWindowCheckbox" selected="{miniWindow}"/>
            </mx:HBox>
            <mx:HBox width="100%">
                <mx:Label text="Default Link:" width="200" fontFamily="Tahoma" fontWeight="bold"/>
                <mx:CheckBox id="drillthroughDefaultLinkCheckbox" selected="{defaultLink}"/>
            </mx:HBox>
            <mx:HBox width="100%">
                <mx:Label text="Pass Through All Report Filters:" width="200" fontFamily="Tahoma" fontWeight="bold"/>
                <mx:CheckBox id="allCheckbox" selected="{allFilters}"/>
            </mx:HBox>
            <mx:HBox width="100%">
                <mx:Label text="Show Filters On Target Report:" width="200" fontFamily="Tahoma" fontWeight="bold"/>
                <mx:CheckBox id="showFiltersCheckbox" selected="{showFilters}"/>
            </mx:HBox>
            <mx:HBox width="100%">
                <mx:Label text="Create Filters on Row Groupings:" width="200" fontFamily="Tahoma" fontWeight="bold"/>
                <mx:CheckBox id="createFiltersOnRowGroupingsCheckbox" selected="{createFiltersOnGroupings}"/>
            </mx:HBox>
            <mx:HBox>
                <mx:Label text="Scripting:" width="200" fontFamily="Tahoma" fontWeight="bold"/>
                <mx:TextArea text="{script}" width="450" height="70" editable="true" id="scriptArea" borderStyle="inset"
                             borderThickness="1"/>
            </mx:HBox>
        </mx:VBox>
    </mx:ViewStack>
    <mx:Spacer height="100%"/>
    <mx:HBox width="100%" horizontalAlign="center">
        <util:CancelButton label="Clear Link"
                           click="dispatchEvent(new LinkMetadataEvent(LinkMetadataEvent.LINK_DELETED, _link))"/>
    </mx:HBox>
    <mx:StringValidator id="urlValidator" property="text" source="{urlInput}" minLength="3" maxLength="200"/>
</mx:VBox>