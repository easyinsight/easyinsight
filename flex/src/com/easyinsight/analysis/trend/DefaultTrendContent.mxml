<?xml version="1.0"?>
<mx:AdvancedDataGrid xmlns:mx="http://www.adobe.com/2006/mxml"
        fontSize="14"
                selectable="false" horizontalScrollPolicy="off" verticalScrollPolicy="off" styleName="myFontStyle" headerColors="[#EEEEEE, #EEEEEE]" headerWordWrap="true">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.TrendOutcome;
        import com.easyinsight.analysis.Value;
        import com.easyinsight.analysis.list.SizeOverrideEvent;
        import com.easyinsight.analysis.verticallist.VerticalListHeaderRenderer;

        import mx.collections.ArrayCollection;

        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
        import mx.controls.advancedDataGridClasses.SortInfo;
        import mx.events.FlexEvent;

        private var firstLoad:Boolean = true;

        private var trend:TrendGridDefinition;

        [Bindable]
        private var nowWidth:int = 150;

        [Bindable]
        private var previousWidth:int = 150;

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, additionalProperties:Object):void {
            if (dataSet.length > 0) {
                var trendDef:TrendGridDefinition = analysisDefinition as TrendGridDefinition;
                if (trendDef.useCustomFontFamily) {
                    setStyle("fontFamily", trendDef.getFont());
                }
                rowHeight = trendDef.fontSize + 10;
                setStyle("fontSize", trendDef.fontSize);
                setStyle("color", 0x505050);
                this.trend = trendDef;
                if (additionalProperties["nowString"] != null) {
                    nowText = additionalProperties["nowString"];
                    var nowWidth:int = measureText(nowText).width;
                    this.nowWidth = nowWidth;

                } else {
                    nowText = "Latest";
                }
                if (additionalProperties["previousString"] != null && additionalProperties["previousString"] != "") {
                    previousText = additionalProperties["previousString"];
                    var previousWidth:int = measureText(previousText).width;
                    this.previousWidth = previousWidth;
                } else if (additionalProperties["nowString"] != null) {
                    previousText = "";
                } else {
                    if (trendDef.nowDate != null) {
                        previousText = "compared to";
                    } else {
                        previousText = "";
                    }
                }
                var trends:ArrayCollection = new ArrayCollection();
                var columns:Array = [];
                var maxGroupingSize:int = 0;
                var tGrouping:AnalysisItem = null;
                if (trendDef.groupings.length > 0) {
                    tGrouping = trendDef.groupings.getItemAt(0) as AnalysisItem;
                }
                for (var i:int = 0; i < dataSet.length; i++) {
                    var trendOutcome:TrendOutcome = dataSet.getItemAt(i) as TrendOutcome;
                    if (tGrouping != null) {
                        var val:Value = trendOutcome.dimensions[tGrouping.qualifiedName()];
                        if (val != null) {
                            maxGroupingSize = Math.max(maxGroupingSize, measureText(val.toString()).width);
                        }
                    }
                    trendOutcome.dataSourceID = trendDef.dataFeedID;
                    trendOutcome.report = trendDef;
                    trends.addItem(trendOutcome);
                }

                //maxGroupingSize = Math.min(maxGroupingSize, 300);
                maxGroupingSize = 300;
                for each (var grouping:AnalysisItem in trendDef.groupings) {
                    var column:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                    var groupFactory:ClassFactory = new ClassFactory(TrendGroupingRenderer);
                    groupFactory.properties = { grouping: grouping };
                    column.itemRenderer = groupFactory;
                    column.sortable = true;
                    column.width = maxGroupingSize;
                    column.headerText = grouping.display;
                    columns.push(column);
                }

                columns = columns.concat(defaultColumns.toArray());
                if (!trendDef.showKPIName && columns.indexOf(nameColumn) != -1) {
                    var c:ArrayCollection = new ArrayCollection(columns);
                    c.removeItemAt(c.getItemIndex(nameColumn));
                    columns = c.toArray();
                } else if (trendDef.showKPIName && columns.indexOf(nameColumn) == -1) {
                    var c1:ArrayCollection = new ArrayCollection(columns);
                    c1.addItemAt(nameColumn, c1.length - 3);
                    columns = c1.toArray();
                }
                if (firstLoad) {
                    myDataSet = trends;
                    if (trend.sortIndex > -1) {
                        var existingSort:Sort = new Sort();
                        var numeric:Boolean = false;
                        var dataField:String = AdvancedDataGridColumn(columns[trend.sortIndex]).dataField;
                        if (dataField == "nowValue" || dataField == "historicalValue" || dataField == "percentChange") {
                            numeric = true;
                        }
                        existingSort.fields = [ new SortField(dataField, true, !trend.sortAscending, numeric) ];
                        trends.sort = existingSort;
                        trends.refresh();
                    }
                    firstLoad = false;
                } else {
                    var sort:Sort = myDataSet.sort;
                    myDataSet = trends;
                    myDataSet.sort = sort;
                    myDataSet.refresh();
                }
                if (!updateListener) {
                    updateListener = true;
                    addEventListener(FlexEvent.UPDATE_COMPLETE, onUpdateComplete);
                }
                this.columns = columns;
                this.dataProvider = trends;
                //this.height = trends.length * this.rowHeight + 6 + this.headerHeight;
            }
        }

        private var updateListener:Boolean = false;

        private function onUpdateComplete(event:FlexEvent):void {
            //dataGrid.removeEventListener(FlexEvent.UPDATE_COMPLETE, onUpdateComplete);
            callLater(recomp);
        }

        private function recomp():void {
            var height:int = measureHeightOfItems(0, myDataSet.length) + headerHeight + 2;
            this.height = height;
            this.minHeight = height;
            dispatchEvent(new SizeOverrideEvent(-1, height));
        }

        private var myDataSet:ArrayCollection;

        [Bindable]
        private var previousText:String;

        [Bindable]
        private var nowText:String;

        public function updateExportMetadata():void {
            var sortSet:Boolean = false;
            for (var i:int = 0; i < columns.length; i++) {
                var column:AdvancedDataGridColumn = columns[i];
                var sortInfo:SortInfo = getFieldSortInfo(column);
                if (sortInfo != null && sortInfo.status == SortInfo.ACTUALSORT) {
                    if (sortInfo.sequenceNumber == 1) {
                        sortSet = true;
                        trend.sortIndex = i;
                        trend.sortAscending = !sortInfo.descending;
                    }
                }
            }
            if (!sortSet) {
                trend.sortIndex = -1;
            }
        }
        ]]></mx:Script>
    <mx:ArrayCollection id="defaultColumns">
        <mx:AdvancedDataGridColumn headerText="" dataField="name"
                               itemRenderer="com.easyinsight.analysis.trend.TrendStatusRenderer"
                               sortable="false" width="40"/>
        <mx:AdvancedDataGridColumn headerText="KPI Name" dataField="name" itemRenderer="com.easyinsight.analysis.trend.TrendNameRenderer" width="300"
                id="nameColumn"/>
        <mx:AdvancedDataGridColumn headerText="{nowText}" dataField="nowValue"
                               itemRenderer="com.easyinsight.analysis.trend.TrendValueRenderer" width="{nowWidth}" headerWordWrap="true"/>
        <mx:AdvancedDataGridColumn headerText="{previousText}" dataField="historicalValue"
                               itemRenderer="com.easyinsight.analysis.trend.TrendHistoricalValueRenderer" width="{previousWidth}" headerWordWrap="true"/>
        <mx:AdvancedDataGridColumn headerText="% Change" dataField="percentChange"
                               itemRenderer="com.easyinsight.analysis.trend.TrendChangeRenderer" width="100"/>
    </mx:ArrayCollection>
</mx:AdvancedDataGrid>
