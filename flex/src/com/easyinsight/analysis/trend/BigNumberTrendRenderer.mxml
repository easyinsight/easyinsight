<?xml version="1.0"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*" verticalAlign="middle" paddingLeft="5" paddingRight="5"
        verticalScrollPolicy="off" horizontalScrollPolicy="off" mouseChildren="true" horizontalAlign="center" verticalGap="0" width="100%">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.DrillThrough;
        import com.easyinsight.analysis.DrillThroughEvent;
        import com.easyinsight.analysis.DrillThroughExecutor;
        import com.easyinsight.analysis.Link;
        import com.easyinsight.analysis.ReportWindowEvent;
        import com.easyinsight.analysis.TextValueExtension;
        import com.easyinsight.analysis.TrendOutcome;
        import com.easyinsight.analysis.URLLink;
        import com.easyinsight.analysis.formatter.PercentageNumberFormatter;
        import com.easyinsight.analysis.list.ListDefinition;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.kpi.KPIOutcome;
        import com.easyinsight.listing.ReportEditorAnalyzeSource;
        import com.easyinsight.pseudocontext.StandardContextWindow;
        import com.easyinsight.report.ReportNavigationEvent;
        import com.easyinsight.solutions.InsightDescriptor;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.UIComponent;
        import mx.formatters.Formatter;

        private var _outcome:TrendOutcome;

        [Bindable]
        private var trendIcon:Class;

        [Bindable]
        private var currentValue:String;

        [Bindable]
        private var percentChange:String;

        [Bindable]
        private var trendLabel:String;

        [Bindable]
        private var trendColor:uint = 0x000000;

        [Bindable]
        private var leftValueWidth:int;

        private var _trendDefinition:TrendDefinition;

        public function set trendDefinition(value:TrendDefinition):void {
            _trendDefinition = value;
        }

        private var defaultLink:Link;

        private static function onRollOver(event:MouseEvent):void {
            var target:UIComponent = event.currentTarget as UIComponent;
            target.setStyle("textDecoration", "underline");
        }

        private static function onRollOut(event:MouseEvent):void {
            var target:UIComponent = event.currentTarget as UIComponent;
            target.setStyle("textDecoration", "none");
        }

        private function onClick(event:MouseEvent):void {
            if (defaultLink is URLLink) {
                var urlLink:URLLink = defaultLink as URLLink;
                var url:String = data[urlLink.label + "_link"];
                try {
                    navigateToURL(new URLRequest(url), "_blank");
                } catch (e:Error) {
                    Alert.show(e.message);
                }
            } else if (defaultLink is DrillThrough) {
                var drillThrough:DrillThrough = defaultLink as DrillThrough;
                var executor:DrillThroughExecutor = new DrillThroughExecutor(drillThrough, _outcome, _outcome.measure, _trendDefinition);
                executor.addEventListener(DrillThroughEvent.DRILL_THROUGH, onDrill);
                executor.send();
            }
        }

        private function onDrill(event:DrillThroughEvent):void {
            if (event.drillThrough.miniWindow) {
                dispatchEvent(new ReportWindowEvent(event.drillThroughResponse.descriptor.id, 0, 0, event.drillThroughResponse.filters, InsightDescriptor(event.drillThroughResponse.descriptor).dataFeedID,
                        InsightDescriptor(event.drillThroughResponse.descriptor).reportType));
            } else {
                dispatchEvent(new ReportNavigationEvent(ReportNavigationEvent.TO_REPORT, event.drillThroughResponse.descriptor, event.drillThroughResponse.filters));
            }
        }

        override public function set data(value:Object):void {
            _outcome = value as TrendOutcome;

            leftValueWidth = _outcome.leftTextWidth;
            var now:Number = _outcome.now.getValue() as Number;
            var previous:Number = _outcome.historical.getValue() as Number;
            var formatter:PercentageNumberFormatter = new PercentageNumberFormatter();
            formatter.precision = 2;
            var change:Number = (now - previous) / previous * 100;
            percentChange = formatter.format(change);
            trendColor = getColor(_outcome);
            trendLabel = value.measure.unqualifiedDisplay;

            var mFormatter:Formatter = _outcome.measure.getFormatter();
            currentValue = mFormatter.format(_outcome.now.getValue());

            trendIcon = TrendStatusRenderer.iconForKPI(_outcome);
            var exploreOption:ContextMenuItem = new ContextMenuItem("Analyze the trend...");
            exploreOption.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, analyzeData);
            new StandardContextWindow(_outcome.measure, passThrough, this, _outcome, _outcome.report, true, _outcome.measure.filters, _outcome.measure.getFormatter().format(_outcome.now), [ exploreOption ]);
        }

        /*override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
         super.updateDisplayList(unscaledWidth, unscaledHeight);

         }*/

        /*override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
            labelArea.maxWidth = unscaledWidth - 10;
        }*/

        [Bindable]
        private var topHeight:int;

        override protected function commitProperties():void {
            super.commitProperties();
            majorFontSize = _trendDefinition.majorFontSize;
            minorFontSize = _trendDefinition.minorFontSize;
            topHeight = majorFontSize + 10;
            if (_outcome.measure.links != null && _outcome.measure.links.length > 0) {
                valueLabel.addEventListener(MouseEvent.ROLL_OVER, onRollOver);
                valueLabel.addEventListener(MouseEvent.ROLL_OUT, onRollOut);
                valueLabel.addEventListener(MouseEvent.CLICK, onClick);
                labelArea.addEventListener(MouseEvent.ROLL_OVER, onRollOver);
                labelArea.addEventListener(MouseEvent.ROLL_OUT, onRollOut);
                labelArea.addEventListener(MouseEvent.CLICK, onClick);
                defaultLink = _outcome.measure.links.getItemAt(0) as Link;
            }
        }

        private function analyzeData(event:ContextMenuEvent):void {
            var report:ListDefinition = new ListDefinition();
            report.filterDefinitions = _outcome.measure.filters;
            report.canSaveDirectly = true;
            report.dataFeedID = _outcome.dataSourceID;
            report.columns = new ArrayCollection([ _outcome.measure ]);
            report.name = _outcome.measure.display;
            dispatchEvent(new AnalyzeEvent(new ReportEditorAnalyzeSource(report)));
        }

        private function passThrough(event:Event):void {
            dispatchEvent(event);
        }

        private static function getColor(outcome:TrendOutcome):uint {
            var color:uint;
            if (outcome.now.valueExtension != null && outcome.now.valueExtension is TextValueExtension) {
                var ext:TextValueExtension = outcome.now.valueExtension as TextValueExtension;
                color = ext.color;
            } else {
                switch (outcome.outcome) {
                    case KPIOutcome.EXCEEDING_GOAL:
                    case KPIOutcome.POSITIVE:
                        color = 0x00BB00;
                        break;
                    case KPIOutcome.NEGATIVE:
                        color = 0xBB0000;
                        break;
                    case KPIOutcome.NEUTRAL:
                    case KPIOutcome.NO_DATA:
                    default:
                        color = 0x000000;
                        break;
                }
            }
            return color;
        }

        [Bindable]
        private var majorFontSize:int;

        [Bindable]
        private var minorFontSize:int;
        ]]></mx:Script>
    <mx:Canvas horizontalScrollPolicy="off" verticalScrollPolicy="off" height="{topHeight}" id="topBox">
        <mx:Label text="{currentValue}" fontSize="{majorFontSize}" color="{trendColor}" textAlign="center" id="valueLabel"/>
    </mx:Canvas>


    <mx:Text text="{trendLabel}" fontSize="{minorFontSize}" selectable="false"
            textAlign="center" id="labelArea" width="100%"/>

</mx:VBox>
