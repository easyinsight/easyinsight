<?xml version="1.0" encoding="utf-8"?>
<mx:Box xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*"
        xmlns:filters="com.easyinsight.filtering.*" xmlns:range="com.easyinsight.analysis.range.*" width="550"
        height="400"
        xmlns:analysis="com.easyinsight.analysis.*"
        creationComplete="initStuff()" creationPolicy="all" xmlns:formatter="com.easyinsight.analysis.formatter.*"
        implements="com.easyinsight.analysis.IAnalysisItemEditor" initialize="onInit()">
    <mx:states>

        <mx:State name="Measure">
            <mx:AddChild relativeTo="{firstForm}" position="after">
                <analysis:MeasureItemDetailEditor addedToStage="detailEditor = measureDetailEditor"
                                                  id="measureDetailEditor"
                                                  dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                                                  measureObjects="{measureObjects}"
                                                  analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>

        <mx:State name="ComplexMeasure">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:ComplexMeasureDetailEditor addedToStage="detailEditor = complexDetailEditor"
                                                     id="complexDetailEditor"
                                                     dimensionFields="{dimensionFields}"
                                                     dateDimensionFields="{dateFields}"
                                                     measureObjects="{measureObjects}"
                                                     analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>

        <mx:State name="SixSigmaMeasure">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:SixSigmaDetailEditor addedToStage="detailEditor = sigmaDetailEditor" id="sigmaDetailEditor"
                                               dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                                               measureFields="{measureFields}"
                                               measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>

        <mx:State name="TemporalMeasure">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:TemporalMeasureDetailEditor addedToStage="detailEditor = temporalDetailEditor"
                                                      id="temporalDetailEditor"
                                                      dimensionFields="{dimensionFields}"
                                                      dateDimensionFields="{dateFields}"
                                                      measureObjects="{measureObjects}"
                                                      analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>

        <mx:State name="Grouping">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:GroupingDetailEditor addedToStage="detailEditor = groupingDetailEditor"
                                               id="groupingDetailEditor"
                                               dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                                               measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>

        <mx:State name="Range">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <range:RangeDetailEditor addedToStage="detailEditor = rangeDetailEditor" id="rangeDetailEditor"
                                         dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                                         measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="Tags">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:ListDetailEditor addedToStage="detailEditor = listDetailEditor" id="listDetailEditor"
                                           dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                                           measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="Latitude">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:LatitudeDetailEditor addedToStage="detailEditor = latitudeDetailEditor"
                                               id="latitudeDetailEditor"
                                               dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                                               measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="Longitude">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:LongitudeDetailEditor addedToStage="detailEditor = longitudeDetailEditor"
                                                id="longitudeDetailEditor"
                                                dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                                                measureObjects="{measureObjects}"
                                                analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="ZipCode">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:ZipCodeDetailEditor addedToStage="detailEditor = zipCodeEditor"
                                                id="zipCodeEditor"
                                                dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                                                measureObjects="{measureObjects}"
                                                analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="Date">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:DetailDateEditor addedToStage="detailEditor = dateDetailEditor" id="dateDetailEditor"
                                           dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                                           measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="Step">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:StepDetailEditor addedToStage="detailEditor = stepDetailEditor" id="stepDetailEditor"
                                           dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                                           measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Script>
		<![CDATA[
        import com.easyinsight.commands.CommandEvent;
        import com.easyinsight.commands.CommandProcessor;
        import com.easyinsight.util.PopUpUtil;

        import mx.controls.Alert;
        import mx.events.DropdownEvent;

        import com.easyinsight.analysis.options.OptionFactory;

        import mx.collections.ArrayCollection;
        import mx.events.ItemClickEvent;
        import mx.managers.PopUpManager;

        [Bindable]
        private var links:ArrayCollection;

        [Bindable]
        private var measureObjects:ArrayCollection;
        [Bindable]
        private var dimensionFields:ArrayCollection = new ArrayCollection();
        [Bindable]
        private var dateFields:ArrayCollection = new ArrayCollection();
        [Bindable]
        private var measureFields:ArrayCollection = new ArrayCollection();
        [Bindable]
        private var existingFilters:ArrayCollection;

        private var detailEditor:AnalysisItemDetailEditor;

        private var aggregationTypeMap:Object;
        private var _aggregationType:String = "Sum";
        [Bindable]
        private var startingAnalysisItem:AnalysisItem;
        private var key:Key;

        [Bindable]
        private var _fieldNameEditable:Boolean = true;


        [Bindable]
        private var useKeyDimensionSelected:Boolean = false;

        [Bindable]
        private var displayName:String;

        [Bindable]
        private var hidden:Boolean;



        [Bindable]
        private var allItems:ArrayCollection;

        [Bindable]
        private var _dataSourceID:int;

        private function onInit():void {

        }

        public function set dataSourceID(value:int):void {
            _dataSourceID = value;
        }

        public function set fieldNameEditable(fieldNameEditable:Boolean):void {
            _fieldNameEditable = fieldNameEditable;
        }

        public function set analysisItems(analysisItems:ArrayCollection):void {
            allItems = analysisItems;
            for each (var analysisItemWrapper:AnalysisItemWrapper in analysisItems) {
                if (analysisItemWrapper.analysisItem.hasType(AnalysisItemTypes.DIMENSION)) {
                    dimensionFields.addItem(analysisItemWrapper.analysisItem);
                }
                if (analysisItemWrapper.analysisItem.hasType(AnalysisItemTypes.DATE)) {
                    dateFields.addItem(analysisItemWrapper.analysisItem);
                }
                if (analysisItemWrapper.analysisItem.hasType(AnalysisItemTypes.MEASURE)) {
                    measureFields.addItem(analysisItemWrapper.analysisItem);
                }
            }
        }

        public function set analysisItem(analysisItem:AnalysisItem):void {
            this.startingAnalysisItem = analysisItem;
            this.displayName = analysisItem.display;
            this.key = analysisItem.key;
            this.hidden = analysisItem.hidden;
            this.links = analysisItem.links;
            linkIndex = (this.links != null && this.links.length > 0) ? 1 : 0;
            this.existingFilters = analysisItem.filters;
        }

        [Bindable]
        private var linkIndex:int = 0;

        private function indexOfType(option:String):int {
            if (getGroupingOptions().contains(option)) {
                return 0;
            } else if (getMeasureOptions().contains(option)) {
                return 1;
            } else if (getComplexOptions().contains(option)) {
                return 2;
            }
            return -1;
        }

        private var commandProcessor:CommandProcessor;

        override protected function createChildren():void {
            super.createChildren();
            commandProcessor = new CommandProcessor();
            addEventListener(CommandEvent.COMMAND, onCommand);
            super.createChildren();
            measureObjects = getMeasureOptions();
            if (startingAnalysisItem.hasType(AnalysisItemTypes.CALCULATION)) {
                currentState = "Calculation";
                aggregationChange("Calculation");
            } else {
                var option:String = OptionFactory.getAnalysisItemOption(startingAnalysisItem);
                var index:int = indexOfType(option);
                toggleBar.selectedIndex = index;
                prepareAggregationBox(index);
                aggregationBox.selectedIndex = aggregationBox.dataProvider.getItemIndex(option);
                aggregationChange(option);
            }
            transformContainer.existingFilters = existingFilters;
        }

        private function initStuff():void {
            focusManager.setFocus(fieldNameInput);
            addEventListener(KeyboardEvent.KEY_UP, keyedComplete);
            addEventListener(LinkMetadataEvent.LINK_EDITED, onLinkUpdate);
            addEventListener(LinkMetadataEvent.LINK_DELETED, onLinkDelete);
            linkFactory = new ClassFactory(LinkControls);
            linkFactory.properties = { sourceItem: startingAnalysisItem };
        }

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }

        private function keyedComplete(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.ENTER) {
                save(0);
            }
        }

        protected function getAggregationTypeObjects():ArrayCollection {
            return getGroupingOptions();
        }

        protected function getGroupingOptions():ArrayCollection {
            return new ArrayCollection(["Grouping", "Range", "Date", "Tags", "Latitude", "Longitude", "Zip Code"]);
        }

        protected function getMeasureOptions():ArrayCollection {
            return new ArrayCollection(["Sum", "Average", "Min", "Max", "Count", "Median", "Variance"]);
        }

        protected function getComplexOptions():ArrayCollection {
            return new ArrayCollection(["Delta", "Last Value", "Percent Change", "Normality", "Step", "Six Sigma"]);
        }

        public function save(dataSourceID:int):AnalysisItem {
            if (detailEditor.validate()) {
                var existingType:int = startingAnalysisItem.getType();
                var analysisItem:AnalysisItem = detailEditor.createAnalysisItem(aggregationBox.selectedItem as String);
                analysisItem.concrete = startingAnalysisItem.concrete;
                analysisItem.lookupTableID = startingAnalysisItem.lookupTableID;
                if (analysisItem.getType() == existingType) {
                    analysisItem.analysisItemID = startingAnalysisItem.analysisItemID;
                }
                analysisItem.displayName = fieldNameInput.text;
                analysisItem.key = key;
                analysisItem.hidden = hiddenCheckbox.selected;
                analysisItem.links = links;                
                analysisItem.filters = transformContainer.getFilterDefinitions();
                detailEditor.save(analysisItem);
                dispatchEvent(new AnalysisItemSaveEvent(analysisItem));
                return analysisItem;
            } else {
                return null;
            }
        }

        private function aggregationTypeChanged(event:DropdownEvent):void {
            var newAggregationType:String = event.currentTarget.selectedLabel;
            aggregationChange(newAggregationType);
        }

        private function aggregationChange(newAggregationType:String):void {
            switch (newAggregationType) {
                case "Sum":
                case "Average":
                case "Max":
                case "Min":
                case "Count":
                case "Median":
                case "Variance":
                    currentState = "Measure";
                    break;
                case "Delta":
                case "Last Value":
                case "Percent Change":
                    currentState = "TemporalMeasure";
                    break;
                case "Normality":
                    currentState = "ComplexMeasure";
                    break;
                case "Calculation":
                    currentState = "Calculation";
                    break;
                case "Grouping":
                    currentState = "Grouping";
                    break;
                case "Range":
                    currentState = "Range";
                    break;
                case "Tags":
                    currentState = "Tags";
                    break;
                case "Step":
                    currentState = "Step";
                    break;
                case "Date":
                    currentState = "Date";
                    break;
                case "Six Sigma":
                    currentState = "SixSigmaMeasure";
                    break;
                case "Latitude":
                    currentState = "Latitude";
                    break;
                case "Longitude":
                    currentState = "Longitude";
                    break;
                case "Zip Code":
                    currentState = "ZipCode";
                    break;
            }
        }

        private var aggregationBox:ComboBox;

        [Bindable]
        private var aggIndex:int;

        private function prepareAggregationBox(index:int):String {
            if (index == 0) {
                aggregationBox = groupingAggregationBox;
            } else if (index == 1) {
                aggregationBox = measureAggregationBox;
            } else {
                aggregationBox = complexAggregationBox;
            }
            aggIndex = index;
            return aggregationBox.dataProvider.getItemAt(0) as String;
        }

        private function toggleClick(event:ItemClickEvent):void {
            var string:String = event.item as String;
            var index:int = toggleBar.dataProvider.getItemIndex(string);
            aggregationChange(prepareAggregationBox(index));
        }

        private function addLink():void {
            var window:LinkWindow = new LinkWindow();
            window.sourceItem = startingAnalysisItem;
            window.addEventListener(LinkMetadataEvent.LINK_DEFINED, onLinkSave, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function onLinkSave(event:LinkMetadataEvent):void {
            links.addItem(event.link);
            linkIndex = (this.links != null && this.links.length > 0) ? 1 : 0;
        }

        private function onLinkUpdate(event:LinkMetadataEvent):void {
            links.removeItemAt(links.getItemIndex(event.previousLink));
            links.addItem(event.link);
        }

        private function onLinkDelete(event:LinkMetadataEvent):void {
            links.removeItemAt(links.getItemIndex(event.link));
            linkIndex = (this.links != null && this.links.length > 0) ? 1 : 0;
        }

        [Bindable]
        private var linkFactory:ClassFactory;
        ]]>
    </mx:Script>
    <mx:TabNavigator creationPolicy="all" width="100%" height="100%" resizeToContent="true">
        <mx:VBox label="Item" width="100%" height="100%" horizontalAlign="center">
            <mx:ToggleButtonBar id="toggleBar" itemClick="toggleClick(event)">
                <mx:dataProvider>
                    <mx:Array>
                        <mx:String>Grouping</mx:String>
                        <mx:String>Measure</mx:String>
                        <mx:String>Complex</mx:String>
                    </mx:Array>
                </mx:dataProvider>
            </mx:ToggleButtonBar>
            <mx:Form id="coreForm" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
                <mx:FormItem label="Field Name: " direction="horizontal" id="fieldNameText">
                    <mx:TextInput id="fieldNameInput" text="{displayName}" editable="{_fieldNameEditable}"/>
                </mx:FormItem>
                <mx:FormItem label="Hidden: " direction="horizontal" id="hiddenText">
                    <mx:CheckBox id="hiddenCheckbox" selected="{hidden}"/>
                </mx:FormItem>
                <mx:FormItem label="Field Type: " direction="horizontal" id="firstForm">
                    <mx:ViewStack resizeToContent="true" creationPolicy="all" selectedIndex="{aggIndex}">
                        <mx:Box>
                            <mx:ComboBox id="groupingAggregationBox"
                                 close="aggregationTypeChanged(event)" rowCount="7">
                                <mx:dataProvider>
                                    <mx:Array>
                                        <mx:String>Grouping</mx:String>
                                        <mx:String>Range</mx:String>
                                        <mx:String>Date</mx:String>
                                        <mx:String>Tags</mx:String>
                                        <mx:String>Latitude</mx:String>
                                        <mx:String>Longitude</mx:String>
                                        <mx:String>Zip Code</mx:String>
                                    </mx:Array>
                                </mx:dataProvider>
                            </mx:ComboBox>
                        </mx:Box>
                        <mx:Box>
                            <mx:ComboBox id="measureAggregationBox"
                                 close="aggregationTypeChanged(event)" rowCount="7">
                                <mx:dataProvider>
                                    <mx:Array>
                                        <mx:String>Sum</mx:String>
                                        <mx:String>Average</mx:String>
                                        <mx:String>Min</mx:String>
                                        <mx:String>Max</mx:String>
                                        <mx:String>Count</mx:String>
                                        <mx:String>Median</mx:String>
                                        <mx:String>Variance</mx:String>
                                    </mx:Array>
                                </mx:dataProvider>
                            </mx:ComboBox>
                        </mx:Box>
                        <mx:Box>
                            <mx:ComboBox id="complexAggregationBox"
                                 close="aggregationTypeChanged(event)" rowCount="9">
                                <mx:dataProvider>
                                    <mx:Array>
                                        <mx:String>Delta</mx:String>
                                        <mx:String>Last Value</mx:String>
                                        <mx:String>Percent Change</mx:String>
                                        <mx:String>Normality</mx:String>
                                        <mx:String>Step</mx:String>
                                        <mx:String>Six Sigma</mx:String>
                                    </mx:Array>
                                </mx:dataProvider>
                            </mx:ComboBox>
                        </mx:Box>
                    </mx:ViewStack>

                </mx:FormItem>
            </mx:Form>

        </mx:VBox>
        <mx:VBox label="Links" width="100%" height="100%" paddingBottom="5" paddingLeft="5" paddingRight="5"
                 paddingTop="5" horizontalAlign="center">
            <util:AutoSizeTextArea width="515" editable="false" selectable="false" backgroundAlpha="0" borderStyle="none" fontSize="14" text="Links allow you to connect your reports to other locations. You can create links to other reports (drillthroughs), as well as links to external URLs."/>
            <mx:ViewStack selectedIndex="{linkIndex}" width="100%" height="100%">
                <mx:VBox width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
                    <mx:Label text="You haven't defined any links yet." fontSize="14"/>
                    <mx:Button label="Create a link" click="addLink()" fontSize="14"/>
                </mx:VBox>
                <mx:VBox>
                    <mx:Button label="Add Link..." click="addLink()"/>
                    <mx:DataGrid dataProvider="{links}" width="100%" rowHeight="28">
                        <mx:columns>
                            <util:EIDataGridColumn headerText="Link Name" dataField="label"/>
                            <util:EIDataGridColumn headerText="Link Type" dataField="type"/>
                            <util:EIDataGridColumn headerText="" sortable="false" dataField="label"
                                                   itemRenderer="{linkFactory}"
                                                   width="100"/>
                        </mx:columns>
                    </mx:DataGrid>
                </mx:VBox>
            </mx:ViewStack>
        </mx:VBox>
        <mx:VBox label="Filters" width="100%" height="100%" paddingBottom="5" paddingLeft="5" paddingRight="5"
                 paddingTop="5" horizontalAlign="center">
            <util:AutoSizeTextArea width="515" editable="false" selectable="false" backgroundAlpha="0" borderStyle="none" fontSize="14" text="You can define filters at the field level by dragging fields from the left hand list into the drop area below. Any filters you define here will only be applied to this field."/>
            <filters:TransformContainer id="transformContainer" paddingLeft="10" paddingTop="10" paddingBottom="10"
                                        paddingRight="10"
                                        width="100%" height="100%" backgroundColor="#ffffff" backgroundAlpha=".1"
                                        feedID="{_dataSourceID}"
                                        analysisItems="{allItems}" borderStyle="solid" borderThickness="1"/>
        </mx:VBox>
    </mx:TabNavigator>
    <mx:StringValidator id="nameValidator" source="{fieldNameInput}" property="text" minLength="3"/>
</mx:Box>
