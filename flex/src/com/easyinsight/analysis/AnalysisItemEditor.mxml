<?xml version="1.0" encoding="utf-8"?>
<mx:Box xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
        xmlns:analysis="com.easyinsight.analysis.*"
        creationComplete="initStuff()" creationPolicy="all" xmlns:formatter="com.easyinsight.analysis.formatter.*"
        implements="com.easyinsight.analysis.IAnalysisItemEditor">
    <mx:states>

        <mx:State name="Measure">
            <mx:AddChild relativeTo="{firstForm}" position="after">
                <analysis:MeasureItemDetailEditor addedToStage="detailEditor = measureDetailEditor" id="measureDetailEditor"
                        dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                        measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>

        <mx:State name="ComplexMeasure">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:ComplexMeasureDetailEditor addedToStage="detailEditor = complexDetailEditor" id="complexDetailEditor"
                        dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                        measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>

        <mx:State name="SixSigmaMeasure">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:SixSigmaDetailEditor addedToStage="detailEditor = sigmaDetailEditor" id="sigmaDetailEditor"
                        dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}" measureFields="{measureFields}"
                        measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>

        <mx:State name="TemporalMeasure">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:TemporalMeasureDetailEditor addedToStage="detailEditor = temporalDetailEditor" id="temporalDetailEditor"
                        dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                        measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>

        <mx:State name="Grouping">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:GroupingDetailEditor addedToStage="detailEditor = groupingDetailEditor" id="groupingDetailEditor"
                        dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                        measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>

        <mx:State name="Range">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:RangeDetailEditor addedToStage="detailEditor = rangeDetailEditor" id="rangeDetailEditor"
                        dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                        measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="List">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:ListDetailEditor addedToStage="detailEditor = listDetailEditor" id="listDetailEditor"
                        dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                        measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="Date">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:DetailDateEditor addedToStage="detailEditor = dateDetailEditor" id="dateDetailEditor"
                        dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                        measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="Step">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:StepDetailEditor addedToStage="detailEditor = stepDetailEditor" id="stepDetailEditor"
                        dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                        measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Script>
		<![CDATA[
        import mx.events.DropdownEvent;

        import com.easyinsight.analysis.options.OptionFactory;

        import mx.collections.ArrayCollection;

        [Bindable]
        private var aggregationTypeObjects:ArrayCollection;

        [Bindable]
        private var measureObjects:ArrayCollection;
        [Bindable]
        private var dimensionFields:ArrayCollection = new ArrayCollection();
        [Bindable]
        private var dateFields:ArrayCollection = new ArrayCollection();
        [Bindable]
        private var measureFields:ArrayCollection = new ArrayCollection();

        private var detailEditor:AnalysisItemDetailEditor;

        private var aggregationTypeMap:Object;
        private var _aggregationType:String = "Sum";
        [Bindable]
        private var startingAnalysisItem:AnalysisItem;
        private var key:Key;

        [Bindable]
        private var _fieldNameEditable:Boolean = true;



        [Bindable]
        private var useKeyDimensionSelected:Boolean = false;

        [Bindable]
        private var displayName:String;

        [Bindable]
        private var hidden:Boolean;

        public function set fieldNameEditable(fieldNameEditable:Boolean):void {
            _fieldNameEditable = fieldNameEditable;
        }

        public function set analysisItems(analysisItems:ArrayCollection):void {
            for each (var analysisItemWrapper:AnalysisItemWrapper in analysisItems) {
                if (analysisItemWrapper.analysisItem.hasType(AnalysisItemTypes.DIMENSION)) {
                    dimensionFields.addItem(analysisItemWrapper.analysisItem);
                }
                if (analysisItemWrapper.analysisItem.hasType(AnalysisItemTypes.DATE)) {
                    dateFields.addItem(analysisItemWrapper.analysisItem);
                }
                if (analysisItemWrapper.analysisItem.hasType(AnalysisItemTypes.MEASURE)) {
                    measureFields.addItem(analysisItemWrapper.analysisItem);
                }
            }
        }

        public function set analysisItem(analysisItem:AnalysisItem):void {
            this.startingAnalysisItem = analysisItem;
            if (aggregationTypeObjects == null) {
                aggregationTypeObjects = getAggregationTypeObjects();
            }
            this.displayName = analysisItem.display;
            this.key = analysisItem.key;
            this.hidden = analysisItem.hidden;
        }

        private function indexOfType(option:String):int {
            if (getGroupingOptions().contains(option)) {
                return 0;
            } else if (getMeasureOptions().contains(option)) {
                return 1;
            } else if (getComplexOptions().contains(option)) {
                return 2;
            }
            return -1;
        }

        override protected function createChildren():void {
            super.createChildren();
            measureObjects = getMeasureOptions();
            if (startingAnalysisItem.hasType(AnalysisItemTypes.CALCULATION)) {
                currentState = "Calculation";
                aggregationChange("Calculation");
            } else {
                var option:String = OptionFactory.getAnalysisItemOption(startingAnalysisItem);
                var index:int = indexOfType(option);
                toggleBar.selectedIndex = index;
                if (index == 0) {
                    aggregationTypeObjects = getGroupingOptions();
                } else if (index == 1) {
                    aggregationTypeObjects = getMeasureOptions();
                } else {
                    aggregationTypeObjects = getComplexOptions();
                }
                aggregationBox.selectedIndex = aggregationTypeObjects.getItemIndex(option);
                aggregationChange(option);
            }
        }

        private function initStuff():void {
            if (aggregationTypeObjects == null) {
                aggregationTypeObjects = getAggregationTypeObjects();
            }
            focusManager.setFocus(fieldNameInput);
            addEventListener(KeyboardEvent.KEY_UP, keyedComplete);
        }

        private function keyedComplete(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.ENTER) {
                save();
            }
        }

        protected function getAggregationTypeObjects():ArrayCollection {
            return getGroupingOptions();
        }

        protected function getGroupingOptions():ArrayCollection {
            return new ArrayCollection(["Grouping", "Range", "Date", "List"]);
        }

        protected function getMeasureOptions():ArrayCollection {
            return new ArrayCollection(["Sum", "Average", "Min", "Max", "Count"]);
        }

        protected function getComplexOptions():ArrayCollection {
            return new ArrayCollection(["Delta", "Last Value", "Normality", "Step", "Six Sigma"]);
        }

        public function save():AnalysisItem {
            var existingType:int = startingAnalysisItem.getType();
            var analysisItem:AnalysisItem = detailEditor.createAnalysisItem(aggregationBox.selectedItem as String);
            if (analysisItem.getType() == existingType) {
                analysisItem.analysisItemID = startingAnalysisItem.analysisItemID;
            }
            analysisItem.displayName = fieldNameInput.text;
            analysisItem.key = key;
            analysisItem.hidden = hiddenCheckbox.selected;

            detailEditor.save(analysisItem);
            return analysisItem;
        }

        protected function getDefaultStart():String {
            return null;
        }


        private function aggregationTypeChanged(event:DropdownEvent):void {
            var newAggregationType:String = event.currentTarget.selectedLabel;
            aggregationChange(newAggregationType);
        }

        private function aggregationChange(newAggregationType:String):void {
            switch (newAggregationType) {
                case "Sum":
                case "Average":
                case "Max":
                case "Min":
                case "Count":
                    currentState = "Measure";
                    break;
                case "Delta":
                case "Last Value":
                    currentState = "TemporalMeasure";
                    break;
                case "Normality":
                    currentState = "ComplexMeasure";
                    break;
                case "Calculation":
                    currentState = "Calculation";
                    break;
                case "Grouping":
                    currentState = "Grouping";
                    break;
                case "Range":
                    currentState = "Range";
                    break;
                case "List":
                    currentState = "List";
                    break;
                case "Step":
                    currentState = "Step";
                    break;
                case "Date":
                    currentState = "Date";
                    break;
                case "Six Sigma":
                    currentState = "SixSigmaMeasure";
                    break;
            }
        }

        private function toggleClick():void {
            if (toggleBar.selectedIndex == 0) {
                aggregationTypeObjects = getGroupingOptions();
            } else if (toggleBar.selectedIndex == 1) {
                aggregationTypeObjects = getMeasureOptions();
            } else {
                aggregationTypeObjects = getComplexOptions();
            }
            aggregationChange(aggregationTypeObjects.getItemAt(0) as String);
        }
        ]]>
	</mx:Script>
    <mx:VBox>
        <mx:ToggleButtonBar id="toggleBar" itemClick="toggleClick()">
            <mx:dataProvider>
                <mx:Array>
                    <mx:String>Grouping</mx:String>
                    <mx:String>Number</mx:String>
                    <mx:String>Complex</mx:String>
                </mx:Array>
            </mx:dataProvider>
        </mx:ToggleButtonBar>
    </mx:VBox>
    <mx:Form id="coreForm">
        <mx:FormItem label="Field Name: " direction="horizontal" id="fieldNameText">
            <mx:TextInput id="fieldNameInput" text="{displayName}" editable="{_fieldNameEditable}"/>
        </mx:FormItem>
        <mx:FormItem label="Hidden: " direction="horizontal" id="hiddenText">
            <mx:CheckBox id="hiddenCheckbox" selected="{hidden}"/>
        </mx:FormItem>
        <mx:FormItem label="Field Type: " direction="horizontal" id="firstForm">
            <mx:ComboBox id="aggregationBox" dataProvider="{aggregationTypeObjects}"
                         close="aggregationTypeChanged(event)" rowCount="9"/>
        </mx:FormItem>
    </mx:Form>
    <mx:StringValidator id="nameValidator" source="{fieldNameInput}" property="text" minLength="3"/>
</mx:Box>
