<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
         xmlns:analysis="com.easyinsight.analysis.*"
         creationComplete="initStuff()" creationPolicy="all"
         implements="com.easyinsight.analysis.IAnalysisItemEditor" horizontalAlign="center" paddingLeft="10">
    <mx:states>

        <mx:State name="Measure">
            <mx:AddChild relativeTo="{firstForm}" position="after">
                <analysis:MeasureItemDetailEditor addedToStage="detailEditor = measureDetailEditor"
                                                  id="measureDetailEditor"
                                                  dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                                                  measureObjects="{measureObjects}"
                                                  analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>

        <mx:State name="Grouping">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:GroupingDetailEditor addedToStage="detailEditor = groupingDetailEditor"
                                               id="groupingDetailEditor"  measureFields="{measureFields}"
                                               dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                                               measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="Tags">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:ListDetailEditor addedToStage="detailEditor = listDetailEditor" id="listDetailEditor"
                                           dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                                           measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="Text">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:TextDetailEditor addedToStage="detailEditor = textDetailEditor" id="textDetailEditor"
                                           dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                                           measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="Date">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:DetailDateEditor addedToStage="detailEditor = dateDetailEditor" id="dateDetailEditor"
                                           dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                                           measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="Step">
            <mx:AddChild relativeTo="{firstForm}" position="after" creationPolicy="all">
                <analysis:StepDetailEditor addedToStage="detailEditor = stepDetailEditor" id="stepDetailEditor"
                                           dimensionFields="{dimensionFields}" dateDimensionFields="{dateFields}"
                                           measureObjects="{measureObjects}" analysisItem="{startingAnalysisItem}"/>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Script>
		<![CDATA[
        import com.easyinsight.commands.CommandEvent;
        import com.easyinsight.commands.CommandProcessor;

        import mx.controls.Alert;

        import mx.events.DropdownEvent;

        import com.easyinsight.analysis.options.OptionFactory;

        import mx.collections.ArrayCollection;
        import mx.events.ItemClickEvent;


        [Bindable]
        private var measureObjects:ArrayCollection;
        [Bindable]
        private var dimensionFields:ArrayCollection = new ArrayCollection();
        [Bindable]
        private var dateFields:ArrayCollection = new ArrayCollection();
        [Bindable]
        private var measureFields:ArrayCollection = new ArrayCollection();

        private var detailEditor:AnalysisItemDetailEditor;

        private var aggregationTypeMap:Object;
        private var _aggregationType:String = "Sum";
        [Bindable]
        private var startingAnalysisItem:AnalysisItem;
        private var key:Key;

        [Bindable]
        private var _fieldNameEditable:Boolean = true;


        [Bindable]
        private var useKeyDimensionSelected:Boolean = false;

        [Bindable]
        private var displayName:String;

        [Bindable]
        private var hidden:Boolean;


        [Bindable]
        private var allItems:ArrayCollection;

        [Bindable]
        private var _dataSourceID:int;

        public function set dataSourceID(value:int):void {
            _dataSourceID = value;
        }

        public function set fieldNameEditable(fieldNameEditable:Boolean):void {
            _fieldNameEditable = fieldNameEditable;
        }

        public function set analysisItems(analysisItems:ArrayCollection):void {
            allItems = analysisItems;
            for each (var analysisItemWrapper:AnalysisItemWrapper in analysisItems) {
                if (analysisItemWrapper.analysisItem.hasType(AnalysisItemTypes.DIMENSION)) {
                    dimensionFields.addItem(analysisItemWrapper.analysisItem);
                }
                if (analysisItemWrapper.analysisItem.hasType(AnalysisItemTypes.DATE)) {
                    dateFields.addItem(analysisItemWrapper.analysisItem);
                }
                if (analysisItemWrapper.analysisItem.hasType(AnalysisItemTypes.MEASURE)) {
                    measureFields.addItem(analysisItemWrapper.analysisItem);
                }
            }
        }

        public function set analysisItem(analysisItem:AnalysisItem):void {
            this.startingAnalysisItem = analysisItem;
            this.displayName = analysisItem.unqualifiedDisplay;
            this.fqnDisplayName = analysisItem.displayName;
            this.key = analysisItem.key;
            this.hidden = analysisItem.hidden;
            //this.reload = analysisItem.reloadFromDataSource;
            if (analysisItem.fromField != null) {
                loadFromAnother = analysisItem.fromField.display;
            }
            fieldKeyString = analysisItem.key.toBaseKey().createString();
        }

        private static function indexOfType(option:String):int {
            if (getGroupingOptions().contains(option)) {
                return 0;
            } else if (getMeasureOptions().contains(option)) {
                return 1;
            }
            return 1;
        }

        private var commandProcessor:CommandProcessor;

        override protected function createChildren():void {
            super.createChildren();
            commandProcessor = new CommandProcessor();
            addEventListener(CommandEvent.COMMAND, onCommand);
            measureObjects = getMeasureOptions();
            var option:String = OptionFactory.getAnalysisItemOption(startingAnalysisItem);
            var index:int = indexOfType(option);
            toggleBar.selectedIndex = index;
            prepareAggregationBox(index);
            aggregationBox.selectedIndex = aggregationBox.dataProvider.getItemIndex(option);
            aggregationChange(option);
        }

        private function initStuff():void {
            //focusManager.setFocus(fieldNameInput);
            addEventListener(KeyboardEvent.KEY_UP, keyedComplete);
        }

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }

        private function keyedComplete(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.ENTER) {
                save(0);
            }
        }

        protected function getAggregationTypeObjects():ArrayCollection {
            return getGroupingOptions();
        }

        protected static function getGroupingOptions():ArrayCollection {
            return new ArrayCollection(["Grouping", "Date", "Tags", "Text"]);
        }

        protected static function getMeasureOptions():ArrayCollection {
            return new ArrayCollection(["Sum", "Average", "Min", "Max", "Count", "Median", "Variance", "Ranking", "Percent of Total", "Count Distinct"]);
        }

        public function validate():Boolean {
            return true;
        }

        public function save(dataSourceID:int):void {
            if (detailEditor != null) {
                if (detailEditor.validate()) {
                    var analysisItem:AnalysisItem = detailEditor.createAnalysisItem(aggregationBox.selectedItem as String);
                    if (fullEditable) {
                        if (keyInput.text.length == 0) {
                            Alert.show("You have to define a key for the field.");
                            return;
                        }
                        if (analysisItem.key == null) {
                            analysisItem.key = new NamedKey();
                        }
                        NamedKey(analysisItem.key).name = keyInput.text;
                    }
                    if (analysisItem.getType() == startingAnalysisItem.getType()) {
                        analysisItem = startingAnalysisItem;
                    }
                    analysisItem.concrete = startingAnalysisItem.concrete;
                    analysisItem.lookupTableID = startingAnalysisItem.lookupTableID;
                    analysisItem.basedOnReportField = startingAnalysisItem.basedOnReportField;
                    /*if (analysisItem.getType() == existingType) {
                     analysisItem.analysisItemID = startingAnalysisItem.analysisItemID;
                     }*/
                    analysisItem.unqualifiedDisplayName = fieldNameInput.text;
                    analysisItem.displayName = fieldNameInput.text;
                    analysisItem.originalDisplayName = startingAnalysisItem.originalDisplayName != null ? startingAnalysisItem.originalDisplayName : startingAnalysisItem.display;
                    analysisItem.key = key;
                    //analysisItem.reloadFromDataSource = reloadCheckbox.selected;
                    detailEditor.save(analysisItem, aggregationBox.selectedItem as String);
                    dispatchEvent(new AnalysisItemSaveEvent(analysisItem));
                }
            }
        }

        private function aggregationTypeChanged(event:DropdownEvent):void {
            var newAggregationType:String = event.currentTarget.selectedLabel;
            aggregationChange(newAggregationType);
        }

        private function aggregationChange(newAggregationType:String):void {
            switch (newAggregationType) {
                case "Sum":
                case "Average":
                case "Max":
                case "Min":
                case "Count":
                case "Median":
                case "Variance":
                case "Ranking":
                case "Percent of Total":
                case "Count Distinct":
                    currentState = "Measure";
                    break;
                case "Calculation":
                    currentState = "Calculation";
                    break;
                case "Grouping":
                    currentState = "Grouping";
                    break;
                case "Tags":
                    currentState = "Tags";
                    break;
                case "Step":
                    currentState = "Step";
                    break;
                case "Date":
                    currentState = "Date";
                    break;
                case "Text":
                    currentState = "Text";
                    break;
                default:
                    currentState = "Measure";
                    break;
            }
            invalidateDisplayList();
            validateNow();
        }

        private var aggregationBox:ComboBox;

        [Bindable]
        private var loadFromAnother:String;

        [Bindable]
        private var loadFromAnotherFields:ArrayCollection;

        [Bindable]
        private var aggIndex:int;

        private function prepareAggregationBox(index:int):String {
            if (index == 0) {
                aggregationBox = groupingAggregationBox;
            } else {
                aggregationBox = measureAggregationBox;
            }
            aggIndex = index;
            return aggregationBox.dataProvider.getItemAt(0) as String;
        }

        [Bindable]
        private var fieldKeyString:String;

        private function toggleClick(event:ItemClickEvent):void {
            var string:String = event.item as String;
            var index:int = toggleBar.dataProvider.getItemIndex(string);
            aggregationChange(prepareAggregationBox(index));
        }

        /*[Bindable]
        private var reload:Boolean;*/

        public function higlight():void {
        }

        public function normal():void {
        }

        public function set report(analysisDefinition:AnalysisDefinition):void {
        }

        [Bindable]
        private var fqnDisplayName:String;

        [Bindable]
        public var fullEditable:Boolean = false;
        ]]>
    </mx:Script>
    <mx:ToggleButtonBar id="toggleBar" itemClick="toggleClick(event)" buttonWidth="100">
        <mx:dataProvider>
            <mx:Array>
                <mx:String>Grouping</mx:String>
                <mx:String>Measure</mx:String>
            </mx:Array>
        </mx:dataProvider>
    </mx:ToggleButtonBar>
    <mx:Form id="coreForm">
        <mx:FormItem label="Field Name: " direction="horizontal" id="fieldNameText">
            <mx:TextInput id="fieldNameInput" text="{displayName}" editable="{_fieldNameEditable}" width="250"/>
        </mx:FormItem>
        <!--<mx:FormItem label="Fully Qualified Field Name: " direction="horizontal">
            <mx:Text text="{fqnDisplayName}" width="250"/>
        </mx:FormItem>-->
        <mx:FormItem label="Field Key: " direction="horizontal">
            <mx:TextInput fontWeight="normal" text="{fieldKeyString}" width="250" fontFamily="Lucida Grande" editable="{fullEditable}" id="keyInput"/>
        </mx:FormItem>
        <mx:FormItem label="Field Type: " direction="horizontal" id="firstForm">
            <mx:ViewStack resizeToContent="true" creationPolicy="all" selectedIndex="{aggIndex}">
                <mx:Box>
                    <mx:ComboBox id="groupingAggregationBox"
                         close="aggregationTypeChanged(event)" rowCount="8">
                        <mx:dataProvider>
                            <mx:Array>
                                <mx:String>Grouping</mx:String>
                                <mx:String>Date</mx:String>
                                <mx:String>Tags</mx:String>
                                <mx:String>Text</mx:String>
                            </mx:Array>
                        </mx:dataProvider>
                    </mx:ComboBox>
                </mx:Box>
                <mx:Box>
                    <mx:ComboBox id="measureAggregationBox"
                         close="aggregationTypeChanged(event)" rowCount="10">
                        <mx:dataProvider>
                            <mx:Array>
                                <mx:String>Sum</mx:String>
                                <mx:String>Average</mx:String>
                                <mx:String>Min</mx:String>
                                <mx:String>Max</mx:String>
                                <mx:String>Count</mx:String>
                                <mx:String>Median</mx:String>
                                <mx:String>Variance</mx:String>
                                <mx:String>Ranking</mx:String>
                                <mx:String>Percent of Total</mx:String>
                                <mx:String>Count Distinct</mx:String>
                            </mx:Array>
                        </mx:dataProvider>
                    </mx:ComboBox>
                </mx:Box>
            </mx:ViewStack>

        </mx:FormItem>
    </mx:Form>
    <mx:StringValidator id="nameValidator" source="{fieldNameInput}" property="text" minLength="3"/>
</mx:VBox>
