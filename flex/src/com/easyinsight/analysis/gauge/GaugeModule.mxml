<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:black="ilog.gauges.controls.black.*"
           xmlns:bttc="com.betterthantomorrow.components.*" width="100%"
           height="100%" implements="com.easyinsight.analysis.IReportRenderer">
    <!--<mx:states>
        <mx:State name="Circular">
            <mx:AddChild relativeTo="{box}">
                <black:BlackCircularGauge width="100%" height="100%" value="{value}" minimum="0" maximum="{maxValue}" startAngle="210"
                    endAngle="330" orientation="clockwise" trackMinimum="0" trackMaximum="{maxValue}" fontFamily="Tahoma" animationDuration="2000"
                        indicatorLabelFunction="formatValue"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="Horizontal">
            <mx:AddChild relativeTo="{box}">
                <black:BlackSemiCircularGauge width="100%" height="100%" value="{value}" minimum="0" maximum="{maxValue}"
                                            trackMinimum="0" trackMaximum="{maxValue}" orientation="clockwise" fontFamily="Tahoma"/>
            </mx:AddChild>
        </mx:State>
    </mx:states>-->

    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.filtering.FilterRawData;

        import mx.collections.ArrayCollection;
        import mx.formatters.Formatter;
        import mx.formatters.NumberFormatter;

        [Bindable]
        private var value:Number = 0;

        [Bindable]
        private var maxValue:int = 100;

        private var gaugeDefinition:GaugeDefinition;

        private function formatValue(value:Object):String {
            return gaugeDefinition.measure.getFormatter().format(value);
        }

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            gaugeDefinition = analysisDefinition as GaugeDefinition;
            box.setStyle("backgroundAlpha", gaugeDefinition.backgroundAlpha);
            if (dataSet.length > 0) {
                var row:Object = dataSet.getItemAt(0);
                maxValue = gaugeDefinition.maxValue;
                value = Math.min(maxValue, Number(row[gaugeDefinition.measure.qualifiedName()]));
                gauge.alertRatios = [ gaugeDefinition.alertPoint1, gaugeDefinition.alertPoint2 ];
                gauge.alertColors = [ gaugeDefinition.color1, gaugeDefinition.color2,  gaugeDefinition.color3 ];
                gauge.width = Math.min(box.width, box.height);
                gauge.diameter = Math.min(box.width, box.height);
                numFormatter = gaugeDefinition.measure.getFormatter();
                gauge.invalidateSize();
                gauge.invalidateDisplayList();
                /*gauge.value = value;
                 gauge.maximum = maxValue;*/
                //currentState = "hasData";
            } else {
                currentState = "";
                value = 0;
            }
        }

        public function updateExportMetadata():void {
        }

        public function preserveValues():Boolean {
            return false;
        }

        [Bindable]
        private var numFormatter:Formatter;

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
            if (event is GaugeTypeEvent) {
                var gaugeEvent:GaugeTypeEvent = event as GaugeTypeEvent;

            }
        }]]></mx:Script>
    <mx:Box id="box" width="100%" height="100%" horizontalAlign="center">
        <bttc:Gauge id="gauge"
           diameter="300" width="300"
           verticalCenter="0" horizontalCenter="0"  valueFormatter="{numFormatter}"
           minValue="1"  maxValue="{maxValue}" value="{value}"
           bigTicks="9" smallTicks="45" showMinMax="true" showValue="true" fontColor="#FFFFFF"/>
    </mx:Box>
    <!--<black:BlackCircularGauge width="100%" height="100%"
        value="20"
        orientation="clockwise"
        startAngle="210"
        endAngle="330"
        minimum="0"
        maximum="100"
        majorTickInterval="10"
        minorTickInterval="1" />-->    
</mx:Module>