<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:bttc="com.betterthantomorrow.components.*" width="100%"
           height="100%" implements="com.easyinsight.analysis.IReportRenderer" resize="onResize()">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.CustomChangeEvent;

        import mx.collections.ArrayCollection;
        import mx.formatters.Formatter;

        [Bindable]
        private var value:Number = 0;

        [Bindable]
        private var maxValue:int = 100;

        [Bindable]
        private var benchmarkValue:String;

        private var gaugeDefinition:GaugeDefinition;

        private function formatValue(value:Object):String {
            return gaugeDefinition.measure.getFormatter().format(value);
        }

        private function onResize():void {
            invalidateDisplayList();
        }

        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
            if (gauge != null) {
                var width:int = Math.min(unscaledWidth - 20, unscaledHeight - (benchmarkValue != null ? 80 : 20));

                //Alert.show("unscaled width = " + (unscaledWidth - 20) + " and other = " + (unscaledHeight - (benchmarkValue != null ? 80 : 20)));

                if (width != gauge.width) {

                    gauge.x = (unscaledWidth - width) / 2;
                    gauge.width = width;
                }
            }
            if (benchmarkValueLabel != null) {
                benchmarkValueLabel.y = this.unscaledHeight - 40;
            }
        }

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            gaugeDefinition = analysisDefinition as GaugeDefinition;
            if (dataSet.length > 0) {
                var row:Object = dataSet.getItemAt(0);
                if (gaugeDefinition.maxValueMeasure != null) {
                    maxValue = row[gaugeDefinition.maxValueMeasure.qualifiedName()];
                } else {
                    maxValue = gaugeDefinition.maxValue;
                }
                var reportVal:Number = Number(row[gaugeDefinition.measure.qualifiedName()]);
                value = Math.min(maxValue, reportVal);
                var alert1:Number;
                var alert2:Number;
                if (gaugeDefinition.alert1Measure != null) {
                    alert1 = row[gaugeDefinition.alert1Measure.qualifiedName()];
                } else {
                    alert1 = gaugeDefinition.alertPoint1;
                }
                if (gaugeDefinition.alert2Measure != null) {
                    alert2 = row[gaugeDefinition.alert2Measure.qualifiedName()];
                } else {
                    alert2 = gaugeDefinition.alertPoint2;
                }
                gauge.alertRatios = [ alert1, alert2 ];
                gauge.alertColors = [ gaugeDefinition.color1, gaugeDefinition.color2, gaugeDefinition.color3 ];
                numFormatter = gaugeDefinition.measure.getFormatter();
                if (gaugeDefinition.benchmarkMeasure != null) {
                    benchmarkValue = "Benchmark: " + gaugeDefinition.benchmarkMeasure.getFormatter().format(row[gaugeDefinition.benchmarkMeasure.qualifiedName()]);
                } else {
                    benchmarkValue = null;
                }
                gauge.invalidateDisplayList();
                this.invalidateDisplayList();
                gauge.visible = true;
            } else {
                value = 0;
            }
        }

        public function updateExportMetadata(report:AnalysisDefinition = null):void {
        }

        public function preserveValues():Boolean {
            return false;
        }

        [Bindable]
        private var numFormatter:Formatter;

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }
        ]]>
    </mx:Script>
    <mx:Canvas id="canvas">
        <bttc:Gauge id="gauge"
                    width="100"
                    verticalCenter="0" horizontalCenter="0"  valueFormatter="{numFormatter}"
                    minValue="0"  maxValue="{maxValue}" value="{value}"
                    bigTicks="9" smallTicks="45" showMinMax="true" showValue="true" fontColor="#FFFFFF" visible="false"/>
        <mx:Label text="{benchmarkValue}" id="benchmarkValueLabel" width="100%" textAlign="center" fontSize="24" visible="{benchmarkValue != null}"/>
    </mx:Canvas>
</mx:Module>