<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:bttc="com.betterthantomorrow.components.*" width="100%"
           height="100%" implements="com.easyinsight.analysis.IReportRenderer" resize="onResize()">

    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.CustomChangeEvent;

        import mx.collections.ArrayCollection;
        import mx.formatters.Formatter;

        [Bindable]
        private var value:Number = 0;

        [Bindable]
        private var maxValue:int = 100;

        private var gaugeDefinition:GaugeDefinition;

        private function formatValue(value:Object):String {
            return gaugeDefinition.measure.getFormatter().format(value);
        }

        private function onResize():void {
            invalidateDisplayList();
        }

        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
            if (gauge != null) {
                var width:int = Math.min(this.width - 20, this.height - 20);
                if (width != gauge.width) {
                    gauge.x = 10;
                    gauge.width = width;
                }
            }
        }

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            gaugeDefinition = analysisDefinition as GaugeDefinition;
            setStyle("backgroundAlpha", gaugeDefinition.backgroundAlpha);
            if (dataSet.length > 0) {
                var row:Object = dataSet.getItemAt(0);
                maxValue = gaugeDefinition.maxValue;
                var reportVal:Number = Number(row[gaugeDefinition.measure.qualifiedName()]);
                value = Math.min(maxValue, reportVal);
                gauge.alertRatios = [ gaugeDefinition.alertPoint1, gaugeDefinition.alertPoint2 ];
                gauge.alertColors = [ gaugeDefinition.color1, gaugeDefinition.color2,  gaugeDefinition.color3 ];
                numFormatter = gaugeDefinition.measure.getFormatter();
                gauge.invalidateDisplayList();
                gauge.visible = true;
            } else {
                currentState = "";
                value = 0;
            }
        }

        public function updateExportMetadata():void {
        }

        public function preserveValues():Boolean {
            return false;
        }

        [Bindable]
        private var numFormatter:Formatter;

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }
        ]]>
    </mx:Script>
    <bttc:Gauge id="gauge"
       width="100"
       verticalCenter="0" horizontalCenter="0"  valueFormatter="{numFormatter}"
       minValue="0"  maxValue="{maxValue}" value="{value}"
       bigTicks="9" smallTicks="45" showMinMax="true" showValue="true" fontColor="#FFFFFF" visible="false"/>
</mx:Module>