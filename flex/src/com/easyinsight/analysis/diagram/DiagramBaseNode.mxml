<?xml version="1.0"?>
<diagram:DiagramNode xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:diagrammer="com.anotherflexdev.diagrammer.*"
                     editable="false" xmlns:diagram="com.easyinsight.analysis.diagram.*">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.ClickUtil;
        import com.easyinsight.analysis.Link;
        import com.easyinsight.analysis.TrendOutcome;
        import com.easyinsight.analysis.formatter.PercentageNumberFormatter;
        import com.easyinsight.analysis.list.ListDefinition;
        import com.easyinsight.analysis.trend.TrendStatusRenderer;
        import com.easyinsight.framework.Constants;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.listing.ReportEditorAnalyzeSource;
        import com.easyinsight.pseudocontext.StandardContextWindow;

        import mx.collections.ArrayCollection;

        import mx.events.MoveEvent;

        private var _outcome:TrendOutcome;

        [Bindable]
        private var outcomeValue:String;

        [Bindable]
        private var percentChange:String;

        [Bindable]
        private var trendImage:Class;

        override public function get outcome():TrendOutcome {
            return _outcome;
        }

        private var defaultLink:Link;

        private function mouseOver(event:MouseEvent):void {
            canvas.setStyle("backgroundColor", 0xBBEEBB);
        }

        private function mouseOut(event:MouseEvent):void {
            canvas.setStyle("backgroundColor", 0xF8F8F8);
        }

        private function mouseClick(event:MouseEvent):void {
            ClickUtil.doStuff(defaultLink, _outcome, _outcome.measure, this, report);
        }

        override public function set outcome(value:TrendOutcome):void {
            _outcome = value;
            this.nodeName = _outcome.measure.display;
            if (_outcome.measure.reportFieldExtension != null && _outcome.measure.reportFieldExtension is DiagramReportFieldExtension &&
                    DiagramReportFieldExtension(_outcome.measure.reportFieldExtension).date) {
                showStatus = true;
            }
            if (!editEnabled) {
                defaultLink = _outcome.measure.defaultLink();
                if (defaultLink) {
                    addEventListener(MouseEvent.MOUSE_OVER, mouseOver);
                    addEventListener(MouseEvent.MOUSE_OUT, mouseOut);
                    addEventListener(MouseEvent.CLICK, mouseClick);
                }
            }
            outcomeValue = _outcome.measure.getFormatter().format(_outcome.now.getValue());
            var now:Number = _outcome.now.getValue() as Number;
            var previous:Number = _outcome.historical.getValue() as Number;
            var formatter:PercentageNumberFormatter = new PercentageNumberFormatter();
            formatter.precision = 2;
            var change:Number = (now - previous) / previous * 100;
            percentChange = formatter.format(change);
            trendImage = TrendStatusRenderer.iconForKPI(value);
            var exploreOption:ContextMenuItem = new ContextMenuItem("Analyze the trend...");
            exploreOption.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, analyzeData);
            new StandardContextWindow(_outcome.measure, passThrough, this, _outcome, report, true, _outcome.measure.filters, _outcome.measure.getFormatter().format(_outcome.now), [exploreOption]);
        }

        private function analyzeData(event:ContextMenuEvent):void {
            var report:ListDefinition = new ListDefinition();
            report.filterDefinitions = _outcome.measure.filters;
            report.canSaveDirectly = true;
            report.dataFeedID = _outcome.dataSourceID;
            report.columns = new ArrayCollection([ _outcome.measure ]);
            report.name = _outcome.measure.display;
            dispatchEvent(new AnalyzeEvent(new ReportEditorAnalyzeSource(report)));
        }

        private function passThrough(event:Event):void {
            dispatchEvent(event);
        }

        override protected function createChildren():void {
            super.createChildren();
            var ext:DiagramReportFieldExtension = DiagramReportFieldExtension(_outcome.measure.reportFieldExtension);
            if (ext.iconImage != null) {
                iconImage.load(Constants.instance().prefix + "/app/assets/icons/32x32/" + ext.iconImage);
            }
        }

        [Bindable]
        private var showStatus:Boolean = false;

        override protected function handleMove(event:MoveEvent):void {
            super.handleMove(event);
            DiagramReportFieldExtension(_outcome.measure.reportFieldExtension).x = this.x;
            DiagramReportFieldExtension(_outcome.measure.reportFieldExtension).y = this.y;
        }
        ]]></mx:Script>
    <mx:Canvas borderStyle="solid" borderThickness="1" borderColor="0x333333" width="100%" height="52" cornerRadius="5" backgroundColor="0xf8f8ff"
            horizontalScrollPolicy="off" verticalScrollPolicy="off" backgroundAlpha=".8" id="canvas">
        <mx:Image id="iconImage" y="5"/>
        <mx:Label text="{outcomeValue}" x="30" width="100%" textAlign="center" fontSize="14"/>
        <mx:HBox verticalAlign="middle" x="30" y="17" width="100%" horizontalAlign="center" visible="{showStatus}">
            <mx:Label text="{percentChange}"/>
            <mx:Image source="{trendImage}"/>
        </mx:HBox>
    </mx:Canvas>
    <diagram:lblNodeName>
		<mx:Text y="51" text="{nodeName}" selectable="false" left="1" right="1" textAlign="center" fontFamily="Lucida Grande"/>
	</diagram:lblNodeName>
</diagram:DiagramNode>
