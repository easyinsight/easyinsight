<?xml version="1.0" encoding="utf-8"?>
<util:EITitleWindow xmlns:util="com.easyinsight.util.*" xmlns:mx="http://www.adobe.com/2006/mxml"
                    xmlns:filters="com.easyinsight.filtering.*" xmlns:analysis="com.easyinsight.analysis.*"
                    creationComplete="onCreation()" backgroundColor="#FFFFFF">
    <mx:Script>
		<![CDATA[
        import com.easyinsight.administration.feed.ReportEventsWindow;
        import com.easyinsight.commands.CommandEvent;
        import com.easyinsight.commands.CommandProcessor;
        import com.easyinsight.filtering.NewFilterWindow;

        import com.easyinsight.util.PopUpUtil;

        import mx.core.Application;

        import mx.core.Container;
        import mx.core.UIComponent;
        import mx.effects.Move;
        import mx.effects.Parallel;
        import mx.effects.Resize;
        import mx.events.FlexEvent;
        import mx.managers.PopUpManager;
        import mx.collections.ArrayCollection;

        [Bindable]
        private var _analysisItem:AnalysisItem;
        [Bindable]
        private var _analysisItems:ArrayCollection;

        private var _editorClass:Class;

        private var _editorClass2:Class;

        public var fullEditable:Boolean = false;

        private var editor:IAnalysisItemEditor;

        private var editor2:IAnalysisItemEditor;

        [Bindable]
        public var report:AnalysisDefinition;

        public var reportEvents:Object;

        private var _dataSourceID:int;

        public static const BASE:int = 1;
        public static const LINKS:int = 2;
        public static const FILTERS:int = 3;
        public static const EXTENSION:int = 4;

        [Bindable]
        public var editable:Boolean = true;

        private function onCreation():void {
            addEventListener(LinkMetadataEvent.LINK_EDITED, onLinkUpdate);
            addEventListener(LinkMetadataEvent.LINK_DELETED, onLinkDelete);

            linkFactory = new ClassFactory(LinkControls);
            if (_analysisItem != null) {
                linkFactory.properties = { sourceItem: _analysisItem, dataSourceID: dataSourceID };
                transformContainer.existingFilters = _analysisItem.filters;
            } else {
                linkFactory.properties = { dataSourceID: dataSourceID };
            }
            commandProcessor = new CommandProcessor();
            addEventListener(CommandEvent.COMMAND, onCommand);

            var resize:Resize = new Resize(this);
            resize.duration = 500;
            resize.widthFrom = 20;
            resize.heightFrom = 20;

            var appWidth:int = Application.application.width;
            var appHeight:int = Application.application.height;

            // The appWidth may smaller than parentWidth if the application is
            // clipped by the parent application.
            var x:int = Math.max(0, appWidth - this.width) / 2;
            var y:int = 20;

            var pt:Point = new Point(0, 0);
            //pt = popUpParent.localToGlobal(pt);
            //pt = popUp.parent.globalToLocal(pt);
            var targetX:int = Math.round(x) + pt.x;
            var targetY:int = Math.round(y) + pt.y;

            var move:Move = new Move(this);
            move.duration = 500;
            move.xTo = targetX;
            move.yTo = targetY;
            var parallel:Parallel = new Parallel(this);
            parallel.children = [ resize, move ];

            parallel.play();
        }

        public function set editorClass2(value:Class):void {
            _editorClass2 = value;
        }

        private var commandProcessor:CommandProcessor;

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }

        public var initialWindow:int;

        [Bindable]
        private var links:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var linkIndex:int = 0;


        [Bindable(event="dataSourceIDChanged")]
        public function get dataSourceID():int {
            return _dataSourceID;
        }

        public function set dataSourceID(value:int):void {
            if (_dataSourceID == value) return;
            _dataSourceID = value;
            dispatchEvent(new Event("dataSourceIDChanged"));
        }

        public function set analysisItem(analysisItem:AnalysisItem):void {
            _analysisItem = analysisItem;
            if (_analysisItem != null) {
                this.links = new ArrayCollection(analysisItem.links.toArray());
                if (this.links != null) {
                    if (this.links.length > 1) {
                        linkIndex = 2;
                        link = links.getItemAt(0) as Link;
                    } else if (links.length == 1) {
                        linkIndex = 1;
                        link = links.getItemAt(0) as Link;
                    }
                }
            }
        }

        private var _originalWrapper:AnalysisItemWrapper;

        public function set originalWrapper(analysisItemWrapper:AnalysisItemWrapper):void {
            _originalWrapper = analysisItemWrapper;
        }

        [Bindable(event="analysisItemsChanged")]
        public function get analysisItems():ArrayCollection {
            return _analysisItems;
        }

        public function set analysisItems(value:ArrayCollection):void {
            if (_analysisItems == value) return;
            _analysisItems = value;
            dispatchEvent(new Event("analysisItemsChanged"));
        }

        public function set editorClass(editorClass:Class):void {
            this._editorClass = editorClass;
            invalidateProperties();
        }

        override protected function createChildren():void {
            super.createChildren();
            if (_editorClass == null) {
                editor = new AnalysisItemEditor();
                editor.dataSourceID = _dataSourceID;
                editor.analysisItem = _analysisItem;
                editor.analysisItems = _analysisItems;
                editor.editable = this.editable;
                editor.report = report;
                primaryLabel = IAnalysisItemEditor(editor).editorLabel();
            } else {
                editor = new _editorClass();
                editor.dataSourceID = _dataSourceID;
                editor.analysisItem = _analysisItem;
                editor.analysisItems = _analysisItems;
                editor.editable = this.editable;
                editor.report = report;
                primaryLabel = IAnalysisItemEditor(editor).editorLabel();
            }

            if (_editorClass2 != null) {
                editor2 = new _editorClass2();
                editor2.dataSourceID = _dataSourceID;
                editor2.analysisItem = _analysisItem;
                editor2.analysisItems = _analysisItems;
                editor2.editable = this.editable;
                editor2.report = report;
            }

            primary.select();

            UIComponent(editor).addEventListener(FlexEvent.UPDATE_COMPLETE, onEvent);
            Container(editor).label = "Item";
            tabNavigator.addChildAt(editor as DisplayObject, 0);
            if (editor2 != null) {
                var ed2:WizardTabBarSection = new WizardTabBarSection();
                ed2.num = 2;
                ed2.mainLabel = IAnalysisItemEditor(editor2).editorLabel();
                ed2.addEventListener(MouseEvent.CLICK, onClick);
                wizardTabBars.addChildAt(ed2, 1);
                tabNavigator.addChildAt(editor2 as DisplayObject, 1);
                linkNum++;
                filterNum++;
            }
            if (fullEditable) {
                tabNavigator.removeChild(filtersBox);
                tabNavigator.removeChild(linksBox);
            } else {
                if (_analysisItem != null) {
                    if (_analysisItem.links.length == 1) {
                        link = _analysisItem.links.getItemAt(0) as Link;
                    }
                    if (_analysisItem.hasType(AnalysisItemTypes.MEASURE)) {
                    } else {
                        wizardTabBars.removeChild(filterTabBar);
                        tabNavigator.removeChild(filtersBox);
                    }
                }
                if (_reportType == AnalysisDefinition.TREND || _reportType == AnalysisDefinition.TREND_GRID) {
                    var trendEditor:TrendExtensionWindow = new TrendExtensionWindow();
                    _reportEditor = trendEditor;
                    trendEditor.analysisItem = _analysisItem;
                    trendEditor.analysisItems = _analysisItems;
                    tabNavigator.addChild(trendEditor);
                } else if (_reportType == AnalysisDefinition.DIAGRAM) {
                    var diagramEditor:DiagramExtensionWindow = new DiagramExtensionWindow();
                    _reportEditor = diagramEditor;
                    diagramEditor.analysisItem = _analysisItem;
                    diagramEditor.analysisItems = _analysisItems;
                    tabNavigator.addChild(diagramEditor);
                } else if (_reportType == AnalysisDefinition.LIST || _reportType == AnalysisDefinition.TREE || _reportType == AnalysisDefinition.SUMMARY
                        || _reportType == AnalysisDefinition.MULTI_SUMMARY) {
                    var textEditor:TextExtensionWindow = new TextExtensionWindow();
                    _reportEditor = textEditor;
                    textEditor.analysisItem = _analysisItem;
                    tabNavigator.addChild(textEditor);
                } else if (_reportType == AnalysisDefinition.YTD) {
                    var ytdEditor:YTDExtensionWindow = new YTDExtensionWindow();
                    _reportEditor = ytdEditor;
                    ytdEditor.analysisItem = _analysisItem;
                    ytdEditor.analysisItems = _analysisItems;
                    tabNavigator.addChild(ytdEditor);
                } else if (_reportType == AnalysisDefinition.VERTICAL_LIST || _reportType == AnalysisDefinition.COMPARE_YEARS) {
                    var vertEditor:VertExtensionWindow = new VertExtensionWindow();
                    _reportEditor = vertEditor;
                    vertEditor.analysisItem = _analysisItem;
                    tabNavigator.addChild(vertEditor);
                } else if (_reportType == AnalysisDefinition.STACKED_COLUMN) {
                    var chartEditor:ChartExtensionWindow = new ChartExtensionWindow();
                    _reportEditor = chartEditor;
                    chartEditor.analysisItem = _analysisItem;
                    chartEditor.analysisItems = _analysisItems;
                    tabNavigator.addChild(chartEditor);
                }
                if (_reportEditor != null) {

                    var ed3:WizardTabBarSection = new WizardTabBarSection();
                    ed3.num = wizardTabBars.getChildren().length + 1;
                    ed3.mainLabel = Container(_reportEditor).label;
                    ed3.addEventListener(MouseEvent.CLICK, onClick);
                    wizardTabBars.addChild(ed3);

                }
                if (report != null && report.dataSourceFieldReport) {
                    fieldAdminWindow = new FieldAdminWindow();
                    fieldAdminWindow.analysisItem = _analysisItem;
                    tabNavigator.addChild(fieldAdminWindow);

                    var ed4:WizardTabBarSection = new WizardTabBarSection();
                    ed4.num = wizardTabBars.getChildren().length + 1;
                    ed4.mainLabel = "Data Source Field";
                    ed4.addEventListener(MouseEvent.CLICK, onClick);
                    wizardTabBars.addChild(ed4);
                }
                if (_analysisItem != null && report != null && report.fieldEvents) {
                    var events:ArrayCollection = report.fieldEvents[_analysisItem.display];
                    if (events != null) {
                        var reportsEventsWindow:ReportEventsWindow = new ReportEventsWindow();
                        reportsEventsWindow.events = events;
                        tabNavigator.addChild(reportsEventsWindow);
                        var ed5:WizardTabBarSection = new WizardTabBarSection();
                        ed5.num = wizardTabBars.getChildren().length + 1;
                        ed5.mainLabel = "Field Events";
                        ed5.addEventListener(MouseEvent.CLICK, onClick);
                        wizardTabBars.addChild(ed5);
                    }
                }
            }
        }

        public var dataSourceFields:ArrayCollection;

        private var fieldAdminWindow:FieldAdminWindow;

        private var _reportEditor:IReportExtensionEditor;

        private var _reportType:int;

        public function set reportType(value:int):void {
            _reportType = value;
        }

        private var lastTab:int = 0;

        private function onEvent(event:Event):void {
        }

        private function cancel():void {
            dispatchEvent(new Event(Event.CLOSE));
            this.close();
        }

        private function onSaveComplete(event:AnalysisItemSaveEvent):void {
            if (event.analysisItem.hasType(AnalysisItemTypes.MEASURE)) {
                event.analysisItem.filters = transformContainer.getFilterDefinitions();
            } else {
                event.analysisItem.filters = new ArrayCollection();
            }
            if (fieldAdminWindow != null) {
                fieldAdminWindow.save(event.analysisItem);
            }
            if (linkIndex == 1) {
                var linkColl:ArrayCollection = new ArrayCollection();
                linkColl.addItem(newLinkPanel.save());
                links = linkColl;
            } else if (linkIndex == 0) {
                links = new ArrayCollection();
            }
            event.analysisItem.links = links;
            if (_reportEditor != null) {
                _reportEditor.save(event.analysisItem);
            }
            if (editor2 != null) {
                editor2.analysisItem = event.analysisItem;
                editor2.save(_dataSourceID);
            }
            dispatchEvent(new AnalysisItemEditEvent(event.analysisItem, _originalWrapper, true));
            editor.removeEventListener(AnalysisItemSaveEvent.ANALYSIS_ITEM_SAVE, onSaveComplete);
            dispatchEvent(new Event(Event.CLOSE));
            PopUpManager.removePopUp(this);
        }

        private function save():void {
            if (linkIndex == 1) {
                if (!newLinkPanel.validate()) {
                    return;
                }
            }
            editor.addEventListener(AnalysisItemSaveEvent.ANALYSIS_ITEM_SAVE, onSaveComplete);
            var valid:Boolean = editor.validate();
            if (valid) editor.save(_dataSourceID);
        }

        private function addLink():void {
            link = new URLLink();
            links.addItem(link);
            linkIndex = 1;
        }

        [Bindable]
        private var link:Link;

        private function onLinkSave(event:LinkMetadataEvent):void {
            links.addItem(event.link);
            linkIndex = (this.links != null && this.links.length > 0) ? 1 : 0;
        }

        private function onLinkUpdate(event:LinkMetadataEvent):void {
            links.removeItemAt(links.getItemIndex(event.previousLink));
            links.addItem(event.link);
        }

        private function onLinkDelete(event:LinkMetadataEvent):void {
            if (linkIndex == 1) {
                links.removeItemAt(0);
                linkIndex = 0;
            } else {
                links.removeItemAt(links.getItemIndex(event.link));
                if (links.length > 0) {
                    link = links.getItemAt(0) as Link;
                }

                if (this.links.length > 1) {
                    linkIndex = 2;
                    link = links.getItemAt(0) as Link;
                } else if (links.length == 1) {
                    linkIndex = 1;
                    link = links.getItemAt(0) as Link;
                } else {
                    linkIndex = 0;
                    link = null;
                }
            }
        }

        [Bindable]
        private var linkFactory:ClassFactory;

        public function highlight():void {
            editor.higlight();
        }

        public function normal():void {
            editor.normal();
        }

        [Bindable]
        private var idx:int;

        private function onClick(event:Event):void {
            var section:WizardTabBarSection = event.currentTarget as WizardTabBarSection;
            for each (var s:WizardTabBarSection in wizardTabBars.getChildren()) {
                if (s != section) {
                    s.deselect();
                }
            }
            section.select();

            idx = section.num - 1;
        }

        [Bindable]
        private var linkNum:int = 2;

        [Bindable]
        private var filterNum:int = 3;

        [Bindable]
        private var primaryLabel:String;
        ]]>
    </mx:Script>
    <mx:HBox horizontalGap="20">
        <mx:VBox verticalGap="0" height="100%" backgroundColor="#FFFFFF" id="wizardTabBars">
            <util:WizardTabBarSection mainLabel="{primaryLabel}" num="1" click="onClick(event)" id="primary"/>
            <util:WizardTabBarSection mainLabel="Add links to URLs or other reports" num="{linkNum}" click="onClick(event)"/>
            <util:WizardTabBarSection mainLabel="Add filters to this field" num="{filterNum}" click="onClick(event)" id="filterTabBar"/>
        </mx:VBox>
        <mx:HBox width="750" horizontalAlign="center">
        <mx:ViewStack id="tabNavigator" resizeToContent="true" creationPolicy="all" selectedIndex="{idx}">
            <mx:VBox label="Links" paddingBottom="5" paddingLeft="5" paddingRight="5"
                     paddingTop="5" horizontalAlign="center" width="700" height="380" updateComplete="onEvent(event)" id="linksBox">
                <mx:Text width="515"  selectable="false" fontSize="14"
                         text="Links allow you to connect your reports to other locations. You can create links to other reports (drillthroughs) and links to external URLs."/>
                <mx:Button fontSize="14" label="Click to view documentation for links" click="navigateToURL(new URLRequest('https://www.easy-insight.com/app/docs/Linking_Reports'), '_blank')"
                           styleName="flatCreateButton"/>
                <mx:HRule/>
                <mx:ViewStack selectedIndex="{linkIndex}" width="100%" height="100%">
                    <mx:VBox width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
                        <mx:Label text="You haven't defined a link from this field yet." fontSize="14"/>
                        <mx:Button label="Create a link" click="addLink()" fontSize="14" styleName="flatCreateButton"/>
                    </mx:VBox>
                    <analysis:NewLinkPanel id="newLinkPanel" link="{link}" dataSourceID="{dataSourceID}" analysisItems="{analysisItems}"/>
                    <mx:VBox>
                        <mx:Button label="Add Link..." click="addLink()"/>
                        <mx:DataGrid dataProvider="{links}" width="100%" rowHeight="28">
                            <mx:columns>
                                <util:EIDataGridColumn headerText="Link Name" dataField="label"/>
                                <util:EIDataGridColumn headerText="Link Type" dataField="type"/>
                                <util:EIDataGridColumn headerText="" sortable="false" dataField="label"
                                                       itemRenderer="{linkFactory}"
                                                       width="100"/>
                            </mx:columns>
                        </mx:DataGrid>
                    </mx:VBox>
                </mx:ViewStack>
            </mx:VBox>
            <mx:VBox label="Filters" width="650" height="300" paddingBottom="5" paddingLeft="5" paddingRight="5"
                     paddingTop="5" horizontalAlign="center" updateComplete="onEvent(event)" id="filtersBox">
                <mx:Text width="515" selectable="false"
                         fontSize="14"
                         text="You can define filters at the column level by dragging fields from the left hand list into the drop area below. Any filters you define here will only be applied to this column."/>
                <mx:Button icon="@Embed(source='../../../../assets/funnel.png')"
                           toolTip="Add New Filter..." click="transformContainer.addNewFilter()" label="New Filter" enabled="{editable}"/>
                <filters:TransformContainer id="transformContainer" paddingLeft="10" paddingTop="10" paddingBottom="10"
                                            paddingRight="10"
                                            width="100%" height="100%" backgroundColor="#ffffff" backgroundAlpha=".1"
                                            feedID="{dataSourceID}" filterSource="{NewFilterWindow.FIELD_LEVEL}"
                                            analysisItems="{analysisItems}" report="{report}" borderStyle="solid" borderThickness="1" enabled="{editable}"/>
            </mx:VBox>
        </mx:ViewStack>
        </mx:HBox>
    </mx:HBox>
    <mx:HBox width="100%" horizontalAlign="center">
        <util:SaveButton label="Save" click="save()" id="saveButton"/>
        <util:CancelButton label="Cancel" click="cancel()"/>
    </mx:HBox>
</util:EITitleWindow>
