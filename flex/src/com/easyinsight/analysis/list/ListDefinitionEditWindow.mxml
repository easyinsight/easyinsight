<?xml version="1.0" encoding="utf-8"?>
<util:EISlimWindow xmlns:util="com.easyinsight.util.*" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:analysis="com.easyinsight.analysis.list.*">
    <mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemTypes;
        import com.easyinsight.analysis.AnalysisItemUpdateEvent;
        import com.easyinsight.analysis.AnalysisItemWrapper;
        import com.easyinsight.analysis.ListLimitsMetadata;
        import com.easyinsight.analysis.ReportFormItem;

        import mx.collections.ArrayCollection;
        import mx.managers.PopUpManager;

        private var definition:ListDefinition;

        [Bindable]
        private var rowNumbersSelected:Boolean;

        [Bindable]
        private var summarizeRows:Boolean;

        [Bindable]
        private var availableFields:ArrayCollection;

        [Bindable]
        private var limitsEnabled:Boolean;

        [Bindable]
        private var customLimitEnabled:Boolean;

        public function set listDefinition(listDefinition:ListDefinition):void {
            this.definition = listDefinition;
            rowNumbersSelected = this.definition.showLineNumbers;
            summarizeRows = listDefinition.summaryTotal;
            var existingLimits:ListLimitsMetadata = listDefinition.listLimitsMetadata;
            if (existingLimits != null) {
                limitsEnabled = existingLimits.limitEnabled;
                fieldSelectionBox.selectedItem = existingLimits.analysisItem;
                var matchedEntry:LimitsEntry = null;
                for each (var limitsEntry:LimitsEntry in limitsBox.dataProvider) {
                    if (limitsEntry.number == existingLimits.number && limitsEntry.top == existingLimits.top) {
                        matchedEntry = limitsEntry;
                    }
                }
                if (matchedEntry == null) {
                    customLimitEnabled = true;
                    if (existingLimits.top) {
                        matchedEntry = topN;
                    } else {
                        matchedEntry = bottomN;
                    }
                    customLimitInput.text = String(existingLimits.number);
                }
                limitsBox.selectedItem = matchedEntry;
            }
            reportItems = new ArrayCollection();
            for each (var formItem:ReportFormItem in definition.createFormItems()) {
                form.addChild(formItem);
                reportItems.addItem(formItem);
            }
        }

        private var reportItems:ArrayCollection;

        public function set fields(fields:ArrayCollection):void {
            availableFields = new ArrayCollection();
            for each (var wrapper:AnalysisItemWrapper in fields) {
                if (wrapper.analysisItem.hasType(AnalysisItemTypes.MEASURE) ||
                    wrapper.analysisItem.hasType(AnalysisItemTypes.DATE)) {
                    availableFields.addItem(wrapper.analysisItem);
                }
            }
            fieldSelectionBox.selectedItem = availableFields.getItemAt(0);
        }

        public function save():void {
            var valid:Boolean = true;
            for each (var validateItem:ReportFormItem in reportItems) {
                valid = valid && validateItem.validate();
            }
            if (valid) {
                definition.showLineNumbers = rowNumbersOn.selected;
                definition.summaryTotal = summarizeRowsOn.selected;
                var limitsMetadata:ListLimitsMetadata = new ListLimitsMetadata();
                limitsMetadata.limitEnabled = limitsEnabled;
                limitsMetadata.analysisItem = fieldSelectionBox.selectedItem as AnalysisItem;
                var limitsEntry:LimitsEntry = limitsBox.selectedItem as LimitsEntry;
                if (limitsEntry == topN || limitsEntry == bottomN) {
                    limitsEntry.number = Number(customLimitInput.text);
                }
                limitsEntry.toLimitsMetadata(limitsMetadata);
                definition.listLimitsMetadata = limitsMetadata;
                for each (var reportFormItem:ReportFormItem in reportItems) {
                    reportFormItem.save();
                }
                dispatchEvent(new AnalysisItemUpdateEvent());
                PopUpManager.removePopUp(this);
            }
        }

        public function cancel():void {
            PopUpManager.removePopUp(this);
        }

        private function limitsEnabledCheck():void {
            limitsEnabled = limitsEnabledCheckbox.selected;
            if (limitsEnabled) {
                customLimitEnabled = (limitsBox.selectedItem == topN || limitsBox.selectedItem == bottomN);
            } else {
                customLimitEnabled = false;
            }
        }

        private function limitValueChanged():void {
            var limitsEntry:LimitsEntry = limitsBox.selectedItem as LimitsEntry;
            customLimitEnabled = (limitsEntry == topN || limitsEntry == bottomN);
        }
		]]>
    </mx:Script>
    <mx:VBox paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5">
    <mx:Form id="form" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0">
        <mx:FormItem label="Show Row Numbers: " direction="horizontal">
            <mx:CheckBox id="rowNumbersOn" selected="{rowNumbersSelected}"/>
        </mx:FormItem>
        <mx:FormItem label="Show Summary Row: " direction="horizontal">
            <mx:CheckBox id="summarizeRowsOn" selected="{summarizeRows}"/>
        </mx:FormItem>
        <mx:FormItem direction="horizontal" label="Should results be limited?">
            <mx:CheckBox id="limitsEnabledCheckbox" click="limitsEnabledCheck()" selected="{limitsEnabled}"/>
        </mx:FormItem>
        <mx:FormItem direction="horizontal" label="What field should limits base on?" enabled="{limitsEnabled}">
            <mx:ComboBox id="fieldSelectionBox" dataProvider="{availableFields}" labelField="display"/>
        </mx:FormItem>
        <mx:FormItem label="Limit Threshold:" direction="horizontal">
            <mx:ComboBox id="limitsBox" enabled="{limitsEnabled}" close="limitValueChanged()" labelField="name">
                <analysis:LimitsEntry name="Top 5" number="5" top="true"/>
                <analysis:LimitsEntry name="Top 10" number="10" top="true"/>
                <analysis:LimitsEntry id="topN" name="Top N" top="true"/>
                <analysis:LimitsEntry name="Bottom 5" number="5" top="false"/>
                <analysis:LimitsEntry name="Bottom 10" number="10" top="false"/>
                <analysis:LimitsEntry id="bottomN" name="Bottom N" top="true"/>
            </mx:ComboBox>
            <mx:TextInput id="customLimitInput" enabled="{customLimitEnabled}"/>
        </mx:FormItem>
    </mx:Form>
        <mx:HBox width="100%" horizontalAlign="center">
            <util:SaveButton label="Save" click="save()"/>
            <util:CancelButton label="Cancel" click="cancel()"/>
        </mx:HBox>
    </mx:VBox>
</util:EISlimWindow>
