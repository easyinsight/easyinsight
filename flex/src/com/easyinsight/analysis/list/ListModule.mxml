<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:analysis="com.easyinsight.analysis.*" implements="com.easyinsight.analysis.IReportRenderer"
        width="100%" height="100%">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisCellRenderer;
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemWrapper;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.ListViewHeaderRendererFactory;
        import com.easyinsight.analysis.ReportRendererEvent;
        import com.easyinsight.filtering.FilterRawData;

        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.controls.AdvancedDataGrid;
        import mx.controls.DataGrid;
        import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
        import mx.events.DragEvent;
        import mx.events.IndexChangedEvent;
        import mx.managers.DragManager;

        [Bindable]
        private var myDataSet:ArrayCollection = new ArrayCollection();
        private var columnMap:Object = new Object();

        private function rowNumber(item:Object, iCol:int):String {
            var index:int = dataGrid.dataProvider.getItemIndex(item) + 1;
            return String(index);
        }

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object):void {
            var def:ListDefinition = analysisDefinition as ListDefinition;
            var sort:Sort = myDataSet.sort;
            myDataSet = dataSet;
            myDataSet.sort = sort;
            myDataSet.refresh();
            var columns:Array = new Array();
            var initColumn:int = 0;
            if (def.showLineNumbers) {
                var lineNumberColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                lineNumberColumn.width = 30;
                lineNumberColumn.sortable = false;
                lineNumberColumn.labelFunction = rowNumber;
                columns[0] = lineNumberColumn;
                initColumn++;
            }
            var newColumns:int = 0;
            for each (var newHeader:AnalysisItem in def.columns) {
                var exists:Boolean = false;
                var qualifiedName:String = newHeader.qualifiedName();
                for each (var existingColumn:AdvancedDataGridColumn in dataGrid.columns) {
                    if (existingColumn.dataField == qualifiedName) {
                        exists = true;
                        break;
                    }
                }
                if (!exists) {
                    newColumns++;
                }
            }
            var gridWidth:int = dataGrid.width;
            var modifier:int = gridWidth / def.columns.length / def.columns.length * newColumns;
            var widthMap:Object = new Object();
            for each (var column:AdvancedDataGridColumn in dataGrid.columns) {
                widthMap[column.dataField] = new String(column.width - modifier);
            }
            for (var k:int = 0; k < def.columns.length; k++) {
                var myHeader:AnalysisItem = def.columns.getItemAt(k) as AnalysisItem;
                columnMap[myHeader.qualifiedName()] = myHeader;
                var columnHeaderObject:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                columnHeaderObject.headerText = myHeader.display;
                //columnHeaderObject.headerText = "";
                var keyString:String = myHeader.qualifiedName();
                var existingHeightString:String = widthMap[keyString] as String;
                if (existingHeightString != null) {
                    //columnHeaderObject.width = int(existingHeightString);
                }
                columnHeaderObject.dataField = keyString;
                columnHeaderObject.headerRenderer = new ListViewHeaderRendererFactory(myHeader.display);
                /*columnHeaderObject.itemRenderer = new AnalysisCellRendererFactory(keyString, myHeader,
                        clientProcessorMap[keyString]);*/
                var factory:ClassFactory = new ClassFactory(AnalysisCellRenderer);
                factory.properties = { analysisItem: myHeader, renderer: clientProcessorMap[keyString] }; 
                columnHeaderObject.itemRenderer = factory;
                columns[k + initColumn] = columnHeaderObject;
            }
            dataGrid.columns = columns;
            if (dataGrid.selectionMode == "none") {
                dataGrid.selectionMode = "multipleCells";
            }
        }

        private function keyboardHandler(event:KeyboardEvent):void {
            if (event.ctrlKey && event.keyCode == 67) {
                var selectedObjects:Array = dataGrid.selectedCells;
                if (selectedObjects.length > 0) {
                    var selectionString:String = "";
                    for (var i:int = 0; i < selectedObjects.length; i++) {
                        var selectedObject:Object = selectedObjects[i];
                        var data:Object = dataGrid.dataProvider[selectedObject.rowIndex];
                        var dataField:String = dataGrid.columns[selectedObject.columnIndex].dataField;

                        var dataString:String = data[dataField];
                        selectionString = selectionString + dataString;
                        if (i < selectedObjects.length - 1) {
                            selectionString += ",";
                        }
                        System.setClipboard(selectionString);
                    }
                }
            }
        }

        private function dragEnterHandler(event:DragEvent):void {
            if (event.dragInitiator is DataGrid) {
                var initialList:DataGrid = DataGrid(event.dragInitiator);
                var selectedObject:AnalysisItemWrapper = AnalysisItemWrapper(initialList.selectedItem);
                var targetGrid:AdvancedDataGrid = AdvancedDataGrid(event.currentTarget);
                dataGrid.setStyle("borderThickness", 1);
                dataGrid.setStyle("borderStyle", "solid");
                dataGrid.setStyle("borderColor", "green");
                DragManager.acceptDragDrop(targetGrid);
            }
        }

        private function dragDropHandler(event:DragEvent):void {
            dataGrid.setStyle("borderStyle", "inset");
            dataGrid.setStyle("borderColor", 0xB7BABC);
            var targetGrid:AdvancedDataGrid = AdvancedDataGrid(event.currentTarget);
            var initialList:DataGrid = DataGrid(event.dragInitiator);
            var selectedObject:AnalysisItemWrapper = AnalysisItemWrapper(initialList.selectedItem);
            dispatchEvent(new ReportRendererEvent(ReportRendererEvent.ADD_ITEM, selectedObject.analysisItem));
        }

        protected function dragOverHandler(event:DragEvent):void {
            DragManager.showFeedback(DragManager.MOVE);
        }

        protected function dragExitHandler(event:DragEvent):void {
            dataGrid.setStyle("borderStyle", "inset");
            dataGrid.setStyle("borderColor", 0xB7BABC);
        }

        private function headersShifted(event:IndexChangedEvent):void {
            var keys:Array = [];
            for (var i:int = 0; i < dataGrid.columns.length; i++) {
                var column:AdvancedDataGridColumn = dataGrid.columns[i];
                keys[i] = column.dataField;
            }
            dispatchEvent(new ColumnReorderEvent(keys));
        }

        public function createFilterRawData():FilterRawData {
            var filterRawData:FilterRawData = new FilterRawData();
            var selectedObjects:Array = dataGrid.selectedCells;
            for (var i:int = 0; i < selectedObjects.length; i++) {
                var selectedObject:Object = selectedObjects[i];
                var data:Object = dataGrid.dataProvider[selectedObject.rowIndex];
                var dataField:String = dataGrid.columns[selectedObject.columnIndex].dataField;

                var dataString:String = data[dataField];

                var analysisItem:AnalysisItem = columnMap[dataField];
                filterRawData.addPair(analysisItem, dataString);
            }

            //dataSet.selectionMode = "MULTIPLE_CELLS";
            return filterRawData;
        }

        public function updateExportMetadata():void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }]]></mx:Script>
    <analysis:ListViewGrid id="dataGrid" dataProvider="{myDataSet}" width="100%" height="100%"
                           dragEnter="dragEnterHandler(event)"
                           dragDrop="dragDropHandler(event)" selectionMode="multipleCells"
                           keyUp="keyboardHandler(event)"
                           headerShift="headersShifted(event)" fontSize="12" dragExit="dragExitHandler(event)"
                           dragOver="dragOverHandler(event)"/>
</mx:Module>