<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:analysis="com.easyinsight.analysis.*" implements="com.easyinsight.analysis.IReportRenderer"
        width="100%" height="100%" creationComplete="globalListeners()">
    <mx:states>
        <mx:State name="keywordSearch">
            <mx:AddChild relativeTo="{topBar}">
                <mx:HBox width="100%">
                    <mx:TextInput id="keywordInput" change="onKeyword(event)" creationComplete="onKeywordState(event)"/>
                    <mx:Button icon="{scrollDownIcon}" click="scrollGridDown()" toolTip="Next Occurrence"/>
                    <mx:Button icon="{scrollUpIcon}" click="scrollGridUp()" toolTip="Previous Occurrence"/>
                    <mx:CheckBox id="keywordCaseSensitive" label="Case sensitive"/>
                    <mx:CheckBox id="keywordWholeWords" label="Match whole words only"/>
                    <mx:Spacer width="100%"/>
                    <mx:Button icon="{deleteIcon}" toolTip="Close Search Bar" click="hits = new ArrayCollection(); currentState=''"/>
                </mx:HBox>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisCellRenderer;
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemTypes;
        import com.easyinsight.analysis.AnalysisItemWrapper;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.ListViewHeaderRendererFactory;
        import com.easyinsight.analysis.OrderedSortField;
        import com.easyinsight.analysis.ReportRendererEvent;
        import com.easyinsight.analysis.SortFunctionFactory;
        import com.easyinsight.analysis.Value;
        import com.easyinsight.filtering.FilterRawData;

        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.controls.AdvancedDataGrid;
        import mx.controls.Alert;
        import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
        import mx.controls.advancedDataGridClasses.SortInfo;
        import mx.events.DragEvent;
        import mx.events.FlexEvent;
        import mx.events.IndexChangedEvent;
        import mx.managers.DragManager;
        import mx.managers.IFocusManagerComponent;

        private function dragCompleteHandler(event:DragEvent):void {
            event.preventDefault();
        }

        [Bindable]
        [Embed(source="../../../../../assets/navigate_cross.png")]
        public var deleteIcon:Class;

        [Bindable]
        [Embed(source="../../../../../assets/arrow2_down_blue.png")]
        public var scrollDownIcon:Class;

        [Bindable]
        [Embed(source="../../../../../assets/arrow2_up_blue.png")]
        public var scrollUpIcon:Class;

        [Bindable]
        private var myDataSet:ArrayCollection = new ArrayCollection();
        private var columnMap:Object = new Object();

        private var listDef:ListDefinition;

        private var hits:ArrayCollection = new ArrayCollection();

        private function rowNumber(item:Object, iCol:int):String {
            var index:int = dataGrid.dataProvider.getItemIndex(item) + 1;
            return String(index);
        }

        private function onKeywordState(event:FlexEvent):void {
            focusManager.setFocus(event.currentTarget as IFocusManagerComponent);
        }

        private function onKeyword(event:Event):void {
            var keyword:String = keywordInput.text;
            if (keyword.length > 1) {
                if (!keywordCaseSensitive.selected) {
                    keyword = keyword.toLowerCase();
                }
                var hitColl:ArrayCollection = new ArrayCollection();
                for each (var obj:Object in myDataSet) {
                    var match:Boolean = false;
                    for each (var valueObj:Object in obj) {
                        var objVal:String = String(valueObj);
                        if (!keywordCaseSensitive.selected) {
                            objVal = objVal.toLowerCase();
                        }
                        if (keywordWholeWords.selected) {
                            match = objVal == keyword;
                        } else {
                            match = objVal.indexOf(keyword) != -1;
                        }
                        if (match) {
                            break;
                        }
                    }
                    if (match) {
                        hitColl.addItem(obj);
                    }
                }
                hits = hitColl;
            } else {
                hits = new ArrayCollection();
            }
            dataGrid.invalidateDisplayList();
            dataGrid.validateNow();
            scrollFirstCurrent();
        }

        private function scrollGridUp():void {
            var currentVerticalPosition:int = dataGrid.verticalScrollPosition;
            for (var i:int = hits.length - 1; i >= 0; i--) {
                var obj:Object = hits.getItemAt(i);
                var index:int = myDataSet.getItemIndex(obj);
                if (index < currentVerticalPosition && index >= 0) {
                    dataGrid.verticalScrollPosition = index;
                    break;
                }
            }
        }

        private function scrollFirstCurrent():void {
            var currentVerticalPosition:int = dataGrid.verticalScrollPosition;
            for each (var obj:Object in hits) {
                var index:int = myDataSet.getItemIndex(obj);
                if (index == currentVerticalPosition) {
                    break;
                } else if (index > currentVerticalPosition && index <= dataGrid.maxVerticalScrollPosition) {
                    dataGrid.verticalScrollPosition = index;
                    break;
                }
            }
        }

        private function scrollGridDown():void {
            var currentVerticalPosition:int = dataGrid.verticalScrollPosition;
            for each (var obj:Object in hits) {
                var index:int = myDataSet.getItemIndex(obj);
                if (index > currentVerticalPosition && index <= dataGrid.maxVerticalScrollPosition) {
                    dataGrid.verticalScrollPosition = index;
                    break;
                }
            }
        }

        private var summaryRows:ArrayCollection = new ArrayCollection();

        private function rowColor(item:Object, color:uint):uint {
            if (hits.getItemIndex(item) > -1)
                return 0xEBEF80;
            if (summaryRows.getItemIndex(item) > -1) {
                return 0x6699ff;
            }
            return color;
        }
        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            var def:ListDefinition = analysisDefinition as ListDefinition;
            this.listDef = def;
            summaryRows = new ArrayCollection();
            if (def.summaryTotal) {
                var summaryRow:Object = new Object();
                for each (var defItem:AnalysisItem in def.columns) {
                    if (defItem.hasType(AnalysisItemTypes.MEASURE)) {
                        var value:Value = additionalProperties["summary" + defItem.qualifiedName()];
                        value.summary = true;
                        summaryRow[defItem.qualifiedName()] = value;
                    }
                }
                summaryRows.addItem(summaryRow);
                dataSet.addItem(summaryRow);
            }
            if (firstLoad) {
                var existingSort:Sort = new Sort();
                var sortFields:ArrayCollection = new ArrayCollection();
                for (var l:int = 0; l < def.columns.length; l++) {
                    var sortHeader:AnalysisItem = def.columns.getItemAt(l) as AnalysisItem;
                    if (sortHeader.sort > 0) {
                        var sortField:OrderedSortField = new OrderedSortField();
                        sortField.descending = sortHeader.sort == 2;
                        sortField.name = sortHeader.qualifiedName();
                        sortField.order = sortHeader.sortSequence;
                        sortFields.addItem(sortField);
                    }
                }
                var sortOfSorts:Sort = new Sort();
                sortOfSorts.fields = [ new SortField("order", false, false) ];
                sortFields.sort = sortOfSorts;
                sortFields.refresh();
                existingSort.fields = sortFields.toArray();
                myDataSet = dataSet;
                myDataSet.sort = existingSort;
                myDataSet.refresh();
                firstLoad = false;
            } else {
                var sort:Sort = myDataSet.sort;
                myDataSet = dataSet;
                myDataSet.sort = sort;
                myDataSet.refresh();
            }
            var columns:Array = new Array();
            var initColumn:int = 0;
            if (def.showLineNumbers) {
                var lineNumberColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                lineNumberColumn.width = 30;
                lineNumberColumn.sortable = false;
                lineNumberColumn.labelFunction = rowNumber;
                columns[0] = lineNumberColumn;
                initColumn++;
            }
            var newColumns:int = 0;
            for each (var newHeader:AnalysisItem in def.columns) {
                var exists:Boolean = false;
                var qualifiedName:String = newHeader.qualifiedName();
                for each (var existingColumn:AdvancedDataGridColumn in dataGrid.columns) {
                    if (existingColumn.dataField == qualifiedName) {
                        exists = true;
                        break;
                    }
                }
                if (!exists) {
                    newColumns++;
                }
            }

            var explicitWidth:Boolean = true;
            for each (var item:AnalysisItem in def.columns) {
                if (item.width == 0) {
                    explicitWidth = false;
                }
            }

            // we need to reduce the size of existing columns

            for (var k:int = 0; k < def.columns.length; k++) {
                var myHeader:AnalysisItem = def.columns.getItemAt(k) as AnalysisItem;
                columnMap[myHeader.qualifiedName()] = myHeader;
                var columnHeaderObject:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                if (explicitWidth) columnHeaderObject.width = myHeader.width;
                columnHeaderObject.sortCompareFunction = SortFunctionFactory.createSortFunction(myHeader, columnHeaderObject.sortDescending);
                columnHeaderObject.headerText = myHeader.display;
                //columnHeaderObject.headerText = "";
                var keyString:String = myHeader.qualifiedName();
                columnHeaderObject.dataField = keyString;
                columnHeaderObject.headerRenderer = new ListViewHeaderRendererFactory(myHeader.display);
                var factory:ClassFactory = new ClassFactory(AnalysisCellRenderer);
                factory.properties = { analysisItem: myHeader, renderer: clientProcessorMap[keyString] };
                columnHeaderObject.itemRenderer = factory;
                columns[k + initColumn] = columnHeaderObject;
            }
            dataGrid.columns = columns;
            if (dataGrid.selectionMode == "none") {
                dataGrid.selectionMode = "multipleCells";
            }
        }

        private var firstLoad:Boolean = true;

        private function globalListeners():void {
            addEventListener(KeyboardEvent.KEY_DOWN, stageKeyDown);
        }

        private function stageKeyDown(event:KeyboardEvent):void {
            if (event.ctrlKey && event.keyCode == 70) {
                currentState = "keywordSearch";
                if (keywordInput != null) {
                    focusManager.setFocus(keywordInput);
                }
            } else if (event.keyCode == Keyboard.ESCAPE) {
                currentState = "";
            } else if (currentState == "keywordSearch" && event.keyCode == Keyboard.F3) {
                if (event.shiftKey) {
                    scrollGridUp();
                } else {
                    scrollGridDown();
                }
            }
        }

        private function keyboardHandler(event:KeyboardEvent):void {
            if (event.ctrlKey && event.keyCode == 67) {
                var selectedObjects:Array = dataGrid.selectedCells;
                if (selectedObjects.length > 0) {
                    var selectionString:String = "";
                    for (var i:int = 0; i < selectedObjects.length; i++) {
                        var selectedObject:Object = selectedObjects[i];
                        var data:Object = dataGrid.dataProvider[selectedObject.rowIndex];
                        var dataField:String = dataGrid.columns[selectedObject.columnIndex].dataField;

                        var dataString:String = data[dataField];
                        selectionString = selectionString + dataString;
                        if (i < selectedObjects.length - 1) {
                            selectionString += ",";
                        }
                        System.setClipboard(selectionString);
                    }
                }
            }
        }

        private function dragEnterHandler(event:DragEvent):void {
            var newItem:AnalysisItemWrapper = event.dragSource.dataForFormat("treeDataGridItems")[0];
            if (newItem.isAnalysisItem()) {
                var targetGrid:AdvancedDataGrid = AdvancedDataGrid(event.currentTarget);
                dataGrid.setStyle("borderThickness", 1);
                dataGrid.setStyle("borderStyle", "solid");
                dataGrid.setStyle("borderColor", "green");
                DragManager.acceptDragDrop(targetGrid);
            }
        }

        private function dragDropHandler(event:DragEvent):void {
            event.preventDefault();
            var newItem:AnalysisItemWrapper = event.dragSource.dataForFormat("treeDataGridItems")[0];
            if (newItem.isAnalysisItem()) {
                var targetGrid:AdvancedDataGrid = AdvancedDataGrid(event.currentTarget);
                dataGrid.setStyle("borderStyle", "inset");
                dataGrid.setStyle("borderColor", 0xB7BABC);
                dispatchEvent(new ReportRendererEvent(ReportRendererEvent.ADD_ITEM, newItem.analysisItem));
            }
        }

        protected function dragOverHandler(event:DragEvent):void {
            DragManager.showFeedback(DragManager.MOVE);
        }

        protected function dragExitHandler(event:DragEvent):void {
            dataGrid.setStyle("borderStyle", "inset");
            dataGrid.setStyle("borderColor", 0xB7BABC);
        }

        private function headersShifted(event:IndexChangedEvent):void {
            var keys:Array = [];
            for (var i:int = 0; i < dataGrid.columns.length; i++) {
                var column:AdvancedDataGridColumn = dataGrid.columns[i];
                keys[i] = column.dataField;
            }
            dispatchEvent(new ColumnReorderEvent(keys));
        }

        public function createFilterRawData():FilterRawData {
            var filterRawData:FilterRawData = new FilterRawData();
            var selectedObjects:Array = dataGrid.selectedCells;
            for (var i:int = 0; i < selectedObjects.length; i++) {
                var selectedObject:Object = selectedObjects[i];
                var data:Object = dataGrid.dataProvider[selectedObject.rowIndex];
                var dataField:String = dataGrid.columns[selectedObject.columnIndex].dataField;

                var dataString:Object = String(data[dataField]);

                var analysisItem:AnalysisItem = columnMap[dataField];
                filterRawData.addPair(analysisItem, dataString);
            }
            return filterRawData;
        }

        public function updateExportMetadata():void {
            for (var i:int = 0; i < listDef.columns.length; i++) {
                var item:AnalysisItem = listDef.columns.getItemAt(i) as AnalysisItem;
                var columnIndex:int = findColumnIndex(item.qualifiedName());
                item.itemPosition = columnIndex;
                var column:AdvancedDataGridColumn = dataGrid.columns[columnIndex];
                item.width = column.width;
                var sortInfo:SortInfo = dataGrid.getFieldSortInfo(column);
                if (sortInfo != null && sortInfo.status == SortInfo.ACTUALSORT) {
                    item.sortSequence = sortInfo.sequenceNumber; 
                    if (sortInfo.descending) {
                        item.sort = 2;
                    } else {
                        item.sort = 1;
                    }
                } else {
                    item.sort = 0;
                }
            }
        }

        private function findColumnIndex(qualifiedName:String):int {
            for (var i:int = 0; i < dataGrid.columns.length; i++) {
                var column:AdvancedDataGridColumn = dataGrid.columns[i];
                if (column.dataField == qualifiedName) {
                    return i;
                }
            }
            return -1;
        }

        public function preserveValues():Boolean {
            return true;
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
            if (event is EnableKeywordEvent) {
                currentState = "keywordSearch";
            }
        }

        public function clearContents():void {
        }]]></mx:Script>
    <mx:VBox width="100%" height="100%">
        <mx:Box id="topBar" width="100%"/>
        <analysis:ListViewGrid id="dataGrid" dataProvider="{myDataSet}" width="100%" height="100%"
                           dragEnter="dragEnterHandler(event)" dragComplete="dragCompleteHandler(event)"
                           dragDrop="dragDropHandler(event)" selectionMode="multipleCells"
                           keyUp="keyboardHandler(event)" rowColorFunction="rowColor"
                           headerShift="headersShifted(event)" fontSize="12" dragExit="dragExitHandler(event)"
                           dragOver="dragOverHandler(event)" fontFamily="Tahoma"/>
    </mx:VBox>

</mx:Module>