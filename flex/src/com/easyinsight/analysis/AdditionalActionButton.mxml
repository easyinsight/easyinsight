<?xml version="1.0" encoding="utf-8"?>
<listing:ArghButton xmlns:mx="http://www.adobe.com/2006/mxml" styleName="flatTransparentMenuButton"
                    label="Navigate" xmlns:listing="com.easyinsight.listing.*" itemClick="onClick(event)" dataProvider="{navigateOptions}"
                    popUpStyleName="dropAreaPopup">
	<mx:Metadata>
		[Event(name="newReportAction", type="com.easyinsight.analysis.AdditionalActionEvent")]
		[Event(name="newDashboardAction", type="com.easyinsight.analysis.AdditionalActionEvent")]
		[Event(name="searchAction", type="com.easyinsight.analysis.AdditionalActionEvent")]
		[Event(name="configureDataSourceAction", type="com.easyinsight.analysis.AdditionalActionEvent")]
		[Event(name="reportViewAction", type="com.easyinsight.analysis.AdditionalActionEvent")]
		[Event(name="viewInHTMLAction", type="com.easyinsight.analysis.AdditionalActionEvent")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
        import com.easyinsight.dashboard.DashboardContextWindow;
        import com.easyinsight.dashboard.DashboardDescriptor;
        import com.easyinsight.framework.PerspectiveInfo;
        import com.easyinsight.framework.User;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.quicksearch.EIDescriptor;
        import com.easyinsight.quicksearch.QuickSearchEvent;
        import com.easyinsight.quicksearch.QuickSearchWindow;
        import com.easyinsight.report.ReportPerspectiveInfo;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.PopUpUtil;

        import mx.collections.ArrayCollection;
        import mx.events.MenuEvent;

        import mx.managers.PopUpManager;

        private function search(event:Event):void {
            var window:QuickSearchWindow = new QuickSearchWindow();
            window.addEventListener(QuickSearchEvent.QUICK_SEARCH, onQuickSearch, false, 0, true);
            window.addEventListener(QuickSearchEvent.QUICK_SEARCH_CANCEL, onQuickSearch, false, 0, true);
            PopUpManager.addPopUp(window, this, false);
            PopUpUtil.centerPopUp(window);
        }

        [Bindable]
        private var navigateOptions:ArrayCollection = new ArrayCollection([
            {label: "End User View", data: "endUserView"},
            {label: "Create a New Report", data: "newReport"},
            {label: "Create a New Dashboard", data: "newDashboard"},
            {label: "View in HTML", data: "viewInHTML"},
            {label: "Navigate to Another Report", data: "navigateToReport"},
            {label: "Configure the Data Source", data: "configureDataSource"}
        ]);

        private function onClick(event:MenuEvent):void {
            var target:String = event.item.data;
            if (target == "newReport") {
                dispatchEvent(new AdditionalActionEvent(AdditionalActionEvent.NEW_REPORT));
            } else if (target == "newDashboard") {
                dispatchEvent(new AdditionalActionEvent(AdditionalActionEvent.NEW_DASHBOARD));
            } else if (target == "viewInHTML") {
                dispatchEvent(new AdditionalActionEvent(AdditionalActionEvent.VIEW_IN_HTML));
            } else if (target == "navigateToReport") {
                search(null);
            } else if (target == "configureDataSource") {
                dispatchEvent(new AdditionalActionEvent(AdditionalActionEvent.CONFIGURE_DATA_SOURCE));
            } else if (target == "endUserView") {
                dispatchEvent(new AdditionalActionEvent(AdditionalActionEvent.REPORT_VIEW));
            }
        }

        private function onQuickSearch(event:QuickSearchEvent):void {
            event.currentTarget.removeEventListener(QuickSearchEvent.QUICK_SEARCH, onQuickSearch);
            event.currentTarget.removeEventListener(QuickSearchEvent.QUICK_SEARCH_CANCEL, onQuickSearch);
            if (event.type == QuickSearchEvent.QUICK_SEARCH) {
                if (event.eiDescriptor.getType() == EIDescriptor.DATA_SOURCE) {
                    var eiDescriptor:DataSourceDescriptor = event.eiDescriptor as DataSourceDescriptor;
                    User.getEventNotifier().dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.REPORT_EDITOR, {dataSourceID:eiDescriptor.id})));
                } else if (event.eiDescriptor.getType() == EIDescriptor.REPORT) {
                    User.getEventNotifier().dispatchEvent(new AnalyzeEvent(new ReportPerspectiveInfo(event.eiDescriptor as InsightDescriptor)));
                } else if (event.eiDescriptor.getType() == EIDescriptor.DASHBOARD) {
                    if (User.getInstance().analyst) {
                        var dashboardWindow:DashboardContextWindow = new DashboardContextWindow();
                        dashboardWindow.dashboardDescriptor = event.eiDescriptor as DashboardDescriptor;
                        dashboardWindow.addEventListener(AnalyzeEvent.ANALYZE, onAnalyze, false, 0, true);
                        PopUpManager.addPopUp(dashboardWindow, this, false);
                        PopUpUtil.centerPopUp(dashboardWindow);
                    } else {
                        User.getEventNotifier().dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DASHBOARD_VIEW, {dashboardID: event.eiDescriptor.id,
                            urlKey:event.eiDescriptor.urlKey})));
                    }
                } else if (event.eiDescriptor.getType() == EIDescriptor.SCORECARD) {
                    User.getEventNotifier().dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.SCORECARD_VIEW, {scorecardID:event.eiDescriptor.id})));
                }
            }
        }

        private static function onAnalyze(event:Event):void {
            User.getEventNotifier().dispatchEvent(event);
        }
        ]]>
	</mx:Script>
</listing:ArghButton>
