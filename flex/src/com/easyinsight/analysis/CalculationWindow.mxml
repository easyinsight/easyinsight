<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:analysis="com.easyinsight.analysis.*"
        implements="com.easyinsight.analysis.IAnalysisItemEditor">
	<mx:Script>
		<![CDATA[

            import com.easyinsight.analysis.AnalysisItem;

        import mx.collections.ArrayCollection;
        import mx.collections.ArrayCollection;
        import mx.controls.DataGrid;
        import mx.managers.DragManager;
        import mx.controls.List;
        import mx.events.DragEvent;
        import mx.events.ValidationResultEvent;
        import mx.managers.PopUpManager;

        [Bindable]
        private var failureMessage:String;

        [Bindable]
        private var calcText:String;

        [Bindable]
        private var calcName:String;

        private var analysisCalculation:AnalysisCalculation;

        public function save():AnalysisItem {
            if (analysisCalculation == null) {
                analysisCalculation = new AnalysisCalculation();
                var namedKey:NamedKey = new NamedKey();
                namedKey.name = nameInput.text;
                analysisCalculation.key = namedKey;
            }
            analysisCalculation.calculationString = calculationInput.text;
            return analysisCalculation;
            /*var validationResult:ValidationResultEvent = nameValidator.validate();
             if (validationResult.type == ValidationResultEvent.VALID) {
             analysisService.validateCalculation.send(calculationInput.text);
             }*/

        }

        /*private function validatedCalculation():void {
         failureMessage = analysisService.validateCalculation.lastResult as String;
         if (failureMessage != null) {
         calcValidator.validate();
         } else {
         var analysisCalculation:AnalysisCalculation = new AnalysisCalculation();
         var namedKey:NamedKey = new NamedKey();
         namedKey.name = nameInput.text;
         analysisCalculation.key = namedKey;
         analysisCalculation.calculationString = calculationInput.text;
         dispatchEvent(new AnalysisItemCreationEvent(analysisCalculation));
         }
         PopUpManager.removePopUp(this);
         }*/


        override protected function commitProperties():void {
            super.commitProperties();
            if (analysisCalculation != null) {
                calcText = analysisCalculation.calculationString;
                calcName = analysisCalculation.display;
            }
        }

        private function dragEnterHandler(event:DragEvent):void {
            var analysisItem:AnalysisItem;
            if (event.dragInitiator is List) {
                var initialList:List = List(event.dragInitiator);
                analysisItem = initialList.selectedItem as AnalysisItem;
            } else if (event.dragInitiator is DropArea) {
                var dropArea:DropArea = event.dragInitiator as DropArea;
                analysisItem = dropArea.analysisItem;
            }
            DragManager.acceptDragDrop(event.target as TextArea);
        }

        private function dragDropHandler(event:DragEvent):void {
            var analysisItem:AnalysisItem;
            if (event.dragInitiator is DataGrid) {
                var initialList:DataGrid = DataGrid(event.dragInitiator);
                var analysisItemWrapper:AnalysisItemWrapper = initialList.selectedItem as AnalysisItemWrapper;
                analysisItem = analysisItemWrapper.analysisItem;
            } else if (event.dragInitiator is DropArea) {
                var dropArea:DropArea = event.dragInitiator as DropArea;
                analysisItem = dropArea.analysisItem;
            }
            calculationInput.text += analysisItem.key.createString();
        }

        public function set analysisItem(analysisItem:AnalysisItem):void {
            analysisCalculation = analysisItem as AnalysisCalculation;
        }

        public function set analysisItems(analysisItems:ArrayCollection):void {
        }

		]]>
	</mx:Script>
	<!--<mx:RemoteObject destination="analysisDefinition" id="analysisService">
		<mx:method name="validateCalculation" result="validatedCalculation()"/>
	</mx:RemoteObject>-->
	<mx:HBox styleName="TitleWindowContents">
		<mx:VBox>
			<mx:Label text="Available Functions"/>
			<mx:Tree labelField="@label" width="300">
				<mx:XMLListCollection>
					<mx:XMLList>
						<group label="Math">
							<function label="ln"/>
						</group>
						<group label="Statistics">
							<function label="stddev"/>
						</group>
					</mx:XMLList>
				</mx:XMLListCollection>
			</mx:Tree>
		</mx:VBox>	
		<mx:Form width="400">
			<mx:FormItem label="Name: " direction="horizontal" width="100%">
				<mx:TextInput id="nameInput" width="100%" text="{calcName}"/>
			</mx:FormItem>
			<mx:FormItem label="Calculation: " direction="horizontal" width="100%">
				<mx:TextArea id="calculationInput" dragEnter="dragEnterHandler(event)" dragDrop="dragDropHandler(event)" width="100%" height="300"
                        text="{calcText}"/>
			</mx:FormItem>
			<!--<mx:FormItem label="" direction="horizontal">
				<mx:Button label="Save" click="save()"/>
				<mx:Button label="Cancel" click="cancel()"/>
			</mx:FormItem>-->
		</mx:Form>
	</mx:HBox>	
	<!--<mx:StringValidator id="nameValidator" source="{nameInput}" property="text" minLength="3"/>
	<analysis:CalculationValidator id="calcValidator" source="{calculationInput}" property="text" failureMessage="{failureMessage}"/>-->
</mx:Canvas>
