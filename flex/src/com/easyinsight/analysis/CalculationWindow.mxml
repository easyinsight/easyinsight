<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:analysis="com.easyinsight.analysis.*"
           xmlns:formatter="com.easyinsight.analysis.formatter.*"
           implements="com.easyinsight.analysis.IAnalysisItemEditor" width="100%" height="100%">
    <mx:Script>
		<![CDATA[

        import com.easyinsight.analysis.conditions.MeasureConditionRange;

        import com.easyinsight.analysis.formatter.FormattingConfiguration;

        import mx.collections.ArrayCollection;
        import mx.controls.AdvancedDataGrid;
        import mx.controls.Alert;
        import mx.controls.DataGrid;
        import mx.managers.DragManager;
        import mx.controls.List;
        import mx.events.DragEvent;
        import mx.managers.PopUpManager;

        [Bindable]
        private var failureMessage:String;

        [Bindable]
        private var calcText:String;

        [Bindable]
        private var calcName:String;

        [Bindable]
        private var formattingConfiguration:FormattingConfiguration;

        [Bindable]
        private var measureConditionRange:MeasureConditionRange;

        private var analysisCalculation:AnalysisCalculation;

        [Bindable]
        private var applyBefore:Boolean;

        public function save():AnalysisItem {
            if (analysisCalculation == null) {
                analysisCalculation = new AnalysisCalculation();
                var namedKey:NamedKey = new NamedKey();
                namedKey.name = nameInput.text;
                analysisCalculation.key = namedKey;
            } else {
                analysisCalculation.displayName = nameInput.text;
            }
            analysisCalculation.applyBeforeAggregation = applyBeforeCheckbox.selected;
            analysisCalculation.calculationString = calculationInput.text;
            var measureConditionRange:MeasureConditionRange = measureRangeSelection.createMeasureConditionRange();
            if (measureConditionRange != null) {
                analysisCalculation.measureConditionRange = measureRangeSelection.createMeasureConditionRange();
            }
            analysisCalculation.formattingConfiguration = formattingSetup.formattingConfiguration;
            analysisService.validateCalculation.send(analysisCalculation.calculationString);
            return analysisCalculation;
        }

        public function validatedCalculation():void {
            failureMessage = analysisService.validateCalculation.lastResult as String;
            if (failureMessage == null)
                dispatchEvent(new AnalysisItemSaveEvent(analysisCalculation));
            else
                Alert.show("There was a problem with your calculation syntax. Please check the calculation and try again.");
        }

        //        private function validatedCalculation():void {
        //            failureMessage = analysisService.validateCalculation.lastResult as String;
        //            if (failureMessage != null) {
        //                calcValidator.validate();
        //            } else {
        //                var analysisCalculation:AnalysisCalculation = new AnalysisCalculation();
        //                var namedKey:NamedKey = new NamedKey();
        //                namedKey.name = nameInput.text;
        //                analysisCalculation.key = namedKey;
        //                analysisCalculation.calculationString = calculationInput.text;
        //                dispatchEvent(new AnalysisItemCreationEvent(analysisCalculation));
        //            }
        //            PopUpManager.removePopUp(this);
        //         }


        override protected function commitProperties():void {
            super.commitProperties();
            if (analysisCalculation != null) {
                calcText = analysisCalculation.calculationString;
                calcName = analysisCalculation.display;
                measureConditionRange = analysisCalculation.measureConditionRange;
                formattingConfiguration = analysisCalculation.formattingConfiguration;
                applyBefore = analysisCalculation.applyBeforeAggregation;
            }
        }

        private function dragEnterHandler(event:DragEvent):void {
            var analysisItem:AnalysisItem;
            if (event.dragInitiator is List) {
                var initialList:List = List(event.dragInitiator);
                analysisItem = initialList.selectedItem as AnalysisItem;
            } else if (event.dragInitiator is DropArea) {
                var dropArea:DropArea = event.dragInitiator as DropArea;
                analysisItem = dropArea.analysisItem;
            } else if (event.dragInitiator is AdvancedDataGrid) {
                var analysisItemLabel:AdvancedDataGrid = event.dragInitiator as AdvancedDataGrid;
                var analysisItemWrapper:AnalysisItemWrapper = analysisItemLabel.selectedItem as AnalysisItemWrapper;
                if (analysisItemWrapper.isAnalysisItem()) {
                    analysisItem = analysisItemWrapper.analysisItem;
                }
            }
            DragManager.acceptDragDrop(event.target as TextArea);
        }

        private function dragDropHandler(event:DragEvent):void {
            var analysisItem:AnalysisItem;
            if (event.dragInitiator is DataGrid) {
                var initialList:DataGrid = DataGrid(event.dragInitiator);
                var analysisItemWrapper:AnalysisItemWrapper = initialList.selectedItem as AnalysisItemWrapper;
                analysisItem = analysisItemWrapper.analysisItem;
            } else if (event.dragInitiator is DropArea) {
                var dropArea:DropArea = event.dragInitiator as DropArea;
                analysisItem = dropArea.analysisItem;
            } else if (event.dragInitiator is AdvancedDataGrid) {
                var analysisItemLabel:AdvancedDataGrid = event.dragInitiator as AdvancedDataGrid;
                analysisItemWrapper = analysisItemLabel.selectedItem as AnalysisItemWrapper;
                if (analysisItemWrapper.isAnalysisItem()) {
                    analysisItem = analysisItemWrapper.analysisItem;
                }
            }
            var outputStr:String = analysisItem.key.createString();
            var str:String = ":<>,.;/?\"\'{}-=+";
            var foundSpecialChar:Boolean = false;
            for (var i:int = 0; i < str.length; i++) {
                if (outputStr.indexOf(str.charAt(i)) != -1)
                    foundSpecialChar = true;
            }
            if (foundSpecialChar)
                calculationInput.text += "[";
            calculationInput.text += outputStr;
            if (foundSpecialChar)
                calculationInput.text += "]";
        }

        public function set analysisItem(analysisItem:AnalysisItem):void {
            analysisCalculation = analysisItem as AnalysisCalculation;
        }

        public function set analysisItems(analysisItems:ArrayCollection):void {
        }

        public function set dataSourceID(dataSourceID:int):void {
        }

		]]>
	</mx:Script>
    <mx:RemoteObject destination="analysisDefinition" id="analysisService">
		<mx:method name="validateCalculation" result="validatedCalculation()"/>
	</mx:RemoteObject>
    <mx:HBox width="100%" height="100%">
        <mx:VBox>
            <mx:Label text="Available Functions"/>
            <mx:Tree labelField="@label" width="300">
                <mx:XMLListCollection>
                    <mx:XMLList>
                        <group label="Math">
                            <function label="ln"/>
                        </group>
                        <group label="Statistics">
                            <function label="stddev"/>
                        </group>
                    </mx:XMLList>
                </mx:XMLListCollection>
            </mx:Tree>
            <mx:HBox>
                <mx:CheckBox id="applyBeforeCheckbox" selected="{applyBefore}"/>
                <mx:Label text="Apply Before Aggregation"/>
            </mx:HBox>
        </mx:VBox>
        <mx:Form>
            <mx:FormItem label="Name: " direction="horizontal" width="100%">
                <mx:TextInput id="nameInput" width="100%" text="{calcName}"/>
            </mx:FormItem>
            <mx:FormItem label="Calculation: " direction="horizontal" width="100%">
                <mx:TextArea id="calculationInput" dragEnter="dragEnterHandler(event)" dragDrop="dragDropHandler(event)"
                             width="100%" height="100"
                             text="{calcText}" borderStyle="solid" borderThickness="1"/>
            </mx:FormItem>
            <mx:FormItem label="Formatting: ">
                <formatter:FormattingSetup id="formattingSetup" formattingConfiguration="{formattingConfiguration}"/>
            </mx:FormItem>
            <mx:FormItem label="">
                <analysis:ColorSelection id="measureRangeSelection" measureConditionRange="{measureConditionRange}"/>
            </mx:FormItem>
            <!--<mx:FormItem label="" direction="horizontal">
				<mx:Button label="Save" click="save()"/>
				<mx:Button label="Cancel" click="cancel()"/>
			</mx:FormItem>-->
        </mx:Form>
    </mx:HBox>
    <mx:StringValidator id="nameValidator" source="{nameInput}" property="text" minLength="3"/>
	<!--<analysis:CalculationValidator id="calcValidator" source="{calculationInput}" property="text" failureMessage="{failureMessage}"/>-->
</mx:Canvas>
