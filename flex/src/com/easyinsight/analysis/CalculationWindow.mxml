<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:analysis="com.easyinsight.analysis.*"
           xmlns:formatter="com.easyinsight.analysis.formatter.*" xmlns:schedule="com.easyinsight.schedule.*"
           xmlns:util="com.easyinsight.util.*"
           implements="com.easyinsight.analysis.IAnalysisItemEditor" width="100%" height="100%"
           creationComplete="onCreation()">
    <mx:Script>
		<![CDATA[

        import com.easyinsight.analysis.formatter.FormattingConfiguration;

        import mx.binding.utils.BindingUtils;
        import mx.collections.ArrayCollection;
        import mx.controls.AdvancedDataGrid;
        import mx.controls.Alert;
        import mx.controls.DataGrid;
        import mx.controls.TextArea;
        import mx.events.ListEvent;
        import mx.managers.DragManager;
        import mx.controls.List;
        import mx.events.DragEvent;

        [Bindable]
        private var failureMessage:String;

        [Bindable]
        protected var calcText:String;

        [Bindable]
        protected var calcName:String;

        [Bindable]
        protected var formattingConfiguration:FormattingConfiguration;


        private var _applyBefore:Boolean;

        private function onCreation():void {
            BindingUtils.bindProperty(this, "applyBefore", rowLevelCheckbox, "selected");
        }


        [Bindable(event="applyBeforeChanged")]
        public function get applyBefore():Boolean {
            return _applyBefore;
        }

        public function set applyBefore(value:Boolean):void {
            if (_applyBefore == value) return;
            _applyBefore = value;
            dispatchEvent(new Event("applyBeforeChanged"));
        }

        public function save(dataSourceID:int):AnalysisItem {
            return null;
        }

        public function validatedCalculation():void {
            failureMessage = analysisService.validateCalculation.lastResult as String;
            if (failureMessage == null)
                dispatchEvent(new AnalysisItemSaveEvent(calculationItem));
            else {
                calculationInput.errorString = failureMessage;
                calculationInput.setFocus();
                calculationInput.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
            }

        }

        private function dragEnterHandler(event:DragEvent):void {
            var analysisItem:AnalysisItem;
            if (event.dragInitiator is List) {
                var initialList:List = List(event.dragInitiator);
                analysisItem = initialList.selectedItem as AnalysisItem;
            } else if (event.dragInitiator is DropArea) {
                var dropArea:DropArea = event.dragInitiator as DropArea;
                analysisItem = dropArea.analysisItem;
            } else if (event.dragInitiator is AdvancedDataGrid) {
                var analysisItemLabel:AdvancedDataGrid = event.dragInitiator as AdvancedDataGrid;
                var analysisItemWrapper:AnalysisItemWrapper = analysisItemLabel.selectedItem as AnalysisItemWrapper;
                if (analysisItemWrapper.isAnalysisItem()) {
                    analysisItem = analysisItemWrapper.analysisItem;
                }
            }
            DragManager.acceptDragDrop(event.target as TextArea);
        }

        private function dragDropHandler(event:DragEvent):void {
            var analysisItem:AnalysisItem;
            if (event.dragInitiator is DataGrid) {
                var initialList:DataGrid = DataGrid(event.dragInitiator);
                var analysisItemWrapper:AnalysisItemWrapper = initialList.selectedItem as AnalysisItemWrapper;
                analysisItem = analysisItemWrapper.analysisItem;
            } else if (event.dragInitiator is DropArea) {
                var dropArea:DropArea = event.dragInitiator as DropArea;
                analysisItem = dropArea.analysisItem;
            } else if (event.dragInitiator is AdvancedDataGrid) {
                var analysisItemLabel:AdvancedDataGrid = event.dragInitiator as AdvancedDataGrid;
                analysisItemWrapper = analysisItemLabel.selectedItem as AnalysisItemWrapper;
                if (analysisItemWrapper.isAnalysisItem()) {
                    analysisItem = analysisItemWrapper.analysisItem;
                }
            }
            var outputStr:String = analysisItem.key.createString();
            var str:String = ":<>,.;/?\"\'{}-=+";
            var foundSpecialChar:Boolean = false;
            for (var i:int = 0; i < str.length; i++) {
                if (outputStr.indexOf(str.charAt(i)) != -1)
                    foundSpecialChar = true;
            }
            if (foundSpecialChar) {
                outputStr = "[" + outputStr + "]";
            }
            calculationInput.insertTextAtCursor(outputStr);
        }

        protected function get calculationItem():AnalysisItem {
            return null;
        }

        public function set analysisItem(analysisItem:AnalysisItem):void {
        }

        protected var items:ArrayCollection;

        public function set analysisItems(analysisItems:ArrayCollection):void {
            var items:ArrayCollection = new ArrayCollection();
            for each (var analysisItemWrapper:AnalysisItemWrapper in analysisItems) {
                items.addItem(analysisItemWrapper.analysisItem);
            }
            this.items = items;
        }

        public function set dataSourceID(dataSourceID:int):void {
        }

        [Bindable]
        protected var showMeasures:Boolean;

        [Bindable]
        protected var aggregation:int = AggregationTypes.SUM;

        [Bindable]
        private var functionExplanation:String;

        [Bindable]
        private var functionSignature:String;

        private function onFunctionClick(event:ListEvent):void {
            var xml:XML = event.currentTarget.selectedItem;
            if (xml != null) {
                var name:String = String(xml.name());
                if (name == "function") {
                    analysisService.explain.send(String(xml.@label));
                }
            }
        }

        private function explained():void {
            var explanation:FunctionExplanation = analysisService.explain.lastResult as FunctionExplanation;
            functionExplanation = explanation.description;
            functionSignature = explanation.signature;
        }

		]]>
	</mx:Script>
    <mx:RemoteObject destination="analysisDefinition" id="analysisService">
        <mx:method name="validateCalculation" result="validatedCalculation()"/>
        <mx:method name="explain" result="explained()"/>
    </mx:RemoteObject>
    <mx:HBox width="100%" height="100%">
        <mx:VBox horizontalAlign="center">
            <mx:Label text="Available Functions" fontFamily="Tahoma" fontWeight="bold"/>
            <mx:Tree labelField="@label" width="300" itemClick="onFunctionClick(event)">
                <mx:XMLListCollection>
                    <mx:XMLList>
                        <group label="Math">
                            <function label="abs"/>
                            <function label="acos"/>
                            <function label="asin"/>
                            <function label="atan"/>
                            <function label="ceil"/>
                            <function label="cos"/>
                            <function label="floor"/>
                            <function label="ln"/>
                            <function label="sin"/>
                            <function label="sqrt"/>
                            <function label="tan"/>
                        </group>
                        <group label="Data Type">
                            <function label="castsum"/>
                            <function label="castaverage"/>
                            <function label="castmax"/>
                            <function label="castmin"/>
                            <function label="castcount"/>
                            <function label="castmedian"/>
                            <function label="castvariance"/>
                        </group>
                        <group label="Dates">
                            <function label="now"/>
                        </group>
                        <group label="Text">
                            <function label="bracketvalue"/>
                            <function label="upper"/>
                            <function label="lower"/>
                        </group>
                    </mx:XMLList>
                </mx:XMLListCollection>
            </mx:Tree>
            <mx:VBox borderStyle="inset" borderThickness="1" backgroundColor="#FFFFFF" visible="{functionSignature != null}">
                <mx:Label text="{functionSignature}"/>
                <mx:TextArea text="{functionExplanation}" borderStyle="none" backgroundAlpha="0" editable="false"
                             selectable="true"
                             width="300" height="80"/>
            </mx:VBox>
        </mx:VBox>
        <mx:Form paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
            <mx:FormItem label="Name: " direction="horizontal" width="100%">
                <mx:TextInput id="nameInput" width="100%" text="{calcName}"/>
            </mx:FormItem>
            <mx:FormItem label="Calculation: " direction="horizontal" width="100%">
                <schedule:CursorTextArea id="calculationInput" dragEnter="dragEnterHandler(event)"
                                         dragDrop="dragDropHandler(event)"
                                         width="400" height="200"
                                         text="{calcText}" borderStyle="solid" borderThickness="1"/>
            </mx:FormItem>
            <mx:FormItem label="Formatting: " visible="{showMeasures}">
                <formatter:FormattingSetup id="formattingSetup" formattingConfiguration="{formattingConfiguration}"/>
            </mx:FormItem>
            <mx:FormItem label="Row Level: " visible="{showMeasures}" direction="horizontal">
                <mx:CheckBox id="rowLevelCheckbox" selected="{applyBefore}"/>
            </mx:FormItem>
            <mx:FormItem label="Aggregation: " visible="{applyBefore}" direction="horizontal">
                <util:SmartComboBox id="measureAggregationBox" rowCount="8" selectedProperty="value" selectedValue="{aggregation}">
                    <util:dataProvider>
                        <mx:Array>
                            <mx:Object label="Sum" value="{AggregationTypes.SUM}"/>
                            <mx:Object label="Average" value="{AggregationTypes.AVERAGE}"/>
                            <mx:Object label="Min" value="{AggregationTypes.MIN}"/>
                            <mx:Object label="Max" value="{AggregationTypes.MAX}"/>
                            <mx:Object label="Count" value="{AggregationTypes.COUNT}"/>
                            <mx:Object label="Median" value="{AggregationTypes.MEDIAN}"/>
                            <mx:Object label="Variance" value="{AggregationTypes.VARIANCE}"/>
                            <mx:Object label="Ranking" value="{AggregationTypes.RANK}"/>
                        </mx:Array>
                    </util:dataProvider>
                </util:SmartComboBox>
            </mx:FormItem>
        </mx:Form>
    </mx:HBox>
    <mx:StringValidator id="nameValidator" source="{nameInput}" property="text" minLength="3"/>
    <!--<analysis:CalculationValidator id="calcValidator" source="{calculationInput}" property="text" failureMessage="{failureMessage}"/>-->
</mx:Canvas>
