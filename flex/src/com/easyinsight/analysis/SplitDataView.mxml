<?xml version="1.0" encoding="utf-8"?>
<DataView xmlns="com.easyinsight.analysis.*" xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="onCreation()">
	<mx:Metadata>
		[Event(name="analysisDefinitionChange", type="com.easyinsight.analysis.AnalysisDefinitionChangeEvent")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.easyinsight.analysis.charts.ChartTypes;
			import com.easyinsight.filtering.FilterEditEvent;
            import com.easyinsight.util.PopUpUtil;

            import mx.managers.PopUpManager;
			import com.easyinsight.filtering.MultiValueFilterWindow;
			import com.easyinsight.framework.DataService;
			import mx.controls.DataGrid;
			import mx.controls.AdvancedDataGrid;
			import mx.collections.ArrayCollection;
			import com.easyinsight.filtering.FilterValueDefinition;
			import mx.managers.DragManager;
			import mx.events.DragEvent;
			import com.easyinsight.map.ILogMapView;
			import com.easyinsight.map.YahooMapView;
			
			private var sourceDataView:DataView;
			private var targetDataView:DataView;
			
			private var joinItem:AnalysisItem;
			private var filterValueDefinition:FilterValueDefinition;
			
			[Bindable]
            [Embed(source="../../../../assets/bullet_square_green.png")]
            private var maximizeIcon:Class;

            [Bindable]
            [Embed(source="../../../../assets/pencil.png")]
            private var editIcon:Class;
			
			private function onCreation():void {
				filterValueDefinition = new FilterValueDefinition();
				filterValueDefinition.filteredValues = new ArrayCollection();
				filterValueDefinition.inclusive = true;
			}
			
			private function sourceStateChange(event:AnalysisStateChangeEvent):void {
				if (sourceDataView != null) {
					sourceBox.removeChild(sourceDataView);
				}
				var dataView:DataView = createDataView(event.newState);										
				dataView.availableFields = availableFields;
                // converting the analysis definition
                
                dataView.analysisDefinition = sourceDefinition;
                
                
                this.sourceDataView = dataView;
                sourceBox.addChild(this.sourceDataView);
                var splitDefinition:SplitDefinition = getAnalysisDefinition() as SplitDefinition;
                var sourceDefinition:AnalysisDefinition = dataView.fromExistingDefinition(splitDefinition.sourceDefinition);
                dataView.initializeToDefinition();
                
                dataView.subState = event.subState;                
			}
			
			override public function requestData():void {
				sourceDataView.analysisDefinition.filterDefinitions = this.analysisDefinition.filterDefinitions;
				sourceDataView.analysisDefinition.dataScrubs = this.analysisDefinition.dataScrubs;
				sourceDataView.requestData();
				var targetFilters:ArrayCollection = this.analysisDefinition.filterDefinitions == null ? new ArrayCollection() : 
            		new ArrayCollection(this.analysisDefinition.filterDefinitions.toArray());
				if (this.filterValueDefinition.field != null) {
					targetFilters.addItem(this.filterValueDefinition);
				}				
				targetDataView.analysisDefinition.filterDefinitions = targetFilters;
				targetDataView.analysisDefinition.dataScrubs = this.analysisDefinition.dataScrubs;
				targetDataView.requestData();
			}
			
			private function targetStateChange(event:AnalysisStateChangeEvent):void {
				if (targetDataView != null) {
					targetBox.removeChild(targetDataView);
				}
				var dataView:DataView = createDataView(event.newState);													
				dataView.availableFields = availableFields;
                // converting the analysis definition
                var splitDefinition:SplitDefinition = getAnalysisDefinition() as SplitDefinition;                                            
                
                this.targetDataView = dataView;
                targetBox.addChild(this.targetDataView);
                var targetDefinition:AnalysisDefinition = dataView.fromExistingDefinition(splitDefinition.targetDefinition);
                targetDefinition.filterDefinitions = new ArrayCollection([ filterValueDefinition ]);                
                dataView.analysisDefinition = targetDefinition;
                dataView.initializeToDefinition();
                dataView.subState = event.subState;                
			}
			
			private function targetEnterHandler(event:DragEvent):void {
            	if (event.dragInitiator is AdvancedDataGrid) {	               
	                var target:VBox = VBox(event.currentTarget);	                
	                DragManager.acceptDragDrop(target);
	            }
            }

            private function targetDropHandler(event:DragEvent):void {             	           
                var target:VBox = VBox(event.currentTarget);
                var initialList:AdvancedDataGrid = AdvancedDataGrid(event.dragInitiator);
                var selectedObjects:Array = initialList.selectedCells;
                for (var i:int = 0; i < selectedObjects.length; i++) {
                    var selectedObject:Object = selectedObjects[i];
                    var filterKey:String = joinItem.qualifiedName();
                    var data:Object = initialList.dataProvider[selectedObject.rowIndex];
                	var filterValue:String = data[filterKey];
                	filterValueDefinition.filteredValues.addItem(filterValue);
                }
                targetDataView.requestData();                                
            }
            
            private function onJoinDragEnter(event:DragEvent):void {
            	if (event.dragInitiator is DataGrid) {
            		var target:Label = Label(event.currentTarget);	                
	                DragManager.acceptDragDrop(target);	
            	}	
            }
            
            private function onJoinDragDrop(event:DragEvent):void {
            	if (filterValueDefinition.field == null) {
            		sourceDataView.draggable = true;
            	} 
            	var initialGrid:DataGrid = DataGrid(event.dragInitiator);
            	var analysisItemWrapper:AnalysisItemWrapper = initialGrid.selectedItem as AnalysisItemWrapper;
            	this.joinItem = analysisItemWrapper.analysisItem;
            	filterValueDefinition.field = analysisItemWrapper.analysisItem;
            	var targetFilters:ArrayCollection = this.analysisDefinition.filterDefinitions == null ? new ArrayCollection() : 
            		new ArrayCollection(this.analysisDefinition.filterDefinitions.toArray());
				if (this.filterValueDefinition.field != null) {
					targetFilters.addItem(this.filterValueDefinition);
				}				
            	targetDataView.analysisDefinition.filterDefinitions = targetFilters;
            	var target:Label = Label(event.currentTarget);
            	target.text = analysisItemWrapper.analysisItem.display;
            }
			
			private function createDataViewFromDef(analysisDefinition:AnalysisDefinition):DataView {
				var dataView:DataView;
				if (analysisDefinition.getDataFeedType() == "Crosstab") {    
                    dataView = new CrosstabView();
                } else if (analysisDefinition.getDataFeedType() == "List") {
                    dataView = new ListView();
                } else if (analysisDefinition.getDataFeedType() == "Chart") {
                    dataView = new BasicChartView();
                } else if (analysisDefinition.getDataFeedType() == "Map") {
                	dataView = new ILogMapView();                    	
                } else if (analysisDefinition.getDataFeedType() == "Yahoo Map") {
                	dataView = new YahooMapView();
                }
                var dataService:DataService = new DataService();
                dataService.dataFeedID = this.dataService.dataFeedID;
                dataView.dataService = dataService;
                return dataView;
			}	
			
			private function createDataView(state:String):DataView {
				var dataView:DataView;
				if (state == "") {                    
                    dataView = new ListView();
                } else if (state == "BasicChart") {                    
                    dataView = new BasicChartView();
                } else if (state == "Crosstab") {                    
                    dataView = new CrosstabView();
                } else if (state == "YahooMap") {					
                    dataView = new YahooMapView();                	
                } else if (state == "ILogMap") {                	
                	dataView = new ILogMapView();
                }
                var dataService:DataService = new DataService();
                dataService.dataFeedID = this.dataService.dataFeedID;
                dataView.dataService = dataService;
                return dataView;		
			}
			
			override public function initializeToDefinition():void {
				if (sourceDataView != null) {
					sourceBox.removeChild(sourceDataView);
				}
				if (targetDataView != null) {
					targetBox.removeChild(targetDataView);
				}
				
				var splitDefinition:SplitDefinition = getAnalysisDefinition() as SplitDefinition;
				var sourceView:DataView = createDataViewFromDef(splitDefinition.sourceDefinition);
				sourceView.availableFields = availableFields;                                
                var sourceDefinition:AnalysisDefinition = sourceView.fromExistingDefinition(splitDefinition.sourceDefinition);
                sourceView.analysisDefinition = sourceDefinition;
                
                //sourceView.subState = event.subState;
                this.sourceDataView = sourceView;
                sourceBox.addChild(this.sourceDataView);
                sourceView.initializeToDefinition(); 
				var targetView:DataView = createDataViewFromDef(splitDefinition.targetDefinition);
				targetView.availableFields = availableFields;
                var targetDefinition:AnalysisDefinition = targetView.fromExistingDefinition(splitDefinition.targetDefinition);
                //targetDefinition.filterDefinitions = new ArrayCollection([ filterValueDefinition ]);
                targetView.analysisDefinition = targetDefinition;
                                
                //targetView.subState = event.subState;
                this.targetDataView = targetView;
                targetBox.addChild(this.targetDataView);
                targetView.initializeToDefinition(); 
			}
			
			override public function search(keyword:String):void {
				sourceDataView.search(keyword);
			}
			
			override protected function fromSplitDefinition(splitDefinition:SplitDefinition):AnalysisDefinition {
				return splitDefinition;
			}
			
			override protected function fromListDefinition(listDefinition:ListDefinition):AnalysisDefinition {
				var splitDefinition:SplitDefinition = new SplitDefinition();
				splitDefinition.sourceDefinition = listDefinition;
				splitDefinition.targetDefinition = createTargetDefinition();
				return splitDefinition;
            }
            
            private function createTargetDefinition():AnalysisDefinition {
            	var targetDefinition:ChartDefinition = new ChartDefinition();
            	targetDefinition.chartFamily = ChartTypes.COLUMN_FAMILY;
            	targetDefinition.dataFeedID = dataService.dataFeedID;
            	return targetDefinition;
            }
            
            private function createSourceDefinition():AnalysisDefinition {
            	var sourceDefinition:ListDefinition = new ListDefinition();
            	sourceDefinition.dataFeedID = dataService.dataFeedID;
            	return sourceDefinition;
            }

            override protected function fromGraphicDefinition(graphicDefinition:GraphicDefinition):AnalysisDefinition {
                var splitDefinition:SplitDefinition = new SplitDefinition();
				splitDefinition.sourceDefinition = createSourceDefinition();
				splitDefinition.targetDefinition = graphicDefinition;
				return splitDefinition;
            }
            
            override protected function fromMapDefinition(graphicDefinition:MapDefinition):AnalysisDefinition {
                var splitDefinition:SplitDefinition = new SplitDefinition();
				splitDefinition.sourceDefinition = createSourceDefinition();
				splitDefinition.targetDefinition = graphicDefinition;
				return splitDefinition;
            }
            
            override protected function fromYahooMapDefinition(graphicDefinition:YahooMapDefinition):AnalysisDefinition {
                var splitDefinition:SplitDefinition = new SplitDefinition();
				splitDefinition.sourceDefinition = createSourceDefinition();
				splitDefinition.targetDefinition = graphicDefinition;
				return splitDefinition;
            }
            
            private function maximizeSource():void {
				var splitDefinition:SplitDefinition = getAnalysisDefinition() as SplitDefinition;
				dispatchEvent(new AnalysisDefinitionChangeEvent(splitDefinition.sourceDefinition));            		
            }
            
            private function maximizeTarget():void {
            	var splitDefinition:SplitDefinition = getAnalysisDefinition() as SplitDefinition;
            	dispatchEvent(new AnalysisDefinitionChangeEvent(splitDefinition.targetDefinition));
            }
            
            private function editJoin():void {
            	var window:MultiValueFilterWindow = new MultiValueFilterWindow();
            	window.feedID = dataService.dataFeedID;
            	window.filterValueDefinition = this.filterValueDefinition;
            	window.addEventListener(FilterEditEvent.FILTER_EDIT, onFilterEdit);
            	PopUpManager.addPopUp(window, this, true);
            	PopUpUtil.centerPopUp(window);
            }
            
            private function onFilterEdit(event:FilterEditEvent):void {
            	this.filterValueDefinition = event.filterDefinition as FilterValueDefinition;
            	targetDataView.requestData();
            }
            
            protected function dragOverHandler(event:DragEvent):void {
				DragManager.showFeedback(DragManager.MOVE);				
			}
		]]>
	</mx:Script>
	<mx:VDividedBox height="100%" width="100%">
		<mx:VBox id="sourceBox" height="50%" width="100%">
			<mx:HBox width="100%">
				<AnalysisStatePopupButton analysisStateChange="sourceStateChange(event)" id="sourceState" mode="splitSource"/>
				<mx:HBox width="100%" horizontalAlign="right">
					<mx:Button icon="{maximizeIcon}" toolTip="Maximize" click="maximizeSource()"/>	
				</mx:HBox>				
			</mx:HBox>					
		</mx:VBox>
		<mx:VBox id="targetBox" height="50%" width="100%" dragEnter="targetEnterHandler(event)" dragDrop="targetDropHandler(event)"
			dragOver="dragOverHandler(event)">
			<mx:ApplicationControlBar width="100%">
				<mx:Label text="Filter by this Field: " fontSize="14"/>
				<mx:Box borderThickness="1" borderStyle="inset">
					<mx:Label text="Drop Filter Field Here" dragEnter="onJoinDragEnter(event)" dragDrop="onJoinDragDrop(event)"
						dragOver="dragOverHandler(event)" fontSize="14"/>	
				</mx:Box>				
				<mx:Button icon="{editIcon}" toolTip="Edit" click="editJoin()"/>
				<mx:Spacer width="50"/>
				<mx:Label text="Drag Rows From the List Above into the Pane Below" fontSize="14"/>				
			</mx:ApplicationControlBar>
			<mx:HBox width="100%">
				<AnalysisStatePopupButton analysisStateChange="targetStateChange(event)" id="targetState" mode="splitTarget"/>
				<mx:HBox width="100%" horizontalAlign="right">
					<mx:Button icon="{maximizeIcon}" toolTip="Maximize" click="maximizeTarget()"/>	
				</mx:HBox>							
			</mx:HBox>										
		</mx:VBox>		
	</mx:VDividedBox>
</DataView>
