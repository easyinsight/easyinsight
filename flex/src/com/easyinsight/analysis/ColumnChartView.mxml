<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:analysis="com.easyinsight.analysis.*"
        xmlns:charts="com.easyinsight.analysis.charts.*" implements="com.easyinsight.analysis.IReportRenderer">

    <mx:Script><![CDATA[
        import mx.collections.ArrayCollection;
        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;

        [Bindable]
        private var limitText:String;
        [Bindable]
        private var limitTextVisible:Boolean = false;

        [Bindable]
        private var graphData:ArrayCollection = new ArrayCollection();

        private var masterDataSet:ArrayCollection = new ArrayCollection();

        override public function requestData():void {
            requestPivotTable(null);
        }


        override protected function newDefinition():AnalysisDefinition {
            return new ColumnChartDefinition();
        }

        private function requestPivotTable(event:AnalysisItemUpdateEvent):void {

            if (xAxisDropArea.getListColumns().length > 0 && yAxisDropArea.getListColumns() > 0 &&
                measureDropArea.getListColumns().length > 0) {

                var chartDefinition:ColumnChartDefinition = getAnalysisDefinition() as ColumnChartDefinition;

                chartDefinition.xAxis = xAxisDropArea.getListColumns().getItemAt(0);
                chartDefinition.yAxis = yAxisDropArea.getListColumns().getItemAt(0);
                chartDefinition.measure = measureDropArea.getListColumns().getItemAt(0);

                dataService.getListData(chartDefinition, this, processListResults);
            } else {
                graphData = new ArrayCollection();
                masterDataSet = new ArrayCollection();
            }
        }

        private function processListResults(listRowData:ListDataResults):void {
            var limited:Boolean = listRowData.limitedResults;
            if (limited) {
                //limitText = chartAdapterOption.createLimitLabel(listRowData.limitResults, listRowData.maxResults);
                limitTextVisible = true;
            } else {
                limitTextVisible = false;
                limitText = "";
            }
            var headers:ArrayCollection = new ArrayCollection(listRowData.headers);
            var rows:ArrayCollection = new ArrayCollection(listRowData.rows);
            graphData = new ArrayCollection();
            for (var i:int = 0; i < rows.length; i++) {
                var row:Object = rows.getItemAt(i);
                var values:Array = row.values as Array;
                var endObject:Object = new Object();
                for (var j:int = 0; j < headers.length; j++) {
                    var headerDimension:AnalysisItem = headers[j];
                    var value:Value = values[j];
                    endObject[headerDimension.key.createString()] = value.getValue();
                }
                graphData.addItem(endObject);
            }
            var sort:Sort = new Sort();
            var chartDefinition:ColumnChartDefinition = getAnalysisDefinition() as ColumnChartDefinition;
            sort.fields = [ new SortField(chartDefinition.xAxis.key.createString(), true)];
            graphData.sort = sort;
            graphData.refresh();
            masterDataSet = graphData;
            chartAdaptor.onChange(graphData, chartDefinition);
        }


        private function onChartSort(event:ChartSortEvent):void {
            /*if (event.sortState == ChartSortButton.ASCENDING ||
             event.sortState == ChartSortButton.DESCENDING) {
             var dimensions:Array = dimensionDropArea.getListColumns();
             var measures:Array = measureDropArea.getListColumns();
             var sort:Sort = new Sort();
             sort.fields = [ new SortField(event.analysisItem.key.createString(), false,
             event.sortState == ChartSortButton.DESCENDING) ];
             graphData.sort = sort;
             graphData.refresh();
             masterDataSet = graphData;
             //chartAdaptor.dataChange(graphData, dimensions, measures);
             }*/
        }

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object):void {
        }]]></mx:Script>

    <mx:VBox width="100%" height="100%" id="coreBox">

		<mx:HBox width="100%" visible="{showDropAreas}" id="dropAreas" verticalAlign="middle">

<!--
			<mx:Button toolTip="Chart Details..." click="configureChart()" icon="@Embed(source='../../../../assets/table_edit.png')"/>
-->
			<analysis:ListDropAreaGrouping id="xAxisDropArea" borderStyle="solid" borderThickness="1" maxElements="1"
				dropAreaType="com.easyinsight.analysis.DimensionDropArea" analysisItems="{availableFields}"/>

            <analysis:ListDropAreaGrouping id="yAxisDropArea" borderStyle="solid" borderThickness="1"
				dropAreaType="com.easyinsight.analysis.DimensionDropArea" analysisItems="{availableFields}" maxElements="1"/>

			<analysis:ListDropAreaGrouping id="measureDropArea" borderStyle="solid" borderThickness="1"  maxElements="1"
				dropAreaType="com.easyinsight.analysis.MeasureDropArea" analysisItems="{availableFields}"/>
			<mx:Spacer width="30"/>
			<mx:Label color="#000000" text="{limitText}" visible="{limitTextVisible}"/>
		</mx:HBox>
        <mx:VBox id="chartVBox" width="100%" height="100%">
            <charts:ColumnChartAdapter id="chartAdaptor"/>
        </mx:VBox>
	</mx:VBox>
</mx:Module>