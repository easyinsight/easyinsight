<?xml version="1.0" encoding="utf-8"?>
<analysis:DataView xmlns:analysis="com.easyinsight.analysis.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%" creationComplete="initHandlers()">
	<mx:Script>
		<![CDATA[
            import mx.controls.AdvancedDataGrid;
			import mx.controls.DataGrid;
			import com.easyinsight.filtering.FilterRawData;
			import mx.managers.PopUpManager;
            import mx.events.IndexChangedEvent;
            import mx.collections.Sort;
            import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
            import mx.collections.ArrayCollection;
            import mx.events.DragEvent;
            import mx.managers.DragManager;

            [Bindable]
            private var myDataSet:ArrayCollection = new ArrayCollection();
            private var masterDataSet:ArrayCollection = new ArrayCollection();
            private var columnMap:Object = new Object();

            [Bindable]
            private var listContextMenu:ContextMenu;
            
            private var hasDropAreas:Boolean = true;
            
            [Bindable]
            [Embed(source="../../../../assets/table_edit.png")]
            public var tableEditIcon:Class;

            override protected function fromListDefinition(listDefinition:ListDefinition):AnalysisDefinition {
                return listDefinition;
            }

            override protected function fromGraphicDefinition(graphicDefinition:GraphicDefinition):AnalysisDefinition {
                var listDefinition:ListDefinition = new ListDefinition();
                var columns:ArrayCollection = new ArrayCollection();
                for (var i:int = 0; i < graphicDefinition.dimensions.length; i++) {
                    columns.addItem(graphicDefinition.dimensions[i]);
                }
                for (i = 0; i < graphicDefinition.measures.length; i++) {
                    columns.addItem(graphicDefinition.measures[i]);
                }
                listDefinition.columns = columns;
                listDropAreas.reset(-1);
                return listDefinition;
            }
            
            override protected function fromMapDefinition(graphicDefinition:MapDefinition):AnalysisDefinition {
                var listDefinition:ListDefinition = new ListDefinition();
                var columns:ArrayCollection = new ArrayCollection();
                for (var i:int = 0; i < graphicDefinition.dimensions.length; i++) {
                    columns.addItem(graphicDefinition.dimensions[i]);
                }
                for (i = 0; i < graphicDefinition.measures.length; i++) {
                    columns.addItem(graphicDefinition.measures[i]);
                }
                listDefinition.columns = columns;
                listDropAreas.reset(-1);
                return listDefinition;
            }
            
            override protected function fromYahooMapDefinition(graphicDefinition:YahooMapDefinition):AnalysisDefinition {
                var listDefinition:ListDefinition = new ListDefinition();
                var columns:ArrayCollection = new ArrayCollection();
                for (var i:int = 0; i < graphicDefinition.dimensions.length; i++) {
                    columns.addItem(graphicDefinition.dimensions[i]);
                }
                for (i = 0; i < graphicDefinition.measures.length; i++) {
                    columns.addItem(graphicDefinition.measures[i]);
                }
                listDefinition.columns = columns;
                listDropAreas.reset(-1);
                return listDefinition;
            }

            private function initHandlers():void {
                listDropAreas.addEventListener(AnalysisItemUpdateEvent.ANALYSIS_LIST_UPDATE, requestListData);
                var drilldownContextItem:ContextMenuItem = new ContextMenuItem("Drilldown", true);
                drilldownContextItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, drilldown);
                var copyContextItem:ContextMenuItem = new ContextMenuItem("Copy Cell", true);
                copyContextItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, copySelected);
                var includeContextItem:ContextMenuItem = new ContextMenuItem("Filter to Data", true);
                includeContextItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, filterSelectedInclude);
                var excludeContextItem:ContextMenuItem = new ContextMenuItem("Exclude Data", true);
                excludeContextItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, filterSelectedExclude);
                //dataSet.addEventListener(KeyboardEvent.KEY_UP, keyboardHandler);
                contextMenu = new ContextMenu();
                contextMenu.hideBuiltInItems();
                contextMenu.customItems = [ drilldownContextItem, copyContextItem, includeContextItem, excludeContextItem ];
            }

            private function drilldown(event:ContextMenuEvent):void {
                if (lastRollOverRowIndex > -1 && lastRollOverColumnIndex > -1) {
                    var data:Object = dataSet.dataProvider[lastRollOverRowIndex];
                    var dataField:String = dataSet.columns[lastRollOverColumnIndex].dataField;
                    listDropAreas.drilldown(dataField);
                    var dataString:String = data[dataField];
                    var filterRawData:FilterRawData = new FilterRawData();
                    var analysisItem:AnalysisItem = columnMap[dataField];
                    filterRawData.addPair(analysisItem, dataString);
                    dispatchEvent(new ChildFilterCreationEvent(ChildFilterCreationEvent.CHILD_FILTER_INCLUDE, filterRawData));
                }
            }

            private function filterSelectedInclude(event:ContextMenuEvent):void {
                if (lastRollOverRowIndex > -1 && lastRollOverColumnIndex > -1) {
                    var data:Object = dataSet.dataProvider[lastRollOverRowIndex];
                    var dataField:String = dataSet.columns[lastRollOverColumnIndex].dataField;
                    var dataString:String = data[dataField];
                    var filterRawData:FilterRawData = new FilterRawData();
                    var analysisItem:AnalysisItem = columnMap[dataField];
                    filterRawData.addPair(analysisItem, dataString);
                    dispatchEvent(new ChildFilterCreationEvent(ChildFilterCreationEvent.CHILD_FILTER_INCLUDE, filterRawData));
                }
            }

            private function filterSelectedExclude(event:ContextMenuEvent):void {
                if (lastRollOverRowIndex > -1 && lastRollOverColumnIndex > -1) {
                    var data:Object = dataSet.dataProvider[lastRollOverRowIndex];
                    var dataField:String = dataSet.columns[lastRollOverColumnIndex].dataField;
                    var dataString:String = data[dataField];
                    var filterRawData:FilterRawData = new FilterRawData();
                    var analysisItem:AnalysisItem = columnMap[dataField];
                    filterRawData.addPair(analysisItem, dataString);
                    dispatchEvent(new ChildFilterCreationEvent(ChildFilterCreationEvent.CHILD_FILTER_EXCLUDE, filterRawData));
                }
            }

            private function copySelected(event:ContextMenuEvent):void {
                if (lastRollOverRowIndex > -1 && lastRollOverColumnIndex > -1) {
                    var data:Object = dataSet.dataProvider[lastRollOverRowIndex];
                    var dataField:String = dataSet.columns[lastRollOverColumnIndex].dataField;
                    var dataString:String = data[dataField];
                    System.setClipboard(dataString);
                }
            }

            private function keyboardHandler(event:KeyboardEvent):void {
                if (event.ctrlKey && event.keyCode == 67) {
                    var selectedObjects:Array = dataSet.selectedCells;
                    if (selectedObjects.length > 0) {
                        var selectionString:String = "";
                        for (var i:int = 0; i < selectedObjects.length; i++) {
                            var selectedObject:Object = selectedObjects[i];
                            var data:Object = dataSet.dataProvider[selectedObject.rowIndex];
                            var dataField:String = dataSet.columns[selectedObject.columnIndex].dataField;

                            var dataString:String = data[dataField];
                            selectionString = selectionString + dataString;
                            if (i < selectedObjects.length - 1) {
                                selectionString += ",";
                            }
                            System.setClipboard(selectionString);
                        }
                    }
                }
            }

            override protected function fromCrosstabDefinition(crosstabDefinition:CrosstabDefinition):AnalysisDefinition {
                var listDefinition:ListDefinition = new ListDefinition();
                var columns:ArrayCollection = new ArrayCollection();
                if (crosstabDefinition.columns != null) {
                    for (var columnIndex:int = 0; columnIndex < crosstabDefinition.columns.length; columnIndex++) {
                        columns.addItem(crosstabDefinition.columns[columnIndex]);
                    }
                }
                if (crosstabDefinition.rows != null) {
                    for (var rowIndex:int = 0; rowIndex < crosstabDefinition.rows.length; rowIndex++) {
                        columns.addItem(crosstabDefinition.rows[rowIndex]);
                    }
                }
                if (crosstabDefinition.measures != null) {
                    for (var measureIndex:int = 0; measureIndex < crosstabDefinition.measures.length; measureIndex++) {
                        columns.addItem(crosstabDefinition.measures[measureIndex]);
                    }
                }
                listDefinition.columns = columns;
                return listDefinition;
            }

            override public function createNewDefinition():AnalysisDefinition {
                var analysisDefinition:ListDefinition = new ListDefinition();
                analysisDefinition.name = "New Analysis";
                return analysisDefinition;
            }

            override public function initializeToDefinition():void {
            	if (!showDropAreas && hasDropAreas) {
                	hasDropAreas = false;
                    coreVBox.removeChild(dropAreas);
                }
                var listDefinition:ListDefinition = getAnalysisDefinition() as ListDefinition;
                listDropAreas.reset(-1);
                var columns:ArrayCollection = listDefinition.columns;
                if (columns != null) {
                    for (var i:int = 0; i < columns.length; i++) {
                        var column:AnalysisItem = columns.getItemAt(i) as AnalysisItem;
                        listDropAreas.addAnalysisItem(column);
                    }
                }
                requestListData(null);
            }

            override public function requestData():void {
                requestListData(null);
            }

            private function requestListData(event:AnalysisItemUpdateEvent):void {
            	dataSet.selectionMode = "none";
                var myColumnList:Array = listDropAreas.getListColumns();
                var listDefinition:ListDefinition = getAnalysisDefinition() as ListDefinition;
                listDefinition.columns = new ArrayCollection(myColumnList);
                if (myColumnList.length > 0) {

                    dataService.getListData(listDefinition, this, processListResults);
                } else {
                    myDataSet = new ArrayCollection();
                    masterDataSet = new ArrayCollection();
                    dataSet.columns = new Array();
                }
            }

            private function dragEnterHandler(event:DragEvent):void {
            	if (event.dragInitiator is DataGrid) {
	                var initialList:DataGrid = DataGrid(event.dragInitiator);
	                var selectedObject:AnalysisItemWrapper = AnalysisItemWrapper(initialList.selectedItem);
	                var targetGrid:AdvancedDataGrid = AdvancedDataGrid(event.currentTarget);
	                dataSet.setStyle("borderThickness", 1);
					dataSet.setStyle("borderStyle", "solid");
					dataSet.setStyle("borderColor", "green");
	                DragManager.acceptDragDrop(targetGrid);
	            }
            }

            private function dragDropHandler(event:DragEvent):void {
            	dataSet.setStyle("borderStyle", "inset");
            	dataSet.setStyle("borderColor", 0xB7BABC);
                var targetGrid:AdvancedDataGrid = AdvancedDataGrid(event.currentTarget);
                var initialList:DataGrid = DataGrid(event.dragInitiator);
                var selectedObject:AnalysisItemWrapper = AnalysisItemWrapper(initialList.selectedItem);
                //listDropAreas.addAnalysisItem(selectedObject);
                listDropAreas.newAnalysisItem(selectedObject.analysisItem);
                //requestListData(null);
            }
            
            protected function dragOverHandler(event:DragEvent):void {
				DragManager.showFeedback(DragManager.MOVE);				
			}
			
			protected function dragExitHandler(event:DragEvent):void {
				dataSet.setStyle("borderStyle", "inset");
				dataSet.setStyle("borderColor", 0xB7BABC);	
			}

            override public function search(keyword:String):void {
                var sort:Sort = myDataSet.sort;
                var listColumns:Array = listDropAreas.getListColumns();
                var newDataSet:ArrayCollection = new ArrayCollection();
                for (var i:int = 0; i < masterDataSet.length; i++) {
                    var object:Object = masterDataSet.getItemAt(i);
                    for (var j:int = 0; j < listColumns.length; j++) {
                        var analysisItem:AnalysisItem = listColumns[j] as AnalysisItem;
                        var value:Object = object[analysisItem.qualifiedName()];
                        if (value != null && value is String) {                                	
                        	var stringForm:String = value as String;                                
                            if (stringForm.toLowerCase().indexOf(keyword) > -1) {
                                newDataSet.addItem(object);
                                break;
                            }	                                	                                
                        }
                    }
                }
                myDataSet = newDataSet;
                myDataSet.sort = sort;
                myDataSet.refresh();
            }

            override public function createFilterRawData():FilterRawData {
                var filterRawData:FilterRawData = new FilterRawData();
                var selectedObjects:Array = dataSet.selectedCells;
                for (var i:int = 0; i < selectedObjects.length; i++) {
                    var selectedObject:Object = selectedObjects[i];
                    var data:Object = dataSet.dataProvider[selectedObject.rowIndex];
                    var dataField:String = dataSet.columns[selectedObject.columnIndex].dataField;

                    var dataString:String = data[dataField];

                    var analysisItem:AnalysisItem = columnMap[dataField];
                    filterRawData.addPair(analysisItem, dataString);
                }                        

                //dataSet.selectionMode = "MULTIPLE_CELLS";                
                return filterRawData;
            }

            public function determineSelectedData():void {
                var selectedObjects:Array = dataSet.selectedCells;
                for (var i:int = 0; i < selectedObjects.length; i++) {
                    var selectedObject:Object = selectedObjects[i];
                    var data:Object = dataSet.dataProvider[selectedObject.rowIndex];
                    var dataField:String = dataSet.columns[selectedObject.columnIndex].dataField;
                    var dataString:String = data[dataField];
                }
            }

            private function processListResults(listRowData:ListDataResults):void {
                var sort:Sort = myDataSet.sort;
                myDataSet = new ArrayCollection()
                var headers:ArrayCollection = new ArrayCollection(listRowData.headers as Array);                            
                var rowData:ArrayCollection = new ArrayCollection(listRowData.rows as Array);
                var clientProcessorMap:Object = new Object();
                for each (var analysisItem:AnalysisItem in headers) {                            	
                	clientProcessorMap[analysisItem.qualifiedName()] = analysisItem.createClientRenderer();
                }
                for (var j:int = 0; j < rowData.length; j++) {
                    var dataRowObject:Object = rowData.getItemAt(j);
                    var rows:ArrayCollection = new ArrayCollection(dataRowObject.values as Array);
                    //var rowHeader:String = dataRowObject.rowHeader;
                    var myRow:ArrayCollection = new ArrayCollection();
                    var element:Object = new Object();
                    //element.Data = rowHeader;
                    for (var i:int = 0; i < headers.length; i++) {
                        var cell:Value = rows.getItemAt(i) as Value;
                        var header:AnalysisItem = headers.getItemAt(i) as AnalysisItem;
                        if (cell != null) {
                        	var value:Object = cell.getValue();
                        	var key:String = header.qualifiedName();
                        	element[key] = value;
                        	clientProcessorMap[key].addValue(value);
                        }
                    }
                    myDataSet.addItem(element);
                }
                myDataSet.sort = sort;
                myDataSet.refresh();
                masterDataSet = new ArrayCollection(myDataSet.toArray());
                var columns:Array = new Array();
                var initColumn:int = 0;
                var def:ListDefinition = getAnalysisDefinition() as ListDefinition;
                if (def.showLineNumbers) {
	                var lineNumberColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
	                lineNumberColumn.width = 30;   
	                lineNumberColumn.sortable = false;                               
	                lineNumberColumn.labelFunction = rowNumber;
	                columns[0] = lineNumberColumn;
	                initColumn++;
	            }
	            var newColumns:int = 0;
	            for each (var newHeader:AnalysisItem in def.columns) {
	            	var exists:Boolean = false;
	            	var qualifiedName:String = newHeader.qualifiedName();
	            	for each (var existingColumn:AdvancedDataGridColumn in dataSet.columns) {
	            		if (existingColumn.dataField == qualifiedName) {
	            			exists = true;
	            			break;
	            		}
	            	}
	            	if (!exists) {
	            		newColumns++;
	            	}
	            }
	            var gridWidth:int = dataSet.width;
	            var modifier:int = gridWidth / def.columns.length / def.columns.length * newColumns;
	            var widthMap:Object = new Object();
	            for each (var column:AdvancedDataGridColumn in dataSet.columns) {
					widthMap[column.dataField] = new String(column.width - modifier);	            		            	
	            }                
                for (var k:int = 0; k < def.columns.length; k++) {                	
                    var myHeader:AnalysisItem = def.columns.getItemAt(k) as AnalysisItem;                    
                    columnMap[myHeader.qualifiedName()] = myHeader;
                    var columnHeaderObject:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                    columnHeaderObject.headerText = myHeader.display;
                    //columnHeaderObject.headerText = "";                            
                    var keyString:String = myHeader.qualifiedName();
                    var existingHeightString:String = widthMap[keyString] as String;
                    if (existingHeightString != null) {
                    	//columnHeaderObject.width = int(existingHeightString);
                    }
                    columnHeaderObject.dataField = keyString;
                    columnHeaderObject.headerRenderer = new ListViewHeaderRendererFactory(myHeader.display);                                
                    var factory:AnalysisCellRendererFactory = new AnalysisCellRendererFactory(keyString, myHeader,
                    	clientProcessorMap[keyString]);
                    columnHeaderObject.itemRenderer = factory;
                    columns[k + initColumn] = columnHeaderObject;
                }
                dataSet.columns = columns;
                if (dataSet.selectionMode == "none") {
                    dataSet.selectionMode = "multipleCells";
                }
            }

            override public function updateExportMetadata():void {
                var def:ListDefinition = getAnalysisDefinition() as ListDefinition;
                for (var k:int = 0; k < def.columns.length; k++) {
                    var myHeader:AnalysisItem = def.columns.getItemAt(k) as AnalysisItem;
                    var column:AdvancedDataGridColumn = dataSet.columns[k];
                    myHeader.width = column.width;
                }
            }

            private function headersShifted(event:IndexChangedEvent):void {
                var keys:Array = [];
                for (var i:int = 0; i < dataSet.columns.length; i++) {
                    var column:AdvancedDataGridColumn = dataSet.columns[i];
                    keys[i] = column.dataField;
                }
                listDropAreas.reorder(keys);
            }
            
            private function listEdit():void {
            	var listWindow:ListDefinitionEditWindow = ListDefinitionEditWindow(PopUpManager.createPopUp(this, ListDefinitionEditWindow, true));
            	listWindow.fields = availableFields;
            	listWindow.listDefinition = getAnalysisDefinition() as ListDefinition;            
            	listWindow.addEventListener(DefinitionMetadataRefreshEvent.METADATA_REFRESH, metadataRefresh);
            	PopUpManager.centerPopUp(listWindow);
            }
            
            private function metadataRefresh(event:DefinitionMetadataRefreshEvent):void {
            	requestData();
            }

            override public function getCoreView():DisplayObject {
            	return dataSet;
            }
            
            private function rowNumber(item:Object, iCol:int):String {
            	var index:int = dataSet.dataProvider.getItemIndex(item) + 1;
            	return String(index);
            }
            
            private function scrub():void {
				var selectedObjects:Array = dataSet.selectedCells;
                for (var i:int = 0; i < selectedObjects.length; i++) {
                    var selectedObject:Object = selectedObjects[i];
                    var data:Object = dataSet.dataProvider[selectedObject.rowIndex];
                    var dataField:String = dataSet.columns[selectedObject.columnIndex].dataField;

                    var dataString:String = data[dataField];

                    var analysisItem:AnalysisItem = columnMap[dataField];
                }            	 
            }
        ]]>
	</mx:Script>
    <mx:Number id="lastRollOverRowIndex" />
    <mx:Number id="lastRollOverColumnIndex" />
	<mx:VBox width="100%" height="100%" id="coreVBox">
		<mx:HBox visible="{showDropAreas}" id="dropAreas" verticalAlign="middle">
			<mx:Button icon="{tableEditIcon}" click="listEdit()" toolTip="List Configuration"/>
			<analysis:ListDropAreaGrouping id="listDropAreas" analysisItems="{availableFields}" 
				dropAreaType="{getDefinitionByName('com.easyinsight.analysis.ListDropArea') as Class}" 
				visible="{showDropAreas}" unlimited="true"/>
		</mx:HBox>		
		<analysis:ListViewGrid id="dataSet" dataProvider="{myDataSet}" width="100%" height="100%" dragEnter="dragEnterHandler(event)"
							dragDrop="dragDropHandler(event)" selectionMode="multipleCells" keyUp="keyboardHandler(event)"
							headerShift="headersShifted(event)" fontSize="12" dragExit="dragExitHandler(event)" dragOver="dragOverHandler(event)"
							dragEnabled="{draggable}" contextMenu="{listContextMenu}" itemRollOver="lastRollOverRowIndex = event.rowIndex; lastRollOverColumnIndex = event.columnIndex"/>
	</mx:VBox>
</analysis:DataView>
