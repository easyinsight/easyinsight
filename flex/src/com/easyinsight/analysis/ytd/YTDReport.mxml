<?xml version="1.0"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:verticalllist="com.easyinsight.analysis.verticallist.*"
           implements="com.easyinsight.analysis.IReportRenderer" verticalScrollPolicy="off" width="100%"
           height="100%">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisMeasure;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.Value;
        import com.easyinsight.analysis.formatter.FormattingConfiguration;
        import com.easyinsight.analysis.list.SizeOverrideEvent;
        import com.easyinsight.analysis.verticallist.VerticalListHeaderRenderer;
        import com.easyinsight.analysis.verticallist.VerticalListRenderer;
        import com.easyinsight.analysis.verticallist.VerticalListRowHeaderRenderer;

        import mx.collections.ArrayCollection;
        import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
        import mx.events.FlexEvent;
        import mx.formatters.Formatter;

        [Bindable]
        private var dataColl:ArrayCollection;

        override protected function measure():void {
         super.measure();
         box.width = this.width;
         box.height = this.height;
         }

        /*override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
         super.updateDisplayList(unscaledWidth, unscaledHeight);
         box.width = unscaledWidth;
         box.height = unscaledHeight;
         }*/

        private function createColumn(field:String):AdvancedDataGridColumn {
            var metrics:TextLineMetrics = dataGrid.measureText(field);
            var intervalColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
            intervalColumn.headerText = field;
            intervalColumn.dataField = field;
            intervalColumn.width = metrics.width + metrics.x + metrics.x + 5;
            var factory:ClassFactory = new ClassFactory(VerticalListRenderer);
            factory.properties = { qualifiedName:field, report: report};
            intervalColumn.itemRenderer = factory;
            intervalColumn.sortable = false;
            var headerFactory:ClassFactory = new ClassFactory(VerticalListHeaderRenderer);
            headerFactory.properties = { headerText:field };
            intervalColumn.headerRenderer = headerFactory;
            return intervalColumn;
        }

        private function applyMeasure(index:int, value:String, columns:ArrayCollection):String {
            var column:AdvancedDataGridColumn = columns.getItemAt(index) as AdvancedDataGridColumn;
            var width:int = column.width;
            var metrics:TextLineMetrics = dataGrid.measureText(value);
            var valueWidth:int = metrics.width + metrics.x + metrics.x;
            if (valueWidth > width) {
                column.width = valueWidth;
            }
            return value;
        }

        private var queuedDataSet:ArrayCollection;
        private var queuedDef:AnalysisDefinition;
        private var queuedMap:Object;
        private var queuedProps:Object;


        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
            if (queuedDataSet != null && unscaledWidth > 0) {
                var dataSet:ArrayCollection = queuedDataSet;
                var def:AnalysisDefinition = queuedDef;
                var map:Object = queuedMap;
                var props:Object = queuedProps;
                queuedDataSet = null;
                queuedDef = null;
                queuedMap = null;
                queuedProps = null;
                renderReport(dataSet, def, map, props)
            }
        }

        private var report:YTDDefinition;

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            if (this.width == 0) {
                queuedDataSet = dataSet;
                queuedDef = analysisDefinition;
                queuedMap = clientProcessorMap;
                queuedProps = additionalProperties;
                return;
            }
            if (dataSet.length == 0) {
                return;
            }
            var vert:YTDDefinition = analysisDefinition as YTDDefinition;
            this.report = vert;
            var dColl:ArrayCollection = new ArrayCollection();
            var columns:ArrayCollection = new ArrayCollection();
            var labelColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
            labelColumn.sortable = false;
            var rowHeaderFactory:ClassFactory = new ClassFactory(VerticalListRowHeaderRenderer);
            rowHeaderFactory.properties = { report: vert};
            labelColumn.itemRenderer = rowHeaderFactory;

            var labelHeaderFactory:ClassFactory = new ClassFactory(VerticalListHeaderRenderer);
            labelHeaderFactory.properties = { headerText:""};
            labelColumn.headerRenderer = labelHeaderFactory;
            labelColumn.width = vert.headerWidth;
            labelColumn.dataField = "Label";
            columns.addItem(labelColumn);
            if (vert == null) {
                return;
            }
            var underlines:Array = [];

            var timeIntervals:ArrayCollection = additionalProperties["timeIntervals"];
            for each (var interval:Value in timeIntervals) {
                columns.addItem(createColumn(interval.toString()));
            }

            columns.addItem(createColumn(vert.ytdLabel));
            columns.addItem(createColumn("Average"));

            var hasBenchmark:Boolean = false;
            for each (var testMeasure:AnalysisMeasure in vert.measures) {
                if (testMeasure.reportFieldExtension != null && testMeasure.reportFieldExtension is YTDReportFieldExtension) {
                    if (YTDReportFieldExtension(testMeasure.reportFieldExtension).benchmark != null) {
                        hasBenchmark = true;
                        break;
                    }
                }
            }

            if (hasBenchmark) {
                columns.addItem(createColumn("BK"));
                columns.addItem(createColumn("Variation"));
                var variationConfig:FormattingConfiguration = new FormattingConfiguration();
                variationConfig.formattingType = FormattingConfiguration.PERCENTAGE;
                var variationFormatter:Formatter = variationConfig.getFormatter(1, 1);
            }

            var a:int = 0;
            for (var z:int = 0; z < dataSet.length; z++) {
                var hasValue:Boolean = false;
                var ytdValue:YTDValue = dataSet.getItemAt(z) as YTDValue;
                if (ytdValue == null) {
                    continue;
                }

                var obj:Object = new Object();
                obj["baseMeasure"] = ytdValue.analysisMeasure;
                if (ytdValue.analysisMeasure.reportFieldExtension != null && ytdValue.analysisMeasure.reportFieldExtension is YTDReportFieldExtension) {
                    var testExt:YTDReportFieldExtension = ytdValue.analysisMeasure.reportFieldExtension as YTDReportFieldExtension;
                    hasValue = testExt.alwaysShow;
                }
                var formatter:Formatter = ytdValue.analysisMeasure.getFormatter();
                if (ytdValue.timeIntervalValues.length > 0) {
                    for (var y:int = 0; y < ytdValue.timeIntervalValues.length; y++) {
                        var timeIntervalValue:TimeIntervalValue = ytdValue.timeIntervalValues.getItemAt(y) as TimeIntervalValue;
                        var label:String = timeIntervalValue.dateValue.toString();
                        if (timeIntervalValue.value.toNumber() != 0) {
                            hasValue = true;
                        }
                        obj[label] = applyMeasure(y + 1, formatter.format(timeIntervalValue.value), columns);
                    }
                    obj[vert.ytdLabel] = applyMeasure(ytdValue.timeIntervalValues.length + 1, formatter.format(ytdValue.ytd), columns);
                    obj["Average"] = applyMeasure(ytdValue.timeIntervalValues.length + 2, formatter.format(ytdValue.average), columns);
                    if (hasBenchmark && ytdValue.benchmarkMeasure != null) {
                        obj["BK"] = applyMeasure(ytdValue.timeIntervalValues.length + 3, ytdValue.benchmarkMeasure.getFormatter().format(ytdValue.benchmarkValue), columns);
                        obj["Variation"] = applyMeasure(ytdValue.timeIntervalValues.length + 4, variationFormatter.format(ytdValue.variation), columns);
                    }
                    if (hasValue) {
                        dColl.addItem(obj);
                        if (ytdValue.analysisMeasure.underline) {
                            underlines.push(a);
                        } else {
                            if (ytdValue.analysisMeasure.reportFieldExtension != null && ytdValue.analysisMeasure.reportFieldExtension is YTDReportFieldExtension) {
                                var ext:YTDReportFieldExtension = ytdValue.analysisMeasure.reportFieldExtension as YTDReportFieldExtension;
                                if (ext.lineAbove) {
                                    underlines.push(a - 1);
                                }
                            }
                        }
                        a++;
                    }
                }
            }
            if (columns.length <= 1 || dColl.length == 0) {
                invalidateSize();
            } else {
                var reportWidth:int = 1;
                for each (var col:AdvancedDataGridColumn in columns) {
                    reportWidth += (col.width + 1);
                }
                var endWidth:int = 0;
                if (reportWidth < this.width) {
                    var delta:int = (this.width - reportWidth);
                    //delta = Math.min(delta, 500);
                    var perColumnAdd:int = (delta) / columns.length;
                    for each (var colAdd:AdvancedDataGridColumn in columns) {
                        colAdd.width += perColumnAdd;
                        endWidth += colAdd.width;
                    }
                }
                dataGrid.maxWidth = this.width;
                if (endWidth > 0) {
                    dataGrid.x = (this.width - endWidth) / 2;
                }
                if (additionalProperties["preferredSize"]) {
                    dataGrid.addEventListener(FlexEvent.UPDATE_COMPLETE, onUpdateComplete);
                }
                dataGrid.clearRenderers();
                dataGrid.columns = columns.toArray();
                //dataGrid.rowCount = dColl.length + 1;
                dataGrid.height = (dColl.length + 1) * 20 + 20;
                dataGrid.rowsToUnderline = underlines;
                dataGrid.dataProvider = dColl;

                //invalidateDisplayList();
                invalidateSize();
            }
        }

        private function onUpdateComplete(event:FlexEvent):void {
            event.currentTarget.removeEventListener(FlexEvent.UPDATE_COMPLETE, onUpdateComplete);
            dispatchEvent(new SizeOverrideEvent(-1, event.currentTarget.height));
        }

        public function updateExportMetadata():void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }

        public function preserveValues():Boolean {
            return true;
        }
        ]]></mx:Script>
    <mx:Canvas id="box" verticalScrollPolicy="auto" horizontalScrollPolicy="off" width="100%" height="100%">
        <verticalllist:VerticalDataGrid id="dataGrid" headerColors="{[0x333333, 0x333333]}" fontSize="10" verticalScrollPolicy="off" variableRowHeight="false" horizontalGridLines="false" horizontalGridLineColor="#DDDDDD" verticalGridLines="false"
                                        alternatingItemColors="{[0xFFFFFF, 0xFFFFFF]}" backgroundColor="#FFFFFF" borderStyle="none" selectionMode="none" horizontalScrollPolicy="auto">
        </verticalllist:VerticalDataGrid>
    </mx:Canvas>
</mx:Canvas>
