<?xml version="1.0"?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:verticalllist="com.easyinsight.analysis.verticallist.*"
           implements="com.easyinsight.analysis.IReportRenderer" verticalScrollPolicy="off" width="100%"
           height="100%">
    <mx:states>
        <mx:State name="noData">
            <mx:RemoveChild target="{dataGrid}"/>
            <mx:AddChild relativeTo="{box}">
                <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                    <mx:TextArea fontSize="22" text="We didn't find any data for the fields and filters that you specified in the report."
                        borderStyle="none" backgroundAlpha="0" width="500" height="65" editable="false" selectable="false" focusEnabled="false"/>
                </mx:Box>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisMeasure;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.Value;
        import com.easyinsight.filtering.FilterDefinition;
        import com.easyinsight.filtering.MultiFlatDateFilterDefinition;

        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.controls.Alert;
        import mx.formatters.Formatter;

        [Bindable]
        private var dataColl:ArrayCollection;

        override protected function measure():void {
            super.measure();
            box.width = this.width;
            box.height = this.height;
        }

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {

            if (dataSet.length == 0) {
                currentState = "noData";
                return;
            }
            var vert:CombinedVerticalListDefinition = analysisDefinition as CombinedVerticalListDefinition;
            var dColl:ArrayCollection = new ArrayCollection();
            var columns:ArrayCollection = new ArrayCollection();
            var labelColumn:SortableAdvancedDataGridColumn = new SortableAdvancedDataGridColumn(0, 0);
            labelColumn.sortable = false;
            labelColumn.itemRenderer = new ClassFactory(VerticalListRowHeaderRenderer);
            var labelHeaderFactory:ClassFactory = new ClassFactory(VerticalListHeaderRenderer);
            labelHeaderFactory.properties = { headerText: "" };
            labelColumn.headerRenderer = labelHeaderFactory;
            labelColumn.width = vert.headerWidth;
            labelColumn.dataField = "Label";
            columns.addItem(labelColumn);
            var firstRows:Object = new Object();
            if (vert == null) {
                return;
            }
            var filters:Array = additionalProperties["labelFilters"];
            var measures:ArrayCollection = VerticalListDefinition(EmbeddedDataWrapper(dataSet.getItemAt(i)).report).measures;
            var headerWidth:int = 0;
            var columnWidths:Object = new Object();
            var underlines:Array = [];
            for (var l:int = 0; l < measures.length; l++) {
                var measure:AnalysisMeasure = measures.getItemAt(l) as AnalysisMeasure;
                if (measure.underline) {
                    underlines.push(l);
                }
                var obj:Object = new Object();
                obj["Label"] = measure.display;
                obj["baseMeasure"] = measure;
                var atLeastOneValue:Boolean = false;
                var colCount:int = 1;
                for (var i:int = 0; i < vert.reports.length; i++) {
                    var embeddedData:EmbeddedDataWrapper = dataSet.getItemAt(i) as EmbeddedDataWrapper;
                    var report:VerticalListDefinition = embeddedData.report as VerticalListDefinition;
                    var applyMeasure:AnalysisMeasure = null;
                    for each (var testMeasure:AnalysisMeasure in report.measures) {
                        if (testMeasure.display == measure.display) {
                            applyMeasure = testMeasure;
                            break;
                        }
                    }
                    if (applyMeasure == null) {
                        continue;
                    }
                    var formatter:Formatter = applyMeasure.getFormatter();
                    var reportData:ArrayCollection = embeddedData.dataSet;
                    for each (var row:Object in reportData) {
                        var columnValue:String;
                        var val:Value;
                        if (report.column == null) {
                            columnValue = report.name;
                            if (report.patternName == null || report.patternName == "") {
                                columnValue = report.name;
                            } else {
                                var filter:FilterDefinition = filters[i];
                                if (filter == null) {
                                    columnValue = report.name;
                                } else {
                                    columnValue = MultiFlatDateFilterDefinition(filter).createLabel() + " " + report.name;
                                }
                            }
                        } else {
                            val = row[report.column.qualifiedName()];
                            columnValue = val.toString();
                        }
                        var metrics:TextLineMetrics = dataGrid.measureText(columnValue);
                        headerWidth = metrics.width + metrics.x + metrics.x + 5;
                        if (val != null && val.type() == Value.EMPTY) {
                            continue;
                        }
                        var measureValue:Value = row[applyMeasure.qualifiedName()];
                        if (measureValue != null && measureValue.toNumber() != 0) {
                            atLeastOneValue = true;
                        }
                        var text:String;
                        if (measureValue != null) {
                            var num:Number = measureValue.toNumber();
                            text = formatter.format(num);
                        } else {
                            text = "";
                        }
                        obj[columnValue] = text;
                        obj[columnValue + "measure"] = applyMeasure;
                        var columnSize:int = columnWidths[columnValue];
                        var firstRow:Boolean = firstRows[columnValue];
                        if (!firstRow) {
                            var dataColumn:SortableAdvancedDataGridColumn = new SortableAdvancedDataGridColumn(i + 1, val == null ? 0 : val.toSortValue().toNumber());
                            dataColumn.headerText = columnValue.toString();
                            dataColumn.dataField = columnValue.toString();
                            var factory:ClassFactory = new ClassFactory(VerticalListRenderer);
                            factory.properties = { qualifiedName: columnValue.toString() };
                            dataColumn.itemRenderer = factory;
                            dataColumn.sortable = false;
                            var headerFactory:ClassFactory = new ClassFactory(VerticalListHeaderRenderer);
                            headerFactory.properties = { headerText: columnValue.toString() };
                            dataColumn.headerRenderer = headerFactory;
                            columns.addItem(dataColumn);
                            firstRows[columnValue] = true;
                        }
                        if (columns.length > colCount) {
                            var valueMetrics:TextLineMetrics = dataGrid.measureText(text);
                            var valueWidth:int = valueMetrics.width + valueMetrics.x + valueMetrics.x;
                            columnSize = Math.max(columnSize, valueWidth);
                            columnSize = Math.max(columnSize, headerWidth);
                            columnWidths[columnValue] = columnSize;
                            SortableAdvancedDataGridColumn(columns.getItemAt(colCount)).width = columnSize;
                            colCount++;
                        }
                    }
                }

                if (!vert.removeEmptyRows || atLeastOneValue) {
                    dColl.addItem(obj);
                }
            }
            if (columns.length <= 1 || dColl.length <= 1) {
                currentState = "noData";
                invalidateSize();
            } else {
                currentState = "";
                var sort:Sort = new Sort();
                sort.fields = [ new SortField("reportIndex"), new SortField("sortValue") ];
                columns.sort = sort;
                columns.refresh();
                var reportWidth:int = 1;
                for each (var col:SortableAdvancedDataGridColumn in columns) {
                    reportWidth += (col.width + 1);
                }
                var endWidth:int = 0;
                if (reportWidth < this.width) {
                    var delta:int = (this.width - reportWidth);
                    delta = Math.min(delta, 500);
                    var perColumnAdd:int = (delta) / columns.length;
                    for each (var colAdd:SortableAdvancedDataGridColumn in columns) {
                        colAdd.width += perColumnAdd;
                        endWidth += colAdd.width;
                    }
                }
                dataGrid.maxWidth = this.width;
                if (endWidth > 0) {
                    dataGrid.x = (this.width - endWidth) / 2;
                }
                dataGrid.columns = columns.toArray();
                dataGrid.rowCount = dColl.length + 1;
                dataGrid.rowsToUnderline = underlines;
                dataGrid.dataProvider = dColl;
                invalidateSize();
            }
        }

        public function updateExportMetadata():void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }

        public function preserveValues():Boolean {
            return true;
        }
        ]]></mx:Script>
    <mx:Canvas id="box" verticalScrollPolicy="auto" horizontalScrollPolicy="off" width="100%" height="100%">
        <verticalllist:VerticalDataGrid id="dataGrid" headerColors="{[0x333333, 0x333333]}" fontSize="10" verticalScrollPolicy="off" variableRowHeight="false" horizontalGridLines="false" horizontalGridLineColor="#DDDDDD" verticalGridLines="false"
                alternatingItemColors="{[0xFFFFFF, 0xFFFFFF]}" backgroundColor="#FFFFFF" borderStyle="none" selectionMode="none" horizontalScrollPolicy="auto">
        </verticalllist:VerticalDataGrid>
    </mx:Canvas>
</mx:Module>
