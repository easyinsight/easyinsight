<?xml version="1.0"?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" verticalScrollPolicy="off"
           implements="com.easyinsight.analysis.IReportRenderer" width="100%" height="100%">
    <mx:states>
        <mx:State name="noData">
            <mx:RemoveChild target="{dataGrid}"/>
            <mx:AddChild relativeTo="{box}">
                <mx:TextArea fontSize="22" text="We didn't find any data for the fields and filters that you specified in the report."
                        borderStyle="none" backgroundAlpha="0" width="500" height="65" editable="false" selectable="false" focusEnabled="false"/>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisMeasure;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.Value;

        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;

        [Bindable]
        private var dataColl:ArrayCollection;

        override protected function measure():void {
            super.measure();
            box.width = this.width;
            box.height = this.height;
        }

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            if (dataSet.length == 0) {
                currentState = "noData";
                return;
            }
            var vert:VerticalListDefinition = analysisDefinition as VerticalListDefinition;
            var dColl:ArrayCollection = new ArrayCollection();
            var columns:ArrayCollection = new ArrayCollection();
            var labelColumn:SortableAdvancedDataGridColumn = new SortableAdvancedDataGridColumn(0, 0);
            labelColumn.sortable = false;
            labelColumn.width = 130;
            labelColumn.itemRenderer = new ClassFactory(VerticalListRowHeaderRenderer);
            var labelHeaderFactory:ClassFactory = new ClassFactory(VerticalListHeaderRenderer);
            labelHeaderFactory.properties = { headerText: "" };
            labelColumn.headerRenderer = labelHeaderFactory;
            labelColumn.dataField = "Label";
            columns.addItem(labelColumn);
            var firstRow:Boolean = true;
            for each (var measure:AnalysisMeasure in vert.measures) {
                var obj:Object = new Object();
                obj["Label"] = measure.display;
                obj["baseMeasure"] = measure;
                var atLeastOneValue:Boolean = false;
                for each (var row:Object in dataSet) {
                    var columnValue:String;
                    var val:Value;
                    if (vert.column == null) {
                        columnValue = vert.name == null ? "VertName" : vert.name;
                    } else {
                        val = row[vert.column.qualifiedName()];
                        columnValue = val.toString();
                    }
                    if (val != null && val.type() == Value.EMPTY) {
                        continue;
                    }
                    var measureValue:Value = row[measure.qualifiedName()];
                    if (measureValue.toNumber() != 0) {
                        atLeastOneValue = true;
                    }
                    obj[columnValue] = row[measure.qualifiedName()];
                    obj[columnValue + "measure"] = measure;
                    if (firstRow) {
                        var dataColumn:SortableAdvancedDataGridColumn = new SortableAdvancedDataGridColumn(1, val == null ? 0 : val.toSortValue().toNumber());
                        dataColumn.width = 73;
                        dataColumn.headerText = columnValue;
                        dataColumn.dataField = columnValue;
                        var factory:ClassFactory = new ClassFactory(VerticalListRenderer);
                        factory.properties = { qualifiedName: columnValue };
                        dataColumn.itemRenderer = factory;
                        dataColumn.sortable = false;
                        var headerFactory:ClassFactory = new ClassFactory(VerticalListHeaderRenderer);
                        headerFactory.properties = { headerText: columnValue };
                        dataColumn.headerRenderer = headerFactory;
                        columns.addItem(dataColumn);
                    }
                }
                if (firstRow) {
                    firstRow = false;
                }
                if (atLeastOneValue) {
                    dColl.addItem(obj);
                }
            }
            if (columns.length == 1) {
                currentState = "noData";
            } else {
                currentState = "";
            }
            var sort:Sort = new Sort();
            sort.fields = [ new SortField("reportIndex"), new SortField("sortValue") ];
            columns.sort = sort;
            columns.refresh();
            dataGrid.columns = columns.toArray();
            dataGrid.rowCount = dColl.length + 1;
            dataGrid.dataProvider = dColl;
            invalidateSize();
        }

        public function updateExportMetadata():void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }

        public function preserveValues():Boolean {
            return true;
        }
        ]]></mx:Script>
    <mx:Box horizontalAlign="center" id="box" verticalScrollPolicy="auto">
        <mx:AdvancedDataGrid id="dataGrid" headerColors="{[0x333333, 0x333333]}" fontSize="10" verticalScrollPolicy="off" variableRowHeight="true" horizontalGridLines="false" horizontalGridLineColor="#DDDDDD" verticalGridLines="false"
                alternatingItemColors="{[0xFFFFFF, 0xFFFFFF]}" backgroundColor="#FFFFFF" borderStyle="none" selectionMode="none">
        </mx:AdvancedDataGrid>
    </mx:Box>
</mx:Module>
