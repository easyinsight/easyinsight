<?xml version="1.0"?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" verticalScrollPolicy="off"
           implements="com.easyinsight.analysis.IReportRenderer" width="100%" height="100%" resize="onResize()">
    <mx:states>
        <mx:State name="noData">
            <mx:RemoveChild target="{dataGrid}"/>
            <mx:AddChild relativeTo="{box}">
                <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                    <mx:TextArea fontSize="22" text="We didn't find any data for the fields and filters that you specified in the report."
                        borderStyle="none" backgroundAlpha="0" width="500" height="65" editable="false" selectable="false" focusEnabled="false"/>
                </mx:Box>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisItemTypes;
        import com.easyinsight.analysis.AnalysisMeasure;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.Value;
        import com.easyinsight.analysis.verticallist.SortableAdvancedDataGridColumn;

        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.controls.Alert;
        import mx.formatters.Formatter;

        [Bindable]
        private var dataColl:ArrayCollection;

        override protected function measure():void {
            super.measure();
            box.width = this.width;
            box.height = this.height;
        }

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            if (dataSet.length == 0) {
                currentState = "noData";
                return;
            }
            var vert:VerticalListDefinition = analysisDefinition as VerticalListDefinition;
            var dColl:ArrayCollection = new ArrayCollection();
            var columns:Array = [];
            var labelColumn:SortableAdvancedDataGridColumn = new SortableAdvancedDataGridColumn(0, 0);
            labelColumn.sortable = false;
            labelColumn.width = vert.headerWidth;
            labelColumn.itemRenderer = new ClassFactory(VerticalListRowHeaderRenderer);
            var labelHeaderFactory:ClassFactory = new ClassFactory(VerticalListHeaderRenderer);
            labelHeaderFactory.properties = { headerText: "" };
            labelColumn.headerRenderer = labelHeaderFactory;
            labelColumn.dataField = "Label";
            columns.push(labelColumn);
            var sortCriteria:int;
            /*var sort:Sort = new Sort();
            sort.fields = [ new SortField("reportIndex"), new SortField("sortValue") ];
            columns.sort = sort;*/
            var firstRow:Boolean = true;
            var headerWidth:int = 0;
            var columnWidths:Object = new Object();
            for each (var measure:AnalysisMeasure in vert.measures) {
                var formatter:Formatter = measure.getFormatter();
                var obj:Object = new Object();
                obj["Label"] = measure.display;
                obj["baseMeasure"] = measure;
                var metrics:TextLineMetrics = dataGrid.measureText(measure.display);
                headerWidth = Math.max(headerWidth, metrics.width + metrics.x + metrics.x);
                var atLeastOneValue:Boolean = false;
                var i:int = 0;
                for each (var row:Object in dataSet) {
                    var columnValue:String;
                    var val:Value;
                    if (vert.column == null) {
                        columnValue = vert.name == null ? "VertName" : vert.name;
                    } else {
                        val = row[vert.column.qualifiedName()];
                        columnValue = val.toString();
                    }
                    if (val != null && val.type() == Value.EMPTY) {
                        continue;
                    }
                    var measureValue:Value = row[measure.qualifiedName()];
                    if (measureValue.toNumber() != 0) {
                        atLeastOneValue = true;
                    }
                    var text:String;
                    if (measureValue != null) {
                        var num:Number = measureValue.toNumber();
                        text = formatter.format(num);
                    } else {
                        text = "";
                    }
                    obj[columnValue] = text;
                    obj[columnValue + "measure"] = measure;
                    var columnSize:int = columnWidths[columnValue];
                    if (firstRow) {
                        var columnMetrics:TextLineMetrics = dataGrid.measureText(columnValue);
                        var columnLabelWidth:int = columnMetrics.width + columnMetrics.x + columnMetrics.x + 8;
                        columnSize = Math.max(columnSize, columnLabelWidth);
                        var sortValue:Object;
                        if (vert.column == null) {
                            sortValue = 0;
                        } else if (val != null) {
                            if (vert.column.hasType(AnalysisItemTypes.DATE)) {
                                sortCriteria = Array.NUMERIC;
                                sortValue = val.toSortValue().toNumber();
                            } else {
                                sortCriteria = Array.CASEINSENSITIVE;
                                sortValue = columnValue;
                            }
                        }
                        var dataColumn:SortableAdvancedDataGridColumn = new SortableAdvancedDataGridColumn(1, sortValue);
                        dataColumn.width = columnSize;
                        dataColumn.headerText = columnValue;
                        dataColumn.dataField = columnValue;
                        var factory:ClassFactory = new ClassFactory(VerticalListRenderer);
                        factory.properties = { qualifiedName: columnValue };
                        dataColumn.itemRenderer = factory;
                        dataColumn.sortable = false;
                        var headerFactory:ClassFactory = new ClassFactory(VerticalListHeaderRenderer);
                        headerFactory.properties = { headerText: columnValue };
                        dataColumn.headerRenderer = headerFactory;
                        columns.push(dataColumn);
                    }
                    var valueMetrics:TextLineMetrics = dataGrid.measureText(text);
                    var valueWidth:int = valueMetrics.width + valueMetrics.x + valueMetrics.x;
                    columnSize = Math.max(columnSize, valueWidth);
                    columnWidths[columnValue] = columnSize;
                    SortableAdvancedDataGridColumn(columns[(i++) + 1]).width = columnSize;
                }
                if (firstRow) {
                    firstRow = false;
                }
                if (atLeastOneValue) {
                    dColl.addItem(obj);
                }
            }
            if (columns.length <= 1) {
                currentState = "noData";
            } else {
                currentState = "";
            }

            columns = columns.sortOn(["reportIndex", "sortValue"], [Array.NUMERIC, sortCriteria]);

            //SortableAdvancedDataGridColumn(columns.getItemAt(0)).width = headerWidth;
            reportWidth = 1;
            for each (var col:SortableAdvancedDataGridColumn in columns) {
                reportWidth += (col.width + 1);
            }
            var endWidth:int = 0;
            if (reportWidth < this.width) {
                var delta:int = (this.width - reportWidth);
                delta = Math.min(delta, 300);
                var perColumnAdd:int = (delta) / columns.length;
                for each (var colAdd:SortableAdvancedDataGridColumn in columns) {
                    colAdd.width += perColumnAdd;
                    endWidth += colAdd.width;
                }
            }
            dataGrid.maxWidth = this.width;
            if (endWidth > 0) {
                dataGrid.x = (this.width - endWidth) / 2;
            } else {
                dataGrid.x = 0;
            }
            dataGrid.columns = columns;
            dataGrid.rowCount = dColl.length + 2;
            dataGrid.dataProvider = dColl;
            invalidateSize();
        }

        private var reportWidth:int;

        private function onResize():void {
            var endWidth:int = 0;
            if (reportWidth < this.width) {
                var delta:int = (this.width - reportWidth);
                delta = Math.min(delta, 300);
                var perColumnAdd:int = (delta) / dataGrid.columns.length;
                for each (var colAdd:SortableAdvancedDataGridColumn in dataGrid.columns) {
                    colAdd.width += perColumnAdd;
                    endWidth += colAdd.width;
                }
            }
            dataGrid.maxWidth = this.width;
            if (endWidth > 0) {
                dataGrid.x = (this.width - endWidth) / 2;
            }
        }

        public function updateExportMetadata():void {
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }

        public function preserveValues():Boolean {
            return true;
        }
        ]]></mx:Script>
    <mx:Canvas id="box" verticalScrollPolicy="auto" horizontalScrollPolicy="off" width="100%" height="100%">
        <mx:AdvancedDataGrid id="dataGrid" headerColors="{[0x333333, 0x333333]}" fontSize="10" verticalScrollPolicy="off" variableRowHeight="true" horizontalGridLines="false" horizontalGridLineColor="#DDDDDD" verticalGridLines="false"
                alternatingItemColors="{[0xFFFFFF, 0xFFFFFF]}" backgroundColor="#FFFFFF" borderStyle="none" selectionMode="none" horizontalScrollPolicy="auto">
        </mx:AdvancedDataGrid>
    </mx:Canvas>
</mx:Module>
