<?xml version="1.0" ?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:analysis="com.easyinsight.analysis.*"
           implements="com.easyinsight.analysis.IReportRenderer" width="100%" height="100%" resize="onResize()">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisCellRenderer;
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisHierarchyItem;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemTypes;
        import com.easyinsight.analysis.CustomChangeEvent;
        import com.easyinsight.analysis.DerivedAnalysisDimension;
        import com.easyinsight.analysis.ListViewHeaderRenderer;
        import com.easyinsight.analysis.SortFunctionFactory;
        import com.easyinsight.analysis.SummaryCellRenderer;
        import com.easyinsight.analysis.TextCellRenderer;
        import com.easyinsight.analysis.TextReportFieldExtension;
        import com.easyinsight.analysis.TreeRow;
        import com.easyinsight.analysis.TreeTextCellRenderer;

        import mx.collections.ArrayCollection;
        import mx.collections.HierarchicalCollectionView;
        import mx.collections.HierarchicalData;
        import mx.collections.ICollectionView;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.controls.Alert;
        import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
        import mx.controls.advancedDataGridClasses.SortInfo;
        import mx.formatters.Formatter;
        import mx.utils.ObjectUtil;

        [Bindable]
        private var myData:ArrayCollection;


        private var treeDef:SummaryDefinition;

        private var fieldLength:int;

        [Embed(source="../../../../../assets/empty.png")]
        private var empty:Class;

        private function groupIconFunction(item:Object, depth:int):Class {
            return empty;
        }

        private function iconFunction(item:Object):Class {
            return empty;
        }

        private static function rowColor(item:Object, color:uint):uint {
            var treeRow:TreeRow = item as TreeRow;
            if (treeRow.summaryColumn) {
                return 0xCCCCCC;
            } else {
                return color;
            }
        }

        private function onResize():void {
            coreGrid.minHeight = this.height;
            coreGrid.maxHeight = this.height;
        }

        public function renderReport(dataSet:ArrayCollection, analysisDefinition:AnalysisDefinition, clientProcessorMap:Object, additionalProperties:Object):void {
            var treeDefinition:SummaryDefinition = analysisDefinition as SummaryDefinition;
            if (dataSet.length > 0) {

                var fieldsChanged:Boolean = false;
                if (treeDef != null) {
                    fieldsChanged = fieldLength != treeDefinition.items.length;
                }
                this.fieldLength = treeDefinition.items.length;
                //coreGrid.setStyle("fontFamily", "Lucida Grande");

                coreGrid.setStyle("fontSize", treeDefinition.fontSize);
                coreGrid.setStyle("color", treeDefinition.textColor);
                coreGrid.setStyle("alternatingItemColors", [ treeDefinition.rowColor1, treeDefinition.rowColor2 ]);
                coreGrid.setStyle("headerColors", [ treeDefinition.headerColor1, treeDefinition.headerColor2 ]);
                //if (treeDefinition.autoExpandAll) {
                coreGrid.groupIconFunction = groupIconFunction;
                coreGrid.iconFunction = iconFunction;
                coreGrid.displayDisclosureIcon = false;
                //coreGrid.displayItemsExpanded = true;
                coreGrid.setStyle("depthColors", [0xBBBBBB, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF]);
                //}
                this.treeDef = treeDefinition;
                var explicitWidth:Boolean = true;
                for each (var treeItem:AnalysisItem in treeDef.getFields()) {
                    if (treeItem.width == 0) {
                        explicitWidth = false;
                    }
                }
                var hierarchy:AnalysisHierarchyItem = treeDefinition.hierarchy as AnalysisHierarchyItem;
                var hierData:HierarchicalData = new HierarchicalData();
                hierData.source = dataSet;
                //var groupingColl:GroupingCollection = new GroupingCollection();
                if (myData != null) {
                    dataSet.sort = myData.sort;
                    dataSet.refresh();
                }

                //groupingColl.source = dataSet;
                var columns:Array = [];
                var analysisItems:Array = [];
                var hierDataView:HierarchicalCollectionView = new HierarchicalCollectionView(hierData);
                for each (var item:AnalysisItem in treeDefinition.items) {
                    analysisItems.push(item);
                }
                var hierarchyColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                var hierarchyFactory:ClassFactory = new ClassFactory(SummaryTreeRenderer);
                hierarchyFactory.properties = { analysisItem:hierarchy, report:treeDef };
                coreGrid.groupItemRenderer = hierarchyFactory;
                hierarchyColumn.headerText = hierarchy.display;
                hierarchyColumn.sortCompareFunction = sortCompare;
                var rendererProviders:Array = [];
                hierarchyColumn.labelFunction = function (item:Object, column:AdvancedDataGridColumn):String {
                    var treeRow:TreeRow = item as TreeRow;
                    if (treeRow.groupingField != null) {
                        var formatter:Formatter = treeRow.groupingField.getFormatter();
                        return formatter.format(treeRow.groupingColumn);
                    } else {
                        return "";
                    }
                };
                hierarchyColumn.dataField = "groupingColumn";
                var existingHierarchyIndex:int = findColumnIndex(hierarchy.hierarchyLevels.getItemAt(hierarchy.hierarchyLevels.length - 1).analysisItem.qualifiedName());
                if (hierarchy.reportFieldExtension != null && hierarchy.reportFieldExtension is TextReportFieldExtension &&
                        TextReportFieldExtension(hierarchy.reportFieldExtension).fixedWidth > 0) {
                    var ext1:TextReportFieldExtension = hierarchy.reportFieldExtension as TextReportFieldExtension;
                    hierarchyColumn.width = ext1.fixedWidth;
                } else if (!fieldsChanged && existingHierarchyIndex != -1) {
                    var existingHierarchyColumn:AdvancedDataGridColumn = coreGrid.columns[0];
                    hierarchyColumn.width = existingHierarchyColumn.width;
                } else if (explicitWidth) {
                    hierarchyColumn.width = hierarchy.width;
                }
                if (hierarchy.reportFieldExtension != null && hierarchy.reportFieldExtension is TextReportFieldExtension) {
                    hierarchyColumn.sortable = TextReportFieldExtension(hierarchy.reportFieldExtension).sortable;
                }
                var hierarchyHeaderFactory:ClassFactory = new ClassFactory(ListViewHeaderRenderer);
                hierarchyHeaderFactory.properties = { eiColor:treeDefinition.headerTextColor };
                hierarchyColumn.headerRenderer = hierarchyHeaderFactory;
                columns[0] = hierarchyColumn;
                for (var k:int = 0; k < analysisItems.length; k++) {
                    var myHeader:AnalysisItem = analysisItems[k] as AnalysisItem;

                    var columnHeaderObject:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                    var existingIndex:int = findColumnIndex(myHeader.qualifiedName());
                    if (!fieldsChanged && existingIndex != -1) {
                        var existingColumn:AdvancedDataGridColumn = coreGrid.columns[existingIndex];
                        columnHeaderObject.width = existingColumn.width;
                        columnHeaderObject.sortDescending = existingColumn.sortDescending;
                    } else if (explicitWidth) {
                        columnHeaderObject.width = myHeader.width;
                    }
                    columnHeaderObject.sortCompareFunction = SortFunctionFactory.createSortFunction(myHeader, columnHeaderObject.sortDescending);
                    columnHeaderObject.headerText = myHeader.display;
                    columnHeaderObject.dataField = "groupingColumn";
                    var headerFactory:ClassFactory = new ClassFactory(ListViewHeaderRenderer);
                    headerFactory.properties = { eiColor:treeDefinition.headerTextColor };
                    columnHeaderObject.headerRenderer = headerFactory;

                    var factory:ClassFactory = new ClassFactory(getCellRendererClass(myHeader));
                    var ext:TextReportFieldExtension = myHeader.reportFieldExtension as TextReportFieldExtension;
                    if (ext != null) {
                        if (ext.fixedWidth > 0) {
                            columnHeaderObject.width = ext.fixedWidth;
                            columnHeaderObject.resizable = false;
                        }
                        if (!ext.sortable) {
                            columnHeaderObject.sortable = false;
                        }
                    }
                    factory.properties = { analysisItem:myHeader, report:treeDef };
                    columnHeaderObject.itemRenderer = factory;


                    columns[k + 1] = columnHeaderObject;
                }
                if (rendererProviders.length > 0) {
                    coreGrid.rendererProviders = rendererProviders;
                }

                myData = dataSet;
                hierDataView.refresh();
                coreGrid.dataProvider = hierDataView;
                /*groupingColl.refresh();
                 coreGrid.dataProvider = groupingColl;*/
                coreGrid.clearRenderers();
                coreGrid.columns = columns;
                /*if (treeDefinition.autoExpandAll) {
                 coreGrid.validateNow();
                 coreGrid.expandAll();
                 }*/
            } else {
                coreGrid.columns = [];
                myData = new ArrayCollection();
            }
        }

        private function sortCompare(obj1:Object, obj2:Object):int {
            var treeRow1:TreeRow = obj1 as TreeRow;
            var treeRow2:TreeRow = obj2 as TreeRow;
            var view:ICollectionView = ICollectionView(coreGrid.dataProvider);
            var sort:Sort = view.sort;
            if (sort == null) {
                return ObjectUtil.compare(treeRow1.groupingColumn.getValue(), treeRow2.groupingColumn.getValue());
            }
            var fields:Array = sort.fields;

            if (fields != null && fields.length == 1) {
                var sortField:SortField = fields[0];
                if (sortField.name == "groupingColumn") {
                    //Alert.show("got here");
                    var num:int = -1;
                    if (sortField.descending) {
                        num = 1;
                    }
                    if (treeRow1.summaryColumn) {
                        return -num;
                    } else if (treeRow2.summaryColumn) {
                        return num;
                    } else {
                        return ObjectUtil.compare(treeRow1.groupingColumn.getValue(), treeRow2.groupingColumn.getValue());
                    }
                }
            }
            return ObjectUtil.compare(treeRow1.groupingColumn.getValue(), treeRow2.groupingColumn.getValue());


        }

        private static function getCellRendererClass(item:AnalysisItem):Class {
            if (item.hasType(AnalysisItemTypes.TEXT)) {
                return TreeTextCellRenderer;
            } else {
                if (item.hasType(AnalysisItemTypes.DERIVED_GROUPING)) {
                    var d:DerivedAnalysisDimension = item as DerivedAnalysisDimension;
                    return d.wordWrap ? TreeTextCellRenderer : SummaryCellRenderer;
                }
                var ext:TextReportFieldExtension = item.reportFieldExtension as TextReportFieldExtension;
                if (ext != null && ext.wordWrap) {
                    return TreeTextCellRenderer;
                }
                return SummaryCellRenderer;
            }
        }

        public function updateExportMetadata():void {
            var hierarchy:AnalysisHierarchyItem = treeDef.hierarchy as AnalysisHierarchyItem;
            var hierarchyIndex:int = 0;
            updateItem(hierarchy, hierarchyIndex);
            for (var i:int = 0; i < treeDef.items.length; i++) {
                var item:AnalysisItem = treeDef.items.getItemAt(i) as AnalysisItem;
                var columnIndex:int = findColumnIndex(item.qualifiedName());
                updateItem(item, columnIndex);
            }
        }

        private function onStretch(event:Event):void {
            var hierarchy:AnalysisHierarchyItem = treeDef.hierarchy as AnalysisHierarchyItem;
            var hierarchyIndex:int = findColumnIndex(hierarchy.hierarchyLevels.getItemAt(hierarchy.hierarchyLevels.length - 1).analysisItem.qualifiedName());
            updateItem(hierarchy, hierarchyIndex);
            for (var i:int = 0; i < treeDef.items.length; i++) {
                var item:AnalysisItem = treeDef.items.getItemAt(i) as AnalysisItem;
                var columnIndex:int = findColumnIndex(item.qualifiedName());
                updateItem(item, columnIndex);
            }
        }

        private function findColumnIndex(qualifiedName:String):int {
            for (var i:int = 0; i < coreGrid.columns.length; i++) {
                var column:AdvancedDataGridColumn = coreGrid.columns[i];
                if (column.dataField == qualifiedName) {
                    return i;
                }
            }
            return -1;
        }

        public function preserveValues():Boolean {
            return true;
        }

        public function onCustomChangeEvent(event:CustomChangeEvent):void {
        }

        private function updateItem(item:AnalysisItem, columnIndex:int):void {
            item.itemPosition = columnIndex;
            var column:AdvancedDataGridColumn = coreGrid.columns[columnIndex];

            if (column != null) {
                item.width = column.width;
                var sortInfo:SortInfo = coreGrid.getFieldSortInfo(column);
                if (sortInfo != null && sortInfo.status == SortInfo.ACTUALSORT) {
                    item.sortSequence = sortInfo.sequenceNumber;
                    if (sortInfo.descending) {
                        item.sort = 2;
                    } else {
                        item.sort = 1;
                    }
                } else {
                    item.sort = 0;
                }
            }


        }

        override protected function measure():void {
            super.measure();
            coreGrid.maxHeight = this.height;
        }
        ]]></mx:Script>

        <analysis:SummaryViewGrid id="coreGrid" width="100%" visible="true" columnStretch="onStretch(event)"
                                  variableRowHeight="true" rowColorFunction="rowColor" fontFamily="Lucida Grande"
                                  horizontalGridLineColor="#DDDDDD" verticalGridLineColor="#DDDDDD" horizontalGridLines="true"
                                  verticalGridLines="true"
                                  borderStyle="solid" borderColor="#DDDDDD" selectable="false" displayItemsExpanded="true"/>


</mx:Module>