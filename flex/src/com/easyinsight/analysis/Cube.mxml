<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="300">
	<mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.crosstab.CrosstabDefinition;

        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.controls.olapDataGridClasses.OLAPDataGridItemRendererProvider;

        import mx.collections.ICollectionView;
        import mx.olap.IOLAPSet;
        import mx.olap.OLAPResult;
        import mx.controls.Alert;
        import mx.olap.IOLAPCube;
        import mx.events.CubeEvent;
        import mx.controls.OLAPDataGrid;
        import mx.rpc.AsyncResponder;
        import mx.rpc.AsyncToken;
        import mx.olap.OLAPSet;
        import mx.olap.IOLAPQueryAxis;
        import mx.olap.OLAPQuery;
        import mx.olap.IOLAPQuery;
        import mx.olap.OLAPMeasure;
        import mx.olap.OLAPLevel;
        import mx.olap.OLAPHierarchy;
        import mx.olap.OLAPAttribute;
        import mx.olap.OLAPDimension;
        import mx.collections.ArrayCollection;
        import mx.collections.IList;
        import mx.olap.OLAPCube;

        private var _crosstabDefinition:CrosstabDefinition;
        private var grid:OLAPDataGrid;
        private var cube:OLAPCube;

        public function populate(crosstabDefinition:CrosstabDefinition, data:ICollectionView, grid:OLAPDataGrid):void {
            this.grid = grid;
            this._crosstabDefinition = crosstabDefinition;
            var analysisMeasure:AnalysisMeasure = crosstabDefinition.measures[0] as AnalysisMeasure;
            this.cube = new OLAPCube();
            cube.dataProvider = normalize(data);
            //grid.itemRenderer = new AnalysisCellRendererFactory(analysisMeasure.qualifiedName(), analysisMeasure, renderer);
            var provider:OLAPDataGridItemRendererProvider = new OLAPDataGridItemRendererProvider();
            provider.formatter = analysisMeasure.getFormatter();
            provider.type = OLAPDataGrid.OLAP_DIMENSION;
            provider.uniqueName = crosstabDefinition.columns[0].qualifiedName();
            grid.itemRendererProviders = [ provider ];

            var dimensionList:IList = new ArrayCollection();
            for each (var column:OLAPDimension in createDimensions(crosstabDefinition.columns)) {
                dimensionList.addItem(column);
            }
            for each (var row:OLAPDimension in createDimensions(crosstabDefinition.rows)) {
                dimensionList.addItem(row);
            }
            var olapMeasure:OLAPMeasure = new OLAPMeasure();
            olapMeasure.name = analysisMeasure.qualifiedName();
            olapMeasure.displayName = analysisMeasure.display;
            olapMeasure.dataField = analysisMeasure.qualifiedName();
            olapMeasure.aggregator = "SUM";
            var measures:IList = new ArrayCollection();
            measures.addItem(olapMeasure);
            cube.measures = measures;
            cube.dimensions = dimensionList;
            cube.addEventListener(CubeEvent.CUBE_COMPLETE, runQuery);
            cube.refresh();
        }

        private function normalize(data:ICollectionView):ICollectionView {
            var newData:ArrayCollection = new ArrayCollection();
            for each (var object:Object in data) {
                var newObject:Object = new Object();
                for each (var columnItem:AnalysisItem in _crosstabDefinition.columns) {
                    var key:String = columnItem.qualifiedName();
                    var existingValue:Value = object[key];
                    if (existingValue != null) {
                        newObject[key] = existingValue.toString();
                    }
                }
                for each (var rowItem:AnalysisItem in _crosstabDefinition.rows) {
                    var rowKey:String = rowItem.qualifiedName();
                    var rowExistingValue:Value = object[rowKey];
                    if (rowExistingValue != null) {
                        newObject[rowKey] = rowExistingValue.toString();
                    }
                }
                for each (var measureItem:AnalysisItem in _crosstabDefinition.measures) {
                    var measureKey:String = measureItem.qualifiedName();
                    var measureExistingValue:Value = object[measureKey];
                    if (measureExistingValue != null) {
                        newObject[measureKey] = measureExistingValue.getValue();
                    }
                }
                newData.addItem(newObject);
            }
            return newData;
        }

        private function createDimensions(items:ArrayCollection):Array {
            var dims:Array = [];
            for each (var analysisItem:AnalysisItem in items) {
                var columnDimension:OLAPDimension = new OLAPDimension();
                columnDimension.name = analysisItem.qualifiedName();

                var attributes:Array = [];

                var olapAttribute:OLAPAttribute = new OLAPAttribute();
                olapAttribute.name = analysisItem.display;
                //olapAttribute.displayName = analysisItem.display;
                olapAttribute.displayNameFunction = displayNameFunction(analysisItem);
                olapAttribute.dataField = analysisItem.qualifiedName();
                attributes.push(olapAttribute);
                columnDimension.attributes = new ArrayCollection(attributes);

                var columnHierarchy:OLAPHierarchy = new OLAPHierarchy();
                columnHierarchy.name = analysisItem.qualifiedName();
                columnHierarchy.hasAll = false;

                var columnHierarchyLevelsList:IList = new ArrayCollection();
                var olapLevel:OLAPLevel = new OLAPLevel();
                olapLevel.attributeName = analysisItem.display;
                olapLevel.displayName = analysisItem.display;
                columnHierarchyLevelsList.addItem(olapLevel);

                columnHierarchy.elements = columnHierarchyLevelsList.toArray();

                columnDimension.hierarchies = new ArrayCollection([columnHierarchy]);

                dims.push(columnDimension);
            }
            return dims;
        }

        private function displayNameFunction(analysisItem:AnalysisItem):Function {
            return function(name:String):String {
                return analysisItem.getFormatter().format(name);
            };
        }

        private function createQuery(crosstabDefinition:CrosstabDefinition):IOLAPQuery {
            var query:OLAPQuery = new OLAPQuery();
            var rowQueryAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.ROW_AXIS);
            var rowSet:IOLAPSet = createOLAPSet(crosstabDefinition.rows);
            rowQueryAxis.addSet(rowSet);
            var columnQueryAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.COLUMN_AXIS);
            var columnSet:IOLAPSet = createOLAPSet(crosstabDefinition.columns);
            columnQueryAxis.addSet(columnSet);
            return query;
        }

        private function runQuery(event:CubeEvent):void {
            var cube:IOLAPCube = IOLAPCube(event.currentTarget);
            var query:IOLAPQuery = createQuery(_crosstabDefinition);
            var token:AsyncToken = cube.execute(query);
            token.addResponder(new AsyncResponder(showResult, showFault));
        }

        private function showFault(result:Object, token:Object):void {
            Alert.show("Error in query.");
        }

        private function showResult(result:Object, token:Object):void {
            if (!result) {
                Alert.show("No results from query.");
                return;
            }
            grid.dataProvider = result as OLAPResult;
        }

        private function createOLAPSet(items:ArrayCollection):IOLAPSet {
            var olapSet:IOLAPSet = null;
            for (var columnIndex:int = 0; columnIndex < items.length; columnIndex++) {
                var attributeSet:OLAPSet = new OLAPSet();
                var analysisItem:AnalysisItem = items.getItemAt(columnIndex) as AnalysisItem;
                var children:IList = cube.findDimension(analysisItem.qualifiedName()).findAttribute(analysisItem.display).children;

                var copy:ArrayCollection = new ArrayCollection(children.toArray());

                var str:String = "";
                var sort:Sort = new Sort();
                if (analysisItem.hasType(AnalysisItemTypes.DATE)) {
                    sort.compareFunction = function(a:Object, b:Object, fields:Array = null):int {
                        var str1:String = a["name"];
                        var str2:String = b["name"];
                        var date1:Number = Date.parse(str1);
                        var date2:Number = Date.parse(str2);
                        if (date1 < date2) {
                            return -1;
                        } else if (date1 > date2) {
                            return 1;
                        }
                        return 0;
                    };
                } else {
                    sort.fields = [ new SortField("displayName") ];
                }

                copy.sort = sort;
                copy.refresh();
                attributeSet.addElements(copy);
                if (olapSet == null) {
                    olapSet = attributeSet;
                } else {
                    olapSet = olapSet.crossJoin(attributeSet);
                }
            }
            return olapSet;
        }
        ]]>
	</mx:Script>
</mx:Canvas>
