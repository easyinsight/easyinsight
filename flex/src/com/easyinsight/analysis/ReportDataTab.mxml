<?xml version="1.0" ?>
<mx:HBox label="Data" icon="@Embed(source='../../../../assets/data_table.png')" paddingLeft="10"
         paddingTop="10" paddingBottom="10"
         paddingRight="10" width="100%" height="100%" xmlns:mx="http://www.adobe.com/2006/mxml"
         xmlns:datasources="com.easyinsight.datasources.*" xmlns:analysis="com.easyinsight.analysis.*">
    <mx:Metadata>
        [Event(name="analysisItemEdit", type="com.easyinsight.analysis.AnalysisItemEditEvent")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.framework.DataService;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.UserAudit;

        import mx.collections.ArrayCollection;
        import mx.managers.PopUpManager;

        private var _analysisDefinition:AnalysisDefinition;

        private var _dataService:DataService;

        private var _dataView:DataViewFactory;

        private var _availableFields:ArrayCollection;

        private var _wrappers:ArrayCollection;

        private var _dataSourceInfo:DataSourceInfo;

        private var _reportAudit:ArrayCollection;

        [Bindable(event="reportAuditChanged")]
        public function get reportAudit():ArrayCollection {
            return _reportAudit;
        }

        public function set reportAudit(value:ArrayCollection):void {
            if (_reportAudit == value) return;
            _reportAudit = value;
            dispatchEvent(new Event("reportAuditChanged"));
        }

        [Bindable(event="dataSourceInfoChanged")]
        public function get dataSourceInfo():DataSourceInfo {
            return _dataSourceInfo;
        }

        public function set dataSourceInfo(value:DataSourceInfo):void {
            if (_dataSourceInfo == value) return;
            _dataSourceInfo = value;
            dispatchEvent(new Event("dataSourceInfoChanged"));
        }

        [Bindable(event="dataServiceChanged")]
        public function get dataService():DataService {
            return _dataService;
        }

        public function set dataService(value:DataService):void {
            if (_dataService == value) return;
            _dataService = value;
            dispatchEvent(new Event("dataServiceChanged"));
        }

        [Bindable(event="dataViewChanged")]
        public function get dataView():DataViewFactory {
            return _dataView;
        }

        public function set dataView(value:DataViewFactory):void {
            if (_dataView == value) return;
            _dataView = value;
            dispatchEvent(new Event("dataViewChanged"));
        }

        [Bindable(event="availableFieldsChanged")]
        public function get availableFields():ArrayCollection {
            return _availableFields;
        }

        public function set availableFields(value:ArrayCollection):void {
            if (_availableFields == value) return;
            _availableFields = value;
            dispatchEvent(new Event("availableFieldsChanged"));
        }

        [Bindable(event="wrappersChanged")]
        public function get wrappers():ArrayCollection {
            return _wrappers;
        }

        public function set wrappers(value:ArrayCollection):void {
            if (_wrappers == value) return;
            _wrappers = value;
            dispatchEvent(new Event("wrappersChanged"));
        }

        [Bindable(event="analysisDefinitionChanged")]
        public function get analysisDefinition():AnalysisDefinition {
            return _analysisDefinition;
        }

        public function set analysisDefinition(value:AnalysisDefinition):void {
            if (_analysisDefinition == value) return;
            _analysisDefinition = value;
            dispatchEvent(new Event("analysisDefinitionChanged"));
        }

        private var _dataSourceID:int;

        public function set dataSourceID(value:int):void {
            _dataSourceID = value;
        }


        private function showAPIInfo():void {
            var window:QuickDataSourceAPIWindow = new QuickDataSourceAPIWindow();
            window.dataSourceID = dataService.dataFeedID;
            PopUpManager.addPopUp(window, this);
            PopUpUtil.centerPopUp(window);
        }

        private function createCalculation():void {
            var window:AnalysisItemEditWindow = new AnalysisItemEditWindow();
            window.editorClass = CalculationMeasureWindow;
            window.dataSourceID = _dataService.dataFeedID;
            window.analysisItems = wrappers;
            window.addEventListener(AnalysisItemEditEvent.ANALYSIS_ITEM_EDIT, onNewItem, false, 0, true);
            PopUpManager.addPopUp(window, this);
            PopUpUtil.centerPopUp(window);
        }

        private function createCalculatedGrouping():void {
            var window:AnalysisItemEditWindow = new AnalysisItemEditWindow();
            window.editorClass = DerivedGroupingWindow;
            window.dataSourceID = _dataService.dataFeedID;
            window.analysisItems = wrappers;
            window.addEventListener(AnalysisItemEditEvent.ANALYSIS_ITEM_EDIT, onNewItem, false, 0, true);
            PopUpManager.addPopUp(window, this);
            PopUpUtil.centerPopUp(window);
        }

        private function createCalculatedDate():void {
            var window:AnalysisItemEditWindow = new AnalysisItemEditWindow();
            window.editorClass = DerivedDateWindow;
            window.dataSourceID = _dataService.dataFeedID;
            window.analysisItems = wrappers;
            window.addEventListener(AnalysisItemEditEvent.ANALYSIS_ITEM_EDIT, onNewItem, false, 0, true);
            PopUpManager.addPopUp(window, this);
            PopUpUtil.centerPopUp(window);
        }

        private function onNewItem(event:AnalysisItemEditEvent):void {
            if (event.analysisItem.hasType(AnalysisItemTypes.CALCULATION)) {
                UserAudit.instance().audit(UserAudit.CREATED_CALCULATION);
            } else if (event.analysisItem.hasType(AnalysisItemTypes.HIERARCHY)) {
                UserAudit.instance().audit(UserAudit.CREATED_HIERARCHY);
            }
            dispatchEvent(new AnalysisChangedEvent());
            dispatchEvent(event);
            var node:AnalysisItemNode = new AnalysisItemNode();
            node.analysisItem = event.analysisItem;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(node);
            availableFields.addItem(wrapper);
            wrappers.addItem(wrapper);
            if (analysisDefinition.addedItems == null) {
                analysisDefinition.addedItems = new ArrayCollection();
            }
            analysisDefinition.addedItems.addItem(event.analysisItem);
        }

        private function createHierarchy():void {
            var window:AnalysisItemEditWindow = new AnalysisItemEditWindow();
            window.editorClass = HierarchyWindow;
            window.analysisItems = wrappers;
            window.addEventListener(AnalysisItemEditEvent.ANALYSIS_ITEM_EDIT, onNewItem, false, 0, true);
            PopUpManager.addPopUp(window, this);
            PopUpUtil.centerPopUp(window);
        }

        public function removeCalculationButton():void {
            removeChild(calculationButton);
        }

        public function removeHierarchy():void {
            removeChild(hierarchyButton);
        }

        public function explainReport():void {
            if (reportAudit != null) {
                var window:ReportExplanationWindow = new ReportExplanationWindow();
                window.audits = _reportAudit;
                PopUpManager.addPopUp(window, this, true);
                PopUpUtil.centerPopUp(window);
            }
        }
        ]]></mx:Script>
    <mx:Button id="calculationButton" toolTip="Create Calculation"
               icon="@Embed(source='../../../../assets/text_formula.png')"
               click="createCalculation()" labelPlacement="right" label="New Calculation"/>
    <mx:Button id="derivedButton" toolTip="Create Derived Grouping"
               icon="@Embed(source='../../../../assets/code.png')"
               click="createCalculatedGrouping()" labelPlacement="right" label="New Derived Grouping"/>
    <mx:Button id="derivedDateButton" toolTip="Create Derived Date"
               icon="@Embed(source='../../../../assets/calendar.png')"
               click="createCalculatedDate()" labelPlacement="right" label="New Derived Date"/>
    <mx:Button icon="@Embed(source='../../../../assets/cubes_blue_add.png')"
               toolTip="Add Hierarchy..." click="createHierarchy()" id="hierarchyButton" labelPlacement="right" label="New Hierarchy"/>
</mx:HBox>