<?xml version="1.0" ?>
<mx:HBox label="Data (F2)" icon="@Embed(source='../../../../assets/data_table.png')" paddingLeft="10"
         paddingTop="10" paddingBottom="10"
         paddingRight="10" width="100%" height="100%" xmlns:mx="http://www.adobe.com/2006/mxml"
         xmlns:datasources="com.easyinsight.datasources.*" xmlns:analysis="com.easyinsight.analysis.*">
    <mx:Metadata>
        [Event(name="analysisItemCreated", type="com.easyinsight.analysis.AnalysisItemCreationEvent")]
        [Event(name="analysisItemEdit", type="com.easyinsight.analysis.AnalysisItemEditEvent")]
        [Event(name="reportSizing", type="com.easyinsight.analysis.ReportSizingEvent")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.framework.DataService;
        import com.easyinsight.util.PopUpUtil;

        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.managers.PopUpManager;

        private var _analysisDefinition:AnalysisDefinition;

        private var _dataService:DataService;

        private var _dataView:DataViewFactory;

        private var _availableFields:ArrayCollection;

        private var _wrappers:ArrayCollection;

        private var _dataSourceInfo:DataSourceInfo;


        [Bindable(event="dataSourceInfoChanged")]
        public function get dataSourceInfo():DataSourceInfo {
            return _dataSourceInfo;
        }

        public function set dataSourceInfo(value:DataSourceInfo):void {
            if (_dataSourceInfo == value) return;
            _dataSourceInfo = value;
            dispatchEvent(new Event("dataSourceInfoChanged"));
        }

        [Bindable(event="dataServiceChanged")]
        public function get dataService():DataService {
            return _dataService;
        }

        public function set dataService(value:DataService):void {
            if (_dataService == value) return;
            _dataService = value;
            dispatchEvent(new Event("dataServiceChanged"));
        }

        [Bindable(event="dataViewChanged")]
        public function get dataView():DataViewFactory {
            return _dataView;
        }

        public function set dataView(value:DataViewFactory):void {
            if (_dataView == value) return;
            _dataView = value;
            dispatchEvent(new Event("dataViewChanged"));
        }

        [Bindable(event="availableFieldsChanged")]
        public function get availableFields():ArrayCollection {
            return _availableFields;
        }

        public function set availableFields(value:ArrayCollection):void {
            if (_availableFields == value) return;
            _availableFields = value;
            dispatchEvent(new Event("availableFieldsChanged"));
        }

        [Bindable(event="wrappersChanged")]
        public function get wrappers():ArrayCollection {
            return _wrappers;
        }

        public function set wrappers(value:ArrayCollection):void {
            if (_wrappers == value) return;
            _wrappers = value;
            dispatchEvent(new Event("wrappersChanged"));
        }

        [Bindable(event="analysisDefinitionChanged")]
        public function get analysisDefinition():AnalysisDefinition {
            return _analysisDefinition;
        }

        public function set analysisDefinition(value:AnalysisDefinition):void {
            if (_analysisDefinition == value) return;
            _analysisDefinition = value;
            dispatchEvent(new Event("analysisDefinitionChanged"));
        }

        private function showAPIInfo():void {
            var window:QuickDataSourceAPIWindow = new QuickDataSourceAPIWindow();
            window.dataSourceID = dataService.dataFeedID;
            PopUpManager.addPopUp(window, this);
            PopUpUtil.centerPopUp(window);
        }


        private function refresh():void {
            dataView.retrieveData();
        }

        private function createCalculation():void {
            var window:AnalysisItemEditWindow = new AnalysisItemEditWindow();
            window.editorClass = CalculationWindow;
            window.addEventListener(AnalysisItemEditEvent.ANALYSIS_ITEM_EDIT, onNewItem);
            PopUpManager.addPopUp(window, this);
            PopUpUtil.centerPopUp(window);
        }

        private function onNewItem(event:AnalysisItemEditEvent):void {
            dispatchEvent(new AnalysisChangedEvent());
            dispatchEvent(event);
            var node:AnalysisItemNode = new AnalysisItemNode();
            node.analysisItem = event.analysisItem;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(node);
            availableFields.addItem(wrapper);
            wrappers.addItem(wrapper);
            if (analysisDefinition.addedItems == null) {
                analysisDefinition.addedItems = new ArrayCollection();
            }
            analysisDefinition.addedItems.addItem(event.analysisItem);
        }

        private function createHierarchy():void {
            var window:AnalysisItemEditWindow = new AnalysisItemEditWindow();
            window.editorClass = HierarchyWindow;
            window.analysisItems = wrappers;
            window.addEventListener(AnalysisItemEditEvent.ANALYSIS_ITEM_EDIT, onNewItem);
            PopUpManager.addPopUp(window, this);
            PopUpUtil.centerPopUp(window);
        }

        private function createBlankField():void {
            var window:NewBlankFeedWindow = NewBlankFeedWindow(PopUpManager.createPopUp(this, NewBlankFeedWindow));
            window.addEventListener(AnalysisItemCreationEvent.ANALYSIS_ITEM_CREATED, newFieldCreated);
            PopUpUtil.centerPopUp(window);
        }

        private function newFieldCreated(event:AnalysisItemCreationEvent):void {
            dispatchEvent(new AnalysisChangedEvent());
            dispatchEvent(event);
            var node:AnalysisItemNode = new AnalysisItemNode();
            node.analysisItem = event.analysisItem;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(node);
            availableFields.addItem(wrapper);
            wrappers.addItem(wrapper);
            if (analysisDefinition.addedItems == null) {
                analysisDefinition.addedItems = new ArrayCollection();
            }
            analysisDefinition.addedItems.addItem(event.analysisItem);
        }

        private function obfuscate():void {
            dataView.obfuscate = !dataView.obfuscate;
            if (dataView.obfuscate) {
                dispatchEvent(new ReportSizingEvent(700));
            } else {
                dispatchEvent(new ReportSizingEvent(0));
            }
            dataView.retrieveData();
        }
        ]]></mx:Script>
    <mx:Button id="refreshButton" toolTip="Refresh Data"
               icon="@Embed(source='../../../../assets/refresh.png')"
               click="refresh()"/>
    <mx:Button id="calculationButton" toolTip="Create Calculation"
               icon="@Embed(source='../../../../assets/text_formula.png')"
               click="createCalculation()"/>
    <mx:Button id="newFieldButton" toolTip="Create Blank Field"
               icon="@Embed(source='../../../../assets/document_add.png')"
               click="createBlankField()"/>
    <mx:Button icon="@Embed(source='../../../../assets/cubes_blue_add.png')"
               toolTip="Add Hierarchy..." click="createHierarchy()"/>
    <mx:Button id="apiButton" toolTip="Show API Info for this Data Source"
               icon="@Embed(source='../../../../assets/app_enterprise_x16.png')" click="showAPIInfo()"/>
    <mx:Button id="obfuscateButton" toolTip="Toggle Obfuscation"
               icon="@Embed(source='../../../../assets/lock.png')" click="obfuscate()"/>
    <!--<analysis:ResultLimitComboBox limits="{limits}"/>-->
    <datasources:DataSourceDisplay dataSource="{dataSourceInfo}" width="100%"/>
</mx:HBox>