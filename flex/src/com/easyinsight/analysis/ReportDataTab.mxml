<?xml version="1.0" ?>
<mx:Canvas label="Data" icon="@Embed(source='../../../../assets/data_table.png')" width="100%" xmlns:mx="http://www.adobe.com/2006/mxml"
        height="43">
    <mx:Metadata>
        [Event(name="analysisItemEdit", type="com.easyinsight.analysis.AnalysisItemEditEvent")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import com.easyinsight.code.MarmotScriptEvent;
        import com.easyinsight.code.ReportMarmotScriptWindow;
        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.framework.DataService;
        import com.easyinsight.util.PopUpUtil;

        import mx.collections.ArrayCollection;
        import mx.managers.PopUpManager;

        private var _analysisDefinition:AnalysisDefinition;

        private var _dataService:DataService;

        private var _dataView:DataViewFactory;

        private var _availableFields:ArrayCollection;

        private var _wrappers:ArrayCollection;

        private var _dataSourceInfo:DataSourceInfo;

        [Bindable(event="dataSourceInfoChanged")]
        public function get dataSourceInfo():DataSourceInfo {
            return _dataSourceInfo;
        }

        public function set dataSourceInfo(value:DataSourceInfo):void {
            if (_dataSourceInfo == value) return;
            _dataSourceInfo = value;
            dispatchEvent(new Event("dataSourceInfoChanged"));
        }

        [Bindable(event="dataServiceChanged")]
        public function get dataService():DataService {
            return _dataService;
        }

        public function set dataService(value:DataService):void {
            if (_dataService == value) return;
            _dataService = value;
            dispatchEvent(new Event("dataServiceChanged"));
        }

        [Bindable(event="dataViewChanged")]
        public function get dataView():DataViewFactory {
            return _dataView;
        }

        public function set dataView(value:DataViewFactory):void {
            if (_dataView == value) return;
            _dataView = value;
            dispatchEvent(new Event("dataViewChanged"));
        }

        [Bindable(event="availableFieldsChanged")]
        public function get availableFields():ArrayCollection {
            return _availableFields;
        }

        public function set availableFields(value:ArrayCollection):void {
            if (_availableFields == value) return;
            _availableFields = value;
            dispatchEvent(new Event("availableFieldsChanged"));
        }

        [Bindable(event="wrappersChanged")]
        public function get wrappers():ArrayCollection {
            return _wrappers;
        }

        public function set wrappers(value:ArrayCollection):void {
            if (_wrappers == value) return;
            _wrappers = value;
            dispatchEvent(new Event("wrappersChanged"));
        }

        [Bindable(event="analysisDefinitionChanged")]
        public function get analysisDefinition():AnalysisDefinition {
            return _analysisDefinition;
        }

        public function set analysisDefinition(value:AnalysisDefinition):void {
            if (_analysisDefinition == value) return;
            _analysisDefinition = value;
            dispatchEvent(new Event("analysisDefinitionChanged"));
        }

        private var _dataSourceID:int;

        public function set dataSourceID(value:int):void {
            _dataSourceID = value;
        }


        private function showAPIInfo():void {
            var window:QuickDataSourceAPIWindow = new QuickDataSourceAPIWindow();
            window.dataSourceID = dataService.dataFeedID;
            PopUpManager.addPopUp(window, this);
            PopUpUtil.centerPopUp(window);
        }

        private function createCalculation():void {
            var window:AnalysisItemEditWindow = new AnalysisItemEditWindow();
            window.editorClass = CalculationMeasureWindow;
            window.dataSourceID = _dataService.dataFeedID;
            window.analysisItems = wrappers;
            window.addEventListener(AnalysisItemEditEvent.ANALYSIS_ITEM_EDIT, onNewItem, false, 0, true);
            PopUpManager.addPopUp(window, this);
            PopUpUtil.centerPopUp(window);
            dispatchEvent(new FieldEditorEvent(FieldEditorEvent.FIELD_EDITOR_OPENED, window));
            window.addEventListener(Event.CLOSE, onClose, false, 0, true);
        }

        private function onClose(event:Event):void {
            dispatchEvent(new FieldEditorEvent(FieldEditorEvent.FIELD_EDITOR_CLOSED, event.currentTarget as AnalysisItemEditWindow));
        }

        private function createCalculatedGrouping():void {
            var window:AnalysisItemEditWindow = new AnalysisItemEditWindow();
            window.editorClass = DerivedGroupingWindow;
            window.dataSourceID = _dataService.dataFeedID;
            window.analysisItems = wrappers;
            window.addEventListener(AnalysisItemEditEvent.ANALYSIS_ITEM_EDIT, onNewItem, false, 0, true);
            PopUpManager.addPopUp(window, this);
            PopUpUtil.centerPopUp(window);
            dispatchEvent(new FieldEditorEvent(FieldEditorEvent.FIELD_EDITOR_OPENED, window));
            window.addEventListener(Event.CLOSE, onClose, false, 0, true);
        }

        private function createCalculatedDate():void {
            var window:AnalysisItemEditWindow = new AnalysisItemEditWindow();
            window.editorClass = DerivedDateWindow;
            window.dataSourceID = _dataService.dataFeedID;
            window.analysisItems = wrappers;
            window.addEventListener(AnalysisItemEditEvent.ANALYSIS_ITEM_EDIT, onNewItem, false, 0, true);
            PopUpManager.addPopUp(window, this);
            PopUpUtil.centerPopUp(window);
            dispatchEvent(new FieldEditorEvent(FieldEditorEvent.FIELD_EDITOR_OPENED, window));
            window.addEventListener(Event.CLOSE, onClose, false, 0, true);
        }

        private function onNewItem(event:AnalysisItemEditEvent):void {
            dispatchEvent(new AnalysisChangedEvent());
            dispatchEvent(event);
            var node:AnalysisItemNode = new AnalysisItemNode();
            node.analysisItem = event.analysisItem;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(node);
            availableFields.addItem(wrapper);
            wrappers.addItem(wrapper);
            if (analysisDefinition.addedItems == null) {
                analysisDefinition.addedItems = new ArrayCollection();
            }
            analysisDefinition.addedItems.addItem(event.analysisItem);
        }

        public function createHierarchy():void {
            var window:AnalysisItemEditWindow = new AnalysisItemEditWindow();
            window.editorClass = HierarchyWindow;
            window.analysisItems = wrappers;
            window.addEventListener(AnalysisItemEditEvent.ANALYSIS_ITEM_EDIT, onNewItem, false, 0, true);
            PopUpManager.addPopUp(window, this);
            PopUpUtil.centerPopUp(window);
        }

        public function removeCalculationButton():void {
            removeChild(calculationButton);
        }

        public function removeHierarchy():void {
            removeChild(hierarchyButton);
        }

        public function joinControl():void {
            var window:ReportJoinWindow = new ReportJoinWindow();
            var items:ArrayCollection = new ArrayCollection();
            for each (var wrapper:AnalysisItemWrapper in _wrappers) {
                items.addItem(wrapper.analysisItem);
            }
            window.fields = items;
            window.dataSourceID = _dataSourceID;
            window.startJoins = _analysisDefinition.joinOverrides;
            window.addEventListener(JoinOverrideEvent.JOIN_OVERRIDE_SET, onJoinOverride, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function onJoinOverride(event:JoinOverrideEvent):void {
            _analysisDefinition.joinOverrides = event.joins;
            _dataView.refresh();
        }

        private var _joinsCustomizable:Boolean;


        [Bindable(event="joinsCustomizableChanged")]
        public function get joinsCustomizable():Boolean {
            return _joinsCustomizable;
        }

        public function set joinsCustomizable(value:Boolean):void {
            if (_joinsCustomizable == value) return;
            _joinsCustomizable = value;
            dispatchEvent(new Event("joinsCustomizableChanged"));
        }

        private function customCode():void {
            var window:ReportMarmotScriptWindow = new ReportMarmotScriptWindow();
            window.script = analysisDefinition.marmotScript;
            window.afterScript = analysisDefinition.reportRunMarmotScript;
            window.addEventListener(MarmotScriptEvent.SAVE_SCRIPT, onScript, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function onScript(event:MarmotScriptEvent):void {
            analysisDefinition.marmotScript = event.script;
            analysisDefinition.reportRunMarmotScript = event.afterScript;
            dispatchEvent(new AnalysisChangedEvent());
            dataView.refresh();
        }
        ]]></mx:Script>
    <mx:Button id="calculationButton" toolTip="Create Calculation"
               icon="@Embed(source='../../../../assets/text_formula.png')"
               click="createCalculation()" labelPlacement="right" label="New Calculation" y="10" x="10"/>
    <mx:Button id="derivedButton" toolTip="Create Derived Grouping"
               icon="@Embed(source='../../../../assets/code.png')"
               click="createCalculatedGrouping()" labelPlacement="right" label="New Derived Grouping" y="10" x="148"/>
    <mx:Button id="derivedDateButton" toolTip="Create Derived Date"
               icon="@Embed(source='../../../../assets/calendar.png')"
               click="createCalculatedDate()" labelPlacement="right" label="New Derived Date" y="10" x="320"/>
    <mx:Button icon="@Embed(source='../../../../assets/cubes_blue_add.png')"
               toolTip="Add Hierarchy..." click="createHierarchy()" id="hierarchyButton" labelPlacement="right" label="New Hierarchy" y="10" x="467"/>
    <mx:Button icon="@Embed(source='../../../../assets/code_edit.png')"
               toolTip="Customize Report Code..." click="customCode()" labelPlacement="right" label="Custom Code" y="10" x="595"/>
    <mx:Button icon="@Embed(source='../../../../assets/branchx16.png')"
               toolTip="Customize Joins..." click="joinControl()" labelPlacement="right" label="Customize Joins" y="10" x="720"
            visible="{joinsCustomizable}"/>
</mx:Canvas>