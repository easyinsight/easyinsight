<?xml version="1.0" ?>
<util:EITitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*" headerHeight="0"
        creationComplete="onCreation()">
    <mx:Script><![CDATA[
        import com.easyinsight.schedule.ReportDelivery;
        import com.easyinsight.schedule.ReportDeliveryScheduleWindow;
        import com.easyinsight.util.PopUpUtil;

        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;
        import mx.validators.Validator;

        protected override function commitProperties():void {
            super.commitProperties();
            reportName = _report.name;
            reportDescription = _report.description;
            accountVisible = _report.accountVisible;
            showConnectionSave = _exchangeSave;
            connectionSave = _report.solutionVisible ? "yes" : "no";
            if (_report.analysisID == 0) {
                reportShare = "yes";
            } else {
                reportShare = _report.accountVisible ? "yes" : "no";
            }
        }

        [Bindable]
        private var connectionSave:String;

        [Bindable]
        private var reportShare:String;

        [Bindable]
        private var accountVisible:Boolean;

        private var _coreView:DisplayObject;

        public function set coreView(value:DisplayObject):void {
            _coreView = value;
        }

        private function onCreation():void {
            reportNameInput.setFocus();
        }

        [Bindable]
        private var showConnectionSave:Boolean;

        [Bindable]
        private var stackIndex:int;

        private var _report:AnalysisDefinition;

        private var _exchangeSave:Boolean;


        public function set exchangeSave(value:Boolean):void {
            _exchangeSave = value;
        }

        [Bindable]
        private var reportName:String;

        [Bindable]
        private var reportDescription:String;

        private function saved():void {
            _report = analysisService.saveAnalysisDefinition.lastResult as AnalysisDefinition;
            dispatchEvent(new SavedAnalysisEvent(_report));
            PopUpManager.removePopUp(this);
        }

        private var _closeAfterSave:Boolean = false;

        public function set closeAfterSave(value:Boolean):void {
            _closeAfterSave = value;
        }

        private function nextFromName():void {
            var results:Array = Validator.validateAll([reportNameValidator]);
            if (results.length > 0) {
                reportNameInput.setFocus();
                reportNameInput.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
            } else {
                reportName = reportNameInput.text;
                reportDescription = reportDescriptionInput.text;
                save();
            }
        }

        [Bindable]
        private var firstNextButton:String = "Save";

        private function save():void {
            _report.name = reportName;
            _report.description = reportDescription;
            _report.accountVisible = sharingGroup.selectedValue == "yes";
            stackIndex = 1;
            analysisService.saveAnalysisDefinition.send(_report);
        }

        private function excel():void {
            new ExcelCreator().exportExcel(_report, this, true);
        }

        private function pdf():void {
            new PDFCreator().exportReportToPDF(_report, this, _coreView);
        }

        private function email():void {
            exportService.getReportDelivery.send(_report.analysisID, new Date().getTimezoneOffset());
        }

        private function gotReportDelivery():void {
            var delivery:ReportDelivery = exportService.getReportDelivery.lastResult as ReportDelivery;
            var window:ReportDeliveryScheduleWindow = new ReportDeliveryScheduleWindow();
            window.fixedReportID = _report.analysisID;
            window.fixedReportName = _report.name;
            window.fixedReportURLKey = _report.urlKey;
            window.activity = delivery;
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function embed():void {
            var embedWindow:EmbedReportWindow = new EmbedReportWindow();
            embedWindow.urlKey = _report.urlKey;
            embedWindow.reportType = _report.reportType;
            embedWindow.dataSourceID = _report.dataFeedID;
            embedWindow.reportName = _report.name;
            PopUpManager.addPopUp(embedWindow, this, true);
            PopUpUtil.centerPopUp(embedWindow);
        }

        [Bindable]
        private var errorText:String;

        private function onFault(event:FaultEvent):void {
            errorText = event.fault.faultString;
            stackIndex = 2;
        }

        public function set report(value:AnalysisDefinition):void {
            _report = value;
        }
        ]]></mx:Script>
    <mx:RemoteObject id="analysisService" destination="analysisDefinition">
        <mx:method name="saveAnalysisDefinition" result="saved()" fault="onFault(event)"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="exportService" destination="exportService">
        <mx:method name="getReportDelivery" result="gotReportDelivery()"/>
    </mx:RemoteObject>
    <mx:Canvas width="600" height="400" backgroundColor="#FFFFFF" styleName="fallThroughFonts">
        <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
            <mx:ViewStack selectedIndex="{stackIndex}" width="550" height="350" backgroundColor="#FFFFFF">
                <mx:VBox height="100%" width="100%" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
                    <!-- what do you want to call this report? -->
                    <mx:Label text="What do you want to name this report?" fontSize="14" fontWeight="bold"/>
                    <mx:TextInput text="{reportName}" id="reportNameInput" width="530" fontSize="14"/>
                    <mx:Spacer height="20"/>
                    <mx:Label text="Do you want to share this report with other users in the account?" fontSize="14"
                              fontWeight="bold"/>
                    <mx:RadioButtonGroup id="sharingGroup" selectedValue="{reportShare}"/>
                    <mx:HBox width="100%" horizontalAlign="center">
                        <mx:RadioButton label="Yes" value="yes" groupName="sharingGroup" fontSize="14" tabIndex="0"/>
                        <mx:RadioButton label="No" value="no" groupName="sharingGroup" fontSize="14" tabIndex="1"/>
                    </mx:HBox>
                    <mx:Spacer height="20"/>
                    <mx:Label text="How do you want to describe this report?" fontSize="14" fontWeight="bold"/>
                    <mx:TextArea width="530" height="75" id="reportDescriptionInput"
                                         text="{reportDescription}" fontSize="14" borderStyle="inset" borderThickness="1"/>
                    <mx:Spacer height="100%"/>
                    <mx:HBox width="100%" horizontalAlign="center">
                        <util:SaveButton label="{firstNextButton}" click="nextFromName()" fontSize="14"/>
                        <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)" fontSize="14"/>
                    </mx:HBox>
                </mx:VBox>
                <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                    <mx:ProgressBar label="Saving the report..." indeterminate="true"/>
                </mx:Box>
                <mx:VBox width="100%" height="100%" horizontalAlign="center" paddingLeft="10" paddingBottom="10" paddingRight="10" paddingTop="10">
                    <mx:Label text="We're sorry, but something went wrong in saving the report." fontSize="14"/>
                    <mx:Text text="{errorText}" width="400"/>
                    <mx:Button label="Close" click="PopUpManager.removePopUp(this)" fontSize="14"/>
                </mx:VBox>
            </mx:ViewStack>
        </mx:Box>
    </mx:Canvas>
    <mx:StringValidator id="reportNameValidator" source="{reportNameInput}" property="text" minLength="2" maxLength="100"/>
</util:EITitleWindow>