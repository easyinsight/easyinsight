<?xml version="1.0" ?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" verticalScrollPolicy="off">
    <mx:Script><![CDATA[

        import mx.core.UIComponent;

        private var _overlayIndex:int;

        private var _loading:Boolean;

        private var _stackTrace:String;

        [Bindable(event="stackTraceChanged")]
        public function get stackTrace():String {
            return _stackTrace;
        }

        public function set stackTrace(value:String):void {
            if (_stackTrace == value) return;
            _stackTrace = value;
            dispatchEvent(new Event("stackTraceChanged"));
        }
        
        private var borderFill:UIComponent;
        
        private var dragComp:UIComponent;

        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
            if (highlighted) {
                
                if (!this.dragComp) {
                    var screen:Shape = new Shape();
                    screen.graphics.beginFill(0x00FF00, .1);
                    screen.graphics.drawRect(0, 0, this.width, this.height);
                    screen.graphics.endFill();
                    dragComp = new UIComponent();
                    dragComp.mouseChildren = false;
                    dragComp.mouseEnabled = false;
                    dragComp.addChild(screen);
                }

                if (!this.dragComp.parent) {
                    addChild(dragComp);
                }
                
                if (!this.borderFill) {
                    var borderShape:Shape = new Shape();
                    borderShape.graphics.lineStyle(2, 0x00AA00, 1);
                    borderShape.graphics.moveTo(0, 0);
                    borderShape.graphics.lineTo(unscaledWidth, 0);
                    borderShape.graphics.lineTo(unscaledWidth, unscaledHeight);
                    borderShape.graphics.lineTo(0, unscaledHeight);
                    borderShape.graphics.lineTo(0, 0);
                    this.borderFill = new UIComponent();
                    this.borderFill.mouseChildren = false;
                    this.borderFill.mouseEnabled = false;
                    this.borderFill.addChild(borderShape);
                }
                
                if (!this.borderFill.parent) {
                    addChild(this.borderFill);
                }
                
                
            } else if (!highlighted) {
                if (this.borderFill && this.borderFill.parent) {
                    removeChild(this.borderFill);
                }
                if (this.dragComp && this.dragComp.parent) {
                    removeChild(this.dragComp);
                }
            }
        }

        private var highlighted:Boolean = false;

        public function highlight():void {
            highlighted = true;
            invalidateDisplayList();
        }

        public function normal():void {
            highlighted = false;
            invalidateDisplayList();
        }

        [Bindable(event="overlayIndexChanged")]
        public function get overlayIndex():int {
            return _overlayIndex;
        }

        public function set overlayIndex(value:int):void {
            if (_overlayIndex == value) return;
            if (overlay != null && overlay.parent) {
                removeChild(overlay);
                overlay = null;
            }
            _overlayIndex = value;
            if (overlayIndex == 1) {
                overlay = new ReportCanvasProgressBar();
            } else if (overlayIndex == 2) {
                overlay = new SomethingWentWrong();
            } else if (overlayIndex == 3) {
                overlay = new ReportCanvasErrorDisplay();
                ReportCanvasErrorDisplay(overlay).stackTrace = stackTrace;
            } else if (overlayIndex == 4) {
                overlay = new AccessError();
            } else if (overlayIndex == 5) {
                overlay = new RunReportCanvas();
            }
            if (overlay) {
                addChild(overlay);
            }
            invalidateDisplayList();
            dispatchEvent(new Event("overlayIndexChanged"));
        }

        private var overlay:UIComponent;


        [Bindable(event="loadingChanged")]
        public function get loading():Boolean {
            return _loading;
        }

        public function set loading(value:Boolean):void {
            if (_loading == value) return;
            if (!value && overlay && overlay.parent && overlayIndex == 1) {
                removeChild(overlay);
                overlay = null;
            }
            _loading = value;
            dispatchEvent(new Event("loadingChanged"));
        }
        ]]></mx:Script>
</mx:Canvas>