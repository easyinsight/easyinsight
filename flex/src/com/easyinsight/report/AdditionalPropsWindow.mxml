<?xml version="1.0" ?>
<listing:ArghButton xmlns:mx="http://www.adobe.com/2006/mxml"
                    xmlns:listing="com.easyinsight.listing.*" itemClick="onClick(event)" popUpStyleName="dropAreaPopup">
    <mx:Metadata>
        [Event(name="filterSetManage", type="flash.events.Event")]
        [Event(name="addonReportManage", type="flash.events.Event")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import com.easyinsight.SimpleReportEditor;
        import com.easyinsight.WindowManagement;
        import com.easyinsight.analysis.AnalysisChangedEvent;
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisItemWrapper;
        import com.easyinsight.analysis.DataViewFactory;
        import com.easyinsight.analysis.GenericDefinitionEditWindow;
        import com.easyinsight.analysis.JoinOverrideEvent;
        import com.easyinsight.analysis.ReportJoinWindow;
        import com.easyinsight.analysis.ReportPreferencesEvent;
        import com.easyinsight.code.MarmotScriptEvent;
        import com.easyinsight.code.ReportMarmotScriptWindow;
        import com.easyinsight.util.PopUpUtil;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.events.MenuEvent;

        import mx.managers.PopUpManager;

        private var _wrappers:ArrayCollection;
        private var _dataSourceID:int;
        private var _analysisDefinition:AnalysisDefinition;
        private var _dataView:DataViewFactory;
        private var _reportEditor:SimpleReportEditor;


        public function set reportEditor(value:SimpleReportEditor):void {
            _reportEditor = value;
        }

        [Bindable]
        private var options:ArrayCollection = new ArrayCollection();

        private function onClick(event:MenuEvent):void {
            var target:String = event.item.data;
            if (target == "editProperties") {
                editReportProperties();
            } else if (target == "customizeCode") {
                customCode();
            } else if (target == "customizeJoins") {
                joinControl();
            } else if (target == "addonReports") {
                addonReports();
            } else if (target == "filterSets") {
                filterSets();
            }
        }


        override protected function commitProperties():void {
            super.commitProperties();
            if (_analysisDefinition != null) {
                if (!_joinsCustomizable) {
                    options = new ArrayCollection([
                        {label: "Edit Properties      ", data: "editProperties"},
                        {label: "Customize Code", data: "customizeCode"},
                        {label: "Filter Sets", data: "filterSets"}
                    ]);
                } else {
                    options = new ArrayCollection([
                        {label: "Edit Properties      ", data: "editProperties"},
                        {label: "Customize Code", data: "customizeCode"},
                        {label: "Customize Joins", data: "customizeJoins"},
                        {label: "Addon Reports", data: "addonReports"},
                        {label: "Filter Sets", data: "filterSets"}
                    ]);
                }
                this.dataProvider = options;
            }

        }

        public function set wrappers(value:ArrayCollection):void {
            _wrappers = value;
        }

        public function set dataSourceID(value:int):void {
            _dataSourceID = value;
        }

        public function set analysisDefinition(value:AnalysisDefinition):void {
            _analysisDefinition = value;
        }

        public function set dataView(value:DataViewFactory):void {
            _dataView = value;
        }

        public function joinControl():void {
            var window:ReportJoinWindow = new ReportJoinWindow();
            window.report = _analysisDefinition;
            window.addonReports = _analysisDefinition.addonReports;
            var items:ArrayCollection = new ArrayCollection();
            for each (var wrapper:AnalysisItemWrapper in _wrappers) {
                items.addItem(wrapper.analysisItem);
            }
            window.fields = items;
            window.dataSourceID = _dataSourceID;
            window.startJoins = _analysisDefinition.joinOverrides;
            window.addEventListener(JoinOverrideEvent.JOIN_OVERRIDE_SET, onJoinOverride, false, 0, true);
            WindowManagement.manager.addWindow(window);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function onJoinOverride(event:JoinOverrideEvent):void {
            _analysisDefinition.joinOverrides = event.joins;
            _dataView.refresh();
        }

        private var _joinsCustomizable:Boolean;


        [Bindable(event="joinsCustomizableChanged")]
        public function get joinsCustomizable():Boolean {
            return _joinsCustomizable;
        }

        public function set joinsCustomizable(value:Boolean):void {
            if (_joinsCustomizable == value) return;
            _joinsCustomizable = value;
            invalidateProperties();
            dispatchEvent(new Event("joinsCustomizableChanged"));
        }

        private function customCode():void {
            var window:ReportMarmotScriptWindow = new ReportMarmotScriptWindow();
            window.script = _analysisDefinition.marmotScript;
            window.afterScript = _analysisDefinition.reportRunMarmotScript;
            window.addEventListener(MarmotScriptEvent.SAVE_SCRIPT, onScript, false, 0, true);
            WindowManagement.manager.addWindow(window);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function onPreferences(event:ReportPreferencesEvent):void {
            dispatchEvent(new AnalysisChangedEvent());
            _dataView.refresh();
        }

        private function editReportProperties(index:int = 0):void {
            var window:GenericDefinitionEditWindow = new GenericDefinitionEditWindow();
            window.addEventListener(ReportPreferencesEvent.REPORT_PREFERENCES, onPreferences, false, 0, true);
            window.definition = _analysisDefinition;
            window.allFields = _wrappers;
            window.startIndex = index;
            WindowManagement.manager.addWindow(window);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function onScript(event:MarmotScriptEvent):void {
            _analysisDefinition.marmotScript = event.script;
            _analysisDefinition.reportRunMarmotScript = event.afterScript;
            dispatchEvent(new AnalysisChangedEvent());
            _dataView.refresh();
        }

        private function filterSets():void {
            dispatchEvent(new Event("filterSetManage"));
        }

        private function addonReports():void {
            dispatchEvent(new Event("addonReportManage"));
        }
        ]]></mx:Script>
</listing:ArghButton>