<?xml version="1.0" ?>
<report:DataViewPage xmlns:mx="http://www.adobe.com/2006/mxml"
                     xmlns:filtering="com.easyinsight.filtering.*"
                     xmlns:report="com.easyinsight.report.*"
                     xmlns:easyinsight="com.easyinsight.*"
                     width="100%" height="100%"
                     creationComplete="onCreation()"
                     implements="com.easyinsight.util.IAsyncScreen,com.easyinsight.listing.IPerspective"
                     styleName="screenBackground">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisCloseEvent;
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisItemOverrideEvent;
        import com.easyinsight.analysis.EmbeddedDataServiceEvent;
        import com.easyinsight.analysis.EmbeddedViewFactory;
        import com.easyinsight.analysis.HierarchyDrilldownEvent;
        import com.easyinsight.analysis.HierarchyRollupEvent;
        import com.easyinsight.analysis.service.ReportRetrievalFault;
        import com.easyinsight.commands.CommandEvent;
        import com.easyinsight.commands.CommandProcessor;
        import com.easyinsight.customupload.ProblemDataEvent;
        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.filtering.TransformsUpdatedEvent;
        import com.easyinsight.framework.DataServiceLoadingEvent;
        import com.easyinsight.framework.HierarchyOverride;
        import com.easyinsight.framework.User;
        import com.easyinsight.genredata.AnalyzeEvent;

        import com.easyinsight.listing.AnalysisDefinitionAnalyzeSource;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.ActionReportLog;
        import com.easyinsight.util.EIErrorEvent;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.UserAudit;

        import mx.binding.utils.BindingUtils;
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.Container;
        import mx.managers.BrowserManager;
        import mx.managers.PopUpManager;
        import mx.states.RemoveChild;
        import mx.states.State;
        import mx.utils.URLUtil;

        public function forceRefresh():void {
            viewFactory.refresh();
        }

        private function confirmedKeep():void {
            _showAddBar = false;
            generateState();
            var window:ReportAddedWindow = new ReportAddedWindow();
            window.report = report;
            window.addEventListener("editReport", onEdit, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function onEdit(event:Event):void {
            toReportEditor();
        }

        private var _reportNavHandler:Function;


        public function set reportNavHandler(value:Function):void {
            _reportNavHandler = value;
        }

        private function exportExcel():void {
            viewFactory.updateExportMetadata();
            var window:ReportExportWindow = new ReportExportWindow();
            window.report = viewFactory.report;
            window.coreView = viewFactory.getChildAt(0);
            PopUpManager.addPopUp(window, this, true);
            window.x = exportButton.x - 20;
            window.y = exportButton.y + exportButton.height + 10;
        }

        private function onCreation():void {
            // initializeTransformContainer();
            commandProcessor = new CommandProcessor();
            addEventListener(CommandEvent.COMMAND, onCommand);
            addEventListener(HierarchyDrilldownEvent.DRILLDOWN, childFilterCreation);
            addEventListener(HierarchyRollupEvent.HIERARCHY_ROLLUP, onRollup);
            addEventListener(AnalysisItemOverrideEvent.ANALYSIS_ITEM_OVERRIDE, fieldChange);
            viewFactory.loadRenderer();
        }

        private function onRollup(event:HierarchyRollupEvent):void {

            var overrideObj:HierarchyOverride = new HierarchyOverride();
            overrideObj.analysisItemID = event.hierarchy.analysisItemID;
            overrideObj.position = event.position;
            viewFactory.addOverride(overrideObj);
            transformContainer.clearFilter(event.analysisItem);
        }

        private function fieldChange(event:AnalysisItemOverrideEvent):void {
            viewFactory.addOverride(event.analysisItemOverride);
            viewFactory.refresh();
        }

        private function childFilterCreation(event:HierarchyDrilldownEvent):void {
            viewFactory.noCache = true;
            var overrideObj:HierarchyOverride = new HierarchyOverride();
            overrideObj.analysisItemID = event.hierarchyItem.analysisItemID;
            overrideObj.position = event.position;
            viewFactory.addOverride(overrideObj);
            transformContainer.processRawFilterData(event.filterRawData, event.type == HierarchyDrilldownEvent.DRILLDOWN);
        }

        private function transformsUpdated(event:TransformsUpdatedEvent):void {
            viewFactory.filterDefinitions = transformContainer.getFilterDefinitions();
            viewFactory.refresh();
        }

        private var _filterDefinitions:ArrayCollection;


        [Bindable(event="filterDefinitionsChanged")]
        public function get filterDefinitions():ArrayCollection {
            return _filterDefinitions;
        }

        public function set filterDefinitions(value:ArrayCollection):void {
            if (_filterDefinitions == value) return;
            _filterDefinitions = value;
            dispatchEvent(new Event("filterDefinitionsChanged"));
        }

        [Bindable]
        [Embed(source='../../../../assets/table.png')]
        private var exportToExcelIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/document_out.png")]
        private var closeIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/plasma_tv.png")]
        private var fullScreenIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/edit.png")]
        private var reportEditorIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/funnel.png")]
        private var filterIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/refresh.png")]
        private var refreshIcon:Class;

        [Bindable]
        private var dataSource:DataSourceInfo;

        [Bindable]
        private var reportName:String;

        [Bindable]
        private var description:String;

        private var commandProcessor:CommandProcessor;

        private var _parameterFilters:ArrayCollection;

        [Bindable(event="parameterFiltersChanged")]
        public function get parameterFilters():ArrayCollection {
            return _parameterFilters;
        }

        public function set parameterFilters(value:ArrayCollection):void {
            if (_parameterFilters == value) return;
            _parameterFilters = value;
            invalidateProperties();
            dispatchEvent(new Event("parameterFiltersChanged"));
        }

        [Bindable]
        private var _reportID:int;

        private var _reportType:int;


        private var _dataSourceID:int;


        [Bindable(event="dataSourceIDChanged")]
        public function get dataSourceID():int {
            return _dataSourceID;
        }

        public function set dataSourceID(value:int):void {
            if (_dataSourceID == value) return;
            _dataSourceID = value;
            dispatchEvent(new Event("dataSourceIDChanged"));
        }

        [Bindable]
        private var receivedData:Boolean;

        private var _viewFactory:EmbeddedViewFactory;


        [Bindable(event="viewFactoryChanged")]
        public function get viewFactory():EmbeddedViewFactory {
            return _viewFactory;
        }

        public function set viewFactory(value:EmbeddedViewFactory):void {
            if (_viewFactory == value) return;
            _viewFactory = value;
            dispatchEvent(new Event("viewFactoryChanged"));
        }

        [Bindable]
        private var admin:Boolean;

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }

        public function set reportID(value:int):void {
            if (_reportID != value) {
                _reportID = value;
            }
        }

        public function set reportType(value:int):void {
            _reportType = value;
        }

        private var retrievedDataOnce:Boolean = false;

        [Bindable]
        private var loading:Boolean = false;

        private function dataLoadingEvent(event:DataServiceLoadingEvent):void {
            if (event.type == DataServiceLoadingEvent.LOADING_STARTED) overlayIndex = 1;
            loading = event.type == DataServiceLoadingEvent.LOADING_STARTED;
        }


        private function onProblem(event:ProblemDataEvent):void {
            viewFactory.refresh();
        }

        private var report:AnalysisDefinition;

        private function gotData(event:EmbeddedDataServiceEvent):void {
            if (event.reportFault != null) {
                event.reportFault.popup(this, onProblem);
            } else {
                dataSource = event.dataSourceInfo;
                loading = false;
                overlayIndex = 0;
                receivedData = true;
                dispatchEvent(new DataServiceLoadingEvent(DataServiceLoadingEvent.LOADING_STOPPED));
                retrievedDataOnce = true;
            }
        }

        private function toggleFilters():void {
            if (filterIndex == 1) {
                filterIndex = 0;
                filterTooltip = "Show Filters";
            } else {
                filterIndex = 1;
                filterTooltip = "Hide Filters";
            }
        }

        [Bindable]
        private var filterTooltip:String = "Hide Filters";

        private function close():void {
            dispatchEvent(new AnalysisCloseEvent());
        }

        private function toFullScreen():void {
            currentState = "FullScreen";
        }

        private function onKey(event:KeyboardEvent):void {
            if (Keyboard.ESCAPE == event.keyCode) {
                currentState = "";
            }
        }

        private function toReportEditor():void {
            var report:InsightDescriptor = new InsightDescriptor();
            report.id = _reportID;
            report.dataFeedID = _dataSourceID;
            report.name = reportName;
            report.reportType = _reportType;
            dispatchEvent(new AnalyzeEvent(new AnalysisDefinitionAnalyzeSource(report, viewFactory.filterDefinitions)));
        }

        [Bindable]
        private var filterIndex:int;

        public function getContainer():Container {
            return this;
        }

        public function refreshData():void {
            viewFactory.refresh();
        }

        private var _showBack:Boolean = true;
        private var _showFullScreen:Boolean = true;
        private var _showRefresh:Boolean = true;
        private var _showExport:Boolean = true;
        private var _showReportEditor:Boolean = true;
        private var _showFilters:Boolean = true;
        private var _showMetadata:Boolean = true;

        public function set showFilterButton(value:Boolean):void {
            _showFilters = value;
        }

        public function set showBack(value:Boolean):void {
            _showBack = value;
        }

        public function set showFullScreen(value:Boolean):void {
            _showFullScreen = value;
        }

        public function set showRefresh(value:Boolean):void {
            _showRefresh = value;
        }

        public function set showExport(value:Boolean):void {
            _showExport = value;
        }

        public function set showReportEditor(value:Boolean):void {
            _showReportEditor = value;
        }

        public function set showMetadata(value:Boolean):void {
            _showMetadata = value;
        }

        private function reportNavigation(event:ReportNavigationEvent):void {
            if (_reportNavHandler == null) {
                dispatchEvent(new AnalyzeEvent(new ReportAnalyzeSource(event.descriptor, event.filters)));
            } else {
                _reportNavHandler.call(null, event);
            }
        }

        private function saveReport():void {
            analysisService.keepReport.send(_reportID, exchangeItem.id);
        }

        private function toExchange(event:MouseEvent):void {
            dispatchEvent(new AnalysisCloseEvent());
        }

        private function toMyData(event:MouseEvent):void {
            dispatchEvent(new AnalysisCloseEvent());
        }

        override protected function createChildren():void {
            super.createChildren();
            try {

                viewFactory.reportID = _reportID;
                viewFactory.dataSourceID = _dataSourceID;
                BindingUtils.bindProperty(viewFactory, "drillthroughFilters", this, "parameterFilters");
                viewFactory.drillthroughFilters = _parameterFilters;
                reportCanvas.reportBox.addChild(viewFactory);
                viewFactory.addEventListener(EmbeddedDataServiceEvent.DATA_RETURNED, gotData);
                viewFactory.addEventListener(DataServiceLoadingEvent.LOADING_STARTED, dataLoadingEvent);
                viewFactory.addEventListener(DataServiceLoadingEvent.LOADING_STOPPED, dataLoadingEvent);
                viewFactory.addEventListener(ReportNavigationEvent.TO_REPORT, reportNavigation);
                viewFactory.addEventListener(ReportRetrievalFault.RETRIEVAL_FAULT, onRetrievalFault);
                viewFactory.addEventListener(EIErrorEvent.ERROR, onError);
                viewFactory.addEventListener(ReportSetupEvent.REPORT_SETUP, onSetup);

                loading = true;

                // if filters were passed in
                overlayIndex = 0;
                if (_reportID != 0) {
                    UserAudit.instance().log(new ActionReportLog(ActionReportLog.VIEW, _reportID));
                }
                viewFactory.setup();
            } catch(e:Error) {
                Alert.show(e.message);
            }
        }

        private function onSetup(event:ReportSetupEvent):void {
            report = event.reportInfo.report;

            var editItem:ContextMenuItem = new ContextMenuItem("Edit " + report.name);
            editItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(event:ContextMenuEvent):void {
                toReportEditor();
            });
            var exportItem:ContextMenuItem = new ContextMenuItem("Export " + report.name);
            exportItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(event:ContextMenuEvent):void {
                exportExcel();
            });
            var menu:ContextMenu = new ContextMenu();
            menu.hideBuiltInItems();
            menu.customItems = [ editItem, exportItem ];
            viewFactory.contextMenu = menu;

            reportName = report.name;
            description = report.description;
            admin = event.reportInfo.admin;


            if (!admin) {
                if (leftButtonBar.contains(editReportButton)) {
                    leftButtonBar.removeChild(editReportButton);
                }
                showReportEditor = false;
            }
            if (report.filterDefinitions != null && report.filterDefinitions.length > 0) {
                filterDefinitions = report.filterDefinitions;
                viewFactory.filterDefinitions = filterDefinitions;
                filterIndex = 1;
            } else {
                if (leftButtonBar.contains(filterButton)) {
                    leftButtonBar.removeChild(filterButton);
                    filterIndex = 0;
                    filterDefinitions = new ArrayCollection();
                }
            }
            transformContainer.addEventListener(TransformsUpdatedEvent.UPDATED_TRANSFORMS, transformsUpdated);
            generateState();
            viewFactory.refresh();
        }

        private function onError(event:EIErrorEvent):void {
            stackTrace = event.error.getStackTrace();
            overlayIndex = 3;
        }

        [Bindable]
        private var overlayIndex:int;

        [Bindable]
        private var failureMessage:String;

        private function onRetrievalFault(event:ReportRetrievalFault):void {
            failureMessage = event.message;
            overlayIndex = 2;
        }

        public function cleanup():void {
        }

        override protected function generateState():void {
            super.generateState();
            var ops:Array = [];
            if (!_showExport) {
                var removeExportButton:RemoveChild = new RemoveChild();
                removeExportButton.target = exportButton;
                ops.push(removeExportButton);
            }
            if (!_showReportEditor || _showAddBar || User.getInstance().guestUser) {
                var removeEditButton:RemoveChild = new RemoveChild();
                removeEditButton.target = editReportButton;
                ops.push(removeEditButton);
            }
            if (!_showRefresh) {
                var removeRefreshButton:RemoveChild = new RemoveChild();
                removeRefreshButton.target = refreshButton;
                ops.push(removeRefreshButton);
            }
            if (ops.length > 0) {
                var state:State = new State();
                var name:String = "report" + stateIndex++;
                state.name = name;
                state.overrides = ops;
                var states:Array = [];
                states.push(state);
                if (lastState != null) {
                    states.push(lastState);
                }
                this.states = states;
                lastState = state;
                currentState = name;
            } else {
                currentState = "";
            }
            showReportInfoButton = !_showAddBar;
            if (!_showAddBar && contains(box)) {
                removeChild(box);
            }
            box.visible = true;
            if (!_showAddBar) {
                var feedFragmentObject:Object = new Object();
                feedFragmentObject.reportID = report.urlKey;
                var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
                BrowserManager.getInstance().setFragment(feedFragmentString);
                BrowserManager.getInstance().setTitle("Easy Insight - " + reportName);
            } else {
                var templateFragmentObject:Object = new Object();
                templateFragmentObject.reportTemplateID = exchangeItem.descriptor.urlKey;
                var templateFragmentString:String = URLUtil.objectToString(templateFragmentObject);
                BrowserManager.getInstance().setFragment(templateFragmentString);
                BrowserManager.getInstance().setTitle("Easy Insight - " + reportName);
            }
        }

        private function toggleReportInfo():void {
            if (reportInfoLabel == "Show Report Info") {
                reportInfoLabel = "Hide Report Info";
                addChildAt(box, 2);
            } else {
                reportInfoLabel = "Show Report Info";
                removeChild(box);
            }
        }

        private var stateIndex:int = 1;

        private var lastState:State;

        [Bindable]
        private var stackTrace:String;

        [Bindable]
        private var reportInfoLabel:String = "Show Report Info";

        [Bindable]
        private var showReportInfoButton:Boolean;

        [Bindable]
        private var showingFilters:Boolean = false;
        ]]></mx:Script>
    <mx:HBox width="100%" id="leftButtonBar" styleName="topButtonBar">
        <mx:Button click="toMyData(event)" icon="{closeIcon}" labelPlacement="right" id="backButton"
                   toolTip="Close the report" label="Close Report" styleName="grayButton"/>
        <report:RefreshButton icon="{refreshIcon}" labelPlacement="right"
                   id="refreshButton" toolTip="Refresh this report" label="Refresh" styleName="grayButton"
                viewFactory="{viewFactory}" dataSource="{dataSource}"/>
        <mx:Button icon="{exportToExcelIcon}" click="exportExcel()"
                   labelPlacement="right"
                   id="exportButton" toolTip="Export the report..." label="Export" styleName="grayButton"/>
        <mx:Button click="toggleFilters()" icon="{filterIcon}" labelPlacement="right"
                   id="filterButton" toolTip="{filterTooltip}" label="Toggle Filters" styleName="grayButton"/>
        <mx:Button icon="{reportEditorIcon}" click="toReportEditor()"
                   labelPlacement="right" id="editReportButton"
                   toolTip="Open this report in the report editor..." label="Edit Report" styleName="grayButton"/>
        <mx:Spacer width="100%"/>
        <easyinsight:LoggedOnStatus textColor="#FFFFFF"/>
    </mx:HBox>
    <mx:HBox width="100%" horizontalAlign="center" paddingTop="5" paddingBottom="5" verticalAlign="middle">
        <mx:Label text="{reportName}" fontSize="24" maxWidth="600" color="#000000"/>
        <mx:LinkButton label="{reportInfoLabel}" textDecoration="underline" fontSize="14" visible="{showReportInfoButton}" click="toggleReportInfo()"/>
    </mx:HBox>

    <mx:Box width="100%" styleName="descriptionContainer" id="box" visible="false">
        <report:DefaultDescriptionArea previousReportLabel="{previousReportLabel}" previousReportAvailable="{previousReportAvailable}"
                nextReportAvailable="{nextReportAvailable}" nextReportLabel="{nextReportLabel}" showAdd="{_showAddBar}" description="{description}"
                previousReport="toPreviousReport()" nextReport="toNextReport()" saveToAccount="saveReport()"/>
    </mx:Box>
    <mx:ViewStack width="100%" resizeToContent="true" creationPolicy="all" selectedIndex="{filterIndex}">
        <mx:Box/>
        <mx:VBox width="100%" horizontalAlign="center">
            <filtering:TransformContainer id="transformContainer" filterEditable="false"
                                          existingFilters="{filterDefinitions}"
                                          width="100%" feedID="{dataSourceID}"
                                          reportView="true" reportID="{_reportID}"/>
        </mx:VBox>
    </mx:ViewStack>
    <mx:Box width="100%" height="100%" paddingLeft="10" paddingRight="10" paddingBottom="10">
        <mx:VBox width="100%" height="100%" styleName="screenContent">
            <report:ReportCanvas id="reportCanvas" stackTrace="{stackTrace}" overlayIndex="{overlayIndex}"
                                 loading="false"/>
        </mx:VBox>
    </mx:Box>
    <mx:RemoteObject id="analysisService" destination="analysisDefinition">
        <mx:method name="keepReport" result="confirmedKeep()"/>
    </mx:RemoteObject>
</report:DataViewPage>