<?xml version="1.0" ?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:easyinsight="com.easyinsight.*"
         xmlns:filtering="com.easyinsight.filtering.*"
         xmlns:datasources="com.easyinsight.datasources.*"
         xmlns:analysis="com.easyinsight.analysis.*" xmlns:util="com.easyinsight.util.*"
         xmlns:report="com.easyinsight.report.*"
         width="100%" height="100%"
         creationComplete="onCreation()" backgroundColor="#FFFFFF"
         implements="com.easyinsight.util.IAsyncScreen,com.easyinsight.listing.IPerspective"
         paddingBottom="10" paddingLeft="10" paddingRight="10" verticalGap="0" horizontalAlign="center"
         direction="vertical">
    <mx:states>
        <mx:State name="FullScreen">
            <mx:RemoveChild target="{topDisplay}"/>
        </mx:State>
    </mx:states>
    <mx:Script><![CDATA[
        import com.easyinsight.administration.feed.Tag;
        import com.easyinsight.analysis.AnalysisCloseEvent;
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.EmbeddedDataServiceEvent;
        import com.easyinsight.analysis.HierarchyDrilldownEvent;
        import com.easyinsight.analysis.HierarchyRollupEvent;
        import com.easyinsight.analysis.ReportRatingEvent;
        import com.easyinsight.analysis.service.ReportRetrievalFault;
        import com.easyinsight.commands.CommandEvent;
        import com.easyinsight.commands.CommandProcessor;
        import com.easyinsight.customupload.ProblemDataEvent;
        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.filtering.TransformsUpdatedEvent;
        import com.easyinsight.framework.DataServiceLoadingEvent;
        import com.easyinsight.framework.HierarchyOverride;
        import com.easyinsight.framework.NavigationEvent;
        import com.easyinsight.framework.User;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.listing.AnalysisDefinitionAnalyzeSource;
        import com.easyinsight.skin.ApplicationSkin;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.EIErrorEvent;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.UserAudit;

        import mx.binding.utils.BindingUtils;
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.Application;
        import mx.core.Container;
        import mx.formatters.DateFormatter;
        import mx.formatters.NumberFormatter;
        import mx.managers.BrowserManager;
        import mx.managers.PopUpManager;
        import mx.utils.URLUtil;

        [Bindable]
        [Embed(source="../../../../assets/banner4.jpg")]
        public var backImage:Class;

        public function forceRefresh():void {
            viewFactory.retrieveData();
        }

        private function confirmedKeep():void {
            exchangeIndex = 0;
            leftButtonBar.addChildAt(editReportButton, 4);
            var window:ReportAddedWindow = new ReportAddedWindow();
            window.report = report;
            window.addEventListener("editReport", onEdit);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function onEdit(event:Event):void {
            toReportEditor();
        }

        private var _reportNavHandler:Function;


        public function set reportNavHandler(value:Function):void {
            _reportNavHandler = value;
        }

        private function toBrowser():void {
            navigateToURL(new URLRequest("https://www.easy-insight.com/app/#reportID=" + _reportID), "_blank");
        }

        private function exportExcel():void {
            viewFactory.updateExportMetadata();
            var window:ReportExportWindow = new ReportExportWindow();
            window.report = viewFactory.report;
            window.coreView = viewFactory.getChildAt(0);
            PopUpManager.addPopUp(window, this);
            window.x = exportButton.x - 20;
            window.y = exportButton.y + exportButton.height + 10;
        }

        [Bindable]
        private var _embedded:Boolean;

        public function set embedded(value:Boolean):void {
            _embedded = value;
        }

        private var _origin:int;

        public function set origin(value:int):void {
            _origin = value;
        }

        private var _prefix:String = "";


        public function set prefix(value:String):void {
            _prefix = value;
        }

        private function subscribedToInsight():void {
            var result:Boolean = analysisService.subscribeToAnalysis.lastResult as Boolean;
            if (result) {
                Alert.show("This report will now show in your My Data page.");
            } else {
                Alert.show("This report is already in your My Data page.");
            }
        }

        private function bookmark():void {
            analysisService.subscribeToAnalysis.send(_reportID);
        }

        private function onCreation():void {
            // initializeTransformContainer();
            commandProcessor = new CommandProcessor();
            addEventListener(CommandEvent.COMMAND, onCommand);
            addEventListener(HierarchyDrilldownEvent.DRILLDOWN, childFilterCreation);
            addEventListener(HierarchyRollupEvent.HIERARCHY_ROLLUP, onRollup);
            viewFactory.loadRenderer();
        }

        private function onRollup(event:HierarchyRollupEvent):void {

            var overrideObj:HierarchyOverride = new HierarchyOverride();
            overrideObj.analysisItemID = event.hierarchy.analysisItemID;
            overrideObj.position = event.position;
            viewFactory.addOverride(overrideObj);
            transformContainer.clearFilter(event.analysisItem);
        }

        private function childFilterCreation(event:HierarchyDrilldownEvent):void {
            viewFactory.noCache = true;
            var overrideObj:HierarchyOverride = new HierarchyOverride();
            overrideObj.analysisItemID = event.hierarchyItem.analysisItemID;
            overrideObj.position = event.position;
            viewFactory.addOverride(overrideObj);
            transformContainer.processRawFilterData(event.filterRawData, event.type == HierarchyDrilldownEvent.DRILLDOWN);
        }

        private function transformsUpdated(event:TransformsUpdatedEvent):void {
            viewFactory.filterDefinitions = transformContainer.getFilterDefinitions();
            viewFactory.retrieveData(false);
        }

        private var _filterDefinitions:ArrayCollection;


        [Bindable(event="filterDefinitionsChanged")]
        public function get filterDefinitions():ArrayCollection {
            return _filterDefinitions;
        }

        public function set filterDefinitions(value:ArrayCollection):void {
            if (_filterDefinitions == value) return;
            _filterDefinitions = value;
            dispatchEvent(new Event("filterDefinitionsChanged"));
        }

        /*[Bindable]
         private var lastDataTime:String;*/

        [Bindable]
        [Embed(source='../../../../assets/table.png')]
        private var exportToExcelIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/star2_grey.png")]
        private var noRatingIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/star2_green.png")]
        private var ratedIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/document_out.png")]
        private var closeIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/plasma_tv.png")]
        private var fullScreenIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/edit.png")]
        private var reportEditorIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/funnel.png")]
        private var filterIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/bookmark_blue.png")]
        private var bookmarkIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/refresh.png")]
        private var refreshIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/window_earth.png")]
        private var browserIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/logo2.PNG")]
        private var logo:Class;

        [Bindable]
        [Embed(source="../../../../assets/chart_area_x32.png")]
        private var myDataIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/shopping_bag_x32.png")]
        private var exchangeIcon:Class;

        [Bindable]
        private var dataSource:DataSourceInfo;

        [Bindable]
        private var reportName:String;

        [Bindable]
        private var ownerName:String;

        [Bindable]
        private var attribution:String;

        [Bindable]
        private var reportRating:String;

        [Bindable]
        private var reportRatingCount:String;

        [Bindable]
        private var reportViews:String;

        [Bindable]
        private var description:String;

        [Bindable]
        private var tags:String;

        [Bindable]
        private var reportDate:String;

        [Bindable]
        private var _placeHolderID:int;

        private var commandProcessor:CommandProcessor;

        [Bindable]
        private var rateReportText:String;

        private var _parameterFilters:ArrayCollection;

        private var _originReportID:int;


        [Bindable(event="originReportIDChanged")]
        public function get originReportID():int {
            return _originReportID;
        }

        public function set originReportID(value:int):void {
            if (_originReportID == value) return;
            _originReportID = value;
            dispatchEvent(new Event("originReportIDChanged"));
        }

        private var _originReportScore:Number;

        public function set originReportScore(value:Number):void {
            _originReportScore = value;
        }


        [Bindable(event="parameterFiltersChanged")]
        public function get parameterFilters():ArrayCollection {
            return _parameterFilters;
        }

        public function set parameterFilters(value:ArrayCollection):void {
            if (_parameterFilters == value) return;
            _parameterFilters = value;
            invalidateProperties();
            dispatchEvent(new Event("parameterFiltersChanged"));
        }

        [Bindable]
        private var _score:Number;

        [Bindable]
        private var _reportID:int;

        private var _reportType:int;

        private var reportChanged:Boolean;


        private var _dataSourceID:int;


        [Bindable(event="dataSourceIDChanged")]
        public function get dataSourceID():int {
            return _dataSourceID;
        }

        public function set dataSourceID(value:int):void {
            if (_dataSourceID == value) return;
            _dataSourceID = value;
            dispatchEvent(new Event("dataSourceIDChanged"));
        }

        [Bindable]
        private var receivedData:Boolean;

        private var _viewFactory:AbstractViewFactory;


        [Bindable(event="viewFactoryChanged")]
        public function get viewFactory():AbstractViewFactory {
            return _viewFactory;
        }

        public function set viewFactory(value:AbstractViewFactory):void {
            if (_viewFactory == value) return;
            _viewFactory = value;
            dispatchEvent(new Event("viewFactoryChanged"));
        }

        [Bindable]
        private var admin:Boolean;

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }

        public function set reportID(value:int):void {
            if (_reportID != value) {
                _reportID = value;
                reportChanged = true;
            }
        }

        public function set reportType(value:int):void {
            _reportType = value;
        }

        override protected function commitProperties():void {
            super.commitProperties();
            setStyle("backgroundImage", ApplicationSkin.instance().reportBackground);
            setStyle("backgroundSize", ApplicationSkin.instance().reportBackgroundSize);
            if (!_embedded) {
            }
            if (retrievedDataOnce) {
                viewFactory.retrieveData();
            }
        }

        private var retrievedDataOnce:Boolean = false;

        [Bindable]
        private var loading:Boolean = false;

        private function dataLoadingEvent(event:DataServiceLoadingEvent):void {
            if (event.type == DataServiceLoadingEvent.LOADING_STARTED) overlayIndex = 1;
            loading = event.type == DataServiceLoadingEvent.LOADING_STARTED;
        }


        private function onProblem(event:ProblemDataEvent):void {
            viewFactory.retrieveData(false);
        }

        private var report:AnalysisDefinition;

        private function gotData(event:EmbeddedDataServiceEvent):void {
            if (event.reportFault != null) {
                event.reportFault.popup(this, onProblem);
            } else {
                UserAudit.instance().audit(UserAudit.OPEN_REPORT_VIEW);
                report = event.analysisDefinition;
                dataSource = event.dataSourceInfo;
                reportName = report.name;
                var nf:NumberFormatter = new NumberFormatter();
                nf.precision = 2;
                if (_originReportID > 0) {
                    _score = _originReportScore;
                    _placeHolderID = _originReportID;
                    if (ratingText == "") {
                        analysisService.getReportMetrics.send(_originReportID);
                    }
                } else {
                    _score = event.ratingsAverage;
                    _placeHolderID = _dataSourceID;
                }
                description = report.description;
                attribution = event.attribution;
                tags = "";
                if (report.tagCloud != null && report.tagCloud.length > 0) {
                    for each (var tag:Tag in report.tagCloud) {
                        tags += tag.tagName;
                        tags += ",";
                    }
                    tags = tags.substring(0, tags.length - 1);
                }
                admin = event.dataSourceAccessible;

                if (report.filterDefinitions != null && report.filterDefinitions.length > 0) {
                    filterDefinitions = report.filterDefinitions;
                    filterIndex = 1;
                } else {
                    if (leftButtonBar.contains(filterButton)) {
                        leftButtonBar.removeChild(filterButton);
                        filterIndex = 0;
                        filterDefinitions = new ArrayCollection();
                    }
                }

                transformContainer.addEventListener(TransformsUpdatedEvent.UPDATED_TRANSFORMS, transformsUpdated);
                if (!admin) {
                    if (leftButtonBar.contains(editReportButton)) {
                        leftButtonBar.removeChild(editReportButton);
                    }
                    showReportEditor = false;
                }
                ownerName = report.authorName;
                var dateFormatter:DateFormatter = new DateFormatter();
                switch (User.getInstance().dateFormat) {
                    case 0:
                        dateFormatter.formatString = "MM/DD/YYYY HH:NN";
                        break;
                    case 1:
                        dateFormatter.formatString = "YYYY-MM-DD HH:NN";
                        break;
                    case 2:
                        dateFormatter.formatString = "DD-MM-YYYY HH:NN";
                        break;
                    case 3:
                        dateFormatter.formatString = "DD/MM/YYYY HH:NN";
                        break;
                    case 4:
                        dateFormatter.formatString = "DD.MM.YYYY HH:NN";
                        break;
                }
                reportDate = dateFormatter.format(report.dateCreated);
                // lastDataTime = dateFormatter.format(event.lastDataTime);
                if (!_embedded && _updateURL && !_showAddBar) {
                    var feedFragmentObject:Object = new Object();
                    feedFragmentObject.reportID = report.urlKey;
                    var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
                    BrowserManager.getInstance().setFragment(feedFragmentString);
                    BrowserManager.getInstance().setTitle("Easy Insight - " + reportName);
                } else if (_showAddBar) {
                    var templateFragmentObject:Object = new Object();
                    templateFragmentObject.reportTemplateID = _templateUrlKey;
                    var templateFragmentString:String = URLUtil.objectToString(templateFragmentObject);
                    BrowserManager.getInstance().setFragment(templateFragmentString);
                    BrowserManager.getInstance().setTitle("Easy Insight - " + reportName);
                }
                loading = false;
                overlayIndex = 0;
                receivedData = true;
                dispatchEvent(new DataServiceLoadingEvent(DataServiceLoadingEvent.LOADING_STOPPED));
                retrievedDataOnce = true;
            }
        }

        [Bindable]
        private var reportRatingNumber:int;

        private function toggleFilters():void {
            if (filterIndex == 1) {
                filterIndex = 0;
                filterTooltip = "Show Filters";
            } else {
                filterIndex = 1;
                filterTooltip = "Hide Filters";
            }
        }

        [Bindable]
        private var filterTooltip:String = "Hide Filters";

        private var _templateUrlKey:String;


        public function set templateUrlKey(value:String):void {
            _templateUrlKey = value;
        }

        private function close():void {
            dispatchEvent(new AnalysisCloseEvent(this));
        }

        private function toFullScreen():void {
            addEventListener(KeyboardEvent.KEY_UP, onKey);
            Application.application.stage.displayState = StageDisplayState.FULL_SCREEN;
            currentState = "FullScreen";
        }

        private function onKey(event:KeyboardEvent):void {
            if (Keyboard.ESCAPE == event.keyCode) {
                currentState = "";
            }
        }

        private function toReportEditor():void {
            var report:InsightDescriptor = new InsightDescriptor();
            report.id = _reportID;
            report.dataFeedID = _dataSourceID;
            report.name = reportName;
            report.reportType = _reportType;
            dispatchEvent(new AnalyzeEvent(new AnalysisDefinitionAnalyzeSource(report, viewFactory.filterDefinitions)));
        }

        [Bindable]
        private var filterIndex:int;

        public function getContainer():Container {
            return this;
        }

        public function refreshData():void {
            viewFactory.retrieveData(false);
        }

        public function canRefresh():Boolean {
            return false;
        }

        public function canViewInBrowser():Boolean {
            return false;
        }

        public function getBrowserURL():String {
            return null;
        }

        private var _showBack:Boolean = true;
        private var _showFullScreen:Boolean = true;
        private var _showRefresh:Boolean = true;
        private var _showBookmark:Boolean = true;
        private var _showExport:Boolean = true;
        private var _showReportEditor:Boolean = true;
        private var _showFilters:Boolean = true;
        private var _showMetadata:Boolean = true;
        private var _showBrowser:Boolean = false;
        private var _showLogo:Boolean = false;

        public function set showLogo(value:Boolean):void {
            _showLogo = value;
        }

        public function set showBrowser(value:Boolean):void {
            _showBrowser = value;
        }

        public function set showFilterButton(value:Boolean):void {
            _showFilters = value;
        }

        public function set showBack(value:Boolean):void {
            _showBack = value;
        }

        public function set showFullScreen(value:Boolean):void {
            _showFullScreen = value;
        }

        public function set showRefresh(value:Boolean):void {
            _showRefresh = value;
        }

        public function set showBookmark(value:Boolean):void {
            _showBookmark = value;
        }

        public function set showExport(value:Boolean):void {
            _showExport = value;
        }

        public function set showReportEditor(value:Boolean):void {
            _showReportEditor = value;
        }

        public function set showMetadata(value:Boolean):void {
            _showMetadata = value;
        }

        private function reportNavigation(event:ReportNavigationEvent):void {
            if (_reportNavHandler == null) {
                dispatchEvent(new AnalyzeEvent(new ReportAnalyzeSource(event.descriptor, event.filters)));
            } else {
                _reportNavHandler.call(null, event);
            }
        }

        private function saveReport(event:MouseEvent):void {
            analysisService.keepReport.send(_reportID);
        }

        private function signup(event:MouseEvent):void {
            User.getEventNotifier().dispatchEvent(new NavigationEvent(NavigationEvent.ACCOUNTS));
        }

        private function toExchange(event:MouseEvent):void {
            var props:Object = new Object();
            dispatchEvent(new AnalysisCloseEvent(this, null, "Exchange", props));
        }

        private function toMyData(event:MouseEvent):void {
            dispatchEvent(new AnalysisCloseEvent(this));
        }

        override protected function createChildren():void {
            super.createChildren();
            try {
                if (!_showBack) {
                    leftButtonBar.removeChild(backButton);
                } else {
                    if (_origin == ReportAnalyzeSource.ORIGIN_EXCHANGE) {
                        var idx1:int = leftButtonBar.getChildIndex(backButton);
                        leftButtonBar.removeChild(backButton);
                        var exchangeButton:Button = new Button();
                        exchangeButton.label = "More Reports";
                        exchangeButton.labelPlacement = "bottom";
                        exchangeButton.setStyle("icon", exchangeIcon);
                        exchangeButton.addEventListener(MouseEvent.CLICK, toExchange);
                        leftButtonBar.addChildAt(exchangeButton, idx1);
                    } else if (_origin == ReportAnalyzeSource.ORIGIN_MY_DATA) {
                        var idx2:int = leftButtonBar.getChildIndex(backButton);
                        leftButtonBar.removeChild(backButton);
                        var myDataButton:Button = new Button();
                        myDataButton.label = "My Data";

                        myDataButton.labelPlacement = "bottom";
                        myDataButton.setStyle("icon", myDataIcon);
                        myDataButton.addEventListener(MouseEvent.CLICK, toMyData);
                        leftButtonBar.addChildAt(myDataButton, idx2);
                    }
                }
                if (!_showFullScreen) {
                    leftButtonBar.removeChild(fullScreenButton);
                }
                if (!_showBookmark || _showAddBar) {
                    leftButtonBar.removeChild(bookmarkButton);
                }
                if (!_showExport) {
                    leftButtonBar.removeChild(exportButton);
                }
                if (!_showReportEditor || _showAddBar || User.getInstance().guestUser) {
                    leftButtonBar.removeChild(editReportButton);
                }
                if (!_showBrowser) {
                    leftButtonBar.removeChild(browserButton);
                }
                if (!_showRefresh) {
                    leftButtonBar.removeChild(refreshButton);
                }

                if (_showAddBar) {
                    if (!User.getInstance().guestUser) {
                        exchangeIndex = 1;
                    }
                }

                if (User.getInstance().guestUser) {
                    highBox.removeChild(dataSourceDisplay);
                } else {
                    dataSourceDisplay.visible = true;
                }

                viewFactory.reportID = _reportID;
                viewFactory.prefix = _prefix;
                viewFactory.dataSourceID = _dataSourceID;
                BindingUtils.bindProperty(viewFactory, "drillthroughFilters", this, "parameterFilters");
                viewFactory.drillthroughFilters = _parameterFilters;
                reportCanvas.reportBox.addChild(viewFactory);
                viewFactory.addEventListener(EmbeddedDataServiceEvent.DATA_RETURNED, gotData);
                viewFactory.addEventListener(DataServiceLoadingEvent.LOADING_STARTED, dataLoadingEvent);
                viewFactory.addEventListener(DataServiceLoadingEvent.LOADING_STOPPED, dataLoadingEvent);
                viewFactory.addEventListener(ReportNavigationEvent.TO_REPORT, reportNavigation);
                viewFactory.addEventListener(ReportRetrievalFault.RETRIEVAL_FAULT, onRetrievalFault);
                viewFactory.addEventListener(EIErrorEvent.ERROR, onError);

                if (!_embedded) {
                    loading = true;
                }

                // if filters were passed in
                overlayIndex = 1;
                viewFactory.retrieveData(false);
            } catch(e:Error) {
                Alert.show(e.message);
            }
        }

        private function onError(event:EIErrorEvent):void {
            stackTrace = event.error.getStackTrace();
            overlayIndex = 3;
        }

        private var _previousReport:ReportHandle;

        private var _nextReport:ReportHandle;

        [Bindable]
        private var overlayIndex:int;

        [Bindable]
        private var failureMessage:String;

        private function onRetrievalFault(event:ReportRetrievalFault):void {
            failureMessage = event.message;
            overlayIndex = 2;
        }

        private var _showAddBar:Boolean = false;

        public function set showAddBar(value:Boolean):void {
            _showAddBar = value;
        }

        private var _updateURL:Boolean = true;

        public function set updateURL(value:Boolean):void {
            _updateURL = value;
        }

        public function cleanup():void {
            //reportBox.removeChild(viewFactory);
        }

        [Bindable]
        private var stackTrace:String;

        [Bindable]
        private var exchangeIndex:int;

        [Bindable]
        private var showingFilters:Boolean = false;

        [Bindable]
        private var ratingText:String = "";

        [Bindable]
        private var myRatingNumber:int;

        [Bindable]
        [Embed(source="../../../../assets/arrow_left_blue.png")]
        private var previousReportArrow:Class;

        [Bindable]
        [Embed(source="../../../../assets/arrow_right_blue.png")]
        private var nextReportArrow:Class;

        [Bindable]
        private var whenCreated:String = "5 months ago";

        [Bindable]
        private var currentRating:String = "5.00";

        private function toPreviousReport():void {

        }

        private function gotMetrics():void {
            var metrics:ReportMetrics = analysisService.getReportMetrics.lastResult as ReportMetrics;
            var nf:NumberFormatter = new NumberFormatter();
            nf.precision = 2;
            currentRating = nf.format(metrics.average);
            ratingText = report.authorName;
            myRatingNumber = metrics.myRating;
        }

        private function toNextReport():void {

        }

        public function gotFocus():void {
        }

        private function updateRating(event:ReportRatingEvent):void {
            var nf:NumberFormatter = new NumberFormatter();
            nf.precision = 2;
            currentRating = nf.format(event.newRating);
        }

        ]]></mx:Script>

    <mx:VBox borderStyle="solid" borderThickness="1" borderColor="#DDDDDD" id="topDisplay" backgroundColor="#FFFFFF">
        <mx:HBox width="100%" verticalAlign="middle" paddingLeft="5" paddingRight="5" paddingBottom="5" paddingTop="5">
            <mx:ViewStack resizeToContent="true">
                <mx:Box/>
                <mx:HBox>
                    <mx:Button icon="{previousReportArrow}" toolTip="Previous Report" click="toPreviousReport()"/>
                    <mx:VRule height="50"/>
                </mx:HBox>
            </mx:ViewStack>
            <mx:HBox width="1000" id="highBox">
                <mx:VBox>
                    <mx:HBox paddingTop="10" id="leftButtonBar" paddingBottom="10" width="100%">
                        <mx:Button click="toMyData(event)" icon="{closeIcon}" labelPlacement="bottom" id="backButton"
                                   toolTip="Close the report view"/>
                        <mx:Button click="toFullScreen()" icon="{fullScreenIcon}" labelPlacement="bottom"
                                   id="fullScreenButton" toolTip="View full screen"/>
                        <mx:Button click="refreshData()" icon="{refreshIcon}" labelPlacement="bottom"
                                   id="refreshButton" toolTip="Refresh this report"/>
                        <mx:Button click="bookmark()" icon="{bookmarkIcon}" labelPlacement="bottom"
                                   id="bookmarkButton" toolTip="Save this report to My Data..."/>
                        <mx:Button icon="{exportToExcelIcon}" click="exportExcel()"
                                   labelPlacement="bottom"
                                   id="exportButton" toolTip="Export the report..."/>
                        <mx:Button click="toggleFilters()" icon="{filterIcon}" labelPlacement="bottom"
                                   id="filterButton" toolTip="{filterTooltip}"/>
                        <mx:Button icon="{reportEditorIcon}" click="toReportEditor()"
                                   labelPlacement="bottom" id="editReportButton"
                                   toolTip="Open this report in the report editor..."/>
                        <mx:Button click="toBrowser()" icon="{browserIcon}" labelPlacement="bottom"
                                   id="browserButton"/>
                        <mx:Spacer width="100%"/>
                        <mx:Label text="{reportName}" fontFamily="Tahoma" fontWeight="bold" maxWidth="350"
                                  fontSize="14"/>
                        <mx:Spacer width="100%"/>
                    </mx:HBox>
                    <util:AutoSizeTextArea text="{description}" visible="true" fontSize="12" width="720"
                                           editable="false" backgroundAlpha="0"/>
                </mx:VBox>
                <mx:Spacer width="100%"/>
                <mx:ViewStack selectedIndex="{exchangeIndex}" resizeToContent="true">
                    <datasources:DataSourceDisplay dataSource="{dataSource}" width="100%" dataView="{viewFactory}"
                                               id="dataSourceDisplay"
                                               visible="false"/>
                    <mx:VBox verticalGap="3" horizontalAlign="center">
                        <mx:HBox verticalAlign="middle">
                            <mx:VBox verticalGap="0">
                                <mx:Label text="Created by:" color="#555555" fontSize="10" fontStyle="italic"/>
                                <mx:Label text="{ratingText}" color="#2525D4"/>
                                <!--<mx:Label text="{whenCreated}" fontSize="10"/>-->
                            </mx:VBox>
                            <mx:VBox backgroundColor="#2525D4" borderColor="#2525D4" verticalGap="0" borderStyle="solid" borderThickness="1" cornerRadius="5" horizontalAlign="center">
                                <mx:Label text="{currentRating}" fontSize="16" color="#FFFFFF"/>
                                <mx:Label text="Average Score" fontSize="10" color="#FFFFFF"/>
                            </mx:VBox>
                        </mx:HBox>
                        <analysis:ReportRating score="{myRatingNumber}" rateable="true" reportID="{originReportID}"
                                reportRating="updateRating(event)"/>
                        <mx:Label text="Rate it yourself!" fontSize="8"/>
                    </mx:VBox>
                </mx:ViewStack>
            </mx:HBox>
            <mx:ViewStack resizeToContent="true">
                <mx:Box/>
                <mx:HBox>
                    <mx:VRule height="50"/>
                    <mx:Button icon="{nextReportArrow}" toolTip="Next Report" click="toNextReport()"/>
                </mx:HBox>
            </mx:ViewStack>
        </mx:HBox>

        <mx:ViewStack resizeToContent="true" selectedIndex="{exchangeIndex}" width="100%">
            <mx:Box/>
            <mx:HBox paddingTop="15" verticalAlign="middle" width="100%" horizontalAlign="center">
                    <mx:TextArea
                            text="Want to save this report to your account? You can use the report as it stands or just use it as a starting point and change fields, add filters, update styling, or anything else!"
                            editable="false" selectable="false" width="620" borderStyle="none" backgroundAlpha="0"
                            fontSize="12"/>
                    <mx:Button label="Save to my Account" fontSize="14" styleName="blueButton"
                               click="saveReport(event)"/>
            </mx:HBox>
        </mx:ViewStack>
        <mx:Box width="100%" backgroundImage="{backImage}" backgroundSize="100%" height="18"/>
    </mx:VBox>
    <mx:VBox width="100%" height="100%" paddingLeft="0" paddingRight="0">
        <mx:ViewStack width="100%" resizeToContent="true" creationPolicy="all" selectedIndex="{filterIndex}">
            <mx:Box/>
            <mx:VBox width="100%" horizontalAlign="center">
                <filtering:TransformContainer id="transformContainer" filterEditable="false" borderStyle="solid"
                                              borderThickness="1"
                                              existingFilters="{filterDefinitions}"
                                              width="100%" paddingLeft="10"
                                              paddingTop="10" paddingBottom="10"
                                              paddingRight="10" feedID="{dataSourceID}" borderColor="#AAAAAA"
                                              backgroundColor="#FFFFFF"/>
            </mx:VBox>
        </mx:ViewStack>
        <report:ReportCanvas id="reportCanvas" stackTrace="{stackTrace}" overlayIndex="{overlayIndex}" loading="{loading}"
                />
    </mx:VBox>
    <mx:RemoteObject id="analysisService" destination="analysisDefinition">
        <mx:method name="subscribeToAnalysis" result="subscribedToInsight()"/>
        <mx:method name="keepReport" result="confirmedKeep()"/>
        <mx:method name="getReportMetrics" result="gotMetrics()"/>
    </mx:RemoteObject>
</mx:VBox>