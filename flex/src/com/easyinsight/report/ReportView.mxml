<?xml version="1.0" ?>
<easyinsight:FullScreenPage xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:easyinsight="com.easyinsight.*"
                            xmlns:filtering="com.easyinsight.filtering.*"
                            xmlns:datasources="com.easyinsight.datasources.*"
                            xmlns:analysis="com.easyinsight.analysis.*"
                            width="100%" height="100%"
                            creationComplete="onCreation()"
                            implements="com.easyinsight.util.IAsyncScreen,com.easyinsight.framework.IFullScreenPage">
    <easyinsight:states>
        <mx:State name="FullScreen">
            <mx:RemoveChild target="{buttonBar}"/>
            <mx:RemoveChild target="{hrule}"/>
            <mx:RemoveChild target="{reportMetadata}"/>
        </mx:State>
    </easyinsight:states>
    <mx:Script><![CDATA[
        import com.easyinsight.LoginDialog;
        import com.easyinsight.administration.feed.Tag;
        import com.easyinsight.analysis.AnalysisCloseEvent;
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.EmbeddedDataServiceEvent;
        import com.easyinsight.analysis.HierarchyDrilldownEvent;
        import com.easyinsight.analysis.HierarchyRollupEvent;
        import com.easyinsight.analysis.RefreshReportSourceWindow;
        import com.easyinsight.commands.CommandEvent;
        import com.easyinsight.commands.CommandProcessor;
        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.detail.DataDetailEvent;
        import com.easyinsight.filtering.FilterDefinition;
        import com.easyinsight.filtering.TransformsUpdatedEvent;
        import com.easyinsight.framework.CredentialsCache;
        import com.easyinsight.framework.DataServiceLoadingEvent;
        import com.easyinsight.framework.HierarchyOverride;
        import com.easyinsight.framework.NavigationEvent;
        import com.easyinsight.framework.User;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.listing.AnalysisDefinitionAnalyzeSource;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.PopUpUtil;

        import mx.binding.utils.BindingUtils;
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.Application;
        import mx.core.Container;
        import mx.formatters.DateFormatter;
        import mx.formatters.NumberFormatter;
        import mx.managers.BrowserManager;
        import mx.managers.PopUpManager;
        import mx.utils.URLUtil;

        public function forceRefresh():void {
            viewFactory.retrieveData();
        }

        private function confirmedKeep():void {
            addReportBox.removeAllChildren();
            buttonBar.addChildAt(editReportButton, 4);
        }

        private var _reportNavHandler:Function;


        public function set reportNavHandler(value:Function):void {
            _reportNavHandler = value;
        }

        private function toBrowser():void {
            navigateToURL(new URLRequest("https://www.easy-insight.com/app/#reportID=" + _reportID), "_blank");
        }

        private function exportExcel():void {
            var window:ReportExportWindow = new ReportExportWindow();
            window.reportID = _reportID;
            window.reportType = _reportType;
            window.dataSourceID = _dataSourceID;
            window.reportName = reportName;
            window.coreView = viewFactory.getChildAt(0);
            window.filterDefinitions = filterDefinitions;
            window.embeddedFilters = viewFactory.drillthroughFilters;
            PopUpManager.addPopUp(window, this);
            window.x = exportButton.x - 20;
            window.y = exportButton.y + exportButton.height + 10;
        }

        [Bindable]
        private var _embedded:Boolean;

        public function set embedded(value:Boolean):void {
            _embedded = value;
        }

        private var _origin:int;

        public function set origin(value:int):void {
            _origin = value;
        }

        private var _prefix:String = "";


        public function set prefix(value:String):void {
            _prefix = value;
        }

        private function subscribedToInsight():void {
            var result:Boolean = analysisService.subscribeToAnalysis.lastResult as Boolean;
            if (result) {
                Alert.show("This report will now show in your My Data page.");
            } else {
                Alert.show("This report is already in your My Data page.");
            }
        }

        private function bookmark():void {
            if (User.getInstance() == null) {
                var loginDialog:LoginDialog = LoginDialog(PopUpManager.createPopUp(this, LoginDialog, true));
                PopUpUtil.centerPopUp(loginDialog);
            } else {
                analysisService.subscribeToAnalysis.send(_reportID);
            }
        }

        private function onCreation():void {
            // initializeTransformContainer();
            commandProcessor = new CommandProcessor();
            addEventListener(CommandEvent.COMMAND, onCommand);
            addEventListener(HierarchyDrilldownEvent.DRILLDOWN, childFilterCreation);
            addEventListener(HierarchyRollupEvent.HIERARCHY_ROLLUP, onRollup);
            addEventListener(DataDetailEvent.DATA_DETAIL, toDetails);
        }

        private function onRollup(event:HierarchyRollupEvent):void {

            var overrideObj:HierarchyOverride = new HierarchyOverride();
            overrideObj.analysisItemID = event.hierarchy.analysisItemID;
            overrideObj.position = event.position;
            viewFactory.addOverride(overrideObj);
            transformContainer.clearFilter(event.analysisItem);
        }

        private function childFilterCreation(event:HierarchyDrilldownEvent):void {
            viewFactory.noCache = true;
            var overrideObj:HierarchyOverride = new HierarchyOverride();
            overrideObj.analysisItemID = event.hierarchyItem.analysisItemID;
            overrideObj.position = event.position;
            viewFactory.addOverride(overrideObj);
            transformContainer.processRawFilterData(event.filterRawData, event.type == HierarchyDrilldownEvent.DRILLDOWN);
        }

        private function toDetails(event:DataDetailEvent):void {
            var filter:FilterDefinition = transformContainer.createSimpleFilter(event.filterRawData);
            var filters:ArrayCollection = transformContainer.getFilterDefinitions();
            var allFilters:ArrayCollection = new ArrayCollection(filters.toArray());
            allFilters.addItem(filter);
            // TODO: implement
            //detailService.getAllData.send(dataService.dataFeedID, allFilters);
        }

        private function transformsUpdated(event:TransformsUpdatedEvent):void {
            viewFactory.filterDefinitions = transformContainer.getFilterDefinitions();
            viewFactory.retrieveData(false);
        }

        private var _filterDefinitions:ArrayCollection;


        [Bindable(event="filterDefinitionsChanged")]
        public function get filterDefinitions():ArrayCollection {
            return _filterDefinitions;
        }

        public function set filterDefinitions(value:ArrayCollection):void {
            if (_filterDefinitions == value) return;
            _filterDefinitions = value;
            dispatchEvent(new Event("filterDefinitionsChanged"));
        }

        /*[Bindable]
         private var lastDataTime:String;*/

        [Bindable]
        [Embed(source='../../../../assets/table_x32.png')]
        private var exportToExcelIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/star2_grey.png")]
        private var noRatingIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/background2.JPG")]
        private var background2:Class;

        [Bindable]
        [Embed(source="../../../../assets/star2_green.png")]
        private var ratedIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/document_out_x32.png")]
        private var closeIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/plasma_tv_x32.png")]
        private var fullScreenIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/edit.png")]
        private var reportEditorIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/funnel_x32.png")]
        private var filterIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/bookmark_blue.png")]
        private var bookmarkIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/refresh_x32.png")]
        private var refreshIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/window_earth.png")]
        private var browserIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/logo2.PNG")]
        private var logo:Class;

        [Bindable]
        [Embed(source="../../../../assets/chart_area_x32.png")]
        private var myDataIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/shopping_bag_x32.png")]
        private var exchangeIcon:Class;

        [Bindable]
        private var dataSource:DataSourceInfo;

        [Bindable]
        private var reportName:String;

        [Bindable]
        private var ownerName:String;

        [Bindable]
        private var attribution:String;

        [Bindable]
        private var reportRating:String;

        [Bindable]
        private var reportRatingCount:String;

        [Bindable]
        private var reportViews:String;

        [Bindable]
        private var description:String;

        [Bindable]
        private var tags:String;

        [Bindable]
        private var reportDate:String;

        [Bindable]
        private var _placeHolderID:int;

        private var commandProcessor:CommandProcessor;

        [Bindable]
        private var rateReportText:String;

        private var _parameterFilters:ArrayCollection;

        private var _originReportID:int;

        public function set originReportID(value:int):void {
            _originReportID = value;
        }

        private var _originReportScore:Number;

        public function set originReportScore(value:Number):void {
            _originReportScore = value;
        }


        [Bindable(event="parameterFiltersChanged")]
        public function get parameterFilters():ArrayCollection {
            return _parameterFilters;
        }

        public function set parameterFilters(value:ArrayCollection):void {
            if (_parameterFilters == value) return;
            _parameterFilters = value;
            invalidateProperties();
            dispatchEvent(new Event("parameterFiltersChanged"));
        }

        [Bindable]
        private var _score:Number;

        [Bindable]
        private var _reportID:int;

        private var _reportType:int;

        private var reportChanged:Boolean;


        private var _dataSourceID:int;


        [Bindable(event="dataSourceIDChanged")]
        public function get dataSourceID():int {
            return _dataSourceID;
        }

        public function set dataSourceID(value:int):void {
            if (_dataSourceID == value) return;
            _dataSourceID = value;
            dispatchEvent(new Event("dataSourceIDChanged"));
        }

        [Bindable]
        private var receivedData:Boolean;

        private var _viewFactory:AbstractViewFactory;

        public function get viewFactory():AbstractViewFactory {
            return _viewFactory;
        }

        public function set viewFactory(value:AbstractViewFactory):void {
            _viewFactory = value;
        }

        [Bindable]
        private var admin:Boolean;

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }

        public function set reportID(value:int):void {
            if (_reportID != value) {
                _reportID = value;
                reportChanged = true;
            }
        }

        public function set reportType(value:int):void {
            _reportType = value;
        }

        override protected function commitProperties():void {
            super.commitProperties();
            if (!_embedded) {
                setStyle("backgroundImage", background2);
                setStyle("backgroundSize", "100%");
            }
            if (retrievedDataOnce) {
                viewFactory.retrieveData();
            }
        }

        private var retrievedDataOnce:Boolean = false;

        private function dataLoadingEvent(event:DataServiceLoadingEvent):void {
            progressBar.visible = event.type == DataServiceLoadingEvent.LOADING_STARTED;
        }


        private function onCredentials():void {
            viewFactory.retrieveData(false);
        }

        private var report:AnalysisDefinition;

        private function gotData(event:EmbeddedDataServiceEvent):void {
            if (event.credentialRequirements != null) {
                CredentialsCache.getCache().obtainCredentials(this, event.credentialRequirements, onCredentials);
            } else {
                report = event.analysisDefinition;
                dataSource = event.dataSourceInfo;
                reportName = report.name;
                var nf:NumberFormatter = new NumberFormatter();
                if (_originReportID > 0) {
                    _score = _originReportScore;
                    _placeHolderID = _originReportID;
                } else {
                    _score = event.ratingsAverage;
                    _placeHolderID = _dataSourceID;
                }
                reportRatingCount = nf.format(event.ratingsCount);
                reportRating = nf.format(event.ratingsAverage);
                reportViews = String(report.viewCount);
                description = report.description;
                attribution = event.attribution;
                tags = "";
                if (report.tagCloud != null && report.tagCloud.length > 0) {
                    for each (var tag:Tag in report.tagCloud) {
                        tags += tag.tagName;
                        tags += ",";
                    }
                    tags = tags.substring(0, tags.length - 1);
                }
                admin = event.dataSourceAccessible;
                if (report.filterDefinitions != null && report.filterDefinitions.length > 0) {
                    filterDefinitions = report.filterDefinitions;
                    showFilters = true;
                } else {
                    filterDefinitions = new ArrayCollection();
                    if (buttonBar.contains(adjustFiltersbutton)) {
                        buttonBar.removeChild(adjustFiltersbutton);
                    }
                }
                transformContainer.addEventListener(TransformsUpdatedEvent.UPDATED_TRANSFORMS, transformsUpdated);
                if (!admin) {
                    if (buttonBar.contains(editReportButton)) {
                        buttonBar.removeChild(editReportButton);
                    }
                    showReportEditor = false;
                }
                ownerName = report.authorName;
                var dateFormatter:DateFormatter = new DateFormatter();
                dateFormatter.formatString = "MM/DD/YYYY HH:NN";
                reportDate = dateFormatter.format(report.dateCreated);
                // lastDataTime = dateFormatter.format(event.lastDataTime);
                if (!_embedded && _updateURL) {
                    var feedFragmentObject:Object = new Object();
                    feedFragmentObject.reportID = String(_reportID);
                    var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
                    BrowserManager.getInstance().setFragment(feedFragmentString);
                    BrowserManager.getInstance().setTitle("Easy Insight - " + reportName);
                    progressBar.visible = false;
                }
                receivedData = true;
                dispatchEvent(new DataServiceLoadingEvent(DataServiceLoadingEvent.LOADING_STOPPED));
                retrievedDataOnce = true;
            }
        }

        private function close():void {
            dispatchEvent(new AnalysisCloseEvent(this));
        }

        private function toFullScreen():void {
            Alert.show("You can return to normal view by hitting Escape.");
            addEventListener(KeyboardEvent.KEY_UP, onKey);
            Application.application.stage.displayState = StageDisplayState.FULL_SCREEN;
            currentState = "FullScreen";
        }

        private function onKey(event:KeyboardEvent):void {
            if (Keyboard.ESCAPE == event.keyCode) {
                currentState = "";
            }
        }

        private function toReportEditor():void {
            var report:InsightDescriptor = new InsightDescriptor();
            report.id = _reportID;
            report.dataFeedID = _dataSourceID;
            report.name = reportName;
            report.reportType = _reportType;
            dispatchEvent(new AnalyzeEvent(new AnalysisDefinitionAnalyzeSource(report, viewFactory.filterDefinitions)));
        }


        [Bindable]
        private var showFilters:Boolean;

        private function adjustFilters():void {
            transformBox.selectedIndex = transformBox.selectedIndex == 0 ? 1 : 0;
        }

        public function getContainer():Container {
            return this;
        }

        public function refreshData():void {
            var window:RefreshReportSourceWindow = new RefreshReportSourceWindow();
            window.dataSourceID = _dataSourceID;
            window.reportID = _reportID;
            window.embeddedViewFactory = viewFactory;
            if (transformContainer != null) {
                window.filterDefinitions = transformContainer.getFilterDefinitions();
            }
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
            //viewFactory.retrieveData(false);
        }

        public function canRefresh():Boolean {
            return false;
        }

        public function canViewInBrowser():Boolean {
            return false;
        }

        public function getBrowserURL():String {
            return null;
        }

        private var _showBack:Boolean = true;
        private var _showFullScreen:Boolean = true;
        private var _showRefresh:Boolean = true;
        private var _showBookmark:Boolean = true;
        private var _showExport:Boolean = true;
        private var _showReportEditor:Boolean = true;
        private var _showFilters:Boolean = true;
        private var _showMetadata:Boolean = true;
        private var _showBrowser:Boolean = false;
        private var _showLogo:Boolean = false;

        public function set showLogo(value:Boolean):void {
            _showLogo = value;
        }

        public function set showBrowser(value:Boolean):void {
            _showBrowser = value;
        }

        public function set showFilterButton(value:Boolean):void {
            _showFilters = value;
        }

        public function set showBack(value:Boolean):void {
            _showBack = value;
        }

        public function set showFullScreen(value:Boolean):void {
            _showFullScreen = value;
        }

        public function set showRefresh(value:Boolean):void {
            _showRefresh = value;
        }

        public function set showBookmark(value:Boolean):void {
            _showBookmark = value;
        }

        public function set showExport(value:Boolean):void {
            _showExport = value;
        }

        public function set showReportEditor(value:Boolean):void {
            _showReportEditor = value;
        }

        public function set showMetadata(value:Boolean):void {
            _showMetadata = value;
        }

        private function reportNavigation(event:ReportNavigationEvent):void {
            if (_reportNavHandler == null) {
                dispatchEvent(new AnalyzeEvent(new ReportAnalyzeSource(event.descriptor, event.filters)));
            } else {
                _reportNavHandler.call(null, event);
            }
        }

        private function saveReport(event:MouseEvent):void {
            analysisService.keepReport.send(_reportID);
        }

        private function signup(event:MouseEvent):void {
            User.getEventNotifier().dispatchEvent(new NavigationEvent(NavigationEvent.ACCOUNTS));
        }

        private function toExchange(event:MouseEvent):void {
            var props:Object = new Object();
            dispatchEvent(new AnalysisCloseEvent(this, null, "Exchange", props));
        }

        private function toMyData(event:MouseEvent):void {
            dispatchEvent(new AnalysisCloseEvent(this));
        }

        override protected function createChildren():void {
            super.createChildren();
            if (!_showLogo) {
                buttonBar.removeChild(logoImage);
            }
            if (!_showBack) {
                buttonBar.removeChild(backButton);
            } else {
                if (_origin == ReportAnalyzeSource.ORIGIN_EXCHANGE) {
                    var idx1:int = buttonBar.getChildIndex(backButton);
                    buttonBar.removeChild(backButton);
                    var exchangeButton:Button = new Button();
                    exchangeButton.label = "More Reports";
                    exchangeButton.labelPlacement = "bottom";
                    exchangeButton.setStyle("icon", exchangeIcon);
                    exchangeButton.addEventListener(MouseEvent.CLICK, toExchange);
                    buttonBar.addChildAt(exchangeButton, idx1);
                } else if (_origin == ReportAnalyzeSource.ORIGIN_MY_DATA) {
                    var idx2:int = buttonBar.getChildIndex(backButton);
                    buttonBar.removeChild(backButton);
                    var myDataButton:Button = new Button();
                    myDataButton.label = "My Data";
                    myDataButton.labelPlacement = "bottom";
                    myDataButton.setStyle("icon", myDataIcon);
                    myDataButton.addEventListener(MouseEvent.CLICK, toMyData);
                    buttonBar.addChildAt(myDataButton, idx2);
                }
            }
            if (!_showFullScreen) {
                buttonBar.removeChild(fullScreenButton);
            }
            if (!_showBookmark || _showAddBar) {
                buttonBar.removeChild(bookmarkButton);
            }
            if (!_showExport) {
                buttonBar.removeChild(exportButton);
            }
            if (!_showFilters) {
                buttonBar.removeChild(adjustFiltersbutton);
            }
            if (!_showReportEditor || _showAddBar) {
                buttonBar.removeChild(editReportButton);
            }
            if (!_showMetadata) {
                coreBox.removeChild(reportMetadata);
            }
            if (!_showBrowser) {
                buttonBar.removeChild(browserButton);
            }
            if (!_showRefresh) {
                buttonBar.removeChild(refreshButton);
            }

            if (_showAddBar) {
                var addLabel:Label = new Label();
                addLabel.text = "Want to save this report permanently?";
                addReportBox.addChild(addLabel);
                var addButton:Button = new Button();
                addButton.label = "Save to My Data";
                addButton.addEventListener(MouseEvent.CLICK, saveReport);
                addReportBox.addChild(addButton);
            }

            if (User.getInstance() == null) {
                var signUpLabel:Label = new Label();
                signUpLabel.text = "Want to publish your own data or save your own reports?";
                addReportBox.addChild(signUpLabel);
                var signUpButton:Button = new Button();
                signUpButton.label = "Free account signup";
                signUpButton.addEventListener(MouseEvent.CLICK, signup);
                addReportBox.addChild(signUpButton);
            }

            viewFactory.reportID = _reportID;
            viewFactory.prefix = _prefix;
            viewFactory.dataSourceID = _dataSourceID;
            BindingUtils.bindProperty(viewFactory, "drillthroughFilters", this, "parameterFilters");
            viewFactory.drillthroughFilters = _parameterFilters;
            reportBox.addChild(viewFactory);
            viewFactory.addEventListener(EmbeddedDataServiceEvent.DATA_RETURNED, gotData);
            viewFactory.addEventListener(DataServiceLoadingEvent.LOADING_STARTED, dataLoadingEvent);
            viewFactory.addEventListener(DataServiceLoadingEvent.LOADING_STOPPED, dataLoadingEvent);
            viewFactory.addEventListener(ReportNavigationEvent.TO_REPORT, reportNavigation);

            if (!_embedded) {
                progressBar.visible = true;
            }

            // if filters were passed in

            viewFactory.retrieveData(false);
        }

        private var _showAddBar:Boolean = false;

        public function set showAddBar(value:Boolean):void {
            _showAddBar = value;
        }

        private var _updateURL:Boolean = true;

        public function set updateURL(value:Boolean):void {
            _updateURL = value;
        }

        override public function cleanup():void {
            reportBox.removeChild(viewFactory);
        }

        ]]></mx:Script>
    <mx:VBox width="100%" height="100%" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
        <mx:HBox id="buttonBar" verticalAlign="middle" visible="{receivedData}" width="100%">
            <mx:Image source="{logo}" id="logoImage"
                      click="navigateToURL(new URLRequest('http://www.easy-insight.com/'), 'blank')"/>
            <mx:Button label="Back" click="close()" icon="{closeIcon}" labelPlacement="bottom" id="backButton"/>
            <mx:Button label="Full Screen" click="toFullScreen()" icon="{fullScreenIcon}" labelPlacement="bottom"
                       id="fullScreenButton"/>
            <mx:Button label="Refresh" click="refreshData()" icon="{refreshIcon}" labelPlacement="bottom"
                       id="refreshButton"/>
            <mx:Button label="Bookmark" click="bookmark()" icon="{bookmarkIcon}" labelPlacement="bottom"
                       id="bookmarkButton"/>
            <mx:Button label="Export Report" icon="{exportToExcelIcon}" click="exportExcel()" labelPlacement="bottom"
                       id="exportButton"/>
            <mx:Button label="Edit this Report" icon="{reportEditorIcon}" click="toReportEditor()"
                       labelPlacement="bottom" id="editReportButton"/>
            <mx:Button label="View in Browser" click="toBrowser()" icon="{browserIcon}" labelPlacement="bottom"
                       id="browserButton"/>
            <mx:Button label="Adjust Filters" icon="{filterIcon}" click="adjustFilters()" visible="{showFilters}"
                       labelPlacement="bottom" id="adjustFiltersbutton"/>
            <datasources:DataSourceDisplay dataSource="{dataSource}" width="100%"/>
        </mx:HBox>
        <mx:HBox width="100%" height="100%" id="coreBox">
            <mx:VBox id="reportBox" width="100%" height="100%">
                <mx:ViewStack width="100%" id="transformBox" resizeToContent="true" creationPolicy="all">
                    <mx:Box/>
                    <filtering:TransformContainer id="transformContainer" filterEditable="false"
                                              existingFilters="{filterDefinitions}"
                                              width="100%" paddingLeft="10"
                                              paddingTop="10" paddingBottom="10"
                                              paddingRight="10" feedID="{dataSourceID}"/>
                </mx:ViewStack>
                <mx:HBox width="100%" id="addReportBox" horizontalAlign="center" verticalAlign="middle"/>
                <mx:HRule width="100%" id="hrule"/>
            </mx:VBox>
            <mx:VBox id="reportMetadata">
                <mx:Form width="350">
                    <mx:FormItem label="Report Name:">
                        <mx:Label text="{reportName}" fontFamily="Lucida Grande" fontWeight="normal" maxWidth="180"/>
                    </mx:FormItem>
                    <mx:FormItem label="Author Name:">
                        <mx:Label text="{ownerName}" fontFamily="Lucida Grande" fontWeight="normal" maxWidth="180"/>
                    </mx:FormItem>
                    <mx:FormItem label="Report Creation Date:">
                        <mx:Label text="{reportDate}" fontFamily="Lucida Grande" fontWeight="normal" maxWidth="180"/>
                    </mx:FormItem>
                    <mx:FormItem label="Tags:">
                        <mx:Label text="{tags}" fontFamily="Lucida Grande" fontWeight="normal" maxWidth="180"/>
                    </mx:FormItem>
                    <mx:FormItem label="Data Attribution:">
                        <mx:Label text="{attribution}" fontFamily="Lucida Grande" fontWeight="normal" maxWidth="180"/>
                    </mx:FormItem>
                    <mx:FormItem label="Report Rating:">
                        <analysis:ReportRating reportID="{_placeHolderID}" score="{_score}" rateable="true"/>
                    </mx:FormItem>
                    <mx:FormItem label="Description:">
                        <mx:TextArea text="{description}" fontFamily="Lucida Grande" fontWeight="normal"
                                     borderStyle="none"
                                     editable="false" selectable="false" backgroundAlpha="0" width="180" height="240"/>
                    </mx:FormItem>
                </mx:Form>
                <mx:ProgressBar id="progressBar" visible="false" indeterminate="true"/>
            </mx:VBox>
        </mx:HBox>
    </mx:VBox>
    <mx:RemoteObject id="analysisService" destination="analysisDefinition">
        <mx:method name="subscribeToAnalysis" result="subscribedToInsight()"/>
        <mx:method name="keepReport" result="confirmedKeep()"/>
    </mx:RemoteObject>
</easyinsight:FullScreenPage>