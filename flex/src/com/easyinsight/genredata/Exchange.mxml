<?xml version="1.0" encoding="utf-8"?>
<skin:BackgroundImage xmlns:mx="http://www.adobe.com/2006/mxml"
                      xmlns:genredata="com.easyinsight.genredata.*"
                      implements="com.easyinsight.listing.IPerspective" creationComplete="setupListeners()"
                      xmlns:skin="com.easyinsight.skin.*">
    <mx:Script>
		<![CDATA[


        import com.easyinsight.solutions.Solution;

        import mx.collections.ArrayCollection;
        import mx.utils.URLUtil;
        import mx.managers.BrowserManager;

        private function setupListeners():void {
            solutionService.getSolutions.send();
            solutionService.getInstalledConnections.send();
        }

        private var installedConnections:Object;

        private function gotInstalledConnections():void {
            var connections:ArrayCollection = solutionService.getInstalledConnections.lastResult as ArrayCollection;
            installedConnections = new Object();
            for each (var solutionID:int in connections) {
                installedConnections[String(solutionID)] = solutionID;
            }
            solutionService.getSolutionReports.send();
        }

        private function updateURL():void {
            var fragmentObject:Object = new Object();
            fragmentObject.page = "exchange";
            //exchangeController.decorateObject(fragmentObject);
            var fragmentString:String = URLUtil.objectToString(fragmentObject);
            fragmentString = stringReplaceAll(fragmentString, ";", "&");
            BrowserManager.getInstance().setFragment(fragmentString);
        }


        public static function stringReplaceAll(source:String, find:String, replacement:String):String {
            return source.split(find).join(replacement);
        }

        /*private function updateState():void {
         }*/

        private function refreshExchange():void {
            solutionService.getSolutionReports.send();
        }

        public function gotFocus():void {
            BrowserManager.getInstance().setTitle("Easy Insight - Exchange");
            updateURL();
        }

        [Bindable(event="solutionChanged")]
        public function get solution():Object {
            return _solution;
        }

        public function set solution(value:Object):void {
            if (_solution == value) return;
            _solution = value;
            updateURL();
            dispatchEvent(new Event("solutionChanged"));
        }

        private var _solution:Object;

        public function cleanup():void {
        }

        [Bindable]
        private var solutionRows:int;

        [Bindable(event="solutionsChanged")]
        public function get solutions():ArrayCollection {
            return _solutions;
        }

        public function set solutions(value:ArrayCollection):void {
            if (_solutions == value) return;
            _solutions = value;
            dispatchEvent(new Event("solutionsChanged"));
        }

        private var _solutions:ArrayCollection;

        private function changeSolution():void {
            solution = solutionBox.selectedItem;
            reports.refresh();
            recommendedReports.refresh();
        }

        private function gotSolutions():void {
            var solutions:ArrayCollection = solutionService.getSolutions.lastResult as ArrayCollection;
            var myConnections:Object = new Object();
            myConnections["name"] = "[ My Connections ]";
            var ph:Object = new Object();
            ph["name"] = "[ All Connections ]";
            var solutionTemp:ArrayCollection = new ArrayCollection();
            for each (var solu:Solution in solutions) {
                if (solu.installable) {
                    solutionTemp.addItem(solu);
                }
            }
            this.solutions = solutionTemp;
            this.solutions.addItemAt(myConnections, 0);
            this.solutions.addItemAt(ph, 1);
            solutionRows = solutions.length;
            if (solution == null) {
                solution = this.solutions.getItemAt(0);
            }
        }

        private function onData():void {
            var reports:ArrayCollection = solutionService.getSolutionReports.lastResult as ArrayCollection;
            var recommendedReports:ArrayCollection = new ArrayCollection(reports.toArray());
            recommendedReports.filterFunction = filterRecommended;
            recommendedReports.refresh();
            reports.filterFunction = filterData;
            reports.refresh();
            this.reports = reports;
            this.recommendedReports = recommendedReports;
        }

        [Bindable]
        private var reports:ArrayCollection;

        [Bindable]
        private var recommendedReports:ArrayCollection;

        protected function filterRecommended(object:Object):Boolean {
            var reportExchangeItem:ExchangeItem = object as ExchangeItem;
            if (solution == null) {
                return false;
            }
            if (!reportExchangeItem.recommended) {
                return false;
            }
            var matched:Boolean = true;
            if (solution is Solution) {
                matched = reportExchangeItem.solutionID == solution.solutionID;
            } else if (solution.name == "[ My Connections ]") {
                matched = installedConnections[String(reportExchangeItem.solutionID)] != null;
            }
            return matched;
        }

        protected function filterData(object:Object):Boolean {
            var reportExchangeItem:ExchangeItem = object as ExchangeItem;
            if (solution == null) {
                return false;
            }
            var matched:Boolean = true;
            if (solution is Solution) {
                matched = reportExchangeItem.solutionID == solution.solutionID;
            } else if (solution.name == "[ My Connections ]") {
                matched = installedConnections[String(reportExchangeItem.solutionID)] != null;
            }
            /*if (matched) {
                if (keyword != null && keyword.length > 0) {
                    matched = reportExchangeItem.name.toLowerCase().indexOf(keyword) != -1;
                }
            }*/
            return matched;
        }

        protected override function measure():void {
            super.measure();
            if (recommendedReports != null) {
                recGrid.verticalScrollPolicy = "off";
                recGrid.height = recGrid.measureHeightOfItems(0, recommendedReports.length) + recGrid.headerHeight + 4;
            }
            if (reports != null) {
                reportGrid.height = reportGrid.measureHeightOfItems(0, reports.length) + reportGrid.headerHeight + 4;
            }
        }

                ]]>
	</mx:Script>
    <mx:RemoteObject destination="solutionService" id="solutionService">
        <mx:method name="getSolutions" result="gotSolutions()"/>
        <mx:method name="getSolutionReports" result="onData()"/>
        <mx:method name="getInstalledConnections" result="gotInstalledConnections()"/>
    </mx:RemoteObject>
    <mx:Canvas verticalScrollPolicy="on">
    <mx:VBox horizontalAlign="center" paddingLeft="10" paddingRight="10" paddingBottom="10" width="100%">
        <mx:HBox verticalAlign="middle" paddingTop="20" paddingBottom="20" paddingLeft="20"
                 paddingRight="20" width="100%">
            <mx:ComboBox id="solutionBox" change="changeSolution()" dataProvider="{solutions}" labelField="name"
                         selectedItem="{solution}"
                         rowCount="{solutionRows}"/>
            <mx:Spacer width="100%"/>
            <mx:TextArea color="0x323232" borderStyle="none" editable="false" selectable="false" backgroundAlpha="0"
                         width="600"
                         text="Click on reports below to try them out with your data. If you just need a starting point, take one of the reports and modify it to meet your needs."
                         fontSize="16"/>
            <mx:Spacer width="100%"/>
            <mx:Button icon="@Embed(source='../../../../assets/refresh.png')" toolTip="Refresh Listing" click="refreshExchange()" labelPlacement="right"
                    label="Refresh Listing"/>
        </mx:HBox>
        <mx:Label text="Recommended Reports and Dashboards" fontSize="16" fontWeight="bold"/>
            <genredata:SolutionExchangeGridPage dataProvider="{recommendedReports}" verticalScrollPolicy="off" id="recGrid"/>
        <mx:Label text="All Reports and Dashboards" fontSize="16" fontWeight="bold"/>
            <genredata:SolutionExchangeGridPage dataProvider="{reports}" height="100%" verticalScrollPolicy="off" id="reportGrid"/>

    </mx:VBox>
    </mx:Canvas>
</skin:BackgroundImage>
