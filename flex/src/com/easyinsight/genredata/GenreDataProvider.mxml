<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:listing="com.easyinsight.listing.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%"
                      height="100%"
                      xmlns:genredata="com.easyinsight.genredata.*"
                      implements="com.easyinsight.listing.IPerspective" creationComplete="setupListeners()"
        backgroundColor="#818285">
    <mx:Script>
		<![CDATA[

        import com.easyinsight.solutions.Solution;

        import mx.binding.utils.BindingUtils;
        import mx.collections.ArrayCollection;
        import mx.utils.URLUtil;
        import mx.managers.BrowserManager;

        private function setupListeners():void {
            solutionService.getSolutions.send();
            BindingUtils.bindProperty(solutionDataController, "solution", this, "solution");
            BindingUtils.bindProperty(displayTypeBar, "selectedIndex", this, "displayMode");

        }

        private function toState(index:int):void {
            viewMode = index;
            listsBox.removeAllChildren();
            exchangeController = solutionDataController;
            updateDisplayMode2();
            updateURL();
            listsBox.addChild(exchangeController.selectedPage);
            exchangeController.refreshData();
        }

        private function updateURL():void {
            var fragmentObject:Object = new Object();
            fragmentObject.page = "exchange";
            fragmentObject.view = viewMode;
            fragmentObject.display = displayMode;
            fragmentObject.subTopicID = subTopicID;
            //exchangeController.decorateObject(fragmentObject);
            var fragmentString:String = URLUtil.objectToString(fragmentObject);
            fragmentString = stringReplaceAll(fragmentString, ";", "&");
            BrowserManager.getInstance().setFragment(fragmentString);
        }



        public static function stringReplaceAll(source:String, find:String, replacement:String):String
        {
            return source.split(find).join(replacement);
        }

        private function updateDisplayMode2():void {
            displayMode = displayTypeBar.selectedIndex;
            if (displayTypeBar.selectedIndex == 1) {
                exchangeController.displayMode = "grid";
            } else if (displayTypeBar.selectedIndex == 0) {
                exchangeController.displayMode = "summary";
            } else if (displayTypeBar.selectedIndex == 2) {
                exchangeController.displayMode = "detail";
            }
            updateURL();
        }

        /*private function updateState():void {
         }*/


        [Bindable]
        [Embed(source="../../../../assets/background2.JPG")]
        private var background2:Class;


        public function gotFocus():void {
            BrowserManager.getInstance().setTitle("Easy Insight - Exchange");
            exchangeController = solutionDataController;            
            if (displayMode == 1) {
                exchangeController.displayMode = "grid";
            } else if (displayMode == 2) {
                exchangeController.displayMode = "detail";
            } else {
                exchangeController.displayMode = "summary";
            }
            if (subTopicID > 0) {
                exchangeController.subTopicID = subTopicID;
            }
            solutionDataController.initBehavior();            
            updateURL();
            listsBox.removeAllChildren();
            listsBox.addChild(exchangeController.selectedPage);
            exchangeController.refreshData();
        }

        private function onChangeView(event:ExchangeControllerEvent):void {
            listsBox.removeAllChildren();
            listsBox.addChild(event.exchangePage);
        }

        private var _viewMode:int = 0;

        private var _displayMode:int = 0;

        private var _subTopicID:int = 0;

        [Bindable(event="subTopicIDChanged")]
        public function get subTopicID():int {
            return _subTopicID;
        }

        public function set subTopicID(value:int):void {
            if (_subTopicID == value) return;
            _subTopicID = value;
            dispatchEvent(new Event("subTopicIDChanged"));
        }

        [Bindable(event="viewModeChanged")]
        public function get viewMode():int {
            return _viewMode;
        }

        public function set viewMode(value:int):void {
            if (_viewMode == value) return;
            _viewMode = value;
            dispatchEvent(new Event("viewModeChanged"));
        }

        [Bindable(event="displayModeChanged")]
        public function get displayMode():int {
            return _displayMode;
        }

        public function set displayMode(value:int):void {
            if (_displayMode == value) return;
            _displayMode = value;
            dispatchEvent(new Event("displayModeChanged"));
        }

        private var exchangeController:ExchangeController;


        [Bindable(event="solutionChanged")]
        public function get solution():Object {
            return _solution;
        }

        public function set solution(value:Object):void {
            if (_solution == value) return;
            _solution = value;
            if (value is Solution) {
                subTopicID = value.solutionID;
            } else {
                subTopicID = 0;
            }
            updateURL();
            dispatchEvent(new Event("solutionChanged"));
        }

        private var _solution:Object;

        public function cleanup():void {
        }

        [Bindable]
        private var solutionRows:int;

        [Bindable(event="solutionsChanged")]
        public function get solutions():ArrayCollection {
            return _solutions;
        }

        public function set solutions(value:ArrayCollection):void {
            if (_solutions == value) return;
            _solutions = value;
            dispatchEvent(new Event("solutionsChanged"));
        }

        private var _solutions:ArrayCollection;

        private function changeSolution():void {
            solution = solutionBox.selectedItem;    
        }

        private function gotSolutions():void {
            var solutions:ArrayCollection = solutionService.getSolutions.lastResult as ArrayCollection;
            var myConnections:Object = new Object();
            myConnections["name"] = "[ My Connections ]";
            var ph:Object = new Object();
            ph["name"] = "[ All Connections ]";
            var solutionTemp:ArrayCollection = new ArrayCollection();
            for each (var solu:Solution in solutions) {
                if (solu.installable) {
                    solutionTemp.addItem(solu);
                }
            }
            this.solutions = solutionTemp;
            this.solutions.addItemAt(myConnections, 0);
            this.solutions.addItemAt(ph, 1);
            solutionRows = solutions.length;
            if (subTopicID > 0) {
                for each (var solObj:Object in this.solutions) {
                    if (solObj is Solution) {
                        var sol:Solution = solObj as Solution;
                        if (sol.solutionID == subTopicID) {
                            solution = sol;
                        }
                    }
                }
            }
            if (solution == null) {
                solution = this.solutions.getItemAt(0);
            }
        }

                ]]>
	</mx:Script>
    <mx:RemoteObject destination="solutionService" id="solutionService">
        <mx:method name="getSolutions" result="gotSolutions()"/>
    </mx:RemoteObject>
    <!--<genredata:PublicDataController id="publicDataController" changeView="onChangeView(event)"/>-->
    <genredata:SolutionExchangeController id="solutionDataController" changeView="onChangeView(event)" solution="{solution}" updateURL="updateURL()"/>
    <mx:HBox width="100%" height="100%" horizontalAlign="center">
            <mx:VBox id="centerBox" width="1000" height="100%" paddingBottom="10"
                 paddingLeft="0" paddingRight="0" paddingTop="0" backgroundColor="#FFFFFF" verticalGap="0" horizontalAlign="center">

            <mx:HBox width="1000" verticalAlign="middle" paddingTop="20" paddingBottom="20" paddingLeft="20" paddingRight="20">
                <mx:ComboBox id="solutionBox" change="changeSolution()" dataProvider="{solutions}" labelField="name" selectedItem="{solution}"
                        rowCount="{solutionRows}"/>
                <mx:Spacer width="100%"/>
                <mx:TextArea color="0x323232" borderStyle="none" editable="false" selectable="false" backgroundAlpha="0" width="600"
                        text="Click on reports below to try them out with your data. If you just need a starting point, take one of the reports and modify it to meet your needs." fontSize="16"/>
                <mx:Spacer width="100%"/>
                <mx:ToggleButtonBar itemClick="updateDisplayMode2()" id="displayTypeBar">
                    <mx:dataProvider>
                        <mx:Array>
                            <mx:String>Summary</mx:String>
                            <mx:String>Grid</mx:String>
                            <!--<mx:String>Detail</mx:String>-->
                        </mx:Array>
                    </mx:dataProvider>
                </mx:ToggleButtonBar>
            </mx:HBox>
            <mx:HBox width="1000" height="100%" id="listsBox" paddingTop="5" paddingBottom="5" paddingLeft="20" paddingRight="20"/>
        </mx:VBox>
    </mx:HBox>
</mx:Canvas>
