<?xml version="1.0" ?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:analysis="com.easyinsight.analysis.*" paddingTop="5" paddingBottom="5"
        paddingLeft="0" paddingRight="0" horizontalScrollPolicy="off" verticalScrollPolicy="off" width="181" horizontalAlign="center"
        mouseChildren="false" useHandCursor="true" buttonMode="true" click="addReport()" toolTip="{reportDescription}">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.framework.User;
        import com.easyinsight.listing.ListingChangeEvent;
        import com.easyinsight.report.PackageAnalyzeSource;
        import com.easyinsight.report.ReportAnalyzeSource;
        import com.easyinsight.reportpackage.ReportPackageDescriptor;
        import com.easyinsight.solutions.InsightDescriptor;

        import com.easyinsight.util.PopUpUtil;

        import com.easyinsight.util.ProgressAlert;

        import mx.collections.ArrayCollection;
        import mx.formatters.DateFormatter;
        import mx.managers.PopUpManager;

        private function installedReport():void {
            var insightDescriptor:InsightDescriptor = solutionService.installReport.lastResult as InsightDescriptor;
            // has to emit special property here to let us decide whether or not we want to keep this report
            dispatchEvent(new AnalyzeEvent(new ReportAnalyzeSource(insightDescriptor, null, true, 0, reportID, score, ExchangeReportData(_item.exchangeData).reportUrlKey)));
        }

        private function installedPackage():void {
            var packageData:ExchangePackageData = _item.exchangeData as ExchangePackageData;
            var packageDescriptor:ReportPackageDescriptor = solutionService.installPackage.lastResult as ReportPackageDescriptor;
            // has to emit special property here to let us decide whether or not we want to keep this report
            dispatchEvent(new AnalyzeEvent(new PackageAnalyzeSource(packageDescriptor, true, packageData.packageID, score)));
        }

        private function onListingEvent(event:ListingChangeEvent):void {
            dispatchEvent(event);
        }

        private function gotMatchingDataSources():void {
            var dataSources:ArrayCollection = solutionService.determineDataSource.lastResult as ArrayCollection;
            if (dataSources.length == 0) {
                var window:NoSolutionInstalledWindow = new NoSolutionInstalledWindow();
                window.solution = _item.solutionID;
                window.addEventListener(ListingChangeEvent.LISTING_CHANGE, onListingEvent);
                PopUpManager.addPopUp(window, this, true);
                PopUpUtil.centerPopUp(window);
            } else if (dataSources.length == 1) {
                ProgressAlert.alert(this, "Preparing the report...", null, solutionService.installReport);
                solutionService.installReport.send(reportID, dataSources.getItemAt(0).id);
            } else {
                var dsWindow:DataSourceChoiceWindow = new DataSourceChoiceWindow();
                dsWindow.sources = dataSources;
                dsWindow.addEventListener(DataSourceSelectionEvent.DATA_SOURCE_SELECTION, dataSourceChoice, false, 0, true);
                PopUpManager.addPopUp(dsWindow, this, true);
                PopUpUtil.centerPopUp(dsWindow);
            }
        }

        private function dataSourceChoice(event:DataSourceSelectionEvent):void {
            ProgressAlert.alert(this, "Preparing the report...", null, solutionService.installReport);
            solutionService.installReport.send(reportID, event.dataSource.id);
        }

        private function gotMatchingDataSourcesForPackage():void {
            var packageData:ExchangePackageData = _item.exchangeData as ExchangePackageData;
            var dataSources:ArrayCollection = solutionService.determineDataSourceForPackage.lastResult as ArrayCollection;
            if (dataSources.length == 0) {
                var window:NoSolutionInstalledWindow = new NoSolutionInstalledWindow();
                window.solution = _item.solutionID;
                window.addEventListener(ListingChangeEvent.LISTING_CHANGE, onListingEvent, false, 0, true);
                PopUpManager.addPopUp(window, this, true);
                PopUpUtil.centerPopUp(window);
            } else if (dataSources.length == 1) {
                ProgressAlert.alert(this, "Preparing the package...", null, solutionService.installPackage);
                solutionService.installPackage.send(packageData.packageID, dataSources.getItemAt(0).id);
            } else {
                var dsWindow:DataSourceChoiceWindow = new DataSourceChoiceWindow();
                dsWindow.sources = dataSources;
                dsWindow.addEventListener(DataSourceSelectionEvent.DATA_SOURCE_SELECTION, dataSourcePackageChoice, false, 0, true);
                PopUpManager.addPopUp(dsWindow, this, true);
                PopUpUtil.centerPopUp(dsWindow);
            }
        }

        private function dataSourcePackageChoice(event:DataSourceSelectionEvent):void {
            var packageData:ExchangePackageData = _item.exchangeData as ExchangePackageData;
            ProgressAlert.alert(this, "Preparing the report...", null, solutionService.installReport);
            solutionService.installPackage.send(packageData.packageID, event.dataSource.id);
        }

        private function addReport():void {
            if (_item.exchangeData is ExchangeReportData) {
                ProgressAlert.alert(this, "Getting the report ready...", null, solutionService.determineDataSource);
                solutionService.determineDataSource.send(dataSourceID);
            } else if (_item.exchangeData is ExchangePackageData) {
                ProgressAlert.alert(this, "Getting the package ready...", null, solutionService.determineDataSourceForPackage);
                var packageData:ExchangePackageData = _item.exchangeData as ExchangePackageData;
                solutionService.determineDataSourceForPackage.send(packageData.packageID);
            }
        }
        
        private var _item:SolutionReportExchangeItem;

        [Bindable]
        private var reportName:String;

        private var dataSourceID:int;

        [Bindable]
        private var reportDescription:String;

        [Bindable]
        private var reportImage:Class;

        [Bindable]
        private var dateCreated:String;

        [Bindable]
        private var score:Number;

        [Bindable]
        private var author:String;

        [Bindable]
        private var solutionName:String;

        [Bindable]
        private var reportID:int;

        [Bindable]
        [Embed(source="../../../../assets/report/chart_area.png")]
        private var areaChart:Class;

        [Bindable]
        [Embed(source="../../../../assets/report/chart_bar.png")]
        private var barChart:Class;

        [Bindable]
        [Embed(source="../../../../assets/report/chart_bubble.png")]
        private var bubbleChart:Class;

        [Bindable]
        [Embed(source="../../../../assets/report/chart_column.png")]
        private var columnChart:Class;

        [Bindable]
        [Embed(source="../../../../assets/report/chart_dot.png")]
        private var plotChart:Class;

        [Bindable]
        [Embed(source="../../../../assets/report/chart_line.png")]
        private var lineChart:Class;

        [Bindable]
        [Embed(source="../../../../assets/report/chart_pie.png")]
        private var pieChart:Class;

        [Bindable]
        [Embed(source="../../../../assets/report/components.png")]
        private var treeMap:Class;

        [Bindable]
        [Embed(source="../../../../assets/report/control_panel2.png")]
        private var gauge:Class;

        [Bindable]
        [Embed(source="../../../../assets/report/earth.png")]
        private var map:Class;

        [Bindable]
        [Embed(source="../../../../assets/report/table.png")]
        private var grid:Class;

        [Bindable]
        [Embed(source="../../../../assets/report/package.png")]
        private var packageIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/report/data.png")]
        private var dataIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/report/control_panel2.png")]
        private var gaugeIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/report/film.png")]
        private var film:Class;

        private function assignIcon():void {
            switch (reportType) {
                case AnalysisDefinition.AREA:
                case AnalysisDefinition.AREA3D:
                    reportImage = areaChart;
                    break;
                case AnalysisDefinition.BAR:
                case AnalysisDefinition.BAR3D:
                    reportImage = barChart;
                    break;
                case AnalysisDefinition.BUBBLE:
                    reportImage = bubbleChart;
                    break;
                case AnalysisDefinition.COLUMN:
                case AnalysisDefinition.COLUMN3D:
                    reportImage = columnChart;
                    break;
                case AnalysisDefinition.PLOT:
                    reportImage = plotChart;
                    break;
                case AnalysisDefinition.LINE:
                case AnalysisDefinition.LINE3D:
                case AnalysisDefinition.MMLINE:
                    reportImage = lineChart;
                    break;
                case AnalysisDefinition.CROSSTAB:
                case AnalysisDefinition.LIST:
                case AnalysisDefinition.TREE:
                    reportImage = grid;
                    break;
                case AnalysisDefinition.TREEMAP:
                    reportImage = treeMap;
                    break;
                case AnalysisDefinition.PIE:
                case AnalysisDefinition.PIE3D:
                    reportImage = pieChart;
                    break;
                case AnalysisDefinition.MAP:
                case AnalysisDefinition.MAP_AMERICAS:
                case AnalysisDefinition.MAP_ASIA:
                case AnalysisDefinition.MAP_EUROPE:
                case AnalysisDefinition.MAP_MIDDLE_EAST:
                case AnalysisDefinition.MAP_USA:
                case AnalysisDefinition.MAP_WORLD:
                    reportImage = map;
                    break;
                case AnalysisDefinition.GAUGE:
                    reportImage = gauge;
                    break;
                case AnalysisDefinition.TIMELINE:
                    reportImage = film;
                    break;
            }
        }

        private var reportType:int;

        override public function set data(val:Object):void {
            this._item = val as SolutionReportExchangeItem;
            if (_item != null) {
                reportName = _item.name;
                reportDescription = _item.description;
                reportID = _item.id;
                if (_item.exchangeData is ExchangeReportData) {
                    var exchangeReportData:ExchangeReportData = _item.exchangeData as ExchangeReportData;
                    reportType = exchangeReportData.reportType;
                    dataSourceID = exchangeReportData.dataSourceID;
                    assignIcon();
                } else {
                    reportImage = packageIcon;
                }

                score = _item.ratingAverage;
                var df:DateFormatter = new DateFormatter();
                df.formatString = User.getInstance().getDateFormat();
                if (_item.dateAdded == null) {
                    dateCreated = null;
                } else {
                    dateCreated = df.format(_item.dateAdded);
                }
                solutionName = _item.solutionName;
                author = _item.author;

            }
        }



        override public function get data():Object {
            return this._item;
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="solutionService" id="solutionService">
        <mx:method name="determineDataSource" result="gotMatchingDataSources()"/>
        <mx:method name="determineDataSourceForPackage" result="gotMatchingDataSourcesForPackage()"/>
        <mx:method name="installReport" result="installedReport()"/>
        <mx:method name="installPackage" result="installedPackage()"/>
    </mx:RemoteObject>

        <mx:VBox borderStyle="solid" borderThickness="1" backgroundColor="#FFFFFF" verticalAlign="middle" horizontalAlign="center" backgroundAlpha="1" height="180">
            <mx:LinkButton label="{reportName}" textDecoration="underline" fontSize="12" fontFamily="Tahoma" fontWeight="bold" maxWidth="160"
                    toolTip="View This Report" paddingLeft="0" paddingRight="0"/>
            <mx:Image source="{reportImage}"/>
            <mx:TextArea borderStyle="none" backgroundAlpha="0" editable="false" selectable="false"
                         text="{reportDescription}" width="100%" maxChars="350" verticalScrollPolicy="off" toolTip="{reportDescription}" height="90"
                    fontSize="10"/>
        </mx:VBox>

</mx:HBox>