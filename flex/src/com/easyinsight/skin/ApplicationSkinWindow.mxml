<?xml version="1.0"?>
<util:EITitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*"
                   xmlns:skin="com.easyinsight.skin.*"
                   creationComplete="onCreation()">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.ColorReportFormItem;


        import com.easyinsight.analysis.MultiColorReportFormItem;



        import com.easyinsight.analysis.ReportFormItem;

        import com.easyinsight.framework.User;

        import com.easyinsight.util.PopUpUtil;


        import mx.binding.utils.BindingUtils;

        import mx.collections.ArrayCollection;

        import mx.events.FlexEvent;
        import mx.managers.PopUpManager;

        private var lfItems:ArrayCollection = new ArrayCollection();

        public static const USER_SKIN:int = 1;
        public static const ACCOUNT_SKIN:int = 2;

        private var _skinMode:int;

        [Bindable]
        private var _initialIndex:int = 0;

        public function set initialIndex(value:int):void {
            _initialIndex = value;
        }

        public function set skinMode(value:int):void {
            _skinMode = value;
        }

        [Bindable]
        private var skin:ApplicationSkinTO;



        private function onCreation():void {
            if (_skinMode == USER_SKIN) {
                preferencesService.getUserSkin.send();
            } else if (_skinMode == ACCOUNT_SKIN) {
                preferencesService.getAccountSkin.send();
            }
        }

        private function gotUserSkin():void {
            skin = preferencesService.getUserSkin.lastResult as ApplicationSkinTO;
            gotSettings();
        }

        private function gotAccountSkin():void {
            skin = preferencesService.getAccountSkin.lastResult as ApplicationSkinTO;
            gotSettings();
        }

        private function gotSettings():void {

            if (skin == null) {
                skin = new ApplicationSkinTO();
            }

            lfItems.addItem(new ColorReportFormItem("Primary Chart Color", "customChartColor", skin.customChartColor, skin, "customChartColorEnabled"));
            lfItems.addItem(new ColorReportFormItem("Primary Chart Color Gradient End", "gradientChartColor", skin.gradientChartColor, skin, "gradientChartColorEnabled"));
            lfItems.addItem(new ColorReportFormItem("Secondary Chart Color", "secondaryColor", skin.secondaryColor, skin, "secondaryColorEnabled"));
            lfItems.addItem(new ColorReportFormItem("Summary Background Color", "summaryBackgroundColor", skin.summaryBackgroundColor, skin, "summaryBackgroundColorEnabled"));
            lfItems.addItem(new ColorReportFormItem("Summary Text Color", "summaryTextColor", skin.summaryTextColor, skin, "summaryTextColorEnabled"));
            lfItems.addItem(new ColorReportFormItem("Crosstab Header Background Color", "crosstabHeaderBackgroundColor", skin.crosstabHeaderBackgroundColor, skin, "crosstabHeaderBackgroundColorEnabled"));
            lfItems.addItem(new ColorReportFormItem("Crosstab Header Text Color", "crosstabHeaderTextColor", skin.crosstabHeaderTextColor, skin, "crosstabHeaderTextColorEnabled"));
            lfItems.addItem(new ColorReportFormItem("Grid Header Start Background", "headerStart", skin.headerStart, skin, "headerStartEnabled"));
            lfItems.addItem(new ColorReportFormItem("Grid Header End Background", "headerEnd", skin.headerEnd, skin, "headerEndEnabled"));
            lfItems.addItem(new ColorReportFormItem("Grid Header Text Color", "reportHeaderTextColor", skin.reportHeaderTextColor, skin, "reportHeaderTextColorEnabled"));
            lfItems.addItem(new ColorReportFormItem("Grid Row Background Color 1", "tableColorStart", skin.tableColorStart, skin, "tableColorStartEnabled"));
            lfItems.addItem(new ColorReportFormItem("Grid Row Background Color 2", "tableColorEnd", skin.tableColorEnd, skin, "tableColorEndEnabled"));
            lfItems.addItem(new ColorReportFormItem("Grid Text Color", "textColor", skin.textColor, skin, "textColorEnabled"));
            lfItems.addItem(new ColorReportFormItem("Stack 1 Fill Start", "dashboardStack1ColorStart", skin.dashboardStack1ColorStart, skin, "dashboardStack1ColorStartEnabled"));
            lfItems.addItem(new ColorReportFormItem("Stack 1 Fill End", "dashboardStack1ColorEnd", skin.dashboardStack1ColorEnd, skin, "dashboardStack1ColorEndEnabled"));
            lfItems.addItem(new ColorReportFormItem("Stack 2 Fill Start", "dashboardStackColor2Start", skin.dashboardStackColor2Start, skin, "dashboardStackColor2StartEnabled"));
            lfItems.addItem(new ColorReportFormItem("Stack 2 Fill End", "dashboardStackColor2End", skin.dashboardStackColor2End, skin, "dashboardStackColor2EndEnabled"));
            lfItems.addItem(new ColorReportFormItem("Report Title Background Color", "dashboardReportHeaderBackgroundColor", skin.dashboardReportHeaderBackgroundColor, skin));
            lfItems.addItem(new ColorReportFormItem("Report Title Text Color", "dashboardReportHeaderTextColor", skin.dashboardReportHeaderTextColor, skin));
            lfItems.addItem(new MultiColorReportFormItem("Primary Multi Color Report", "multiColors", skin.multiColors, skin));
            lfItems.addItem(new MultiColorReportFormItem("Secondary Multi Color Report", "secondaryMultiColors", skin.secondaryMultiColors, skin));

            reportBackgroundColor = skin.reportBackgroundColor;
            reportTextColor = skin.reportTextColor;
            headerLogo = skin.reportHeaderImage;
            customHeaderShown = skin.reportHeader;
            BindingUtils.bindProperty(this, "reportBackgroundColor", backgroundColorItem, "value");
            BindingUtils.bindProperty(this, "reportTextColor", textColorItem, "value");

            for each (var lItem:ReportFormItem in lfItems) {
                lookAndFeelForm.addChild(lItem);
            }

        }

        private function onDone(event:FlexEvent):void {
            PopUpUtil.centerPopUp(this);
        }

        private function savedSettings():void {
            var resultSkin:ApplicationSkinTO;
            if (_skinMode == USER_SKIN) {
                resultSkin = preferencesService.saveUserSkin.lastResult as ApplicationSkinTO;
            } else if (_skinMode == ACCOUNT_SKIN) {
                resultSkin = preferencesService.saveAccountSkin.lastResult as ApplicationSkinTO;
            }
            User.getInstance().applicationSkin = resultSkin;
            ApplicationSkin.instance().applyUserSettings(User.getInstance().applicationSkin);
            dispatchEvent(new Event(Event.CHANGE));
            PopUpManager.removePopUp(this);
        }

        private function save():void {
            var valid:Boolean = true;
            for each (var validateItem:ReportFormItem in lfItems) {
                valid = valid && validateItem.validate();
            }
            if (valid) {
                for each (var lItem:ReportFormItem in lfItems) {
                    lItem.save();
                }
                skin.reportHeader = customHeader.selected;
                skin.reportBackgroundColor = backgroundColorItem.selectedColor;
                skin.reportTextColor = textColorItem.selectedColor;
                skin.reportHeaderImage = logoImageBox.imageDescriptor;
                if (_skinMode == USER_SKIN) {
                    preferencesService.saveUserSkin.send(skin);
                } else if (_skinMode == ACCOUNT_SKIN) {
                    preferencesService.saveAccountSkin.send(skin);
                }
            }
        }

        private var _reportBackgroundColor:uint;
        private var _reportTextColor:uint;
        private var _headerLogo:ImageDescriptor;

        [Bindable(event="headerLogoChanged")]
        public function get headerLogo():ImageDescriptor {
            return _headerLogo;
        }

        public function set headerLogo(value:ImageDescriptor):void {
            if (_headerLogo == value) return;
            _headerLogo = value;
            dispatchEvent(new Event("headerLogoChanged"));
        }

        [Bindable(event="reportBackgroundColorChanged")]
        public function get reportBackgroundColor():uint {
            return _reportBackgroundColor;
        }

        public function set reportBackgroundColor(value:uint):void {
            if (_reportBackgroundColor == value) return;
            _reportBackgroundColor = value;
            dispatchEvent(new Event("reportBackgroundColorChanged"));
        }

        [Bindable(event="reportTextColorChanged")]
        public function get reportTextColor():uint {
            return _reportTextColor;
        }

        public function set reportTextColor(value:uint):void {
            if (_reportTextColor == value) return;
            _reportTextColor = value;
            dispatchEvent(new Event("reportTextColorChanged"));
        }

        [Bindable]
        private var customHeaderShown:Boolean;

        private var lastTab:int;

        private function onEvent(event:Event):void {
            if (lastTab != tabNavigator.selectedIndex) {
                lastTab = tabNavigator.selectedIndex;
                PopUpUtil.centerPopUp(this);
            }
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="preferencesService" id="preferencesService">
        <mx:method name="getAccountSkin" result="gotAccountSkin()"/>
        <mx:method name="getUserSkin" result="gotUserSkin()"/>
        <mx:method name="saveUserSkin" result="savedSettings()"/>
        <mx:method name="saveAccountSkin" result="savedSettings()"/>
    </mx:RemoteObject>
    <mx:VBox paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
        <mx:TabNavigator resizeToContent="true" creationPolicy="all" selectedIndex="{_initialIndex}" id="tabNavigator">
            <mx:VBox label="Report Header" paddingLeft="5" paddingBottom="5" paddingRight="5" paddingTop="5" creationComplete="onDone(event)" updateComplete="onEvent(event)">
                <mx:CheckBox label="Do you want to define a custom header for reports and dashboards?" id="customHeader" selected="{customHeaderShown}"/>
                <mx:HBox width="800" id="headerArea" paddingTop="5" paddingBottom="5" paddingLeft="10" verticalAlign="middle" enabled="{customHeader.selected}"
                         backgroundColor="{reportBackgroundColor}">
                    <mx:Box backgroundColor="#FFFFFF" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" borderColor="#FFFFFF" borderThickness="1" cornerRadius="5"
                            borderStyle="solid">
                        <skin:ShowImageBox id="logoImageBox" imageDescriptor="{headerLogo}"/>
                    </mx:Box>
                    <mx:Spacer width="100%"/>
                    <mx:Label text="Report or Dashboard Name" fontSize="24" maxWidth="600" id="reportLabel" color="{reportTextColor}"/>
                    <mx:Spacer width="100%"/>
                </mx:HBox>
                <mx:Form enabled="{customHeader.selected}">
                    <mx:FormItem label="Background Color:">
                        <mx:ColorPicker selectedColor="{reportBackgroundColor}" id="backgroundColorItem"/>
                    </mx:FormItem>
                    <mx:FormItem label="Text Color:">
                        <mx:ColorPicker selectedColor="{reportTextColor}" id="textColorItem"/>
                    </mx:FormItem>
                </mx:Form>
            </mx:VBox>
            <mx:VBox label="Look and Feel Settings" width="600" horizontalAlign="center" updateComplete="onEvent(event)" maxHeight="400">
                <mx:Form id="lookAndFeelForm" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">

                </mx:Form>
            </mx:VBox>
        </mx:TabNavigator>

        <mx:HBox width="100%" horizontalAlign="center">
            <util:SaveButton label="Save" click="save()"/>
            <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
        </mx:HBox>
    </mx:VBox>
</util:EITitleWindow>
