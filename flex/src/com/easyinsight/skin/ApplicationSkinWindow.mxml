<?xml version="1.0"?>
<util:EISlimWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*"
        creationComplete="onCreation()">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.CheckBoxReportFormItem;
        import com.easyinsight.analysis.ColorReportFormItem;

        import com.easyinsight.analysis.ComboBoxReportFormItem;
        import com.easyinsight.analysis.ImageReportFormItem;

        import com.easyinsight.analysis.NumericReportFormItem;

        import com.easyinsight.analysis.ReportFormItem;

        import com.easyinsight.framework.User;

        import com.easyinsight.util.PopUpUtil;

        import mx.collections.ArrayCollection;

        import mx.events.FlexEvent;
        import mx.managers.PopUpManager;

        private var items:ArrayCollection = new ArrayCollection();

        public static const USER_SKIN:int = 1;
        public static const ACCOUNT_SKIN:int = 2;

        private var _skinMode:int;

        [Bindable]
        private var _initialIndex:int = 0;

        public function set initialIndex(value:int):void {
            _initialIndex = value;
        }

        public function set skinMode(value:int):void {
            _skinMode = value;
        }

        private var skin:ApplicationSkinTO;

        private function onCreation():void {
            if (_skinMode == USER_SKIN) {
                preferencesService.getUserSkin.send();
            } else if (_skinMode == ACCOUNT_SKIN) {
                preferencesService.getAccountSkin.send();
            }
        }

        private function gotUserSkin():void {
            skin = preferencesService.getUserSkin.lastResult as ApplicationSkinTO;
            gotSettings();
        }

        private function gotAccountSkin():void {
            skin = preferencesService.getAccountSkin.lastResult as ApplicationSkinTO;
            gotSettings();
        }

        private function gotSettings():void {

            if (skin == null) {
                skin = new ApplicationSkinTO();
            }

            items.addItem(new ColorReportFormItem("Core Application Background Color", "coreAppBackgroundColor", skin.coreAppBackgroundColor, skin, "coreAppBackgroundColorEnabled"));
            items.addItem(new ImageReportFormItem("Core Application Background Image", "coreAppBackgroundImage", skin.coreAppBackgroundImage, skin, "coreAppBackgroundImageEnabled"));
            items.addItem(new ComboBoxReportFormItem("Core Application Background Styling", "coreAppBackgroundSize", skin.coreAppBackgroundSize, skin, ["100%", "Auto"], "coreAppBackgroundSizeEnabled"));
            items.addItem(new ColorReportFormItem("Header Bar Background Color", "headerBarBackgroundColor", skin.headerBarBackgroundColor, skin, "headerBarBackgroundColorEnabled"));
            items.addItem(new ColorReportFormItem("Header Bar Divider Color", "headerBarDividerColor", skin.headerBarDividerColor, skin, "headerBarDividerColorEnabled"));
            items.addItem(new ColorReportFormItem("Center Canvas Background Color", "centerCanvasBackgroundColor", skin.centerCanvasBackgroundColor, skin, "centerCanvasBackgroundColorEnabled"));
            items.addItem(new NumericReportFormItem("Center Canvas Background Alpha", "centerCanvasBackgroundAlpha", skin.centerCanvasBackgroundAlpha, skin, 0, 1, "centerCanvasBackgroundAlphaEnabled"));

            items.addItem(new ImageReportFormItem("Report Editor Background Image", "reportBackground", skin.reportBackground, skin, "reportBackgroundEnabled"));
            items.addItem(new ComboBoxReportFormItem("Report Editor Background Styling", "reportBackgroundSize", skin.reportBackgroundSize, skin, ["100%", "Auto"], "reportBackgroundSizeEnabled"));
            var lastItem:ReportFormItem = items.getItemAt(items.length - 1) as ReportFormItem;
            lastItem.addEventListener(FlexEvent.CREATION_COMPLETE, onDone);
            for each (var item:ReportFormItem in items) {
                reportForm.addChild(item);
            }

            var offset:int = items.length;
            items.addItem(new CheckBoxReportFormItem("Name on My Data Tree", "myDataName", skin.myDataName, skin));
            items.addItem(new CheckBoxReportFormItem("Owner on My Data Tree", "myDataOwner", skin.myDataOwner, skin));
            items.addItem(new CheckBoxReportFormItem("Creation Date on My Data Tree", "myDataCreationDate", skin.myDataCreationDate, skin));
            items.addItem(new CheckBoxReportFormItem("Size on My Data Tree", "myDataSize", skin.myDataSize, skin));
            items.addItem(new CheckBoxReportFormItem("Last Data Time on My Data Tree", "myDataLastTime", skin.myDataLastTime, skin));
            items.addItem(new CheckBoxReportFormItem("Combine Data Source", "myDataCombine", skin.myDataCombine, skin));
            items.addItem(new CheckBoxReportFormItem("Create Scorecard", "myDataNewScorecard", skin.myDataNewScorecard, skin));
            items.addItem(new CheckBoxReportFormItem("Create KPI Tree", "myDataNewKPITree", skin.myDataNewKPITree, skin));
            items.addItem(new CheckBoxReportFormItem("Create Dashboard", "myDataNewDashboard", skin.myDataNewDashboard, skin));
            items.addItem(new CheckBoxReportFormItem("Create Lookup Table", "myDataLookupTable", skin.myDataLookupTable, skin));

            for (var i:int = offset; i < items.length; i++) {
                myDataForm.addChild(DisplayObject(items.getItemAt(i)));
            }
        }

        private function onDone(event:FlexEvent):void {
            PopUpUtil.centerPopUp(this);
        }

        private function savedSettings():void {
            var resultSkin:ApplicationSkinTO;
            if (_skinMode == USER_SKIN) {
                resultSkin = preferencesService.saveUserSkin.lastResult as ApplicationSkinTO;
            } else if (_skinMode == ACCOUNT_SKIN) {
                resultSkin = preferencesService.saveAccountSkin.lastResult as ApplicationSkinTO;
            }
            User.getInstance().applicationSkin = resultSkin;
            ApplicationSkin.instance().applyUserSettings(User.getInstance().applicationSkin);
            dispatchEvent(new Event(Event.CHANGE));
            PopUpManager.removePopUp(this);
        }

        private function save():void {
            var valid:Boolean = true;
            for each (var validateItem:ReportFormItem in items) {
                valid = valid && validateItem.validate();
            }
            if (valid) {
                for each (var item:ReportFormItem in items) {
                    item.save();
                }
                if (_skinMode == USER_SKIN) {
                    preferencesService.saveUserSkin.send(skin);
                } else if (_skinMode == ACCOUNT_SKIN) {
                    preferencesService.saveAccountSkin.send(skin);
                }
            }
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="preferencesService" id="preferencesService">
        <mx:method name="getUserSkin" result="gotUserSkin()"/>
        <mx:method name="getAccountSkin" result="gotAccountSkin()"/>
        <mx:method name="saveUserSkin" result="savedSettings()"/>
        <mx:method name="saveAccountSkin" result="savedSettings()"/>
    </mx:RemoteObject>
    <mx:VBox paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
        <mx:TabNavigator resizeToContent="true" creationPolicy="all" selectedIndex="{_initialIndex}">
            <mx:VBox label="Application Settings" width="600" horizontalAlign="center">
                <mx:Form id="reportForm" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">

                </mx:Form>
            </mx:VBox>
            <mx:VBox label="My Data Settings" width="600" horizontalAlign="center">
                <mx:Form id="myDataForm" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">

                </mx:Form>
            </mx:VBox>
        </mx:TabNavigator>

        <mx:HBox width="100%" horizontalAlign="center">
            <util:SaveButton label="Save" click="save()"/>
            <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
        </mx:HBox>
    </mx:VBox>
</util:EISlimWindow>
