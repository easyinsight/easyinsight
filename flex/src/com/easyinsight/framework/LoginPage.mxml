<?xml version="1.0" ?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:viewStackEffects="org.efflex.mx.viewStackEffects.*"
           xmlns:framework="com.easyinsight.framework.*" xmlns:account="com.easyinsight.account.*"
           xmlns:kpi="com.easyinsight.kpi.*" xmlns:customupload="com.easyinsight.customupload.*"
           backgroundColor="#EEEEEE" creationComplete="setup()" width="100%" height="100%">
    <mx:Metadata>
        [Event(name="loginEvent2", type="com.easyinsight.framework.LoginEvent")]
        [Event(name="quietLogin", type="com.easyinsight.framework.LoginEvent")]
        [Event(name="connectionGo", type="com.easyinsight.framework.ConnectionGoEvent")]
        [Event(name="allDone", type="flash.events.Event")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import com.easyinsight.account.Account;
        import com.easyinsight.account.AccountSetupData;
        import com.easyinsight.customupload.ConnectionInstall;
        import com.easyinsight.customupload.DataSourceConfiguredEvent;
        import com.easyinsight.preferences.Persona;
        import com.easyinsight.quicksearch.EIDescriptor;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.solutions.PostInstallSource;
        import com.easyinsight.solutions.Solution;
        import com.easyinsight.solutions.SolutionInstallInfo;
        import com.easyinsight.util.ProgressAlert;

        import mx.collections.ArrayCollection;

        [Bindable]
        private var panelIndex:int;

        [Bindable]
        [Embed(source="../../../../assets/banner4.png")]
        public var backImage:Class;

        [Bindable]
        [Embed(source="../../../../assets/banner5.png")]
        public var topImage:Class;

        private var _solutionID:String;

        [Bindable(event="solutionIDChanged")]
        public function get solutionID():String {
            return _solutionID;
        }

        public function set solutionID(value:String):void {
            if (_solutionID == value) return;
            _solutionID = value;
            dispatchEvent(new Event("solutionIDChanged"));
        }

        private function setup():void {
            if (_initState == 1) {
                panelIndex = 4;
            } else {
                loginComponent.setupFocus();
            }
        }

        private var _configureInline:Boolean;

        public function set configureInline(value:Boolean):void {
            _configureInline = value;
        }

        [Bindable]
        private var setupData:AccountSetupData = new AccountSetupData();

        private function gotSolution():void {
            solution = solutionService.retrieveSolution.lastResult as Solution;
            solutionService.installSolution.send(int(_solutionID));
        }

        private var solution:Solution;

        private function installed():void {
            installResult = solutionService.installSolution.lastResult as ArrayCollection;
            for each (var solutionInstallInfo:SolutionInstallInfo in installResult) {
                if (solutionInstallInfo.descriptor.getType() == EIDescriptor.DATA_SOURCE && solutionInstallInfo.requiresConfiguration) {
                    var configWindow:ConnectionInstall = new ConnectionInstall();
                    configWindow.dataSourceID = solutionInstallInfo.descriptor.id;
                    configWindow.percentHeight = 100;
                    configWindow.percentWidth = 100;
                    configWindow.onlyDataSource = true;
                    configWindow.addEventListener(DataSourceConfiguredEvent.DATA_SOURCE_CONFIGURED, onSourceConfigured, false, 0, true);
                    configWindow.addEventListener("later", onLater, false, 0, true);
                    /*configWindow.setStyle("hideEffect", leftEffect);
                    configWindow.setStyle("showEffect", leftEffect);*/
                    viewStack.addChild(configWindow);
                    panelIndex = 5;
                }
            }
        }

        private function onLater(event:Event):void {
            dispatchEvent(new Event("allDone"));
        }

        private var installResult:ArrayCollection;

        private function onSourceConfigured(event:DataSourceConfiguredEvent):void {

            var dataSourceItems:ArrayCollection = new ArrayCollection();

            for each (var solInstall:SolutionInstallInfo in installResult) {
                if (solInstall.descriptor.getType() == EIDescriptor.DATA_SOURCE) {
                    dataSourceItems.addItem(solInstall.descriptor);
                }
            }
            var dataSource:DataSourceDescriptor = dataSourceItems.getItemAt(0) as DataSourceDescriptor;
            dispatchEvent(new ConnectionGoEvent(new PostInstallSource(dataSource, solution)));
        }

        private function accountCreated(event:LoginEvent):void {
            dispatchEvent(new LoginEvent(LoginEvent.QUIET_LOGIN, event.authResponse));
            panelIndex++;
        }

        private function remaining():void {
            userService.applySetupData.send(setupData);
        }

        private function applied():void {
            User.getInstance().changeSettings(Persona(setupData.personas.getItemAt(setupData.myPersona)).uiSettings);
            if (accountType >= _requiredTier && int(_solutionID) > 0 && _configureInline) {
                ProgressAlert.alert(this, "Establishing connection...", null, solutionService.retrieveSolution, solutionService.installSolution);
                solutionService.retrieveSolution.send(int(_solutionID));
            } else {
                dispatchEvent(new Event("allDone"));
            }
        }

        [Bindable]
        private var accountType:int;

        private var _requiredTier:int;


        [Bindable(event="requiredTierChanged")]
        public function get requiredTier():int {
            return _requiredTier;
        }

        public function set requiredTier(value:int):void {
            if (_requiredTier == value) return;
            _requiredTier = value;
            dispatchEvent(new Event("requiredTierChanged"));
        }

        private function toBilling():void {
            navigateToURL(new URLRequest('billing/billing.jsp'), '_self');
        }

        private function loginHandler(event:LoginEvent):void {
            if (event.authResponse.accountState == Account.DELINQUENT) {
                panelIndex = 4;
            } else {
                dispatchEvent(event);
            }
        }

        private var _initState:int;


        public function set initState(value:int):void {
            _initState = value;
        }

        [Bindable]
        [Embed(source="../../../../assets/logo2.PNG")]
        private var logo:Class;

        [Bindable]
        [Embed(source="../../../../assets/chart_area_x48.png")]
        public var connectionsIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/credit_card_x48.png")]
        public var moneyIcon:Class;
        ]]></mx:Script>
    <viewStackEffects:CoverFlowPapervision3D id="leftEffect" direction="horizontal"/>
    <mx:RemoteObject destination="solutionService" id="solutionService">
        <mx:method name="installSolution" result="installed()"/>
        <mx:method name="retrieveSolution" result="gotSolution()"/>
    </mx:RemoteObject>
    <mx:RemoteObject destination="login" id="userService">
        <mx:method name="applySetupData" result="applied()"/>
    </mx:RemoteObject>
    <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
        <mx:VBox width="1000" verticalGap="0" borderStyle="solid" borderThickness="1" borderColor="#DDDDDD"
                 backgroundColor="#FFFFFF" paddingBottom="0"
                 paddingLeft="0" paddingRight="0" paddingTop="0">
            <mx:Box width="100%" backgroundImage="{topImage}" backgroundSize="100%" height="18"/>
            <mx:HBox width="100%" horizontalAlign="center" paddingBottom="0"
                     paddingLeft="0" paddingRight="0" paddingTop="0">
                <mx:Image source="{logo}"/>
            </mx:HBox>
            <mx:Spacer height="20"/>
            <mx:HBox width="100%" backgroundColor="#848080" horizontalAlign="center" paddingTop="5" paddingBottom="5">
                <mx:Label text="Getting Started" color="#FFFFFF" fontSize="24"/>
            </mx:HBox>
            <mx:ViewStack selectedIndex="{panelIndex}"
                          id="viewStack" resizeToContent="true" width="100%" height="440"
                          backgroundColor="0xFFFFFF" paddingTop="10">
                <mx:HBox width="100%" verticalAlign="middle" height="100%" hideEffect="leftEffect" showEffect="leftEffect">
                    <!-- login page -->
                    <mx:VBox width="50%" horizontalAlign="center">
                        <framework:LoginComponent loginEvent2="loginHandler(event)" id="loginComponent"/>
                    </mx:VBox>
                    <mx:VBox width="50%" horizontalAlign="center">
                        <mx:VBox horizontalAlign="center" borderStyle="solid" borderThickness="1" useHandCursor="true"
                                 backgroundColor="#FFFFFF" height="180"
                                 width="350" cornerRadius="8" buttonMode="true" id="connectionsBox"
                                 mouseOver="connectionsBox.setStyle('backgroundColor', 0xDDDDDD)"
                                 mouseOut="connectionsBox.setStyle('backgroundColor', 0xFFFFFF)"
                                 click="panelIndex = 1"
                                 mouseChildren="false">
                            <mx:Image source="{connectionsIcon}"/>
                            <mx:Text text="No Account Yet?" fontSize="24" selectable="false"/>
                            <mx:TextArea
                                    text="Click here to sign up for a new account and start analyzing your data now!"
                                    fontSize="18" backgroundAlpha="0" editable="false" selectable="false"
                                    height="80"
                                    width="310" textAlign="center"/>
                        </mx:VBox>
                    </mx:VBox>
                </mx:HBox>
                <mx:VBox hideEffect="leftEffect" showEffect="leftEffect">
                    <!-- account wizard -->
                    <account:AccountCreationWizard cancel="panelIndex = 0"
                                                   pro="accountType = Account.PRO; panelIndex = 2"
                                                   plus="accountType = Account.PLUS; panelIndex = 2"
                                                   basic="accountType = Account.BASIC; panelIndex = 2"
                                                   free="accountType = Account.PERSONAL; panelIndex = 2"
                                                   requiredTier="{requiredTier}"/>
                </mx:VBox>
                <mx:VBox hideEffect="leftEffect" showEffect="leftEffect">
                    <!-- profile creation page -->
                    <account:ProfessionalAccountLoginCreation cancel="panelIndex = 1"
                                                              loginEvent2="accountCreated(event)"
                                                              accountType="{accountType}"/>
                </mx:VBox>
                <mx:VBox showEffect="leftEffect">
                    <account:DefaultPersonaPanel id="personaPanel" setupData="{setupData}"
                                                 kpiTutorialNext="remaining()" accountType="{accountType}"/>
                </mx:VBox>
                <!-- welcome back panel -->
                <mx:VBox horizontalAlign="center" width="100%" height="100%" verticalAlign="middle" hideEffect="leftEffect" showEffect="leftEffect">
                    <mx:Image source="{moneyIcon}"/>
                    <mx:TextArea borderStyle="none" editable="false" selectable="false" backgroundAlpha="0" fontSize="18"
                                 text="Your trial has expired. You'll need to enter billing information to continue using Easy Insight."
                            width="350" height="80"/>
                    <mx:Button label="Enter Billing" click="toBilling()" fontSize="18"/>
                </mx:VBox>
                <!-- delinquent panel -->
            </mx:ViewStack>
            <mx:Box width="100%" backgroundImage="{backImage}" backgroundSize="100%" height="18"/>
        </mx:VBox>
    </mx:Box>
</mx:Canvas>