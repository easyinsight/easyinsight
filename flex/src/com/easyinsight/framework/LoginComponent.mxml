<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
        creationComplete="creationComplete()"
        width="100%" height="100%" backgroundColor="#EEEEEE" horizontalAlign="center" verticalAlign="middle">
    <mx:Metadata>
        [Event(name="loginEvent2", type="com.easyinsight.framework.LoginEvent")]
        [Event(name="loginClose", type="flash.events.Event")]
    </mx:Metadata>
    <mx:states>
        <mx:State name="ResetPassword" enterState="enterPasswordResetStateChange()"
                  exitState="exitPasswordResetStateChange()">
            <mx:RemoveChild target="{loginForm}"/>
            <mx:AddChild relativeTo="{coreBox}">
                <mx:ViewStack selectedIndex="{stackIndex}" resizeToContent="true">
                    <mx:VBox horizontalAlign="center">
                        <mx:Label text="Send a reset email" fontSize="14"/>
                        <mx:Form>
                            <mx:FormItem label="Email Address:" direction="horizontal">
                                <mx:TextInput id="emailAddressInput" width="350"/>
                                <mx:Label text="{emailFailure}" visible="{emailFailure != null}"/>
                            </mx:FormItem>
                        </mx:Form>
                        <mx:Button label="Send Email" click="resetPassword()"/>
                        <mx:HRule width="100%"/>
                        <mx:Label text="Already got reset email?" fontSize="14"/>
                        <mx:Form>
                            <mx:FormItem label="Manually Enter Reset Key:" direction="horizontal">
                                <mx:TextInput id="resetKey"/>
                            </mx:FormItem>
                        </mx:Form>
                        <mx:Button label="Reset Manually" click="resetManual()"/>
                        <mx:HRule width="50"/>
                        <mx:Button label="Back to Login" click="currentState=''"/>
                    </mx:VBox>

                    <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                        <mx:ProgressBar label="Sending reset email..." indeterminate="true"/>
                    </mx:Box>
                </mx:ViewStack>
            </mx:AddChild>
        </mx:State>
        <mx:State name="PasswordReset">
            <!--<mx:AddChild relativeTo="{activationBox}">
                <mx:Label text="An email has been sent to your email address to allow you to reset your password."/>
            </mx:AddChild>-->
        </mx:State>
    </mx:states>
    <mx:Script>
		<![CDATA[

        import com.easyinsight.util.CookieUtil;

        import mx.controls.Alert;
        import mx.core.Application;
        import mx.messaging.config.ServerConfig;
        import mx.rpc.AsyncResponder;
        import mx.rpc.AsyncToken;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;
        import mx.validators.Validator;

        private function creationComplete():void {
          addEventListener(KeyboardEvent.KEY_UP, keyedSignon);
          focusManager.setFocus(userName);
            if(Application.application.parameters.subdomain == null) {
                loginImage = embeddedLoginImage;
            } else {
                authService.getLoginImage.send(Application.application.parameters.subdomain)
            }
        }

        private function passwordResetEnter(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.ENTER) {
                resetPassword();
            }
        }

        private function resetManual():void {
            new PasswordReset(resetKey.text, this).reset();
        }

        private function exitPasswordResetStateChange():void {
            this.removeEventListener(KeyboardEvent.KEY_UP, passwordResetEnter);
            this.addEventListener(KeyboardEvent.KEY_UP, keyedSignon);
        }

        private function enterPasswordResetStateChange():void {
            this.removeEventListener(KeyboardEvent.KEY_UP, keyedSignon);
            this.addEventListener(KeyboardEvent.KEY_UP, passwordResetEnter);
        }

        [Bindable]
        private var _additionalInfo:String;

        [Embed(source='../../../../assets/logo2.PNG')]
        private var embeddedLoginImage:Class;

        [Bindable]
        private var loginImage:Object;

        [Bindable]
        private var resetResult:String;

        [Bindable]
        private var emailFailure:String;

        public function set additionalInfo(value:String):void {
            _additionalInfo = value;
        }

        public function setupFocus():void {
            stackIndex = 0;
            focusManager.setFocus(userName);
        }

        private function toBaseState():void {
            if (_additionalInfo == null) {
                currentState = "";
            } else {
                currentState = "AdditionalInfo";
            }
        }

        private function resetPassword():void {
            var results:Array = Validator.validateAll([emailValidator]);
            if (results.length > 0) {
                emailAddressInput.setFocus();
                emailAddressInput.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
                return;
            }
            stackIndex = 1;
            authService.remindPassword.send(emailAddressInput.text);
        }

        private function reset():void {
            stackIndex = 0;
            var result:Boolean = authService.remindPassword.lastResult as Boolean;
            if (result) {
                Alert.show("An email has been sent to the address you specified to reset your password.");
                currentState = "PasswordReset";
            } else {
                emailFailure = "No such email address was found in Easy Insight.";
            }
        }

        private function handleAuthentication():void {
            var authResult:UserServiceResponse = authService.authenticate.lastResult as UserServiceResponse;
            var successful:Boolean = authResult.successful;
            if (successful) {
                if (authResult.sessionCookie != null) {
                    CookieUtil.deleteCookie("eisession");
                    CookieUtil.setCookie("eisession", authResult.userName + "-" + authResult.sessionCookie, 90);
                }
                if (authService.channelSet == null) {
                    authService.channelSet = ServerConfig.getChannelSet(authService.destination);
                }
                var token:AsyncToken = authService.channelSet.login(this.userNameStr, this.passwordStr);
                token.addResponder(new AsyncResponder(
                        function (event:ResultEvent, token:Object = null):void {
                            switch (event.result) {
                                case "success":
                                    dispatchEvent(new LoginEvent(LoginEvent.LOGIN, authResult));
                                    break;
                                default:
                                    trace(event.result);
                            }
                        },
                        function (event:FaultEvent, token:Object = null):void {
                            switch (event.fault.faultCode) {
                                case "Client.Authentication":
                                default:
                                    failureMessage = event.fault.faultString;
                                    failureIndex = 1;
                            }
                        }
                        ));

            } else {
                stackIndex = 0;
                failureMessage = authResult.failureMessage;
                failureIndex = 1;
            }
        }

        private var userNameStr:String;
        private var passwordStr:String;

        public function signon(userNameStr:String, passwordStr:String):void {
            failureIndex = 0;
            stackIndex = 1;
            this.userNameStr = userNameStr;
            this.passwordStr = passwordStr;
            var rememberMe:Boolean = false;
            if (rememberMeCheckbox != null) {
                rememberMe = rememberMeCheckbox.selected;
            }
            authService.authenticate.send(this.userNameStr, this.passwordStr, rememberMe);
        }

        private function cancel():void {
            dispatchEvent(new Event("loginClose"));
        }

        private function keyedSignon(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.ENTER) {
                defaultSignon();
            }
        }

        private function defaultSignon():void {
            var results:Array = Validator.validateAll([userNameValidator]);
            if (results.length > 0) {
                userName.setFocus();
                userName.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
                return;
            }
            var passwordResults:Array = Validator.validateAll([passwordValidator]);
            if (passwordResults.length > 0) {
                password.setFocus();
                password.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
                return;
            }
            signon(userName.text, password.text);
        }

        [Bindable]
        private var failureMessage:String = "";

        [Bindable]
        private var failureIndex:int = 0;

        [Bindable]
        private var stackIndex:int;

        private function gotLoginImage():void {
            var byteArray:ByteArray = authService.getLoginImage.lastResult as ByteArray;
            if(byteArray == null) {
                loginImage = embeddedLoginImage;
            } else {
                var loader:Loader = new Loader();
                loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loginImageComplete);
                loader.loadBytes(byteArray);
            }
        }

        private function loginImageComplete(event:Event):void {
            var loaderContent:LoaderInfo = event.currentTarget as LoaderInfo;
            var bitmap:Bitmap = Bitmap(loaderContent.loader.content);
            loaderContent.loader.removeEventListener(Event.COMPLETE, loginImageComplete);
            loginImage = bitmap;
        }


        ]]>
	</mx:Script>
    <mx:VBox id="coreBox" paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10" cornerRadius="10"
            borderColor="#DDDDDD" dropShadowEnabled="true" borderStyle="solid" backgroundColor="#FFFFFF">
        <mx:VBox id="loginForm" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0">
            <mx:ViewStack selectedIndex="{stackIndex}" resizeToContent="true">
                <mx:VBox paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0">
                    <mx:Box width="100%" horizontalAlign="center" paddingBottom="10">
                        <mx:Image source="{loginImage}"/>
                    </mx:Box>
                    <mx:ViewStack resizeToContent="true" selectedIndex="{failureIndex}" width="100%">
                        <mx:Box/>
                        <mx:HBox width="100%" horizontalAlign="center">
                            <mx:Box backgroundColor="#CC0000">
                                <mx:Text text="{failureMessage}" fontSize="14" color="#FFFFFF"/>
                            </mx:Box>
                        </mx:HBox>
                    </mx:ViewStack>
                    <mx:Form paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
                        <mx:FormItem label="User Name or Email:" direction="horizontal" fontSize="14">
                            <mx:TextInput id="userName" tabIndex="1" fontSize="14" width="350"/>
                        </mx:FormItem>
                        <mx:FormItem label="Password:" direction="horizontal" fontSize="14">
                            <mx:TextInput id="password" displayAsPassword="true" tabIndex="2" fontSize="14" width="350"/>
                        </mx:FormItem>
                    </mx:Form>
                    <mx:CheckBox id="rememberMeCheckbox" tabIndex="3" label="Remember Me On This Computer"/>
                </mx:VBox>
                <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                    <mx:ProgressBar label="Connecting..." indeterminate="true"/>
                </mx:Box>
            </mx:ViewStack>
            <mx:VBox width="100%" horizontalAlign="center">
                <mx:Button label="Sign In" click="defaultSignon()" tabIndex="4" fontSize="14"/>
                <mx:HRule strokeColor="#CDCDCD" width="80%"/>
            </mx:VBox>
            <mx:HBox width="100%" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0">
                <mx:LinkButton fontSize="12" textDecoration="underline" label="Forgot your Password?"
                                           click="failureIndex = 0; currentState='ResetPassword'"/>
                <mx:Spacer width="100%"/>
                <mx:LinkButton fontSize="12" textDecoration="underline" label="No account yet?"
                                           click="navigateToURL(new URLRequest('newaccount'), '_self')"/>
            </mx:HBox>
        </mx:VBox>
        <!--<mx:Spacer height="10"/>
        <mx:HBox width="100%" horizontalAlign="center">
            <mx:Text text="{failureMessage}" fontSize="14"/>
        </mx:HBox>-->
    </mx:VBox>
    <mx:StringValidator id="userNameValidator" minLength="3" source="{userName}" property="text"/>
    <mx:StringValidator id="passwordValidator" minLength="3" source="{password}" property="text"/>
    <mx:EmailValidator id="emailValidator" source="{emailAddressInput}" property="text"/>
    <mx:RemoteObject id="authService" destination="login">
        <mx:method name="authenticate" result="handleAuthentication()"
                   fault="failureMessage = event.fault.faultString"/>
        <mx:method name="remindPassword" result="reset()" fault="emailFailure = event.fault.faultString"/>
        <mx:method name="getLoginImage" result="gotLoginImage()" />
    </mx:RemoteObject>
</mx:VBox>