<?xml version="1.0"?>
<skin:BackgroundImage xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:skin="com.easyinsight.skin.*"
                      xmlns:scorecard="com.easyinsight.scorecard.*"
                      implements="com.easyinsight.listing.IPerspective" creationComplete="onCreation()">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisCloseEvent;
        import com.easyinsight.framework.InsightRequestMetadata;

        import com.easyinsight.framework.PerspectiveInfo;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.util.ActionScorecardLog;
        import com.easyinsight.util.ProgressAlert;
        import com.easyinsight.util.UserAudit;

        import mx.collections.ArrayCollection;
        import mx.managers.BrowserManager;
        import mx.utils.URLUtil;

        [Bindable]
        private var kpis:ArrayCollection;

        private var _scorecard:Scorecard;

        private function onCreation():void {
            UserAudit.instance().log(new ActionScorecardLog(ActionScorecardLog.VIEW, _scorecardID));
        }

        public function set scorecard(value:Scorecard):void {
            _scorecard = value;
            invalidateProperties();
        }

        override protected function commitProperties():void {
            super.commitProperties();
            if (_scorecard != null) {
                var feedFragmentObject:Object = new Object();
                feedFragmentObject.scorecardViewID = String(_scorecard.urlKey);
                var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
                BrowserManager.getInstance().setFragment(feedFragmentString);
            }
        }

        private var _scorecardID:int;

        [Bindable(event="scorecardIDChanged")]
        public function get scorecardID():int {
            return _scorecardID;
        }

        public function set scorecardID(value:int):void {
            if (_scorecardID == value) return;
            _scorecardID = value;
            dispatchEvent(new Event("scorecardIDChanged"));
        }


        private function scorecardView():void {
            dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.SCORECARD_EDITOR, {scorecardID: _scorecardID })));
        }

        private function close():void {
            dispatchEvent(new AnalysisCloseEvent());
        }

        public function exportScorecard():void {
            var metadata:InsightRequestMetadata = new InsightRequestMetadata();
            metadata.utcOffset = new Date().getTimezoneOffset();
            ProgressAlert.alert(this, "Exporting scorecard...", null, exportService.exportScorecardToXLS);
            exportService.exportScorecardToXLS.send(_scorecardID, metadata);
        }

        private function exported():void {
//            var url:URLRequest = new URLRequest("/app/excel");
//            navigateToURL(url, "_blank");
            ExternalInterface.call("loadPage", "/app/excel");
        }

        public function gotFocus():void {
        }

        public function cleanup():void {
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="exportService" id="exportService">
        <mx:method name="exportScorecardToXLS" result="exported()"/>
    </mx:RemoteObject>
    <mx:VBox height="100%" width="1000" verticalGap="20" horizontalAlign="center" paddingLeft="10" paddingRight="10">
        <mx:HBox width="100%" paddingTop="15">
            <mx:Button id="wrapButton" icon="@Embed(source='../../../../assets/document_out.png')" click="close()"
                       toolTip="Close" label="Close Editor" labelPlacement="right"/>
            <mx:Button icon="@Embed(source='../../../../assets/refresh.png')" click="scorecardRenderer.refreshValues()"
                       toolTip="Refresh the Scorecard" label="Refresh" labelPlacement="right"/>
            <mx:Button icon="@Embed(source='../../../../assets/table.png')" click="exportScorecard()"
                       toolTip="Export the Scorecard" label="Export" labelPlacement="right"/>
            <mx:Button icon="@Embed(source='../../../../assets/pencil.png')" click="scorecardView()"
                                   labelPlacement="right" id="editReportButton"
                                   toolTip="Open this scorecard in the scorecard editor..."
                    label="Edit Scorecard"/>
        </mx:HBox>
        <mx:HRule width="100%"/>
        <scorecard:ScorecardRenderer scorecardID="{scorecardID}" id="scorecardRenderer" scorecardAssigned="scorecard = event.scorecard"/>
    </mx:VBox>
</skin:BackgroundImage>
