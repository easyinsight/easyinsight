<?xml version="1.0" ?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:scorecard="com.easyinsight.scorecard.*"
         xmlns:viewStackEffects="org.efflex.mx.viewStackEffects.*"
         creationComplete="onCreationComplete()" width="100%">
    <mx:Metadata>
        [Event(name="noData", type="flash.events.Event")]
        [Event(name="gotData", type="flash.events.Event")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.ProgressAlert;

        import mx.binding.utils.BindingUtils;
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.events.CloseEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;

        [Bindable]
        private var primaryStackIndex:int = 0;

        [Bindable]
        private var controlsIndex:int = 0;

        [Bindable]
        private var tabsIndex:int = 0;

        [Bindable]
        private var scorecardIndex:int = 0;

        private var _configurationMode:Boolean;

        private function onCreationComplete():void {
            primaryStackIndex = 0;
            scorecardService.getScorecardDescriptors.send();
        }

        [Bindable]
        private var selectedScorecard:ScorecardDescriptor;

        [Bindable]
        private var scorecards:ArrayCollection;

        [Bindable(event="configurationModeChanged")]
        public function get configurationMode():Boolean {
            return _configurationMode;
        }

        public function set configurationMode(value:Boolean):void {
            if (_configurationMode == value) return;
            _configurationMode = value;
            dispatchEvent(new Event("configurationModeChanged"));
        }

        private function configureMode():void {
            this.configurationMode = !configurationMode;
        }

        private function addKPI():void {
            var renderer:ScorecardRenderer = scorecardStack.selectedChild as ScorecardRenderer;
            renderer.addKPI();
        }

        private function newScorecard():void {
            var scorecardWindow:ScorecardWindow = new ScorecardWindow();
            scorecardWindow.addEventListener(ScorecardEvent.SCORECARD_ADDED, onScorecardAdd);
            PopUpManager.addPopUp(scorecardWindow, this, true);
            PopUpUtil.centerPopUp(scorecardWindow);
        }

        private function onScorecardAdd(event:ScorecardEvent):void {
            scorecards.addItem(event.scorecard);
            var newIndex:int = scorecards.getItemIndex(event.scorecard);
            var scorecardRenderer:ScorecardRenderer = new ScorecardRenderer();
            BindingUtils.bindProperty(scorecardRenderer, "configurationMode", this, "configurationMode");
            scorecardRenderer.scorecardDescriptor = event.scorecard;
            scorecardStack.addChild(scorecardRenderer);
            if (tabsIndex == 0) {
                tabsIndex = 1;
            }
            scorecardIndex = newIndex;
            selectedScorecard = event.scorecard;
            if (primaryStackIndex != 2) {
                primaryStackIndex = 2;
            }
        }

        public function gotFocus():void {
            primaryStackIndex = 0;
            scorecardService.getScorecardDescriptors.send();
        }

        private function refreshData():void {
            var renderer:ScorecardRenderer = scorecardStack.selectedChild as ScorecardRenderer;
            renderer.forceRefresh();
        }

        private function gotDescriptors():void {
            var scorecardList:ScorecardList = scorecardService.getScorecardDescriptors.lastResult as ScorecardList;
            if (scorecardList.anyData) {
                scorecards = scorecardList.scorecardDescriptors;
                scorecardStack.removeAllChildren();
                for each (var scorecard:ScorecardDescriptor in scorecards) {
                    var scorecardRenderer:ScorecardRenderer = new ScorecardRenderer();
                    /*scorecardRenderer.setStyle("hideEffect", effect);
                    scorecardRenderer.setStyle("hideEffect", effect);*/
                    BindingUtils.bindProperty(scorecardRenderer, "configurationMode", this, "configurationMode");
                    scorecardRenderer.scorecardDescriptor = scorecard;
                    scorecardStack.addChild(scorecardRenderer);
                }

                if (scorecards.length > 0) {
                    selectedScorecard = scorecards.getItemAt(0) as ScorecardDescriptor;
                    primaryStackIndex = 2;
                    if (scorecards.length > 1) {
                        tabsIndex = 1;
                    } else {
                        tabsIndex = 0;
                    }
                } else {
                    primaryStackIndex = 1;
                }
                dispatchEvent(new Event("gotData"));
            } else {
                dispatchEvent(new Event("noData"));
            }
        }

        private function onFault(event:FaultEvent):void {
            Alert.show(event.fault.message);
        }

        private function changeScorecard(event:ScorecardEvent):void {
            for (var i:int = 0; i < scorecards.length; i++) {
                var scorecard:ScorecardDescriptor = scorecards.getItemAt(i) as ScorecardDescriptor;
                if (scorecard == event.scorecard) {
                    break;
                }
            }
            selectedScorecard = event.scorecard;
            scorecardIndex = i;
        }

        private function deleteScorecard():void {
            Alert.show("Are you sure you want to delete the currently selected scorecard?", "Alert", Alert.OK | Alert.CANCEL, null, onClose);
        }

        private function onClose(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                ProgressAlert.alert(this, "Deleting the scorecard...", null, scorecardService.deleteScorecard, scorecardService.getScorecardDescriptors);
                scorecardService.deleteScorecard.send(selectedScorecard.id);
            }
        }

        private function deleted():void {
            primaryStackIndex = 0;
            scorecardService.getScorecardDescriptors.send();
        }

        [Bindable]
        [Embed(source="../../../../assets/prototype/ReverseGray.jpg")]
        private var backgroundImage:Class;
        ]]></mx:Script>
    <mx:RemoteObject id="scorecardService" destination="scorecardService">
        <mx:method name="getScorecardDescriptors" result="gotDescriptors()" fault="onFault(event)"/>
        <mx:method name="deleteScorecard" result="deleted()" fault="onFault(event)"/>
    </mx:RemoteObject>
    <!--<viewStackEffects:Slide id="effect"/>-->
    <mx:VBox verticalGap="0">
        <mx:Box width="100%" horizontalAlign="center" backgroundImage="{backgroundImage}" backgroundSize="100%"
                paddingTop="5"
                paddingBottom="5">
            <mx:Label text="Scorecards" fontSize="20" fontFamily="Tahoma" fontWeight="bold" color="#FFFFFF"/>
        </mx:Box>
        <mx:ViewStack resizeToContent="true" selectedIndex="{primaryStackIndex}" width="100%" creationPolicy="all"
                      borderStyle="inset" borderThickness="1" cornerRadius="15"
                      paddingTop="15" paddingBottom="15" paddingLeft="15" paddingRight="15">
            <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                <mx:ProgressBar label="Loading scorecards..." indeterminate="true"/>
            </mx:Box>
            <mx:VBox horizontalAlign="center" width="100%">
                <mx:Label text="You haven't defined any scorecards yet." fontSize="16"/>
                <mx:Button label="Create Your First Scorecard" styleName="blueButton"
                           fontSize="16" click="newScorecard()"/>
            </mx:VBox>
            <mx:VBox width="100%">
                <mx:ViewStack resizeToContent="true" selectedIndex="{tabsIndex}" creationPolicy="all" width="100%">
                    <mx:Box/>
                    <mx:VBox width="100%">
                        <scorecard:ScorecardTabsRenderer scorecards="{scorecards}"
                                                         scorecardFocus="changeScorecard(event)"
                                                         scorecard="{selectedScorecard}"/>
                        <mx:HRule width="100%"/>
                    </mx:VBox>
                </mx:ViewStack>
                <mx:ViewStack resizeToContent="true" id="scorecardStack" selectedIndex="{scorecardIndex}">

                </mx:ViewStack>
            </mx:VBox>
        </mx:ViewStack>
    </mx:VBox>
    <mx:Spacer width="100%"/>
    <mx:VBox paddingRight="0" paddingTop="25">
        <mx:Label text="Scorecard Controls" fontSize="13" fontWeight="bold" paddingRight="0"/>
        <mx:HRule width="100%"/>
        <mx:LinkButton label="Add scorecard..." color="#333333" fontSize="12" paddingLeft="0" paddingRight="0"
                       click="newScorecard()"/>
        <!--<mx:LinkButton label="Edit scorecard..." color="#333333" fontSize="12" paddingLeft="0" paddingRight="0"/>-->
        <mx:LinkButton label="Delete scorecard" color="#333333" fontSize="12" paddingLeft="0" paddingRight="0"
                       click="deleteScorecard()"/>
        <mx:LinkButton label="Add a KPI..." color="#333333" fontSize="12" paddingLeft="0" paddingRight="0"
                       click="addKPI()"/>
        <mx:LinkButton label="Configure KPIs..." color="#333333" fontSize="12" paddingLeft="0" paddingRight="0"
                       click="configureMode()"/>
        <mx:LinkButton label="Refresh data..." color="#333333" fontSize="12" paddingLeft="0" paddingRight="0"
                       click="refreshData()"/>
    </mx:VBox>
</mx:HBox>