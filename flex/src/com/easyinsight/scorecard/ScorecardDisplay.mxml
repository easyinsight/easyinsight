<?xml version="1.0" ?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:scorecard="com.easyinsight.scorecard.*"
         creationComplete="gotFocus()">
    <mx:Script><![CDATA[
        import com.easyinsight.kpi.KPIEvent;
        import com.easyinsight.kpi.KPIWindow;
        import com.easyinsight.util.PopUpUtil;

        import mx.binding.utils.BindingUtils;
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.events.CloseEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;

        [Bindable]
        private var primaryStackIndex:int = 0;

        [Bindable]
        private var controlsIndex:int = 0;

        [Bindable]
        private var tabsIndex:int = 0;

        [Bindable]
        private var scorecardIndex:int = 0;

        private var _configurationMode:Boolean;

        [Bindable]
        private var selectedScorecard:Scorecard;

        [Bindable(event="configurationModeChanged")]
        public function get configurationMode():Boolean {
            return _configurationMode;
        }

        public function set configurationMode(value:Boolean):void {
            if (_configurationMode == value) return;
            _configurationMode = value;
            dispatchEvent(new Event("configurationModeChanged"));
        }

        [Bindable]
        private var scorecards:ArrayCollection;

        private function newScorecard():void {
            var scorecardWindow:ScorecardWindow = new ScorecardWindow();
            scorecardWindow.addEventListener(ScorecardEvent.SCORECARD_ADDED, onScorecardAdd);
            PopUpManager.addPopUp(scorecardWindow, this, true);
            PopUpUtil.centerPopUp(scorecardWindow);
        }

        private function onScorecardAdd(event:ScorecardEvent):void {
            scorecards.addItem(event.scorecard);
            selectedScorecard = event.scorecard;
            var newIndex:int = scorecards.getItemIndex(event.scorecard);
            var scorecardRenderer:ScorecardRenderer = new ScorecardRenderer();
            BindingUtils.bindProperty(scorecardRenderer, "configurationMode", this, "configurationMode");
            scorecardRenderer.scorecard = event.scorecard;
            scorecardStack.addChild(scorecardRenderer);
            tabsIndex = newIndex;
            primaryStackIndex = 2;
        }

        public function gotFocus():void {
            primaryStackIndex = 0;
            scorecardService.getScorecardsForUser.send();
        }

        private function configureMode():void {
            controlsIndex = controlsIndex == 1 ? 0 : 1;
            this.configurationMode = controlsIndex == 1;
            /*for each (var scorecard:Scorecard in scorecards) {
             for each (var kpi:KPI in scorecard.kpis) {
             kpi.configurationMode = controlsIndex == 1;
             }
             scorecard.configuring = co

             }*/
        }

        private function addKPI():void {
            var kpiWindow:KPIWindow = new KPIWindow();
            kpiWindow.scorecardID = selectedScorecard.scorecardID;
            kpiWindow.addEventListener(KPIEvent.KPI_ADDED, addedKPI);
            PopUpManager.addPopUp(kpiWindow, this, true);
            PopUpUtil.centerPopUp(kpiWindow);
        }

        private function addedKPI(event:KPIEvent):void {
            selectedScorecard.kpis.addItem(event.kpi);
        }

        private function refreshData():void {
            var window:RefreshScorecardWindow = new RefreshScorecardWindow();
            //window.scorecard = selectedScorecard;
            window.scorecards = scorecards;
            //window.addEventListener(ScorecardRefreshEvent.SCORECARD_REFRESH, onScorecardRefresh);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function gotScorecards():void {
            scorecards = scorecardService.getScorecardsForUser.lastResult as ArrayCollection;
            scorecardStack.removeAllChildren();
            for each (var scorecard:Scorecard in scorecards) {
                var scorecardRenderer:ScorecardRenderer = new ScorecardRenderer();
                BindingUtils.bindProperty(scorecardRenderer, "configurationMode", this, "configurationMode");
                scorecardRenderer.scorecard = scorecard;
                scorecardStack.addChild(scorecardRenderer);
            }

            if (scorecards.length > 0) {
                selectedScorecard = scorecards.getItemAt(0) as Scorecard;
                primaryStackIndex = 2;
                if (scorecards.length > 1) {
                    tabsIndex = 1;
                } else {
                    tabsIndex = 0;
                }
            } else {
                primaryStackIndex = 1;
            }
        }

        private function onFault(event:FaultEvent):void {
            Alert.show(event.fault.message);
        }

        private function changeScorecard(event:ScorecardEvent):void {
            for (var i:int = 0; i < scorecards.length; i++) {
                var scorecard:Scorecard = scorecards.getItemAt(i) as Scorecard;
                if (scorecard == event.scorecard) {
                    break;
                }
            }
            selectedScorecard = event.scorecard;
            scorecardIndex = i;
        }

        private function deleteScorecard():void {
            Alert.show("Are you sure you want to delete the currently selected scorecard?", "Alert", Alert.OK | Alert.CANCEL, null, onClose);
        }

        private function onClose(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                scorecardService.deleteScorecard.send(selectedScorecard.scorecardID);
            }
        }

        private function deleted():void {
            scorecardService.getScorecardsForUser.send();
        }

        [Bindable]
        [Embed(source="../../../../assets/prototype/ReverseGray.jpg")]
        private var backgroundImage:Class;
        ]]></mx:Script>
    <mx:RemoteObject id="scorecardService" destination="scorecardService">
        <mx:method name="getScorecardsForUser" result="gotScorecards()" fault="onFault(event)"/>
        <mx:method name="deleteScorecard" result="deleted()" fault="onFault(event)"/>
    </mx:RemoteObject>
    <mx:VBox verticalGap="0">
        <mx:Box width="100%" horizontalAlign="center" backgroundImage="{backgroundImage}" backgroundSize="100%" paddingTop="5"
                paddingBottom="5">
            <mx:Label text="Scorecards" fontSize="20" fontFamily="Tahoma" fontWeight="bold" color="#FFFFFF"/>
        </mx:Box>
        <mx:ViewStack resizeToContent="true" selectedIndex="{primaryStackIndex}" width="100%" creationPolicy="all"
                borderStyle="inset" borderThickness="1" cornerRadius="15"
                paddingTop="15" paddingBottom="15" paddingLeft="15" paddingRight="15">
            <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                <mx:ProgressBar label="Loading scorecards..."/>
            </mx:Box>
            <mx:VBox horizontalAlign="center" width="100%">
                <mx:Label text="You haven't defined any scorecards yet." fontSize="16"/>
                <mx:Button label="Create Your First Scorecard" styleName="blueButton"
                           fontSize="16" click="newScorecard()"/>
            </mx:VBox>
            <mx:VBox width="100%">
                <mx:ViewStack resizeToContent="true" selectedIndex="{controlsIndex}" creationPolicy="all" width="100%">
                    <mx:Box width="100%" horizontalAlign="center">
                        <mx:Button label="Configure Scorecards" click="configureMode()"/>
                    </mx:Box>
                    <mx:HBox width="100%" horizontalAlign="center">
                        <mx:Button label="Leave Configuration" click="configureMode()"/>
                        <mx:Button label="New Scorecard..." click="newScorecard()"/>
                        <mx:Button label="Refresh KPI Values..." click="refreshData()"/>
                        <mx:Button label="Edit this Scorecard..."/>
                        <mx:Button label="Delete this Scorecard..." click="deleteScorecard()"/>
                        <mx:Button label="Add a KPI..." click="addKPI()"/>
                    </mx:HBox>
                </mx:ViewStack>
                <mx:HRule width="100%"/>
                <mx:ViewStack resizeToContent="true" selectedIndex="{tabsIndex}" creationPolicy="all" width="100%">
                    <mx:Box/>
                    <mx:VBox width="100%">
                        <scorecard:ScorecardTabsRenderer scorecards="{scorecards}" scorecardFocus="changeScorecard(event)"/>
                        <mx:HRule width="100%"/>
                    </mx:VBox>
                </mx:ViewStack>
                <mx:ViewStack resizeToContent="true" id="scorecardStack" selectedIndex="{scorecardIndex}">

                </mx:ViewStack>
            </mx:VBox>
        </mx:ViewStack>
    </mx:VBox>
</mx:VBox>