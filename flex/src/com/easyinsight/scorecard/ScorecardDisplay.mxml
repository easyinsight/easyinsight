<?xml version="1.0" ?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:scorecard="com.easyinsight.scorecard.*"
         xmlns:viewStackEffects="org.efflex.mx.viewStackEffects.*" xmlns:util="com.easyinsight.util.*"
         creationComplete="onCreationComplete()" width="100%" paddingTop="10" paddingLeft="5" paddingRight="5">
    <mx:Metadata>
        [Event(name="noData", type="flash.events.Event")]
        [Event(name="gotData", type="flash.events.Event")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import com.easyinsight.framework.User;
        import com.easyinsight.preferences.UIConfiguration;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.UserAudit;

        import mx.binding.utils.BindingUtils;
        import mx.binding.utils.ChangeWatcher;
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.effects.Effect;
        import mx.events.FlexEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        private function redirectToGoogle(ev:ResultEvent):void {
            navigateToURL(new URLRequest("http://www.google.com/ig/adde?moduleurl=http://hosting.gmodules.com/ig/gadgets/file/107893811811246228172/scorecard-gadget.xml"));
        }

        private function addToGoogle():void {
            UserAudit.instance().audit(UserAudit.EXPORTED_TO_IGOOGLE);
            scorecardService.storeScorecardForGoogle.send(selectedScorecard.id);
        }

        [Bindable]
        private var primaryStackIndex:int = 0;

        private var _groupIncluded:Boolean;

        [Bindable(event="groupIncludedChanged")]
        public function get groupIncluded():Boolean {
            return _groupIncluded;
        }

        public function set groupIncluded(value:Boolean):void {
            if (_groupIncluded == value) return;
            _groupIncluded = value;
            dispatchEvent(new Event("groupIncludedChanged"));
        }

        [Bindable]
        private var controlsIndex:int = 0;

        [Bindable]
        private var tabsIndex:int = 0;

        [Bindable]
        private var scorecardIndex:int = 0;

        private var _configurationMode:Boolean;

        private function onCreationComplete():void {
            primaryStackIndex = 0;
            retrieveScorecards();
            scorecardService.storeScorecardForGoogle.addEventListener(ResultEvent.RESULT, redirectToGoogle);
        }

        [Bindable]
        protected var selectedScorecard:ScorecardDescriptor;

        [Bindable]
        private var scorecards:ArrayCollection;

        [Bindable(event="configurationModeChanged")]
        public function get configurationMode():Boolean {
            return _configurationMode;
        }

        public function set configurationMode(value:Boolean):void {
            if (_configurationMode == value) return;
            _configurationMode = value;
            dispatchEvent(new Event("configurationModeChanged"));
        }

        private function configureMode():void {
            this.configurationMode = !configurationMode;
        }

        private function addKPI():void {
            var renderer:ScorecardRenderer = scorecardStack.selectedChild as ScorecardRenderer;
            renderer.addKPI();
        }

        protected function configureNewScorecardWindow(scorecardWindow:ScorecardWindow):void {

        }

        private function newScorecard():void {
            var scorecardWindow:ScorecardWindow = new ScorecardWindow();
            configureNewScorecardWindow(scorecardWindow);
            scorecardWindow.addEventListener(ScorecardEvent.SCORECARD_ADDED, onScorecardAdd, false, 0, true);
            PopUpManager.addPopUp(scorecardWindow, this, true);
            PopUpUtil.centerPopUp(scorecardWindow);
        }

        private function onScorecardAdd(event:ScorecardEvent):void {
            scorecards.addItem(event.scorecard);
            var newIndex:int = scorecards.getItemIndex(event.scorecard);
            var scorecardRenderer:ScorecardRenderer = new ScorecardRenderer();
            configureRenderer(scorecardRenderer);
            scorecardRenderer.addEventListener(FlexEvent.CREATION_COMPLETE, function (event:FlexEvent):void {
                scorecardIndex = newIndex;
            }, false, 0, true);
            scorecardRenderer.scorecardDescriptor = event.scorecard;
            scorecardRenderer.retrieveData();
            scorecardStack.addChild(scorecardRenderer);
            if (tabsIndex == 0) {
                tabsIndex = 1;
            }
            selectedScorecard = event.scorecard;
            if (newIndex > scorecardIndex) {
                activeEffect = leftEffect;
            } else {
                activeEffect = rightEffect;
            }
            for each (var renderer:ScorecardRenderer in scorecardStack.getChildren()) {
                renderer.setStyle("hideEffect", activeEffect);
                renderer.setStyle("showEffect", activeEffect);
            }
            sideBarControlsIndex = 0;
            groupText = "";
            //scorecardIndex = newIndex;

            if (primaryStackIndex != 2) {
                primaryStackIndex = 2;
            }
        }

        public function gotFocus():void {
            primaryStackIndex = 0;
            retrieveScorecards();
        }

        private function refreshData():void {
            var renderer:ScorecardRenderer = scorecardStack.selectedChild as ScorecardRenderer;
            renderer.forceRefresh();
        }

        protected function configureRenderer(scorecardRenderer:ScorecardRenderer):void {
            var watcher:ChangeWatcher = BindingUtils.bindProperty(scorecardRenderer, "configurationMode", this, "configurationMode");
            watchers.addItem(watcher);
        }

        private var watchers:ArrayCollection = new ArrayCollection();

        protected function anyDataCase():Boolean {
            return true;
        }

        protected function createGroupText(selectedScorecard:ScorecardDescriptor):String {
            var text:String;
            if (selectedScorecard.groupID > 0) {
                text = "This scorecard is part of the " + selectedScorecard.groupName + " group.";
            } else {
                text = "";
            }
            return text;
        }

        private function onReorder(event:ScorecardReorderEvent):void {
            var rendererMap:Object = new Object();
            for (var i:int = 0; i < event.scorecards.length; i++) {
                var scorecardDescriptor:ScorecardDescriptor = event.scorecards.getItemAt(i) as ScorecardDescriptor;
                var existingIndex:int = scorecards.getItemIndex(scorecardDescriptor);
                rendererMap[i] = scorecardStack.getChildAt(existingIndex);
            }
            scorecardStack.removeAllChildren();
            scorecards = event.scorecards;
            for (var j:int = 0; j < event.scorecards.length; j++) {
                var renderer:ScorecardRenderer = rendererMap[j];
                scorecardStack.addChild(renderer);
            }
            selectedScorecard = scorecards.getItemAt(0) as ScorecardDescriptor;
            renderer = scorecardStack.getChildAt(0) as ScorecardRenderer;
            renderer.retrieveData();
            if (selectedScorecard.groupID > 0 && selectedScorecard.groupRole > 2) {
                sideBarControlsIndex = 1;
            } else {
                sideBarControlsIndex = 0;
            }
            groupText = createGroupText(selectedScorecard);
            primaryStackIndex = 2;
            if (scorecards.length > 1) {
                tabsIndex = 1;
            } else {
                tabsIndex = 0;
            }
        }

        private function reorderScorecards():void {
            var window:ReorderScorecardWindow = new ReorderScorecardWindow();
            window.scorecards = new ArrayCollection(scorecards.toArray());
            window.addEventListener(ScorecardReorderEvent.SCORECARD_REORDER, onReorder, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        protected function handleDescriptors(scorecardList:ScorecardList):void {
            if (!anyDataCase() || scorecardList.anyData) {
                scorecards = scorecardList.scorecardDescriptors;
                scorecardStack.removeAllChildren();
                for each (var watcher:ChangeWatcher in watchers) {
                    watcher.unwatch();
                }
                watchers = new ArrayCollection();
                for each (var scorecard:ScorecardDescriptor in scorecards) {
                    var scorecardRenderer:ScorecardRenderer = new ScorecardRenderer();
                    scorecardRenderer.setStyle("hideEffect", rightEffect);
                    scorecardRenderer.setStyle("showEffect", rightEffect);
                    configureRenderer(scorecardRenderer);
                    scorecardRenderer.groupID = scorecard.groupID;
                    scorecardRenderer.scorecardDescriptor = scorecard;
                    scorecardStack.addChild(scorecardRenderer);
                }

                if (scorecards.length > 0) {
                    selectedScorecard = scorecards.getItemAt(0) as ScorecardDescriptor;
                    var renderer:ScorecardRenderer = scorecardStack.getChildAt(0) as ScorecardRenderer;
                    renderer.retrieveData();
                    if (selectedScorecard.groupID > 0 && selectedScorecard.groupRole > 2) {
                        sideBarControlsIndex = 1;
                    } else {
                        sideBarControlsIndex = 0;
                    }
                    groupText = createGroupText(selectedScorecard);
                    primaryStackIndex = 2;
                    if (scorecards.length > 1) {
                        tabsIndex = 1;
                    } else {
                        tabsIndex = 0;
                    }
                } else {
                    primaryStackIndex = 1;
                }
                dispatchEvent(new Event("gotData"));
            } else {
                dispatchEvent(new Event("noData"));
            }
        }

        protected function onFault(event:FaultEvent):void {
            Alert.show(event.fault.message);
        }

        private function changeScorecard(event:ScorecardEvent):void {
            for (var i:int = 0; i < scorecards.length; i++) {
                var scorecard:ScorecardDescriptor = scorecards.getItemAt(i) as ScorecardDescriptor;
                if (scorecard == event.scorecard) {
                    if (scorecard.groupID > 0 && scorecard.groupRole > 2) {
                        sideBarControlsIndex = 1;
                    } else {
                        sideBarControlsIndex = 0;
                    }
                    groupText = createGroupText(scorecard);
                    break;
                }
            }
            selectedScorecard = event.scorecard;
            if (i > scorecardIndex) {
                activeEffect = leftEffect;
            } else {
                activeEffect = rightEffect;
            }
            for each (var scorecardRenderer:ScorecardRenderer in scorecardStack.getChildren()) {
                scorecardRenderer.setStyle("hideEffect", activeEffect);
                scorecardRenderer.setStyle("showEffect", activeEffect);
            }
            var renderer:ScorecardRenderer = scorecardStack.getChildAt(i) as ScorecardRenderer;
            renderer.retrieveData();
            scorecardIndex = i;
        }

        protected function deleted():void {
            primaryStackIndex = 0;
            retrieveScorecards();
        }

        private function onKPIMove(event:MoveKPIEvent):void {
            var sourceIndex:int = scorecards.getItemIndex(event.sourceScorecard);
            var targetIndex:int = scorecards.getItemIndex(event.destinationScorecard);
            var sourceRenderer:ScorecardRenderer = scorecardStack.getChildAt(sourceIndex) as ScorecardRenderer;
            var targetRenderer:ScorecardRenderer = scorecardStack.getChildAt(targetIndex) as ScorecardRenderer;
            if (sourceRenderer.kpis != null) {
                sourceRenderer.kpis.removeItemAt(sourceRenderer.kpis.getItemIndex(event.kpi));
            }
            if (targetRenderer.kpis != null) {
                targetRenderer.kpis.addItem(event.kpi);
            }
        }

        [Bindable]
        private var groupText:String = "";

        [Bindable]
        private var sideBarControlsIndex:int = 0;

        protected function retrieveScorecards():void {

        }

        protected function deleteScorecard():void {

        }

        protected override function createChildren():void {
            super.createChildren();
            if (User.getInstance().uiConfiguration != null) {
                var uiConfig:UIConfiguration = User.getInstance().uiConfiguration;
                var showControls:Boolean = uiConfig.getConfiguration(UIConfiguration.SHOW_SCORECARD_CONTROLS).selected;
                if (!showControls) {
                    removeChild(spacer);
                    removeChild(controls);
                }
            }
        }

        private var _activeEffect:Effect = leftEffect;


        [Bindable(event="activeEffectChanged")]
        public function get activeEffect():Effect {
            return _activeEffect;
        }

        public function set activeEffect(value:Effect):void {
            if (_activeEffect == value) return;
            _activeEffect = value;
            dispatchEvent(new Event("activeEffectChanged"));
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="scorecardService" id="scorecardService">
        <mx:method name="storeScorecardForGoogle" />
    </mx:RemoteObject>
    <viewStackEffects:Slide id="leftEffect" direction="left"/>
    <viewStackEffects:Slide id="rightEffect" direction="right"/>
    <mx:VBox verticalGap="0" width="100%">
        <mx:Box width="100%" horizontalAlign="center" backgroundColor="#848080"
                paddingTop="5"
                paddingBottom="5">
            <mx:Label text="Scorecards" fontSize="20" fontFamily="Tahoma" fontWeight="bold" color="#FFFFFF"/>
        </mx:Box>
        <mx:ViewStack resizeToContent="true" selectedIndex="{primaryStackIndex}" width="100%" creationPolicy="all"
                      paddingTop="15" paddingBottom="15">
            <mx:Box width="100%" horizontalAlign="center" verticalAlign="middle">
                <mx:ProgressBar label="Loading scorecards..." indeterminate="{primaryStackIndex == 0}"/>
            </mx:Box>
            <mx:VBox horizontalAlign="center" width="100%">
                <mx:Label text="You haven't defined any scorecards yet." fontSize="16"/>
                <mx:Button label="Create Your First Scorecard" styleName="blueButton"
                           fontSize="16" click="newScorecard()"/>
            </mx:VBox>
            <mx:VBox width="100%">
                <mx:ViewStack resizeToContent="true" selectedIndex="{tabsIndex}" creationPolicy="all" width="100%">
                    <mx:Box/>
                    <mx:VBox width="100%">
                        <scorecard:ScorecardTabsRenderer scorecards="{scorecards}"
                                                         scorecardFocus="changeScorecard(event)"
                                                         scorecard="{selectedScorecard}"
                                kpiMove="onKPIMove(event)"/>
                        <mx:HRule width="100%"/>
                    </mx:VBox>
                </mx:ViewStack>
                <mx:Box paddingLeft="15" paddingRight="15">
                    <mx:ViewStack id="scorecardStack" selectedIndex="{scorecardIndex}" height="400"
                                  resizeToContent="true">

                    </mx:ViewStack>
                </mx:Box>
            </mx:VBox>
        </mx:ViewStack>
    </mx:VBox>
    <mx:Spacer width="20" id="spacer"/>
    <mx:ViewStack resizeToContent="true" selectedIndex="{sideBarControlsIndex}" id="controls">
        <mx:VBox paddingRight="10" paddingTop="20">
            <!--<mx:CheckBox label="Include Groups" id="includeGroupsCheckbox"/>-->
            <mx:Label text="Scorecard Controls" fontSize="12" fontWeight="bold" paddingRight="0"/>
            <mx:HRule width="100%"/>
            <mx:LinkButton label="Add scorecard..." color="#333333" fontSize="12" paddingLeft="0" paddingRight="0"
                           click="newScorecard()"/>
            <!--<mx:LinkButton label="Edit scorecard..." color="#333333" fontSize="12" paddingLeft="0" paddingRight="0"/>-->
            <mx:LinkButton label="Delete scorecard" color="#333333" fontSize="12" paddingLeft="0" paddingRight="0"
                           click="deleteScorecard()"/>
            <mx:LinkButton label="Add a KPI..." color="#333333" fontSize="12" paddingLeft="0" paddingRight="0"
                           click="addKPI()"/>
            <mx:LinkButton label="Configure KPIs..." color="#333333" fontSize="12" paddingLeft="0" paddingRight="0"
                           click="configureMode()"/>
            <mx:LinkButton label="Refresh data..." color="#333333" fontSize="12" paddingLeft="0" paddingRight="0"
                           click="refreshData()"/>
            <mx:LinkButton label="Reorder scorecards..." color="#333333" fontSize="12" paddingLeft="0" paddingRight="0"
                           click="reorderScorecards()"/>
            <mx:LinkButton label="Add to iGoogle..." color="#333333" fontSize="12" paddingLeft="0" paddingRight="0"
                           click="addToGoogle()" />
            <mx:HRule width="100%" visible="{groupText != ''}"/>
            <util:AutoSizeTextArea editable="false" selectable="false" backgroundAlpha="0" borderStyle="none"
                                   text="{groupText}" fontSize="12" color="#333333" width="150"/>
        </mx:VBox>
        <mx:VBox paddingRight="10" paddingTop="20">
            <!--<mx:CheckBox label="Include Groups" id="includeGroupsCheckbox"/>-->
            <mx:Label text="Scorecard Controls" fontSize="13" fontWeight="bold" paddingRight="0"/>
            <mx:HRule width="100%"/>
            <!--<mx:LinkButton label="Edit scorecard..." color="#333333" fontSize="12" paddingLeft="0" paddingRight="0"/>-->
            <mx:LinkButton label="Refresh data..." color="#333333" fontSize="12" paddingLeft="0" paddingRight="0"
                           click="refreshData()"/>
            <mx:HRule width="100%" visible="{groupText != ''}"/>
            <util:AutoSizeTextArea editable="false" selectable="false" backgroundAlpha="0" borderStyle="none"
                                   text="{groupText}" fontSize="12" color="#333333" width="150"/>
        </mx:VBox>
    </mx:ViewStack>
</mx:HBox>