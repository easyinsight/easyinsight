<?xml version="1.0" ?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*"
         xmlns:scorecard="com.easyinsight.scorecard.*"
         creationComplete="setupListeners()" width="760">
    <mx:Metadata>
        [Event(name="analyze", type="com.easyinsight.genredata.AnalyzeEvent")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import com.easyinsight.framework.CredentialsCache;
        import com.easyinsight.framework.EIMessageListener;
        import com.easyinsight.kpi.KPI;
        import com.easyinsight.kpi.KPIEvent;
        import com.easyinsight.kpi.KPIParentWindow;
        import com.easyinsight.util.Callout;
        import com.easyinsight.util.PopUpUtil;

        import mx.binding.utils.BindingUtils;
        import mx.collections.ArrayCollection;
        import mx.controls.TextArea;
        import mx.events.CollectionEvent;
        import mx.managers.PopUpManager;

        private var _scorecardDescriptor:ScorecardDescriptor;

        public function set scorecardDescriptor(value:ScorecardDescriptor):void {
            _scorecardDescriptor = value;
            invalidateProperties();
        }

        public function forceRefresh():void {
            baseIndex = 4;
            forcedRefresh = true;
            scorecardService.getScorecard.send(_scorecardDescriptor.id, CredentialsCache.getCache().createCredentials(), true);
        }

        private var forcedRefresh:Boolean = false;

        protected override function commitProperties():void {
            super.commitProperties();

            forcedRefresh = false;
            if (!_tutorialMode) {
                if (_scorecard == null) {
                    baseIndex = 0;
                    scorecardService.getScorecard.send(_scorecardDescriptor.id, CredentialsCache.getCache().createCredentials(), false);
                }
            }
        }

        private var _scorecard:Scorecard;


        public function get scorecard():Scorecard {
            return _scorecard;
        }

        [Bindable]
        private var configurationIndex:int = 0;

        [Bindable]
        private var kpis:ArrayCollection;

        private var _configurationMode:Boolean;

        [Bindable]
        private var controlFactory:KPIControlFactory = new KPIControlFactory(0, 0);

        [Bindable]
        private var kpiNameFactory:KPINameFactory = new KPINameFactory();

        private var _contextMenuAvailable:Boolean = true;

        private var _tutorialMode:Boolean = false;


        [Bindable(event="contextMenuAvailableChanged")]
        public function get contextMenuAvailable():Boolean {
            return _contextMenuAvailable;
        }

        public function set contextMenuAvailable(value:Boolean):void {
            if (_contextMenuAvailable == value) return;
            _contextMenuAvailable = value;
            dispatchEvent(new Event("contextMenuAvailableChanged"));
        }

        [Bindable(event="configurationModeChanged")]
        public function get configurationMode():Boolean {
            return _configurationMode;
        }

        private function determineIndex():void {
            if (_scorecard == null) {
                baseIndex = 0;
            } else {
                if (kpis == null || kpis.length == 0) {
                    baseIndex = 1;
                } else {
                    baseIndex = configurationMode ? 3 : 2;
                }
            }
        }

        public function set configurationMode(value:Boolean):void {
            if (_configurationMode == value) return;
            _configurationMode = value;
            determineIndex();
            dispatchEvent(new Event("configurationModeChanged"));
        }

        private function gotScorecard():void {
            var scorecardWrapper:ScorecardWrapper = scorecardService.getScorecard.lastResult as ScorecardWrapper;
            _scorecard = scorecardWrapper.scorecard;
            if (scorecardWrapper.credentials != null && scorecardWrapper.credentials.length > 0) {
                refreshIndex = 2;
                this.credentials = scorecardWrapper.credentials;
            } else if (scorecardWrapper.asyncRefresh) {
                asyncMessage = "Refreshing data sources in the background...";
                refreshIndex = 1;
                // TODO: create a message consumer for the asynchronous refresh to finish

            } else {
                refreshIndex = 0;
            }
            kpis = _scorecard.kpis;
            kpis.addEventListener(CollectionEvent.COLLECTION_CHANGE, onKPIChange);
            controlFactory = new KPIControlFactory(_scorecard.scorecardID, _groupID);
            determineIndex();
            invalidateSize();
        }

        private function onMessage(event:ScorecardMessageEvent):void {
            var scorecardEvent:ScorecardAsyncEvent = event.scorecardAsyncEvent;
            if (scorecardEvent != null && scorecardEvent.scorecardID == _scorecard.scorecardID) {
                if (scorecardEvent.type == ScorecardAsyncEvent.NAME_UPDATE) {
                    asyncMessage = "Synchronizing with the latest data from " + scorecardEvent.dataSourceName + "...";
                } else {
                    kpis = scorecardEvent.kpis;
                    kpis.addEventListener(CollectionEvent.COLLECTION_CHANGE, onKPIChange);
                    refreshIndex = 0;
                }
            }
        }

        [Bindable]
        private var asyncMessage:String;

        public function set scorecard(value:Scorecard):void {
            _scorecard = value;
            _tutorialMode = true;
            var desc:ScorecardDescriptor = new ScorecardDescriptor();
            desc.id = value.scorecardID;
            desc.name = value.name;
            _scorecardDescriptor = desc;
            kpis = _scorecard.kpis;
            kpis.addEventListener(CollectionEvent.COLLECTION_CHANGE, onKPIChange);
            controlFactory = new KPIControlFactory(_scorecard.scorecardID, _groupID);
            baseIndex = 2;
            invalidateSize();
        }

        protected override function measure():void {
            super.measure();
            if (kpis != null) {
                plainGrid.verticalScrollPolicy = "off";
                plainGrid.height = plainGrid.measureHeightOfItems(0, kpis.length) + plainGrid.headerHeight + 4;
                adminGrid.verticalScrollPolicy = "off";
                adminGrid.height = adminGrid.measureHeightOfItems(0, kpis.length) + adminGrid.headerHeight + 4;
            }
        }

        private function setupListeners():void {
            addEventListener(KPIEvent.KPI_EDITED, onKPIEdit);
            addEventListener(KPIEvent.KPI_ADDED, addedKPI);
            addEventListener(KPIEvent.KPI_REMOVED, onKPIDelete);
            EIMessageListener.instance().addEventListener(ScorecardMessageEvent.SCORECARD_MESSAGE, onMessage);
            BindingUtils.bindProperty(kpiNameFactory, "contextMenuAvailable", this, "contextMenuAvailable");
        }

        private function onKPIEdit(event:KPIEvent):void {
            var index:int = kpis.getItemIndex(event.previousKPI);
            kpis.removeItemAt(index);
            kpis.addItemAt(event.kpi, index);
        }

        private function onKPIDelete(event:KPIEvent):void {
            kpis.removeItemAt(kpis.getItemIndex(event.kpi));
        }


        private function onScorecardRefresh(event:ScorecardRefreshEvent):void {

        }

        private var _groupID:int;

        public function get groupID():int {
            return _groupID;
        }

        public function set groupID(value:int):void {
            _groupID = value;
        }

        public function addKPI():void {
            var kpiWindow:KPIParentWindow = new KPIParentWindow();
            kpiWindow.scorecardID = _scorecard.scorecardID;
            kpiWindow.groupID = _groupID;
            kpiWindow.addEventListener(KPIEvent.KPI_ADDED, addedKPI);
            PopUpManager.addPopUp(kpiWindow, this, true);
            PopUpUtil.centerPopUpWithY(kpiWindow, 20);
        }

        private function addedKPI(event:KPIEvent):void {
            kpis.addItem(event.kpi);
        }

        private function onKPIChange(event:CollectionEvent):void {
            determineIndex();
            invalidateSize();
        }

        private var credentials:ArrayCollection;

        private function refreshValues():void {
            CredentialsCache.getCache().obtainCredentials(this, credentials, onCredentials);
        }

        private function onCredentials():void {
            baseIndex = 4;
            scorecardService.getScorecard.send(_scorecardDescriptor.id, CredentialsCache.getCache().createCredentials(), forcedRefresh);
        }

        private var callout:Callout;

        public function firstRenderer(kpi:KPI):Callout {
            if (callout == null) {
                var rowRenderers:Array = plainGrid.listRendererArray;
                var index:int = kpis.getItemIndex(kpi);
                var kpiNameRenderer:KPINameRenderer = rowRenderers[index][1];
                callout = new Callout();
                callout.setStyle("backgroundColor", 0xffe96c);
                callout.setStyle("backgroundAlpha", 1);
                var contentLabel:TextArea = new TextArea();
                contentLabel.width = 200;
                contentLabel.height = 50;
                contentLabel.setStyle("backgroundAlpha", 0);
                contentLabel.setStyle("textDecoration", "none");
                contentLabel.setStyle("borderStyle", "none");
                contentLabel.text = "You can click on a KPI name to pull up a context menu with options for diving into the data.";
                callout.content = contentLabel;
                callout.show(kpiNameRenderer);
            }
            return callout;
        }

        [Bindable]
        private var refreshIndex:int = 0;

        public function clearRenderer():void {
            callout = null;
        }

        [Bindable]
        private var baseIndex:int = 0;

        [Bindable]
        private var gridHeight:uint = 0;
        ]]></mx:Script>
    <mx:RemoteObject destination="scorecardService" id="scorecardService">
        <mx:method name="getScorecard" result="gotScorecard()"/>
    </mx:RemoteObject>
    <mx:ViewStack selectedIndex="{baseIndex}" resizeToContent="true" width="100%" creationPolicy="all">
        <mx:Box width="100%" horizontalAlign="center" verticalAlign="middle">
            <mx:ProgressBar label="Loading the scorecard..." indeterminate="true"/>
        </mx:Box>
        <mx:VBox width="100%" horizontalAlign="center" verticalAlign="middle">
            <mx:Label text="You haven't defined any KPIs yet for this scorecard." fontSize="16"/>
            <mx:Button label="Create Your First KPI" styleName="blueButton" fontSize="16" click="addKPI()"/>
        </mx:VBox>
        <mx:VBox width="100%">
            <mx:HBox width="100%" verticalAlign="middle">
                <mx:ViewStack width="100%" selectedIndex="{refreshIndex}" resizeToContent="true">
                    <mx:Box/>
                    <mx:HBox width="100%" horizontalAlign="center" verticalAlign="middle">
                        <mx:ProgressBar label="{asyncMessage}" indeterminate="true"/>
                    </mx:HBox>
                    <mx:HBox width="100%" horizontalAlign="center" verticalAlign="middle">
                        <mx:Label text="Some of your KPIs are out of date:"/>
                        <mx:Button label="Refresh Values..." click="refreshValues()"/>
                    </mx:HBox>
                </mx:ViewStack>
            </mx:HBox>

            <scorecard:HackDataGrid dataProvider="{kpis}" rowHeight="40" selectable="false"
                                    width="760" id="plainGrid">
                <scorecard:columns>
                    <util:EIDataGridColumn headerText="" dataField="name"
                                           itemRenderer="com.easyinsight.kpi.KPIIconRenderer" width="50"/>
                    <util:EIDataGridColumn headerText="KPI Name" dataField="name"
                                           itemRenderer="{kpiNameFactory}"/>
                    <util:EIDataGridColumn headerText="Latest Value" dataField="name"
                                           itemRenderer="com.easyinsight.scorecard.KPIValueRenderer" width="110"/>
                    <util:EIDataGridColumn headerText="Time" dataField="name"
                                           itemRenderer="com.easyinsight.scorecard.KPITimeRenderer" width="100"/>
                    <util:EIDataGridColumn headerText="% Change" dataField="name"
                                           itemRenderer="com.easyinsight.scorecard.KPIChangeRenderer" width="110"/>
                    <util:EIDataGridColumn headerText="" dataField="name"
                                           itemRenderer="com.easyinsight.scorecard.KPIStatusRenderer" width="30"
                                           sortable="false"/>
                </scorecard:columns>
            </scorecard:HackDataGrid>
        </mx:VBox>
    <mx:VBox width="100%">
        <mx:HBox width="100%" verticalAlign="middle">            
            <mx:ViewStack width="100%" selectedIndex="{refreshIndex}">
                <mx:Box/>
                <mx:HBox width="100%" horizontalAlign="center" verticalAlign="middle">
                    <mx:ProgressBar label="Refreshing data sources in the background..." indeterminate="true"/>
                </mx:HBox>
                <mx:HBox width="100%" horizontalAlign="center" verticalAlign="middle">
                    <mx:Label text="Some of your KPIs are out of date:"/>
                    <mx:Button label="Refresh Values" click="refreshValues()"/>
                </mx:HBox>
            </mx:ViewStack>
        </mx:HBox>
        <mx:DataGrid dataProvider="{kpis}" rowHeight="40" dragEnabled="true" width="760" id="adminGrid">
            <mx:columns>
                <util:EIDataGridColumn headerText="" dataField="name"
                                       itemRenderer="com.easyinsight.kpi.KPIIconRenderer" width="50"/>
                <util:EIDataGridColumn headerText="KPI Name" dataField="name" itemRenderer="{kpiNameFactory}"/>
                <util:EIDataGridColumn headerText="Latest Value" dataField="name"
                                       itemRenderer="com.easyinsight.scorecard.KPIValueRenderer" width="110"/>
                <util:EIDataGridColumn headerText="" dataField="name"
                                       itemRenderer="com.easyinsight.scorecard.KPIStatusRenderer" width="30"
                                       sortable="false"/>
                <util:EIDataGridColumn headerText="" dataField="name" sortable="false"
                                       itemRenderer="{controlFactory}" width="150"/>
            </mx:columns>
        </mx:DataGrid>
    </mx:VBox>
        <mx:Box width="100%" height="250" horizontalAlign="center" verticalAlign="middle">
            <mx:ProgressBar label="Refreshing the scorecard..." indeterminate="true"/>
        </mx:Box>
</mx:ViewStack>
</mx:VBox>