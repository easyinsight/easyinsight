<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:listing="com.easyinsight.listing.*"
         xmlns:util="com.easyinsight.util.*" xmlns:solutions="com.easyinsight.solutions.*" width="100%" height="100%"
         implements="com.easyinsight.listing.IPerspective"
         backgroundColor="#DCE2F8" doubleClickEnabled="true" creationComplete="initListeners()"
         paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" verticalGap="0">
    <mx:Script>
		<![CDATA[
        import com.easyinsight.framework.LoginEvent;

        import com.easyinsight.help.ScreencastWindow;

        import com.easyinsight.listing.IPerspective;
        import com.easyinsight.listing.ListingChangeEvent;

        import com.easyinsight.util.PopUpUtil;

        import mx.binding.utils.BindingUtils;
        import mx.events.ItemClickEvent;
        import mx.utils.URLUtil;

        import com.easyinsight.framework.User;

        import mx.managers.BrowserManager;
        import mx.managers.PopUpManager;
        import mx.collections.ArrayCollection;

        private function onClick(event:ItemClickEvent):void {
            selectedCategory = event.index;
            availableSolutions.refresh();
        }

        [Bindable]
        [Embed(source="../../../../assets/background2.JPG")]
        private var background2:Class;

        private var selectedCategory:int;

        public var defaultView:int;

        private var _saas:Boolean = true;

        private var _client:Boolean = true;

        private var _learning:Boolean = false;

        private var _biz:Boolean = false;

        [Bindable(event="bizChanged")]
        public function get biz():Boolean {
            return _biz;
        }

        public function set biz(value:Boolean):void {
            if (_biz == value) return;
            _biz = value;
            updateFilters();
            dispatchEvent(new Event("bizChanged"));
        }

        [Bindable(event="saasChanged")]
        public function get saas():Boolean {
            return _saas;
        }

        public function set saas(value:Boolean):void {
            if (_saas == value) return;
            _saas = value;
            updateFilters();
            dispatchEvent(new Event("saasChanged"));
        }

        [Bindable(event="clientChanged")]
        public function get client():Boolean {
            return _client;
        }

        public function set client(value:Boolean):void {
            if (_client == value) return;
            _client = value;
            updateFilters();
            dispatchEvent(new Event("clientChanged"));
        }

        [Bindable(event="learningChanged")]
        public function get learning():Boolean {
            return _learning;
        }

        public function set learning(value:Boolean):void {
            if (_learning == value) return;
            _learning = value;
            updateFilters();
            dispatchEvent(new Event("learningChanged"));
        }

        [Bindable]
        private var availableSolutions:ArrayCollection;

        private function initListeners():void {
            User.getEventNotifier().addEventListener(LoginEvent.LOGIN, onLogin);
            addEventListener(SolutionSelectionEvent.SOLUTION_SELECTION, onSelection);
            /*BindingUtils.bindProperty(this, "saas", saasCheckbox, "selected");
            BindingUtils.bindProperty(this, "client", clientCheckbox, "selected");
            BindingUtils.bindProperty(this, "learning", trainingCheckbox, "selected");
            BindingUtils.bindProperty(this, "biz", bizCheckbox, "selected");*/
        }

        private function onSelection(event:SolutionSelectionEvent):void {
            var detail:IPerspective = SolutionDetailFactory.createDetailPage(event.solution, false);
            dispatchEvent(new ListingChangeEvent(detail));
        }

        private function onLogin(event:LoginEvent):void {
            gotFocus();
        }

        public function gotFocus():void {
            var fragmentObject:Object = new Object();
            fragmentObject.page = "connections";
            BrowserManager.getInstance().setTitle("Easy Insight - Connections");
            var fragmentString:String = URLUtil.objectToString(fragmentObject);
            BrowserManager.getInstance().setFragment(fragmentString);
            if (defaultView > 0) {
                /*saas = (Solution.SAAS & defaultView == Solution.SAAS);
                 client = (Solution.CLIENT & defaultView == Solution.CLIENT);
                 learning = (Solution.LEARNING & defaultView == Solution.LEARNING);
                 biz = (Solution.BIZ & defaultView == Solution.BIZ);*/
                defaultView = 0;
            }
            stackIndex = 0;
            solutionService.getSolutions.send();
        }

        private function gotAllSolutions():void {
            var solutionColl:ArrayCollection = solutionService.getSolutions.lastResult as ArrayCollection;
            solutionColl.filterFunction = filterFunction;
            solutionColl.refresh();
            this.availableSolutions = solutionColl;
            stackIndex = 1;
        }

        private function filterFunction(item:Object):Boolean {
            var okay:Boolean = false;
            var solution:Solution = item as Solution;
            switch (solution.category) {
                case Solution.SAAS:
                    okay = true;
                    break;
                case Solution.CLIENT:
                    okay = true;
                    break;
                default:
                    okay = false;
                    break;
                /*case Solution.LEARNING:
                    okay = learning;
                    break;
                case Solution.BIZ:
                    okay = biz;
                    break;*/
            }
            return okay;
        }

        private function updateFilters():void {
            if (availableSolutions != null)
                availableSolutions.refresh();
        }

        public function cleanup():void {
        }

        [Bindable]
        private var stackIndex:int;
                        
        ]]>
	</mx:Script>
    <mx:RemoteObject destination="solutionService" id="solutionService">
        <mx:method name="getSolutions" result="gotAllSolutions()"/>
    </mx:RemoteObject>
    <mx:VBox width="100%" height="100%" backgroundColor="#818285" horizontalAlign="center">
        <mx:VBox width="1000" height="100%" id="coreContent" backgroundColor="#FFFFFF" paddingTop="10" paddingLeft="10"
                 paddingRight="10" paddingBottom="10">
            <mx:HBox width="100%" horizontalAlign="center">
                <mx:VBox width="100%" height="100%" horizontalAlign="center">
                    <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                        <mx:Label fontSize="24" text="Ready to connect to your own data?"/>
                    </mx:Box>
                    <mx:Label text="Click on any of the options below to quickly connect and get started." fontSize="18"/>
                    <!--<mx:HBox>
                        <mx:CheckBox label="SaaS Integrations" id="saasCheckbox" selected="{saas}"/>
                        <mx:CheckBox label="Client Downloads" id="clientCheckbox" selected="{client}"/>
                        <mx:CheckBox label="Business Patterns" id="bizCheckbox" selected="{biz}"/>
                        <mx:CheckBox label="Easy Insight Training" id="trainingCheckbox" selected="{learning}"/>
                    </mx:HBox>-->
                </mx:VBox>
            </mx:HBox>
            <mx:ViewStack width="100%" height="100%" selectedIndex="{stackIndex}">
                <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                    <mx:ProgressBar indeterminate="true" label="Loading available connections..."/>
                </mx:Box>
                <mx:Box width="100%" height="100%">
                    <mx:TileList width="100%" height="100%" itemRenderer="com.easyinsight.solutions.SolutionView" dataProvider="{availableSolutions}" id="solutionGrid"
                        columnWidth="240" rowHeight="160"  backgroundImage="{background2}" backgroundSize="100%" verticalScrollPolicy="off"/>
                </mx:Box>
            </mx:ViewStack>
        </mx:VBox>
    </mx:VBox>
</mx:VBox>
