<?xml version="1.0" encoding="utf-8"?>
<skin:BackgroundImage xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:listing="com.easyinsight.listing.*"
                      xmlns:util="com.easyinsight.util.*" xmlns:solutions="com.easyinsight.solutions.*"
                      implements="com.easyinsight.listing.IPerspective"
                      doubleClickEnabled="true" creationComplete="initListeners()"
                      xmlns:skin="com.easyinsight.skin.*">
    <mx:Script>
		<![CDATA[
        import com.easyinsight.listing.IPerspective;
        import com.easyinsight.listing.ListingChangeEvent;

        import com.easyinsight.skin.ApplicationSkin;

        import mx.events.ItemClickEvent;
        import mx.utils.URLUtil;

        import mx.managers.BrowserManager;

        import mx.collections.ArrayCollection;

        private function onClick(event:ItemClickEvent):void {
            selectedCategory = event.index;
            availableSolutions.refresh();
        }

        private var selectedCategory:int;

        public var defaultView:int;

        private var _saas:Boolean = true;

        private var _client:Boolean = true;

        private var _learning:Boolean = false;

        private var _biz:Boolean = false;

        [Embed(source="../../../../assets/background2.JPG")]
        private var defaultReportBackground:Class;

        protected override function commitProperties():void {
            super.commitProperties();
            solutionGrid.setStyle("backgroundImage", defaultReportBackground);
            solutionGrid.setStyle("backgroundSize", ApplicationSkin.instance().reportBackgroundSize);
        }

        [Bindable(event="bizChanged")]
        public function get biz():Boolean {
            return _biz;
        }

        public function set biz(value:Boolean):void {
            if (_biz == value) return;
            _biz = value;
            updateFilters();
            dispatchEvent(new Event("bizChanged"));
        }

        [Bindable(event="saasChanged")]
        public function get saas():Boolean {
            return _saas;
        }

        public function set saas(value:Boolean):void {
            if (_saas == value) return;
            _saas = value;
            updateFilters();
            dispatchEvent(new Event("saasChanged"));
        }

        [Bindable(event="clientChanged")]
        public function get client():Boolean {
            return _client;
        }

        public function set client(value:Boolean):void {
            if (_client == value) return;
            _client = value;
            updateFilters();
            dispatchEvent(new Event("clientChanged"));
        }

        [Bindable(event="learningChanged")]
        public function get learning():Boolean {
            return _learning;
        }

        public function set learning(value:Boolean):void {
            if (_learning == value) return;
            _learning = value;
            updateFilters();
            dispatchEvent(new Event("learningChanged"));
        }

        [Bindable]
        private var availableSolutions:ArrayCollection;

        private function initListeners():void {
            addEventListener(SolutionSelectionEvent.SOLUTION_SELECTION, onSelection);
            var fragmentObject:Object = new Object();
            fragmentObject.page = "connections";
            BrowserManager.getInstance().setTitle("Easy Insight - Connections");
            var fragmentString:String = URLUtil.objectToString(fragmentObject);
            BrowserManager.getInstance().setFragment(fragmentString);
            if (defaultView > 0) {
                defaultView = 0;
            }
            stackIndex = 0;
            solutionService.getSolutions.send();
        }

        private function onSelection(event:SolutionSelectionEvent):void {
            var detail:IPerspective = SolutionDetailFactory.createDetailPage(event.solution, false);
            dispatchEvent(new ListingChangeEvent(detail));
        }

        public function gotFocus():void {
        }

        private function gotAllSolutions():void {
            var solutionColl:ArrayCollection = solutionService.getSolutions.lastResult as ArrayCollection;
            solutionColl.filterFunction = filterFunction;
            solutionColl.refresh();
            this.availableSolutions = solutionColl;
            stackIndex = 1;
        }

        private function filterFunction(item:Object):Boolean {
            var okay:Boolean = false;
            var solution:Solution = item as Solution;
            switch (solution.category) {
                case Solution.SAAS:
                    okay = true;
                    break;
                case Solution.CLIENT:
                    okay = true;
                    break;
                default:
                    okay = false;
                    break;
                /*case Solution.LEARNING:
                 okay = learning;
                 break;
                 case Solution.BIZ:
                 okay = biz;
                 break;*/
            }
            return okay;
        }

        private function updateFilters():void {
            if (availableSolutions != null)
                availableSolutions.refresh();
        }

        public function cleanup():void {
        }

        [Bindable]
        private var stackIndex:int;
                        
        ]]>
	</mx:Script>
    <mx:RemoteObject destination="solutionService" id="solutionService">
        <mx:method name="getSolutions" result="gotAllSolutions()"/>
    </mx:RemoteObject>
    <mx:VBox paddingLeft="10" paddingRight="10" paddingTop="10">
    <mx:HBox width="100%" horizontalAlign="center">
        <mx:VBox width="100%" height="100%" horizontalAlign="center">
            <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                <mx:Label fontSize="24" text="Ready to connect to your own data?"/>
            </mx:Box>
            <mx:Label text="Click on any of the options below to quickly connect and get started." fontSize="18"/>
        </mx:VBox>
    </mx:HBox>
    <mx:ViewStack width="100%" height="100%" selectedIndex="{stackIndex}" creationPolicy="all">
        <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
            <mx:ProgressBar indeterminate="{stackIndex == 0}" label="Loading available connections..."/>
        </mx:Box>
        <mx:Canvas width="100%" height="100%">
            <mx:TileList width="100%" height="100%" itemRenderer="com.easyinsight.solutions.SolutionView" dataProvider="{availableSolutions}" id="solutionGrid"
                columnWidth="240" rowHeight="160"/>
        </mx:Canvas>
    </mx:ViewStack>
    </mx:VBox>
</skin:BackgroundImage>
