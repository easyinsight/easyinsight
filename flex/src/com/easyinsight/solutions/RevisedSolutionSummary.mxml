<?xml version="1.0" encoding="utf-8"?>
<skin:BackgroundImage xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:solutions="com.easyinsight.solutions.*"

                      implements="com.easyinsight.listing.IPerspective"
                      doubleClickEnabled="true" creationComplete="initListeners()"
                      xmlns:skin="com.easyinsight.skin.*" verticalScrollPolicy="off">
    <skin:states>
        <mx:State name="oldPricingModel">
            <mx:AddChild relativeTo="{headerHBox}">
                <mx:VBox height="100%" horizontalAlign="center">
                    <mx:Box height="100%" horizontalAlign="center" verticalAlign="middle">
                        <mx:Label fontSize="24" text="Ready to connect to your own data?"/>
                    </mx:Box>
                    <mx:Label text="Click on any of the options below to get started."
                              fontSize="18"/>
                </mx:VBox>
            </mx:AddChild>
        </mx:State>
        <mx:State name="newPricingModel">
            <mx:AddChild relativeTo="{headerHBox}">
                <solutions:ConnectionStatDisplay id="smallBizStats" current="{smallBizCurrent}" total="{smallBizTotal}" typeLabel="Small Biz Connections"/>
            </mx:AddChild>
            <mx:AddChild relativeTo="{headerHBox}">
                <solutions:ConnectionStatDisplay id="storageUse" current="{storageCurrent}" total="{storageTotal}" typeLabel="Custom Storage"/>
            </mx:AddChild>
        </mx:State>
    </skin:states>
    <mx:Script>
		<![CDATA[
        import com.easyinsight.account.AccountStats;
        import com.easyinsight.customupload.JSONWindow;
        import com.easyinsight.customupload.UserUpload;
        import com.easyinsight.datasources.DataSourceType;
        import com.easyinsight.framework.User;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.listing.IPerspective;
        import com.easyinsight.listing.ListingChangeEvent;

        import com.easyinsight.skin.ApplicationSkin;
        import com.easyinsight.util.PopUpUtil;

        import mx.controls.Alert;

        import mx.events.ItemClickEvent;
        import mx.managers.PopUpManager;
        import mx.utils.URLUtil;

        import mx.managers.BrowserManager;

        import mx.collections.ArrayCollection;

        private function onClick(event:ItemClickEvent):void {
            selectedCategory = event.index;
            availableSolutions.refresh();
        }

        private var selectedCategory:int;

        public var defaultView:int;

        private var _saas:Boolean = true;

        private var _client:Boolean = true;

        private var _learning:Boolean = false;

        private var _biz:Boolean = false;

        [Bindable(event="saasChanged")]
        public function get saas():Boolean {
            return _saas;
        }

        public function set saas(value:Boolean):void {
            if (_saas == value) return;
            _saas = value;
            updateFilters();
            dispatchEvent(new Event("saasChanged"));
        }

        [Bindable(event="clientChanged")]
        public function get client():Boolean {
            return _client;
        }

        public function set client(value:Boolean):void {
            if (_client == value) return;
            _client = value;
            updateFilters();
            dispatchEvent(new Event("clientChanged"));
        }

        [Bindable]
        private var availableSolutions:ArrayCollection;

        private function initListeners():void {
            addEventListener(SolutionSelectionEvent.SOLUTION_SELECTION, onSelection);

            if (defaultView > 0) {
                defaultView = 0;
            }
            stackIndex = 0;
            solutionService.getSolutions.send();
        }

        private function onSelection(event:SolutionSelectionEvent):void {
            if (event.solution.dataSourceType == DataSourceType.HIGHRISE ||
                    event.solution.dataSourceType == DataSourceType.BASECAMP ||
                    event.solution.dataSourceType == DataSourceType.BASECAMP_NEXT ||
                    event.solution.dataSourceType == DataSourceType.CONSTANT_CONTACT ||
                    event.solution.dataSourceType == DataSourceType.GITHUB ||
                    event.solution.dataSourceType == DataSourceType.FRESHBOOKS ||
                    event.solution.dataSourceType == DataSourceType.PIVOTAL_TRACKER_V5 ||
                    event.solution.dataSourceType == DataSourceType.HARVEST_COMPOSITE ||
                    event.solution.dataSourceType == DataSourceType.PIVOTAL_TRACKER ||
                    event.solution.dataSourceType == DataSourceType.SMARTSHEET ||
                    event.solution.dataSourceType == DataSourceType.DISTINCT_CACHED ||
                    event.solution.dataSourceType == DataSourceType.FRESHDESK ||
                    event.solution.dataSourceType == DataSourceType.BLANK ||
                    event.solution.dataSourceType == DataSourceType.SENDGRID ||
                    event.solution.dataSourceType == DataSourceType.TRELLO ||
                    event.solution.dataSourceType == DataSourceType.BATCHBOOK2 ||
                    event.solution.dataSourceType == DataSourceType.BATCHBOOK ||
                    event.solution.dataSourceType == DataSourceType.YOUTRACK ||
                    event.solution.dataSourceType == DataSourceType.WUFOO ||
                    event.solution.dataSourceType == DataSourceType.INSIGHTLY ||
                    event.solution.dataSourceType == DataSourceType.INFUSIONSOFT ||
                    event.solution.dataSourceType == DataSourceType.REDBOOTH ||
                    event.solution.dataSourceType == DataSourceType.ZENDESK ||
                    event.solution.dataSourceType == DataSourceType.KASHOO ||
                    event.solution.dataSourceType == DataSourceType.SOLVE360) {
                var renderer:NewSolutionDetailRenderer = new NewSolutionDetailRenderer();
                renderer.solution = event.solution;
                renderer.installSolution();
            } else if (event.solution.dataSourceType == DataSourceType.JSON) {
                var window:JSONWindow = new JSONWindow();
                window.addEventListener(AnalyzeEvent.ANALYZE, uploadConfigComplete, false, 0, true);
                PopUpManager.addPopUp(window, this, true);
                PopUpUtil.centerPopUp(window);
            } else {
                var detail:IPerspective = SolutionDetailFactory.createDetailPage(event.solution, false);
                dispatchEvent(new ListingChangeEvent(detail));
            }
        }

        private function uploadConfigComplete(event:Event):void {
            dispatchEvent(event);
        }

        public function gotFocus():void {
            if (User.getInstance().pricingModel == 0) {
                currentState = "oldPricingModel";
            } else {
                currentState = "newPricingModel";
            }
            var fragmentObject:Object = new Object();
            fragmentObject.page = "connections";
            BrowserManager.getInstance().setTitle("Easy Insight - Connections");
            var fragmentString:String = URLUtil.objectToString(fragmentObject);
            BrowserManager.getInstance().setFragment(fragmentString);
            accountService.getAccountStats.send();
        }

        private function gotAllSolutions():void {
            var solutionColl:ArrayCollection = solutionService.getSolutions.lastResult as ArrayCollection;
            solutionColl.filterFunction = filterFunction;
            solutionColl.refresh();
            this.availableSolutions = solutionColl;
            invalidateSize();
            stackIndex = 1;
        }

        private function filterFunction(item:Object):Boolean {
            var okay:Boolean = false;
            var solution:Solution = item as Solution;
            switch (solution.category) {
                case Solution.SAAS:
                    okay = true;
                    break;
                case Solution.CLIENT:
                    okay = true;
                    break;
                default:
                    okay = false;
                    break;
            }
            return okay;
        }

        private function updateFilters():void {
            if (availableSolutions != null)
                availableSolutions.refresh();
        }

        public function cleanup():void {
        }

        override protected function measure():void {
            super.measure();
            if (availableSolutions != null) {
                var availableColumns:int = (vbox.width - 50) / (240);
                solutionGrid.width = availableColumns * 240 + 2;
                var itemsPerRow:int = (solutionGrid.width) / solutionGrid.columnWidth;
                var rows:int = Math.ceil(availableSolutions.length / itemsPerRow);
                solutionGrid.minHeight = solutionGrid.height = solutionGrid.rowHeight * rows + 4;
                canvas.maxHeight = unscaledHeight - headerHBox.height - 30;
            }
        }

        private function gotStats():void {
            var stats:AccountStats = accountService.getAccountStats.lastResult as AccountStats;
            smallBizCurrent = String(stats.currentSmallBizConnections);
            smallBizTotal = String(stats.addonSmallBizConnections + stats.coreSmallBizConnections);
            storageCurrent = stats.usedSpaceString;
            storageTotal = stats.maxSpaceString;
        }

        [Bindable]
        private var stackIndex:int;

        [Bindable]
        private var smallBizCurrent:String;

        [Bindable]
        private var smallBizTotal:String;

        [Bindable]
        private var storageCurrent:String;

        [Bindable]
        private var storageTotal:String;
        ]]>
	</mx:Script>
    <mx:RemoteObject destination="solutionService" id="solutionService">
        <mx:method name="getSolutions" result="gotAllSolutions()"/>
    </mx:RemoteObject>
    <mx:RemoteObject destination="accountAdmin" id="accountService">
        <mx:method name="getAccountStats" result="gotStats()"/>
    </mx:RemoteObject>

    <mx:VBox paddingLeft="10" paddingRight="10" paddingTop="10" id="vbox" horizontalAlign="center" width="100%"
             paddingBottom="10" verticalScrollPolicy="off">
        <mx:HBox width="100%" horizontalAlign="center" verticalAlign="middle" id="headerHBox" horizontalGap="50">


        </mx:HBox>
        <mx:Canvas verticalScrollPolicy="on" id="canvas">
            <mx:TileList width="100%" height="100%" itemRenderer="com.easyinsight.solutions.SolutionView"
                     dataProvider="{availableSolutions}" id="solutionGrid"
                     columnWidth="240" rowHeight="160" verticalScrollPolicy="off"/>
        </mx:Canvas>
    </mx:VBox>

</skin:BackgroundImage>
