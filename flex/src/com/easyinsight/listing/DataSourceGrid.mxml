<?xml version="1.0"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%"
         height="100%" horizontalAlign="center" initialize="onCreation()">
    <mx:Script><![CDATA[
        import com.easyinsight.dashboard.DashboardDescriptor;
        import com.easyinsight.datasources.CopyDataSourceWindow;

        /*import com.easyinsight.datasources.NewReportDataSourceWindow;*/
        import com.easyinsight.feedassembly.CompositeCreator;
        import com.easyinsight.framework.PerspectiveInfo;
        import com.easyinsight.framework.User;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.report.ReportAnalyzeSource;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.RolloverLabelEvent;

        import mx.collections.ArrayCollection;
        import mx.formatters.DateFormatter;
        import mx.managers.PopUpManager;
        import mx.utils.ObjectUtil;

        private var _dataProvider:ArrayCollection;


        [Bindable(event="dataProviderChanged")]
        public function get dataProvider():ArrayCollection {
            return _dataProvider;
        }

        public function set dataProvider(value:ArrayCollection):void {
            if (_dataProvider == value) return;
            _dataProvider = value;
            dispatchEvent(new Event("dataProviderChanged"));
            if (dataSourceGrid != null) {
                dataSourceGrid.invalidateSize();
            }
        }



        private function onCreation():void {
            formatter = new DateFormatter();
            switch (User.getInstance().dateFormat) {
                case 0:
                    formatter.formatString = "MM/DD/YYYY HH:NN";
                    break;
                case 1:
                    formatter.formatString = "YYYY-MM-DD HH:NN";
                    break;
                case 2:
                    formatter.formatString = "DD-MM-YYYY HH:NN";
                    break;
                case 3:
                    formatter.formatString = "DD/MM/YYYY HH:NN";
                    break;
                case 4:
                    formatter.formatString = "DD.MM.YYYY HH:NN";
                    break;
            }
            customizeVisible = User.getInstance().accountAdmin;
        }

        override protected function measure():void {
            super.measure();
            if (_dataProvider != null) {
                dataSourceGrid.height = _dataProvider.length * dataSourceGrid.rowHeight + 4 + dataSourceGrid.headerHeight;
            }
        }

        private function nameSort(obj1:Object, obj2:Object):int {
            var str1:String = obj1.name;
            var str2:String = obj2.name;
            return ObjectUtil.stringCompare(str1, str2, true);
        }

        private function customSort(obj1:Object, obj2:Object):int {
            var date1:Date = null;
            var date2:Date = null;
            if (obj1 is DataSourceDescriptor) {
                date1 = DataSourceDescriptor(obj1).lastDataTime;
            }
            if (obj2 is DataSourceDescriptor) {
                date2 = DataSourceDescriptor(obj2).lastDataTime;
            }
            if (date1 == null) {
                date1 = new Date();
                date1.setUTCFullYear(1970);
            }
            if (date2 == null) {
                date2 = new Date();
                date2.setUTCFullYear(1970);
            }
            return ObjectUtil.dateCompare(date1, date2);
        }

        private var topReports:TopReports;

        override protected function createChildren():void {
            super.createChildren();
            if (topReports == null && topItems.length > 0) {
                topReports = new TopReports();
                topReports.addEventListener(TopReportsEvent.TOP_REPORTS, onChange);
                topReports.topItems = topItems;
                addChildAt(topReports, 0);
            }
            /*var dTip:DataSourcesTip = new DataSourcesTip();
            if (topBox == null) {
                topBox = new HBox();
                addChildAt(dTip, 0);
            }*/
            if (User.getInstance().newsDate != null) {
                if (User.getInstance().newsDismissDate == null || User.getInstance().newsDismissDate.getTime() < User.getInstance().newsDate.getTime()) {
                    if (getChildren().length > 0 && !(getChildAt(0) is NewsBar)) {
                        var newsBar:NewsBar = new NewsBar();
                        newsBar.addEventListener("dismissNews", onDismissed);
                        if (topBox == null) {
                            topBox = new HBox();
                            addChildAt(topBox, 0);
                        }
                        topBox.addChildAt(newsBar, 0);
                    }
                }
            }
            /*var getHelp:GetHelp = new GetHelp();
            if (topBox == null) {
                topBox = new HBox();
                addChildAt(topBox, 0);
            }
            topBox.addChild(getHelp);*/

            if (User.getInstance().accountOverSize) {
                var mb:AccountMessageBar = new AccountMessageBar();
                if (topBox == null) {
                    topBox = new HBox();
                    addChildAt(topBox, 0);
                }
                topBox.addChild(mb);
            }

        }

        private var topBox:HBox;

        private var formatter:DateFormatter;

        private function createDateLabelFunction(value:Object, column:DataGridColumn):String {
            var descriptor:DataSourceDescriptor = value as DataSourceDescriptor;
            if (descriptor.lastDataTime == null) {
                return "( No Data )";
            } else {
                return formatter.format(descriptor.lastDataTime);
            }
        }

        private function createCompositeFeed():void {
            var descriptors:ArrayCollection = new ArrayCollection();
            var creator:CompositeCreator = new CompositeCreator(this);
            creator.dataSources = descriptors;
            creator.addEventListener(AnalyzeEvent.ANALYZE, onAnalyze, false, 0, true);
            creator.start();
        }

        private function onAnalyze(event:AnalyzeEvent):void {
            dispatchEvent(event);
        }

        private function onDismissed(event:Event):void {
            removeChild(DisplayObject(event.currentTarget));
        }

        /*private function blah():void {
            var window:NewReportDataSourceWindow = new NewReportDataSourceWindow();
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }*/

        [Bindable]
        public var topItems:ArrayCollection = new ArrayCollection();

        private function blah1():void {
            var window:AccountReportWindow = new AccountReportWindow();
            window.addEventListener(TopReportsEvent.TOP_REPORTS, onChange);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function onChange(event:TopReportsEvent):void {
            topItems.removeAll();
            topItems.addAll(event.descriptors);
            if (event.descriptors.length > 0 && topReports == null) {
                topReports = new TopReports();
                topReports.addEventListener(TopReportsEvent.TOP_REPORTS, onChange);
                topReports.topItems = topItems;
                addChildAt(topReports, 0);
            } else if (event.descriptors.length == 0 && topReports != null) {
                removeChild(topReports);
                topReports.removeEventListener(TopReportsEvent.TOP_REPORTS, onChange);
                topReports = null;
            }
        }

        [Bindable]
        private var customizeVisible:Boolean;

        private function blah():void {
            var window:CopyDataSourceWindow = new CopyDataSourceWindow();
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }
        ]]></mx:Script>


    <mx:HBox width="680" verticalAlign="middle">
        <mx:Label text="Data Sources" fontSize="20" maxWidth="300"/>
        <mx:Spacer width="100%"/>
        <mx:LinkButton label="Join data sources" click="createCompositeFeed()" fontSize="12"/>
        <mx:LinkButton label="Blah" click="blah()" fontSize="12"/>
        <!--<mx:LinkButton label="Data source from report" click="blah()" fontSize="12"/>-->
        <mx:LinkButton label="Customize top reports" click="blah1()" fontSize="12" visible="{customizeVisible}"/>
    </mx:HBox>
    <mx:HBox paddingLeft="10" paddingRight="10"
         borderStyle="solid" cornerRadius="8" borderThickness="1" dropShadowEnabled="true"
         backgroundColor="#FFFFFF" paddingTop="5" paddingBottom="5">

        <mx:DataGrid fontSize="12" horizontalGridLineColor="#DDDDDD" verticalGridLineColor="#DDDDDD" horizontalGridLines="true"
            verticalGridLines="true" id="dataSourceGrid" horizontalScrollPolicy="off" verticalScrollPolicy="off" selectable="false"
                dataProvider="{dataProvider}" rowHeight="24">
            <mx:columns>
                <mx:DataGridColumn dataField="name" itemRenderer="com.easyinsight.listing.MyDataNameRenderer" headerText="Data Source" width="400" sortCompareFunction="nameSort"/>
                <mx:DataGridColumn dataField="lastDataTime" labelFunction="createDateLabelFunction" headerText="Last Data Time" width="140"
                        sortCompareFunction="customSort"/>
                <mx:DataGridColumn dataField="author" headerText="Owner" width="140"/>
            </mx:columns>
        </mx:DataGrid>
    </mx:HBox>
</mx:VBox>
