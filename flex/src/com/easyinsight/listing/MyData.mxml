<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" creationComplete="initListeners()"
	implements="com.easyinsight.listing.IPerspective" xmlns:listing="com.easyinsight.listing.*" 
	xmlns:customupload="com.easyinsight.customupload.*" doubleClickEnabled="true" backgroundColor="#DCE2F8">
	<mx:states>
		<mx:State name="notLoggedIn">
			<mx:RemoveChild target="{uploadBox}"/>
			<mx:RemoveChild target="{uploadGrid}"/>
			<mx:AddChild relativeTo="{coreContent}">
				<listing:GottaLoginPage/>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<mx:Script>
		<![CDATA[
        import com.easyinsight.customupload.SimpleFeedWindow;
        import com.easyinsight.framework.AsyncInfoEvent;
        import com.easyinsight.framework.EIMessageListener;
        import com.easyinsight.framework.ModuleAnalyzeSource;
        import com.easyinsight.genredata.ModuleAnalyzeEvent;
        import com.easyinsight.help.MyDataHelp;
        import com.easyinsight.help.HelpWindow;
        import com.easyinsight.customupload.UserUpload;
        import com.easyinsight.framework.LoginEvent;
        import com.easyinsight.customupload.UploadExternalSource;
        import com.easyinsight.outboundnotifications.RefreshEventInfo;
        import com.easyinsight.report.ReportAnalyzeSource;
        import com.easyinsight.solutions.InsightDescriptor;

        import com.easyinsight.util.PopUpUtil;

        import mx.collections.ICollectionView;
        import mx.collections.Sort;
        import mx.events.AdvancedDataGridEvent;
        import mx.events.CollectionEvent;
        import mx.events.CollectionEventKind;
        import mx.events.ScrollEvent;
        import mx.events.ScrollEventDirection;
        import mx.utils.URLUtil;
        import mx.managers.BrowserManager;
        import mx.events.ListEvent;

        import com.easyinsight.genredata.AnalyzeEvent;

        import mx.collections.IHierarchicalCollectionView;
        import mx.collections.HierarchicalData;
        import mx.controls.Alert;

        import com.easyinsight.framework.User;
        import com.easyinsight.customupload.UploadConfigEvent;
        import com.easyinsight.util.ProgressAlert;

        import mx.rpc.events.FaultEvent;
        import mx.events.CloseEvent;
        import mx.managers.PopUpManager;
        import mx.collections.ArrayCollection;

        private function downloadAirWidget():void {
            var request:URLRequest = new URLRequest("/app/assets/EIAirWidget.air");
            request.method = URLRequestMethod.GET;
            flash.net.navigateToURL(request);
        }

        [Embed(source="../../../../assets/data_blue_x16.png")]
        public var listIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/monitor2.png")]
        public var monitorIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/chart_column.png")]
        public var crosstabIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/data_connection.png")]
        public var dataConnectionIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/data_table_x64.png")]
        public var joinIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/data_add_x64.png")]
        public var addIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/application_enterprise.png")]
        public var apiIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/helpx48.png")]
        public var helpIcon:Class;

        [Bindable]
        private var displayTreeData:ArrayCollection;
        private var sourceTreeData:ArrayCollection;

        private var keyword:String;

        private var _messageListener:EIMessageListener;

        private function onAsyncRefresh(event:AsyncInfoEvent):void {
            if (event.info.action == RefreshEventInfo.COMPLETE) {
                uploadService.getFeedAnalysisTree.send();
            }
        }

        public function set messageListener(value:EIMessageListener):void {
            if (value == _messageListener) {
                return;
            }
            _messageListener = value;
            value.addEventListener(AsyncInfoEvent.ASYNC_INFO, onAsyncRefresh);
        }

        private function initListeners():void {
            addEventListener(KeyboardEvent.KEY_UP, keyHit);
            User.getEventNotifier().addEventListener(LoginEvent.LOGIN, onLogin);
            addEventListener(DeleteDataSourceEvent.DELETE_DATA_SOURCE, onDelete);
            addEventListener(UploadConfigEvent.UPLOAD_CONFIG_COMPLETE, uploadConfigComplete);
            messageListener = EIMessageListener.instance();
        }

        private function onLogin(event:LoginEvent):void {
            gotFocus();
        }

        private function keyHit(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.DELETE) {
                if (uploadGrid.selectedItems != null) {
                    if (uploadGrid.selectedItems.length > 1) {
                        Alert.show("You can only delete single items at the moment.");
                    } else {
                        deleteItem(uploadGrid.selectedItem);
                    }
                }
            }
        }

        private function onDelete(event:DeleteDataSourceEvent):void {
            deleteItem(event.descriptor);
        }

        private function deleteItem(selectedItem:Object):void {

            if (uploadGrid.selectedItem is DataFeedDescriptor) {
                var descriptor:DataFeedDescriptor = uploadGrid.selectedItem as DataFeedDescriptor;
                if (descriptor.role == DataFeedDescriptor.OWNER) {
                    /*if (descriptor.policy.getPolicyType() == UploadPolicy.COMMERCIAL) {
                     Alert.show("This data source is currently available for sale in the marketplace.", "Alert",
                     Alert.OK | Alert.CANCEL, this, alertFeedListener, null, Alert.CANCEL);
                     } else {*/
                    Alert.show("Are you sure you want to delete this data source? You will not be able to undo this operation.", "Alert",
                            Alert.OK | Alert.CANCEL, this, alertFeedListener, null, Alert.CANCEL);
                    //	}
                } else {
                    /*if (descriptor.policy.getPolicyType() == UploadPolicy.COMMERCIAL) {
                     Alert.show("Are you sure you want to cancel your subscription to this data source?", "Alert",
                     Alert.OK | Alert.CANCEL, this, alertFeedListener, null, Alert.CANCEL);
                     } else {*/
                    Alert.show("Are you sure you want to cancel your subscription to this data source?", "Alert",
                            Alert.OK | Alert.CANCEL, this, alertFeedListener, null, Alert.CANCEL);
                    //}
                }
            } else {
                Alert.show("Are you sure you want to delete this report? You will not be able to undo this operation.", "Alert",
                        Alert.OK | Alert.CANCEL, this, alertInsightListener, null, Alert.CANCEL);
            }
        }

        private function alertFeedListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var feedDescriptor:DataFeedDescriptor = uploadGrid.selectedItem as DataFeedDescriptor;
                ProgressAlert.alert(this, "Deleting data source...", "Deleted data souce!", uploadService.deleteUserUpload);
                uploadService.deleteUserUpload.send(feedDescriptor.dataFeedID);
            }
        }

        private function alertInsightListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var definition:InsightDescriptor = uploadGrid.selectedItem as InsightDescriptor;
                ProgressAlert.alert(this, "Deleting report...", "Deleted report!", analysisService.deleteAnalysisDefinition);
                analysisService.deleteAnalysisDefinition.send(definition.id);
            }
        }

        private function deletedAnalysis():void {
            ProgressAlert.alert(this, "Refreshing...", null, uploadService.getFeedAnalysisTree);
            uploadService.getFeedAnalysisTree.send();
        }

        public function search():void {
            this.keyword = searchText.text.toLowerCase();
            IHierarchicalCollectionView(uploadGrid.dataProvider).refresh();
        }

        private function gridDoubleClick(event:ListEvent):void {
            var analyzeSource:ModuleAnalyzeSource = null;
            var selectedObject:Object = event.currentTarget.selectedItem;
            if (selectedObject is DataFeedDescriptor) {
                var descriptor:DataFeedDescriptor = selectedObject as DataFeedDescriptor;
                analyzeSource = new DescriptorAnalyzeSource(descriptor.dataFeedID, descriptor.name);
                dispatchEvent(new ModuleAnalyzeEvent(analyzeSource));
            } else {
                analyzeSource = new ReportAnalyzeSource(InsightDescriptor(selectedObject));
                dispatchEvent(new ModuleAnalyzeEvent(analyzeSource));
            }
        }

        public function gotFocus():void {

            var fragmentObject:Object = new Object();
            fragmentObject.page = "myData";
            BrowserManager.getInstance().setTitle("Easy Insight - My Data");
            var fragmentString:String = URLUtil.objectToString(fragmentObject);
            BrowserManager.getInstance().setFragment(fragmentString);
            var user:User = User.getInstance();
            if (user == null) {
                currentState = "notLoggedIn";
            } else {
                if (currentState != "") {
                    currentState = "";
                }
                uploadService.getFeedAnalysisTree.send();
            }
            if (_toGDocs) {
                var uploadExternal:UploadExternalSource = new UploadExternalSource();
                uploadExternal.addEventListener(UploadConfigEvent.UPLOAD_CONFIG_COMPLETE, uploadConfigComplete);
                PopUpManager.addPopUp(uploadExternal, this, true);
                PopUpUtil.centerPopUp(uploadExternal);
                _toGDocs = false;
            }
        }

        private var _toGDocs:Boolean;


        public function set toGDocs(value:Boolean):void {
            _toGDocs = value;
        }

        public function getDefaultAnalyzeState():Boolean {
            return true;
        }

        public function isKeywordSearchInstant():Boolean {
            return true;
        }

        private function passThrough(event:Event):void {
            dispatchEvent(event);
        }

        private function toUpload():void {
            var userUpload:UserUpload = UserUpload(PopUpManager.createPopUp(this, UserUpload, true));
            userUpload.addEventListener(UploadConfigEvent.UPLOAD_CONFIG_COMPLETE, uploadConfigComplete);
            PopUpUtil.centerPopUp(userUpload);
        }

        private function createEmptyFeed():void {
            var userUpload:SimpleFeedWindow = SimpleFeedWindow(PopUpManager.createPopUp(this, SimpleFeedWindow, true));
            userUpload.addEventListener(UploadConfigEvent.UPLOAD_CONFIG_COMPLETE, uploadConfigComplete);
            PopUpUtil.centerPopUp(userUpload);
        }

        private function externalConnect():void {
            var uploadExternal:UploadExternalSource = UploadExternalSource(PopUpManager.createPopUp(this, UploadExternalSource, true));
            uploadExternal.addEventListener(UploadConfigEvent.UPLOAD_CONFIG_COMPLETE, uploadConfigComplete);
            uploadExternal.width = uploadGrid.width;
            uploadExternal.height = uploadGrid.height;
            PopUpUtil.centerPopUp(uploadExternal);
        }

        private function uploadConfigComplete(event:UploadConfigEvent):void {
            uploadService.getFeedAnalysisTree.send();
            if (event.feedID > 0) {
                var descriptor:DataFeedDescriptor = new DataFeedDescriptor();
                descriptor.dataFeedID = event.feedID;
                /*descriptor.policy = new UploadPolicy();
                 descriptor.policy.publiclyVisible = false;*/
                descriptor.name = event.name;
                if (event.startInAdmin) {
                    dispatchEvent(new ModuleAnalyzeEvent(new FeedAdminAnalyzeSource(descriptor.dataFeedID)));
                } else {
                    dispatchEvent(new ModuleAnalyzeEvent(new DescriptorAnalyzeSource(event.feedID, event.name)));
                }
            }
        }

        private function gotFeedAnalysisTree():void {
            var sort:Sort = ICollectionView(uploadGrid.dataProvider).sort;
            sourceTreeData = uploadService.getFeedAnalysisTree.lastResult as ArrayCollection;
            displayTreeData = new ArrayCollection(sourceTreeData.toArray());
            var hierarchicalData:HierarchicalData = new HierarchicalData();
            hierarchicalData.source = displayTreeData;
            uploadGrid.dataProvider = hierarchicalData;
            IHierarchicalCollectionView(uploadGrid.dataProvider).filterFunction = filterFunction;
            displayTreeData.sort = sort;
            displayTreeData.refresh();
        }

        private function filterFunction(item:Object):Boolean {
            if (keyword != null && keyword.length > 0) {
                return (item.name.toLowerCase().indexOf(keyword) > -1 ||
                        (item.genre != null && item.genre.toLowerCase().indexOf(keyword) > -1));
            }
            return true;
        }

        private function iconFunction(item:Object, depth:int):Class {
            /*if (item is DataFeedDescriptor) {
             return listIcon;
             } else {
             return crosstabIcon;
             }*/
            return listIcon;
        }

        private function failure(event:FaultEvent):void {
            Alert.show(event.fault.message);
        }

        private function deleted():void {
            uploadService.getFeedAnalysisTree.send();
        }

        private function createCompositeFeed():void {

            /*var joinWorkspace:JoinWorkspace = JoinWorkspace(PopUpManager.createPopUp(this, JoinWorkspace, true));
             joinWorkspace.addEventListener(UploadConfigEvent.UPLOAD_CONFIG_COMPLETE, uploadConfigComplete);
             PopUpUtil.centerPopUp(joinWorkspace);*/
            var descriptors:ArrayCollection = new ArrayCollection();
            if (uploadGrid.selectedItems != null) {

                for each (var obj:Object in uploadGrid.selectedItems) {
                    if (obj is DataFeedDescriptor) {
                        descriptors.addItem(obj);
                    }
                }

            }
            dispatchEvent(new AnalyzeEvent(new CompositeFeedCreationSource(descriptors)));
        }

        private function help():void {
            HelpWindow.createHelpWindow(MyDataHelp, this);
        }

        private function onItemOpen(event:AdvancedDataGridEvent):void {
            var item:Object = event.item;
            var children:ArrayCollection = item.children;

        }
		]]>
	</mx:Script>
	<mx:RemoteObject id="uploadService" destination="userUpload">
		<mx:method name="getFeedAnalysisTree" result="gotFeedAnalysisTree()"/>
		<mx:method name="deleteUserUpload" result="deleted()"/>		
	</mx:RemoteObject>
	<mx:RemoteObject id="analysisService" destination="analysisDefinition">
		<mx:method name="deleteAnalysisDefinition" result="deletedAnalysis()"/>
	</mx:RemoteObject>
	<mx:VBox id="coreContent" height="100%" width="100%" paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10" verticalGap="10">
		<mx:HBox width="100%" id="uploadBox">	
			<mx:Button toolTip="Upload data from Excel or CSV..." click="toUpload()" id="uploadButton" icon="{addIcon}" 
				label="Upload File" labelPlacement="bottom"/>
			<mx:Button toolTip="Connect to Google Spreadsheets..." click="externalConnect()" id="connectButton" icon="{dataConnectionIcon}"
				label="Google Spreadsheets" labelPlacement="bottom"/>
			<mx:Button toolTip="Create composite data source..." click="createCompositeFeed()" id="compositeFeedButton" icon="{joinIcon}"
				label="Combine Sources" labelPlacement="bottom"/>
			<mx:Button toolTip="Create empty data source..." click="createEmptyFeed()" id="emptyFeedButton" icon="{addIcon}"
				label="New Empty Source" labelPlacement="bottom"/>
            <!--<mx:Button icon="{helpIcon}" label="Help..." labelPlacement="bottom" click="help()"/>-->
			<mx:Button toolTip="Download desktop widget..." click="downloadAirWidget()" id="downloadAirButton" icon="{monitorIcon}"
               label="Desktop Widget" labelPlacement="bottom"/>
            <mx:Spacer width="100%"/>
            <mx:HBox borderStyle="inset" borderThickness="1" paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5">
                <mx:TextInput id="searchText" keyUp="search()"/>
			    <mx:Button toolTip="Search" icon="@Embed(source='../../../../assets/view.png')" id="searchButton"/>
            </mx:HBox>
		</mx:HBox>

		<mx:AdvancedDataGrid width="100%" height="100%" id="uploadGrid" allowMultipleSelection="true" fontSize="12"
			groupIconFunction="iconFunction" defaultLeafIcon="{crosstabIcon}" itemDoubleClick="gridDoubleClick(event)" headerStyleName="BlueHeader" itemOpen="onItemOpen(event)">
			<mx:dataProvider>
	            <mx:HierarchicalData source="{displayTreeData}"/>
	        </mx:dataProvider>
			<mx:columns>
				<mx:AdvancedDataGridColumn headerText="Name" dataField="name"/>
				<mx:AdvancedDataGridColumn headerText="Size" dataField="size" width="110" itemRenderer="com.easyinsight.listing.SizeRenderer"/>
				<mx:AdvancedDataGridColumn headerText="Last Data Time" dataField="lastDataTime" width="140" itemRenderer="com.easyinsight.listing.MyDataLastDataLabel"/>
				<mx:AdvancedDataGridColumn width="250" headerText="" dataField="name" sortable="false" itemRenderer="com.easyinsight.listing.MyDataIconControls"/>
			</mx:columns>
		</mx:AdvancedDataGrid>
	</mx:VBox>
</mx:VBox>
