<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:skin="com.easyinsight.skin.*"
           creationComplete="initListeners()"
           implements="com.easyinsight.listing.IPerspective" xmlns:listing="com.easyinsight.listing.*"
           doubleClickEnabled="true" percentHeight="100" percentWidth="100">
    <mx:states>
        <mx:State name="noData">
            <mx:RemoveChild target="{centerCanvas}"/>
            <mx:AddChild>
                <listing:MyNoData/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="noReports">
            <mx:AddChild relativeTo="{blah}">
                <mx:HBox width="100%" height="100%" verticalAlign="middle">
                    <mx:Spacer width="100%"/>
                    <mx:VBox horizontalAlign="center" borderStyle="solid" borderThickness="1" useHandCursor="true"
                             backgroundColor="#FFFFFF" height="175"
                             width="280" cornerRadius="8" buttonMode="true" id="addReportBox"
                             rollOver="addReportBox.setStyle('backgroundColor', 0xDDDDDD)"
                             mouseOut="addReportBox.setStyle('backgroundColor', 0xFFFFFF)"
                             click="createReport()"
                             mouseChildren="false" paddingTop="5" dropShadowEnabled="true">
                        <mx:Image source="{newReportIcon}"/>
                        <mx:Text text="Create a New Report" fontSize="24" selectable="false"/>
                        <mx:TextArea
                                text="Ready to build your own lists, crosstabs, charts, or maps? You can create new reports here"
                                fontSize="14" backgroundAlpha="0" editable="false" selectable="false" height="70"
                                width="250" textAlign="center"/>
                    </mx:VBox>
                    <mx:Spacer width="100%"/>
                    <mx:VBox horizontalAlign="center" borderStyle="solid" borderThickness="1" useHandCursor="true"
                             backgroundColor="#FFFFFF" height="175"
                             width="280" cornerRadius="8" buttonMode="true" id="openReportBox3"
                             rollOver="openReportBox3.setStyle('backgroundColor', 0xDDDDDD)"
                             rollOut="openReportBox3.setStyle('backgroundColor', 0xFFFFFF)"
                             click="User.getEventNotifier().dispatchEvent(new NavigationEvent('Exchange'))"
                             mouseChildren="false" paddingTop="5" dropShadowEnabled="true">
                        <mx:Image source="{openReportIcon}"/>
                        <mx:Text text="Prebuilt Reports" fontSize="24" selectable="false"/>
                        <mx:TextArea
                                text="Need help getting started? Take advantage of other reports built by the community"
                                fontSize="14" backgroundAlpha="0" editable="false" selectable="false" height="70"
                                width="250" textAlign="center"/>
                    </mx:VBox>
                    <mx:Spacer width="100%"/>
                </mx:HBox>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Script>
		<![CDATA[
        import com.easyinsight.customupload.UploadConfigEvent;
        import com.easyinsight.dashboard.DashboardDescriptor;
        import com.easyinsight.etl.LookupTableDescriptor;
        import com.easyinsight.etl.LookupTableSource;
        import com.easyinsight.framework.NavigationEvent;
        import com.easyinsight.framework.PerspectiveInfo;
        import com.easyinsight.framework.User;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.goals.GoalDataAnalyzeSource;
        import com.easyinsight.goals.GoalTreeDescriptor;
        import com.easyinsight.quicksearch.EIDescriptor;
        import com.easyinsight.report.ReportAnalyzeSource;
        import com.easyinsight.scorecard.ScorecardDescriptor;
        import com.easyinsight.skin.ApplicationSkin;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.ProgressAlert;

        import mx.collections.ArrayCollection;
        import mx.collections.HierarchicalData;
        import mx.collections.ICollectionView;
        import mx.collections.Sort;
        import mx.controls.Alert;
        import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
        import mx.events.CloseEvent;
        import mx.events.ListEvent;
        import mx.managers.BrowserManager;
        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;
        import mx.utils.ObjectUtil;
        import mx.utils.URLUtil;

        [Embed(source="../../../../assets/data_blue_x16.png")]
        private var listIcon:Class;

        [Embed(source="../../../../assets/branch_add.png")]
        private var kpiTreeIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/presentation_chart.png")]
        private var dashboardIcon:Class;



        [Bindable]
        [Embed(source="../../../../assets/mobilephone.png")]
        private var mobileIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/arrow2_up_green.png")]
        private var scorecardIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/chart_column.png")]
        private var crosstabIcon:Class;



        [Bindable]
        [Embed(source="../../../../assets/calendar.png")]
        private var calendarIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/tables.png")]
        private var tablesIcon:Class;

        [Bindable]
        private var displayTreeData:ArrayCollection;
        private var sourceTreeData:ArrayCollection;

        private var keyword:String;

        [Bindable]
        private var stackIndex:int;

        private function initListeners():void {
            addEventListener(KeyboardEvent.KEY_UP, keyHit);
            addEventListener(DeleteDataSourceEvent.DELETE_DATA_SOURCE, onDelete);
            addEventListener(UploadConfigEvent.UPLOAD_CONFIG_COMPLETE, uploadConfigComplete);
        }

        private function keyHit(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.DELETE) {
                if (uploadGrid.selectedItems != null) {
                    if (uploadGrid.selectedItems.length > 1) {
                        Alert.show("You can only delete single items at the moment.");
                    } else {
                        deleteItem(uploadGrid.selectedItem);
                    }
                }
            }
        }

        private var openState:Object = new Object();

        private function preserveOpenState():void {
            if (displayTreeData != null) {
                openState = new Object();
                for each (var obj:Object in displayTreeData) {
                    openState[String(obj.id)] = uploadGrid.isItemOpen(obj);
                }
                scrollPosition = uploadGrid.verticalScrollPosition;
            }
        }

        private var scrollPosition:int = 0;

        private function fromLastState():void {
            for each (var obj:Object in displayTreeData) {
                var open:Boolean = openState[String(obj.id)];
                if (open) {
                    uploadGrid.expandItem(obj, true);
                }
                uploadGrid.validateNow();
            }
            uploadGrid.verticalScrollPosition = scrollPosition;
        }

        private function onDelete(event:DeleteDataSourceEvent):void {
            deleteItem(event.descriptor);
        }

        private function deleteItem(selectedItem:Object):void {

            if (selectedItem is DataSourceDescriptor) {
                Alert.show("Are you sure you want to delete this data source? You will not be able to undo this operation.", "Alert",
                        Alert.OK | Alert.CANCEL, this, alertFeedListener, null, Alert.CANCEL);
            } else if (selectedItem is InsightDescriptor) {
                Alert.show("Are you sure you want to delete this report? You will not be able to undo this operation.", "Alert",
                        Alert.OK | Alert.CANCEL, this, alertInsightListener, null, Alert.CANCEL);
            } else if (selectedItem is LookupTableDescriptor) {
                Alert.show("Are you sure you want to delete this lookup table? You will not be able to undo this operation.", "Alert",
                        Alert.OK | Alert.CANCEL, this, alertLookupListener, null, Alert.CANCEL);
            } else if (selectedItem is GoalTreeDescriptor) {
                Alert.show("Are you sure you want to delete this KPI tree? You will not be able to undo this operation.", "Alert",
                        Alert.OK | Alert.CANCEL, this, alertKPIListener, null, Alert.CANCEL);
            } else if (selectedItem is DashboardDescriptor) {
                Alert.show("Are you sure you want to delete this dashboard? You will not be able to undo this operation.", "Alert",
                        Alert.OK | Alert.CANCEL, this, alertDashboardListener, null, Alert.CANCEL);
            } else if (selectedItem is ScorecardDescriptor) {
                Alert.show("Are you sure you want to delete this scorecard? You will not be able to undo this operation.", "Alert",
                        Alert.OK | Alert.CANCEL, this, alertScorecardListener, null, Alert.CANCEL);
            }
        }

        private function alertFeedListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var feedDescriptor:DataSourceDescriptor = uploadGrid.selectedItem as DataSourceDescriptor;
                ProgressAlert.alert(this, "Deleting data source...", null, uploadService.deleteUserUpload);
                uploadService.deleteUserUpload.send(feedDescriptor.id);
            }
        }

        private function alertKPIListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var kpiTreeDescriptor:GoalTreeDescriptor = uploadGrid.selectedItem as GoalTreeDescriptor;
                ProgressAlert.alert(this, "Deleting KPI tree...", null, goalService.deleteGoalTree);
                goalService.deleteGoalTree.send(kpiTreeDescriptor.id);
            }
        }

        private function alertLookupListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var feedDescriptor:LookupTableDescriptor = uploadGrid.selectedItem as LookupTableDescriptor;
                ProgressAlert.alert(this, "Deleting lookup table...", null, etlService.deleteLookupTable);
                etlService.deleteLookupTable.send(feedDescriptor.id);
            }
        }

        private function alertDashboardListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var dashboardDescriptor:DashboardDescriptor = uploadGrid.selectedItem as DashboardDescriptor;
                ProgressAlert.alert(this, "Deleting lookup table...", null, dashboardService.deleteDashboard);
                dashboardService.deleteDashboard.send(dashboardDescriptor.id);
            }
        }

        private function alertScorecardListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var scorecardDescriptor:ScorecardDescriptor = uploadGrid.selectedItem as ScorecardDescriptor;
                ProgressAlert.alert(this, "Deleting lookup table...", null, scorecardService.deleteScorecard);
                scorecardService.deleteScorecard.send(scorecardDescriptor.id);
            }
        }

        private function deletedScorecard():void {
            ProgressAlert.alert(this, "Refreshing...", null, uploadService.getFeedAnalysisTree);
            showLoading = true;
            loadingIndex = 1;
            uploadService.getFeedAnalysisTree.send(includeGroups);
        }

        private function deletedTree():void {
            ProgressAlert.alert(this, "Refreshing...", null, uploadService.getFeedAnalysisTree);
            showLoading = true;
            loadingIndex = 1;
            uploadService.getFeedAnalysisTree.send(includeGroups);
        }

        private function deletedLookupTable():void {
            ProgressAlert.alert(this, "Refreshing...", null, uploadService.getFeedAnalysisTree);
            showLoading = true;
            loadingIndex = 1;
            uploadService.getFeedAnalysisTree.send(includeGroups);
        }

        private function alertInsightListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var definition:InsightDescriptor = uploadGrid.selectedItem as InsightDescriptor;
                ProgressAlert.alert(this, "Deleting report...", null, analysisService.deleteAnalysisDefinition);
                analysisService.deleteAnalysisDefinition.send(definition.id);
            }
        }

        private function deletedAnalysis():void {
            ProgressAlert.alert(this, "Refreshing...", null, uploadService.getFeedAnalysisTree);
            showLoading = true;
            loadingIndex = 1;
            uploadService.getFeedAnalysisTree.send(includeGroups);
        }

        private function gridDoubleClick(event:ListEvent):void {
            var analyzeSource:PerspectiveInfo = null;
            var selectedObject:Object = event.currentTarget.selectedItem;
            if (selectedObject is DataSourceDescriptor) {
                var descriptor:DataSourceDescriptor = selectedObject as DataSourceDescriptor;
                analyzeSource = new DescriptorAnalyzeSource(descriptor.id);
                dispatchEvent(new AnalyzeEvent(analyzeSource));
            } else if (selectedObject is LookupTableDescriptor) {
                dispatchEvent(new AnalyzeEvent(new LookupTableSource(LookupTableDescriptor(selectedObject).id)));
            } else if (selectedObject is GoalTreeDescriptor) {
                dispatchEvent(new AnalyzeEvent(new GoalDataAnalyzeSource(GoalTreeDescriptor(selectedObject).id)));
            } else if (selectedObject is DashboardDescriptor) {
                dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DASHBOARD_VIEW, {dashboardID: DashboardDescriptor(selectedObject).id})));
            } else if (selectedObject is ScorecardDescriptor) {
                dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.SCORECARD_VIEW, {scorecardID: ScorecardDescriptor(selectedObject).id})));
            } else {
                analyzeSource = new ReportAnalyzeSource(InsightDescriptor(selectedObject));
                dispatchEvent(new AnalyzeEvent(analyzeSource));
            }
        }

        public function gotFocus():void {
            updateUI();
            buttonBox.updateUI();
            var fragmentObject:Object = new Object();
            fragmentObject.page = "home";
            BrowserManager.getInstance().setTitle("Easy Insight - Home");
            var fragmentString:String = URLUtil.objectToString(fragmentObject);
            BrowserManager.getInstance().setFragment(fragmentString);

            loadingIndex = 1;
            showLoading = true;
            uploadService.getFeedAnalysisTree.send(includeGroups);
            buttonBox.refreshActions();
        }

        private function updateUI(event:Event = null):void {
            var columns:Array = [];
            var nameColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
            nameColumn.dataField = "name";
            nameColumn.headerText = "Name";
            var lastDataColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
            lastDataColumn.dataField = "lastDataTime";
            lastDataColumn.width = 140;
            lastDataColumn.headerText = "Last Data Time";
            lastDataColumn.sortCompareFunction = customSort;
            lastDataColumn.itemRenderer = new ClassFactory(MyDataLastDataLabel);
            var creationDateColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
            creationDateColumn.dataField = "creationDate";
            creationDateColumn.width = 140;
            creationDateColumn.headerText = "Creation Date";
            creationDateColumn.sortCompareFunction = customCreationSort;
            creationDateColumn.itemRenderer = new ClassFactory(MyDataCreationDateDataLabel);
            var sizeColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
            sizeColumn.dataField = "size";
            sizeColumn.width = 110;
            sizeColumn.headerText = "Size";
            sizeColumn.itemRenderer = new ClassFactory(SizeRenderer);
            var accountVisibleColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
            accountVisibleColumn.dataField = "accountVisibleDisplay";
            accountVisibleColumn.width = 130;
            accountVisibleColumn.headerText = "Account Visible";
            //accountVisibleColumn.itemRenderer = new ClassFactory(SizeRenderer);
            var ownerNameColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
            ownerNameColumn.dataField = "author";
            ownerNameColumn.width = 140;
            ownerNameColumn.headerText = "Owner Name";
            var controlsColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
            //controlsColumn.dataField = "";
            controlsColumn.headerText = "";
            controlsColumn.width = 240;
            controlsColumn.sortable = false;
            var factory:ClassFactory = new ClassFactory(MyDataIconControls);
            controlsColumn.itemRenderer = factory;
            var showSize:Boolean = true;
            var showLastData:Boolean = true;
            showSize = true;
            showLastData = true;
            var i:int = 4;
            factory.properties = {
                showAnalyze: true,
                showRefresh: true,
                showAdmin: true,
                showDelete: true
            };
            controlsColumn.width = i * 45 + 10;
            columns.push(nameColumn);
            if (ApplicationSkin.instance().myDataOwner) columns.push(ownerNameColumn);
            if (ApplicationSkin.instance().myDataCreationDate) columns.push(creationDateColumn);
            if (ApplicationSkin.instance().myDataSize) columns.push(sizeColumn);
            if (ApplicationSkin.instance().myDataLastTime) columns.push(lastDataColumn);
            if (ApplicationSkin.instance().myDataAccountVisible) columns.push(accountVisibleColumn);
            columns.push(controlsColumn);
            uploadGrid.columns = columns;
        }

        private function passThrough(event:Event):void {
            dispatchEvent(event);
        }

        private function uploadConfigComplete(event:UploadConfigEvent):void {
            showLoading = true;
            loadingIndex = 1;
            uploadService.getFeedAnalysisTree.send(includeGroups);
            if (event.feedID > 0) {
                var descriptor:DataSourceDescriptor = new DataSourceDescriptor();
                descriptor.id = event.feedID;
                descriptor.name = event.name;
                if (event.startInAdmin) {
                    dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DATA_SOURCE_ADMIN, {feedID: descriptor.id})));
                } else {
                    dispatchEvent(new AnalyzeEvent(new DescriptorAnalyzeSource(event.feedID)));
                }
            }
        }

        private function gotFeedAnalysisTree():void {


            preserveOpenState();
            var sort:Sort = ICollectionView(uploadGrid.dataProvider).sort;
            var myDataTree:MyDataTree = uploadService.getFeedAnalysisTree.lastResult as MyDataTree;

            if (myDataTree != null && myDataTree.objects.length == 0) {
                currentState = "noData";
            } else if (myDataTree.dashboardCount == 0 && myDataTree.reportCount == 0) {
                currentState = "noReports";
            } else {
                currentState = "";
            }

            sourceTreeData = myDataTree.objects;
            displayTreeData = new ArrayCollection(sourceTreeData.toArray());
            var hierarchicalData:HierarchicalData = new HierarchicalData();
            hierarchicalData.source = displayTreeData;
            uploadGrid.dataProvider = hierarchicalData;
            displayTreeData.sort = sort;
            displayTreeData.refresh();
            if (myDataTree.dataSourceCount == 1) {
                for each (var descriptor:EIDescriptor in displayTreeData) {
                    if (descriptor.getType() == EIDescriptor.DATA_SOURCE) {
                        uploadGrid.expandItem(descriptor, true);
                        break;
                    }
                }
                uploadGrid.verticalScrollPosition = scrollPosition;
            } else {
                fromLastState();
            }
            loadingIndex = 0;
            showLoading = false;
        }

        private function iconFunction(item:Object, depth:int):Class {
            return simpleIconFunction(item);
        }

        private function simpleIconFunction(item:Object):Class {
            if (item is DataSourceDescriptor) {
                return listIcon;
            } else if (item is InsightDescriptor) {
                return crosstabIcon;
            } else if (item is LookupTableDescriptor) {
                return tablesIcon;
            } else if (item is GoalTreeDescriptor) {
                return kpiTreeIcon;
            } else if (item is DashboardDescriptor) {
                return dashboardIcon;
            } else if (item is ScorecardDescriptor) {
                return scorecardIcon;
            }
            return null;
        }

        private function failure(event:FaultEvent):void {
            Alert.show(event.fault.message);
        }

        private function deleted():void {
            showLoading = true;
            loadingIndex = 1;
            uploadService.getFeedAnalysisTree.send(includeGroups);
        }



        public function cleanup():void {
        }

        private var _includeGroups:Boolean;


        [Bindable(event="includeGroupsChanged")]
        public function get includeGroups():Boolean {
            return _includeGroups;
        }

        public function set includeGroups(value:Boolean):void {
            if (_includeGroups == value) return;
            _includeGroups = value;
            dispatchEvent(new Event("includeGroupsChanged"));
        }

        private function customSort(obj1:Object, obj2:Object):int {
            var date1:Date = null;
            var date2:Date = null;
            if (obj1 is DataSourceDescriptor) {
                date1 = DataSourceDescriptor(obj1).lastDataTime;
            }
            if (obj2 is DataSourceDescriptor) {
                date2 = DataSourceDescriptor(obj2).lastDataTime;
            }
            if (date1 == null) {
                date1 = new Date();
                date1.setUTCFullYear(1970);
            }
            if (date2 == null) {
                date2 = new Date();
                date2.setUTCFullYear(1970);
            }
            return ObjectUtil.dateCompare(date1, date2);
        }

        private function customCreationSort(obj1:Object, obj2:Object):int {
            var date1:Date = null;
            var date2:Date = null;
            if (obj1 is EIDescriptor) {
                date1 = EIDescriptor(obj1).creationDate;
            }
            if (obj2 is EIDescriptor) {
                date2 = EIDescriptor(obj2).creationDate;
            }
            if (date1 == null) {
                date1 = new Date();
                date1.setUTCFullYear(1970);
            }
            if (date2 == null) {
                date2 = new Date();
                date2.setUTCFullYear(1970);
            }
            return ObjectUtil.dateCompare(date1, date2);
        }

        [Bindable]
        private var showLoading:Boolean = false;

        [Bindable]
        private var showComposite:Boolean = true;
        [Bindable]
        private var showPackage:Boolean = true;
        [Bindable]
        private var showWidget:Boolean = true;
        [Bindable]
        private var showConnections:Boolean = true;
        [Bindable]
        private var showLookupTable:Boolean = true;

        [Bindable]
        private var addGoalTreeAvailable:Boolean = true;

        [Bindable]
        private var addDashboardAvailable:Boolean = true;

        private function createReport():void {
            var dataSourceID:int;
            if (uploadGrid.selectedItems != null && uploadGrid.selectedItems.length > 0) {
                var obj:Object = uploadGrid.selectedItems[0];
                if (obj is DataSourceDescriptor) {
                    dataSourceID = DataSourceDescriptor(obj).id;
                }
            }
            if (dataSourceID > 0) {
                dispatchEvent(new AnalyzeEvent(new DescriptorAnalyzeSource(dataSourceID)));
            } else {
                if (sourceTreeData.length > 0) {
                    var dataSources:ArrayCollection = new ArrayCollection();
                    for each (var desc:EIDescriptor in sourceTreeData) {
                        if (desc is DataSourceDescriptor) {
                            dataSources.addItem(desc);
                            dataSourceID = desc.id;
                        }
                    }
                    if (dataSources.length == 1) {
                        dispatchEvent(new AnalyzeEvent(new DescriptorAnalyzeSource(dataSourceID)));
                    } else {
                        var window:NewReportWindow = new NewReportWindow();
                        window.addEventListener(AnalyzeEvent.ANALYZE, toAnalyze, false, 0, true);
                        window.dataSources = dataSources;
                        PopUpManager.addPopUp(window, this, true);
                        PopUpUtil.centerPopUp(window);
                    }
                }
            }

        }


        [Bindable]
        [Embed(source="../../../../assets/landing/table_add.png")]
        public var newReportIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/landing/chart_pie2.png")]
        public var openReportIcon:Class;

        private function toAnalyze(event:AnalyzeEvent):void {
            dispatchEvent(event);
        }





        [Bindable]
        private var loadingIndex:int = 0;



        private function mobile():void {
            var window:MobileWindow = new MobileWindow();
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }
        ]]>
</mx:Script>
    <mx:RemoteObject destination="goalService" id="goalService">
        <mx:method name="deleteGoalTree" result="deletedTree()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="uploadService" destination="userUpload">
        <mx:method name="getFeedAnalysisTree" result="gotFeedAnalysisTree()"/>
        <mx:method name="deleteUserUpload" result="deleted()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="analysisService" destination="analysisDefinition">
        <mx:method name="deleteAnalysisDefinition" result="deletedAnalysis()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="etlService" destination="feeds">
        <mx:method name="deleteLookupTable" result="deletedLookupTable()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="dashboardService" destination="dashboardService">
        <mx:method name="deleteDashboard" result="deletedLookupTable()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="scorecardService" destination="scorecardService">
        <mx:method name="deleteScorecard" result="deletedScorecard()"/>
    </mx:RemoteObject>
    <skin:BackgroundImage width="100%" height="100%" id="centerCanvas">
        <mx:HBox horizontalGap="0">
            <listing:MyDataButton uploadGrid="{uploadGrid}" uiChange="updateUI()" createReport="createReport()"
                    id="buttonBox"/>
            <mx:Canvas width="100%" height="100%">
                <mx:VBox paddingLeft="0" paddingRight="10" paddingTop="10" paddingBottom="10" width="100%"
                        height="100%" id="blah">
                    <mx:AdvancedDataGrid width="100%" height="100%" id="uploadGrid" allowMultipleSelection="true"
                                         fontSize="12"
                                         itemDoubleClick="gridDoubleClick(event)" headerStyleName="BlueHeader"
                                         iconFunction="simpleIconFunction">
                        <mx:dataProvider>
                            <mx:HierarchicalData source="{displayTreeData}"/>
                        </mx:dataProvider>
                    </mx:AdvancedDataGrid>
                </mx:VBox>

                <mx:ViewStack selectedIndex="{loadingIndex}" width="100%" height="100%">
                    <mx:Box/>
                    <mx:Box width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
                        <mx:ProgressBar indeterminate="true" visible="{showLoading}"/>
                    </mx:Box>
                </mx:ViewStack>
            </mx:Canvas>
        </mx:HBox>
    </skin:BackgroundImage>
</mx:Canvas>
