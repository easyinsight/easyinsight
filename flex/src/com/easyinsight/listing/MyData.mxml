<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:skin="com.easyinsight.skin.*"
           creationComplete="initListeners()"
           implements="com.easyinsight.listing.IPerspective" xmlns:listing="com.easyinsight.listing.*"
           doubleClickEnabled="true" percentHeight="100" percentWidth="100">
    <mx:Script>
		<![CDATA[        
        import com.easyinsight.account.Account;
        import com.easyinsight.customupload.UploadConfigEvent;
        import com.easyinsight.dashboard.DashboardDescriptor;
        import com.easyinsight.etl.LookupTableDescriptor;
        import com.easyinsight.etl.LookupTableSource;
        import com.easyinsight.etl.NewLookupTableWindow;
        import com.easyinsight.feedassembly.CompositeCreator;
        import com.easyinsight.framework.NavigationEvent;
        import com.easyinsight.framework.PerspectiveInfo;
        import com.easyinsight.framework.User;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.goals.GoalDataAnalyzeSource;
        import com.easyinsight.goals.GoalTreeAdminAnalyzeSource;
        import com.easyinsight.goals.GoalTreeDescriptor;
        import com.easyinsight.quicksearch.EIDescriptor;
        import com.easyinsight.report.ReportAnalyzeSource;
        import com.easyinsight.scorecard.ScorecardDescriptor;
        import com.easyinsight.skin.ApplicationSkin;
        import com.easyinsight.skin.ApplicationSkinWindow;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.ProgressAlert;

        import mx.binding.utils.BindingUtils;
        import mx.collections.ArrayCollection;
        import mx.collections.HierarchicalData;
        import mx.collections.ICollectionView;
        import mx.collections.Sort;
        import mx.controls.Alert;
        import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
        import mx.events.CloseEvent;
        import mx.events.ListEvent;
        import mx.managers.BrowserManager;
        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;
        import mx.states.RemoveChild;
        import mx.states.State;
        import mx.utils.ObjectUtil;
        import mx.utils.URLUtil;

        [Embed(source="../../../../assets/data_blue_x16.png")]
        private var listIcon:Class;

        [Embed(source="../../../../assets/branch_add.png")]
        private var kpiTreeIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/presentation_chart.png")]
        private var dashboardIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/preferences.png")]
        private var configIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/mobilephone.png")]
        private var mobileIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/arrow2_up_green.png")]
        private var scorecardIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/chart_column.png")]
        private var crosstabIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/data_table.png")]
        private var joinIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/tables_x16.png")]
        private var tablesAddIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/calendar.png")]
        private var calendarIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/tables.png")]
        private var tablesIcon:Class;

        [Bindable]
        private var displayTreeData:ArrayCollection;
        private var sourceTreeData:ArrayCollection;

        private var keyword:String;

        [Bindable]
        private var stackIndex:int;

        private function initListeners():void {
            addEventListener(KeyboardEvent.KEY_UP, keyHit);
            addEventListener(DeleteDataSourceEvent.DELETE_DATA_SOURCE, onDelete);
            addEventListener(UploadConfigEvent.UPLOAD_CONFIG_COMPLETE, uploadConfigComplete);
            BindingUtils.bindProperty(this, "includeGroups", groupInclude, "selected");
        }

        private function keyHit(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.DELETE) {
                if (uploadGrid.selectedItems != null) {
                    if (uploadGrid.selectedItems.length > 1) {
                        Alert.show("You can only delete single items at the moment.");
                    } else {
                        deleteItem(uploadGrid.selectedItem);
                    }
                }
            }
        }

        private var openState:Object = new Object();

        private function preserveOpenState():void {
            if (displayTreeData != null) {
                openState = new Object();
                for each (var obj:Object in displayTreeData) {
                    openState[String(obj.id)] = uploadGrid.isItemOpen(obj);
                }
                scrollPosition = uploadGrid.verticalScrollPosition;
            }
        }

        private var scrollPosition:int = 0;

        private function fromLastState():void {
            for each (var obj:Object in displayTreeData) {
                var open:Boolean = openState[String(obj.id)];
                if (open) {
                    uploadGrid.expandItem(obj, true);
                }
                uploadGrid.validateNow();
                uploadGrid.verticalScrollPosition = scrollPosition;
            }
        }

        private function onDelete(event:DeleteDataSourceEvent):void {
            deleteItem(event.descriptor);
        }

        private function deleteItem(selectedItem:Object):void {

            if (selectedItem is DataSourceDescriptor) {
                Alert.show("Are you sure you want to delete this data source? You will not be able to undo this operation.", "Alert",
                        Alert.OK | Alert.CANCEL, this, alertFeedListener, null, Alert.CANCEL);
            } else if (selectedItem is InsightDescriptor) {
                Alert.show("Are you sure you want to delete this report? You will not be able to undo this operation.", "Alert",
                        Alert.OK | Alert.CANCEL, this, alertInsightListener, null, Alert.CANCEL);
            } else if (selectedItem is LookupTableDescriptor) {
                Alert.show("Are you sure you want to delete this lookup table? You will not be able to undo this operation.", "Alert",
                        Alert.OK | Alert.CANCEL, this, alertLookupListener, null, Alert.CANCEL);
            } else if (selectedItem is GoalTreeDescriptor) {
                Alert.show("Are you sure you want to delete this KPI tree? You will not be able to undo this operation.", "Alert",
                        Alert.OK | Alert.CANCEL, this, alertKPIListener, null, Alert.CANCEL);
            } else if (selectedItem is DashboardDescriptor) {
                Alert.show("Are you sure you want to delete this dashboard? You will not be able to undo this operation.", "Alert",
                        Alert.OK | Alert.CANCEL, this, alertDashboardListener, null, Alert.CANCEL);
            } else if (selectedItem is ScorecardDescriptor) {
                Alert.show("Are you sure you want to delete this scorecard? You will not be able to undo this operation.", "Alert",
                        Alert.OK | Alert.CANCEL, this, alertScorecardListener, null, Alert.CANCEL);
            }
        }

        private function alertFeedListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var feedDescriptor:DataSourceDescriptor = uploadGrid.selectedItem as DataSourceDescriptor;
                ProgressAlert.alert(this, "Deleting data source...", null, uploadService.deleteUserUpload);
                uploadService.deleteUserUpload.send(feedDescriptor.id);
            }
        }

        private function alertKPIListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var kpiTreeDescriptor:GoalTreeDescriptor = uploadGrid.selectedItem as GoalTreeDescriptor;
                ProgressAlert.alert(this, "Deleting KPI tree...", null, goalService.deleteGoalTree);
                goalService.deleteGoalTree.send(kpiTreeDescriptor.id);
            }
        }

        private function alertLookupListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var feedDescriptor:LookupTableDescriptor = uploadGrid.selectedItem as LookupTableDescriptor;
                ProgressAlert.alert(this, "Deleting lookup table...", null, etlService.deleteLookupTable);
                etlService.deleteLookupTable.send(feedDescriptor.id);
            }
        }

        private function alertDashboardListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var dashboardDescriptor:DashboardDescriptor = uploadGrid.selectedItem as DashboardDescriptor;
                ProgressAlert.alert(this, "Deleting lookup table...", null, dashboardService.deleteDashboard);
                dashboardService.deleteDashboard.send(dashboardDescriptor.id);
            }
        }

        private function alertScorecardListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var scorecardDescriptor:ScorecardDescriptor = uploadGrid.selectedItem as ScorecardDescriptor;
                ProgressAlert.alert(this, "Deleting lookup table...", null, scorecardService.deleteScorecard);
                scorecardService.deleteScorecard.send(scorecardDescriptor.id);
            }
        }

        private function deletedScorecard():void {
            ProgressAlert.alert(this, "Refreshing...", null, uploadService.getFeedAnalysisTree);
            showLoading = true;
            loadingIndex = 1;
            uploadService.getFeedAnalysisTree.send(includeGroups);
        }

        private function deletedTree():void {
            ProgressAlert.alert(this, "Refreshing...", null, uploadService.getFeedAnalysisTree);
            showLoading = true;
            loadingIndex = 1;
            uploadService.getFeedAnalysisTree.send(includeGroups);
        }

        private function deletedLookupTable():void {
            ProgressAlert.alert(this, "Refreshing...", null, uploadService.getFeedAnalysisTree);
            showLoading = true;
            loadingIndex = 1;
            uploadService.getFeedAnalysisTree.send(includeGroups);
        }

        private function alertInsightListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var definition:InsightDescriptor = uploadGrid.selectedItem as InsightDescriptor;
                ProgressAlert.alert(this, "Deleting report...", null, analysisService.deleteAnalysisDefinition);
                analysisService.deleteAnalysisDefinition.send(definition.id);
            }
        }

        private function deletedAnalysis():void {
            ProgressAlert.alert(this, "Refreshing...", null, uploadService.getFeedAnalysisTree);
            showLoading = true;
            loadingIndex = 1;
            uploadService.getFeedAnalysisTree.send(includeGroups);
        }

        private function gridDoubleClick(event:ListEvent):void {
            var analyzeSource:PerspectiveInfo = null;
            var selectedObject:Object = event.currentTarget.selectedItem;
            if (selectedObject is DataSourceDescriptor) {
                var descriptor:DataSourceDescriptor = selectedObject as DataSourceDescriptor;
                analyzeSource = new DescriptorAnalyzeSource(descriptor.id);
                dispatchEvent(new AnalyzeEvent(analyzeSource));
            } else if (selectedObject is LookupTableDescriptor) {
                dispatchEvent(new AnalyzeEvent(new LookupTableSource(LookupTableDescriptor(selectedObject).id)));
            } else if (selectedObject is GoalTreeDescriptor) {
                dispatchEvent(new AnalyzeEvent(new GoalDataAnalyzeSource(GoalTreeDescriptor(selectedObject).id)));
            } else if (selectedObject is DashboardDescriptor) {
                dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DASHBOARD_VIEW, {dashboardID: DashboardDescriptor(selectedObject).id})));
            } else if (selectedObject is ScorecardDescriptor) {
                dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.SCORECARD_VIEW, {scorecardID: ScorecardDescriptor(selectedObject).id})));
            } else {
                analyzeSource = new ReportAnalyzeSource(InsightDescriptor(selectedObject));
                dispatchEvent(new AnalyzeEvent(analyzeSource));
            }
        }

        public static const NO_DATA:int = 1;
        public static const LOADING_DATA:int = 2;
        public static const MY_DATA:int = 3;

        public function gotFocus():void {
            updateUI();
            var fragmentObject:Object = new Object();
            fragmentObject.page = "myData";
            BrowserManager.getInstance().setTitle("Easy Insight - My Data");
            var fragmentString:String = URLUtil.objectToString(fragmentObject);
            BrowserManager.getInstance().setFragment(fragmentString);
            if (stackIndex == 0) {
                stackIndex = LOADING_DATA;
            } else {
                showLoading = true;
            }

            loadingIndex = 1;
            uploadService.getFeedAnalysisTree.send(includeGroups);

        }

        private function updateUI(event:Event = null):void {
            var columns:Array = [];
            var nameColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
            nameColumn.dataField = "name";
            nameColumn.headerText = "Name";
            var lastDataColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
            lastDataColumn.dataField = "lastDataTime";
            lastDataColumn.width = 140;
            lastDataColumn.headerText = "Last Data Time";
            lastDataColumn.sortCompareFunction = customSort;
            lastDataColumn.itemRenderer = new ClassFactory(MyDataLastDataLabel);
            var creationDateColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
            creationDateColumn.dataField = "creationDate";
            creationDateColumn.width = 140;
            creationDateColumn.headerText = "Creation Date";
            creationDateColumn.sortCompareFunction = customCreationSort;
            creationDateColumn.itemRenderer = new ClassFactory(MyDataCreationDateDataLabel);
            var sizeColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
            sizeColumn.dataField = "size";
            sizeColumn.width = 110;
            sizeColumn.headerText = "Size";
            sizeColumn.itemRenderer = new ClassFactory(SizeRenderer);
            var ownerNameColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
            ownerNameColumn.dataField = "author";
            ownerNameColumn.width = 140;
            ownerNameColumn.headerText = "Owner Name";
            var controlsColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
            //controlsColumn.dataField = "";
            controlsColumn.headerText = "";
            controlsColumn.width = 240;
            controlsColumn.sortable = false;
            var factory:ClassFactory = new ClassFactory(MyDataIconControls);
            controlsColumn.itemRenderer = factory;
            var showSize:Boolean = true;
            var showLastData:Boolean = true;
            currentState = "";
            var showState:State = new State();
            showState.name = "buttonConfig";
            var ops:Array = [];
            if (!ApplicationSkin.instance().myDataCombine) {
                var removeComposite:RemoveChild = new RemoveChild();
                removeComposite.target = compositeFeedButton;
                ops.push(removeComposite);
            }
            if (!ApplicationSkin.instance().myDataCombine) {
                var removeLookupTable:RemoveChild = new RemoveChild();
                removeLookupTable.target = lookupTableButton;
                ops.push(removeLookupTable);
            }
            if (!ApplicationSkin.instance().myDataNewKPITree || User.getInstance().getAccountType() < Account.PRO) {
                var removeKPITree:RemoveChild = new RemoveChild();
                removeKPITree.target = createKPITreeButton;
                ops.push(removeKPITree);
            }
            if (!ApplicationSkin.instance().myDataNewDashboard) {
                var removeDashboard:RemoveChild = new RemoveChild();
                removeDashboard.target = createDashboardButton;
                ops.push(removeDashboard);
            }
            if (!ApplicationSkin.instance().myDataNewScorecard) {
                var removeScorecard:RemoveChild = new RemoveChild();
                removeScorecard.target = createScorecardButton;
                ops.push(removeScorecard);
            }
            showState.overrides = ops;
            states = [ showState ];
            this.currentState = "buttonConfig";
            showSize = true;
            showLastData = true;
            var i:int = 4;
            factory.properties = {
                showAnalyze: true,
                showRefresh: true,
                showAdmin: true,
                showDelete: true
            };
            controlsColumn.width = i * 45 + 10;
            columns.push(nameColumn);
            if (ApplicationSkin.instance().myDataOwner) columns.push(ownerNameColumn);
            if (ApplicationSkin.instance().myDataCreationDate) columns.push(creationDateColumn);
            if (ApplicationSkin.instance().myDataSize) columns.push(sizeColumn);
            if (ApplicationSkin.instance().myDataLastTime) columns.push(lastDataColumn);
            columns.push(controlsColumn);
            uploadGrid.columns = columns;
        }

        private function passThrough(event:Event):void {
            dispatchEvent(event);
        }

        private function uploadConfigComplete(event:UploadConfigEvent):void {
            showLoading = true;
            loadingIndex = 1;
            uploadService.getFeedAnalysisTree.send(includeGroups);
            if (event.feedID > 0) {
                var descriptor:DataSourceDescriptor = new DataSourceDescriptor();
                descriptor.id = event.feedID;
                descriptor.name = event.name;
                if (event.startInAdmin) {
                    dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DATA_SOURCE_ADMIN, {feedID: descriptor.id})));
                } else {
                    dispatchEvent(new AnalyzeEvent(new DescriptorAnalyzeSource(event.feedID)));
                }
            }
        }

        private function gotFeedAnalysisTree():void {

            preserveOpenState();
            var sort:Sort = ICollectionView(uploadGrid.dataProvider).sort;
            var myDataTree:MyDataTree = uploadService.getFeedAnalysisTree.lastResult as MyDataTree;

            if (myDataTree != null && myDataTree.objects.length == 0) {
                stackIndex = NO_DATA;
            } else {
                stackIndex = MY_DATA;
            }

            sourceTreeData = myDataTree.objects;
            displayTreeData = new ArrayCollection(sourceTreeData.toArray());
            var hierarchicalData:HierarchicalData = new HierarchicalData();
            hierarchicalData.source = displayTreeData;
            uploadGrid.dataProvider = hierarchicalData;
            displayTreeData.sort = sort;
            displayTreeData.refresh();
            fromLastState();
            loadingIndex = 0;
            showLoading = false;
        }

        private function iconFunction(item:Object, depth:int):Class {
            return simpleIconFunction(item);
        }

        private function simpleIconFunction(item:Object):Class {
            if (item is DataSourceDescriptor) {
                return listIcon;
            } else if (item is InsightDescriptor) {
                return crosstabIcon;
            } else if (item is LookupTableDescriptor) {
                return tablesIcon;
            } else if (item is GoalTreeDescriptor) {
                return kpiTreeIcon;
            } else if (item is DashboardDescriptor) {
                return dashboardIcon;
            } else if (item is ScorecardDescriptor) {
                return scorecardIcon;
            }
            return null;
        }

        private function failure(event:FaultEvent):void {
            Alert.show(event.fault.message);
        }

        private function deleted():void {
            showLoading = true;
            loadingIndex = 1;
            uploadService.getFeedAnalysisTree.send(includeGroups);
        }

        private function createCompositeFeed():void {
            var descriptors:ArrayCollection = new ArrayCollection();
            if (uploadGrid.selectedItems != null) {

                for each (var obj:Object in uploadGrid.selectedItems) {
                    if (obj is DataSourceDescriptor) {
                        descriptors.addItem(obj);
                    }
                }

            }
            var creator:CompositeCreator = new CompositeCreator(this);
            creator.dataSources = descriptors;
            creator.addEventListener(AnalyzeEvent.ANALYZE, onAnalyze, false, 0, true);
            creator.start();
        }

        public function cleanup():void {
        }

        private var _includeGroups:Boolean;


        [Bindable(event="includeGroupsChanged")]
        public function get includeGroups():Boolean {
            return _includeGroups;
        }

        public function set includeGroups(value:Boolean):void {
            if (_includeGroups == value) return;
            _includeGroups = value;
            dispatchEvent(new Event("includeGroupsChanged"));
        }

        private function toConnections():void {
            User.getEventNotifier().dispatchEvent(new NavigationEvent("Connections"));
        }

        private function groupIncludeChanged():void {
            showLoading = true;
            loadingIndex = 1;
            uploadService.getFeedAnalysisTree.send(groupInclude.selected);
        }

        private function customSort(obj1:Object, obj2:Object):int {
            var date1:Date = null;
            var date2:Date = null;
            if (obj1 is DataSourceDescriptor) {
                date1 = DataSourceDescriptor(obj1).lastDataTime;
            }
            if (obj2 is DataSourceDescriptor) {
                date2 = DataSourceDescriptor(obj2).lastDataTime;
            }
            if (date1 == null) {
                date1 = new Date();
                date1.setUTCFullYear(1970);
            }
            if (date2 == null) {
                date2 = new Date();
                date2.setUTCFullYear(1970);
            }
            return ObjectUtil.dateCompare(date1, date2);
        }

        private function customCreationSort(obj1:Object, obj2:Object):int {
            var date1:Date = null;
            var date2:Date = null;
            if (obj1 is EIDescriptor) {
                date1 = EIDescriptor(obj1).creationDate;
            }
            if (obj2 is EIDescriptor) {
                date2 = EIDescriptor(obj2).creationDate;
            }
            if (date1 == null) {
                date1 = new Date();
                date1.setUTCFullYear(1970);
            }
            if (date2 == null) {
                date2 = new Date();
                date2.setUTCFullYear(1970);
            }
            return ObjectUtil.dateCompare(date1, date2);
        }

        [Bindable]
        private var showLoading:Boolean = false;

        [Bindable]
        private var showComposite:Boolean = true;
        [Bindable]
        private var showPackage:Boolean = true;
        [Bindable]
        private var showWidget:Boolean = true;
        [Bindable]
        private var showConnections:Boolean = true;
        [Bindable]
        private var showLookupTable:Boolean = true;

        private function createLookupTable():void {
            var window:NewLookupTableWindow = new NewLookupTableWindow();
            window.addEventListener(AnalyzeEvent.ANALYZE, onAnalyze, false, 0, true);
            if (uploadGrid.selectedItems != null && uploadGrid.selectedItems.length > 0) {
                var obj:Object = uploadGrid.selectedItems[0];
                if (obj is DataSourceDescriptor) {
                    window.selectedDataSource = obj as DataSourceDescriptor;
                }
            }
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function onAnalyze(event:AnalyzeEvent):void {
            dispatchEvent(event);
        }

        private function createGoalTree():void {
            var dataSourceID:int;
            if (uploadGrid.selectedItems != null && uploadGrid.selectedItems.length > 0) {
                var obj:Object = uploadGrid.selectedItems[0];
                if (obj is DataSourceDescriptor) {
                    dataSourceID = DataSourceDescriptor(obj).id;
                }
            }
            dispatchEvent(new AnalyzeEvent(new GoalTreeAdminAnalyzeSource(0, dataSourceID)));
        }

        [Bindable]
        [Embed(source="../../../../assets/branch_add.png")]
        public var addIcon:Class;

        [Bindable]
        private var addGoalTreeAvailable:Boolean = true;

        [Bindable]
        private var addDashboardAvailable:Boolean = true;

        private function createDashboard():void {
            var dataSourceID:int;
            if (uploadGrid.selectedItems != null && uploadGrid.selectedItems.length > 0) {
                var obj:Object = uploadGrid.selectedItems[0];
                if (obj is DataSourceDescriptor) {
                    dataSourceID = DataSourceDescriptor(obj).id;
                }
            }
            dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DASHBOARD_EDITOR, { startDataSourceID: dataSourceID} )));
        }

        private function createScorecard():void {
            var dataSourceID:int;
            if (uploadGrid.selectedItems != null && uploadGrid.selectedItems.length > 0) {
                var obj:Object = uploadGrid.selectedItems[0];
                if (obj is DataSourceDescriptor) {
                    dataSourceID = DataSourceDescriptor(obj).id;
                }
            }
            dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.SCORECARD_EDITOR, { startDataSourceID: dataSourceID} )));
        }

        [Bindable]
        private var loadingIndex:int = 0;

        private function customizeMyData():void {
            var applicationSkinWindow:ApplicationSkinWindow = new ApplicationSkinWindow();
            applicationSkinWindow.skinMode = ApplicationSkinWindow.USER_SKIN;
            applicationSkinWindow.addEventListener(Event.CHANGE, updateUI, false, 0, true);
            applicationSkinWindow.initialIndex = 1;
            PopUpManager.addPopUp(applicationSkinWindow, this, true);
            PopUpUtil.centerPopUp(applicationSkinWindow);
        }

        private function mobile():void {
            var window:MobileWindow = new MobileWindow();
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

		]]>
</mx:Script>
    <mx:RemoteObject destination="goalService" id="goalService">
        <mx:method name="deleteGoalTree" result="deletedTree()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="uploadService" destination="userUpload">
        <mx:method name="getFeedAnalysisTree" result="gotFeedAnalysisTree()"/>
        <mx:method name="deleteUserUpload" result="deleted()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="analysisService" destination="analysisDefinition">
        <mx:method name="deleteAnalysisDefinition" result="deletedAnalysis()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="etlService" destination="feeds">
        <mx:method name="deleteLookupTable" result="deletedLookupTable()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="dashboardService" destination="dashboardService">
        <mx:method name="deleteDashboard" result="deletedLookupTable()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="scorecardService" destination="scorecardService">
        <mx:method name="deleteScorecard" result="deletedScorecard()"/>
    </mx:RemoteObject>

    <mx:ViewStack id="coreContent" height="100%" width="100%" verticalGap="10" selectedIndex="{stackIndex}"
                  creationPolicy="all">
        <mx:Box width="100%" height="100%"/>
        <listing:MyNoData/>
        <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
            <mx:ProgressBar label="Loading your data..." indeterminate="{stackIndex == 2}"/>
        </mx:Box>
        <skin:BackgroundImage width="100%" height="100%" id="centerCanvas" >
            <mx:Canvas>
                <mx:HBox paddingLeft="10" paddingTop="10" paddingRight="10" width="100%">
                    <mx:VBox width="100%">
                        <mx:HBox id="buttonBox">
                            <mx:Button toolTip="Create composite data source..." click="createCompositeFeed()"
                               id="compositeFeedButton" icon="{joinIcon}"
                            label="Join Data Sources" labelPlacement="right" fontSize="12" styleName="grayButton"/>
                            <mx:Button toolTip="Create lookup table..." click="createLookupTable()" id="lookupTableButton"
                                       icon="{tablesAddIcon}"
                                    label="New Lookup Table" labelPlacement="right" fontSize="12" styleName="grayButton"/>
                            <mx:Button toolTip="Add KPI Tree..." click="createGoalTree()" id="createKPITreeButton" icon="{addIcon}"
                                    label="New KPI Tree" labelPlacement="right" fontSize="12" styleName="grayButton"/>
                            <mx:Button toolTip="Add Dashboard..." click="createDashboard()" icon="{dashboardIcon}"
                                       id="createDashboardButton"
                                    label="New Dashboard" labelPlacement="right" fontSize="12" styleName="grayButton"/>
                            <mx:Button toolTip="Add Scorecard..." click="createScorecard()" icon="{scorecardIcon}"
                                       id="createScorecardButton"
                                    label="New Scorecard" labelPlacement="right" fontSize="12" styleName="grayButton"/>
                        </mx:HBox>
                        <mx:TextArea
                            text="The tree below shows your data sources, scorecards, and reports. You can click on the arrow to the left of any data source to show reports associated with that data source. Use the icons on the right side of the table to create new reports, open existing reports, or perform administrative operations."
                            width="770" editable="false" selectable="false" fontSize="14" backgroundAlpha="0"
                                height="60"/>
                    </mx:VBox>
                    <mx:VBox>
                        <mx:CheckBox id="groupInclude" change="groupIncludeChanged()" selected="{includeGroups}"
                                     label="Only Show My Data"/>
                        <mx:Button toolTip="Customize My Data..." click="customizeMyData()" icon="{configIcon}"
                                    label="Customize Page..." labelPlacement="right" fontSize="12" styleName="grayButton"/>
                        <mx:Button toolTip="View on Mobile..." click="mobile()" icon="{mobileIcon}"
                                    label="View on Mobile..." labelPlacement="right" fontSize="12" styleName="grayButton"/>
                    </mx:VBox>
                </mx:HBox>
                <mx:Canvas width="980" height="100%" x="10" y="117">
                    <mx:AdvancedDataGrid width="980" height="100%" id="uploadGrid" allowMultipleSelection="true"
                                         fontSize="12"
                                         itemDoubleClick="gridDoubleClick(event)" headerStyleName="BlueHeader"
                                         iconFunction="simpleIconFunction">
                        <mx:dataProvider>
                            <mx:HierarchicalData source="{displayTreeData}"/>
                        </mx:dataProvider>
                    </mx:AdvancedDataGrid>
                    <mx:ViewStack selectedIndex="{loadingIndex}" width="100%" height="100%">
                        <mx:Box/>
                        <mx:Box width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
                            <mx:ProgressBar indeterminate="true" visible="{showLoading}"/>
                        </mx:Box>
                    </mx:ViewStack>
                </mx:Canvas>
            </mx:Canvas>
        </skin:BackgroundImage>

    </mx:ViewStack>
</mx:Canvas>
