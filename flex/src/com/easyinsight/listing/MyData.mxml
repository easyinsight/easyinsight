<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" creationComplete="initListeners()"
           implements="com.easyinsight.listing.IPerspective" xmlns:listing="com.easyinsight.listing.*"
           xmlns:customupload="com.easyinsight.customupload.*" doubleClickEnabled="true" backgroundColor="#DCE2F8">
    <mx:Script>
		<![CDATA[        
        import com.easyinsight.account.Account;
        import com.easyinsight.customupload.UploadConfigEvent;
        import com.easyinsight.etl.LookupTableDescriptor;
        import com.easyinsight.etl.LookupTableSource;
        import com.easyinsight.etl.NewLookupTableWindow;
        import com.easyinsight.framework.AsyncInfoEvent;
        import com.easyinsight.framework.EIMessageListener;
        import com.easyinsight.framework.NavigationEvent;
        import com.easyinsight.framework.PerspectiveInfo;
        import com.easyinsight.framework.User;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.goals.GoalDataAnalyzeSource;
        import com.easyinsight.goals.GoalTreeAdminAnalyzeSource;
        import com.easyinsight.goals.GoalTreeDescriptor;
        import com.easyinsight.help.HelpWindow;
        import com.easyinsight.help.MyDataHelp;
        import com.easyinsight.outboundnotifications.RefreshEventInfo;
        import com.easyinsight.preferences.UIConfiguration;
        import com.easyinsight.report.PackageAnalyzeSource;
        import com.easyinsight.report.ReportAnalyzeSource;
        import com.easyinsight.reportpackage.PackageEvent;
        import com.easyinsight.reportpackage.ReportPackageDescriptor;
        import com.easyinsight.reportpackage.ReportPackageWindow;
        import com.easyinsight.schedule.ScheduleManagement;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.ProgressAlert;

        import mx.binding.utils.BindingUtils;
        import mx.collections.ArrayCollection;
        import mx.collections.HierarchicalData;
        import mx.collections.ICollectionView;
        import mx.collections.IHierarchicalCollectionView;
        import mx.collections.Sort;
        import mx.controls.Alert;
        import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
        import mx.events.AdvancedDataGridEvent;
        import mx.events.CloseEvent;
        import mx.events.ListEvent;
        import mx.managers.BrowserManager;
        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;
        import mx.utils.ObjectUtil;
        import mx.utils.URLUtil;

        private var initialEntry:Boolean = true;

        [Embed(source="../../../../assets/data_blue_x16.png")]
        public var listIcon:Class;

        [Embed(source="../../../../assets/package.png")]
        public var packageIcon:Class;

        [Embed(source="../../../../assets/branch_add.png")]
        public var kpiTreeIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/components_x_48.png")]
        public var connectionsIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/chart_column.png")]
        public var crosstabIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/data_connection.png")]
        public var dataConnectionIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/data_table.png")]
        public var joinIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/package_add.png")]
        public var packageAddIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/tables_x16.png")]
        public var tablesAddIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/calendar.png")]
        public var calendarIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/tables.png")]
        public var tablesIcon:Class;

        [Bindable]
        private var displayTreeData:ArrayCollection;
        private var sourceTreeData:ArrayCollection;

        private var keyword:String;

        private var _messageListener:EIMessageListener;

        [Bindable]
        private var stackIndex:int;

        private function onAsyncRefresh(event:AsyncInfoEvent):void {
            if (event.info.action == RefreshEventInfo.COMPLETE) {
                showLoading = true;
                uploadService.getFeedAnalysisTree.send(includeGroups, initialEntry);
            }
        }

        public function set messageListener(value:EIMessageListener):void {
            if (value == _messageListener) {
                return;
            }
            _messageListener = value;
            value.addEventListener(AsyncInfoEvent.ASYNC_INFO, onAsyncRefresh);
        }

        private function initListeners():void {
            addEventListener(KeyboardEvent.KEY_UP, keyHit);
            User.getEventNotifier().addEventListener("uiChange", uiChangeEvent);
            addEventListener(DeleteDataSourceEvent.DELETE_DATA_SOURCE, onDelete);
            addEventListener(UploadConfigEvent.UPLOAD_CONFIG_COMPLETE, uploadConfigComplete);
            messageListener = EIMessageListener.instance();
            BindingUtils.bindProperty(this, "includeGroups", groupInclude, "selected");
        }

        private function keyHit(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.DELETE) {
                if (uploadGrid.selectedItems != null) {
                    if (uploadGrid.selectedItems.length > 1) {
                        Alert.show("You can only delete single items at the moment.");
                    } else {
                        deleteItem(uploadGrid.selectedItem);
                    }
                }
            }
        }

        private var openState:Object = new Object();

        private function preserveOpenState():void {
            if (displayTreeData != null) {
                openState = new Object();
                for each (var obj:Object in displayTreeData) {
                    openState[String(obj.id)] = uploadGrid.isItemOpen(obj);
                }
            }
        }

        private function fromLastState():void {
            for each (var obj:Object in displayTreeData) {
                var open:Boolean = openState[String(obj.id)];
                if (open) {
                    uploadGrid.expandItem(obj, true);
                }
            }
        }

        private function onDelete(event:DeleteDataSourceEvent):void {
            deleteItem(event.descriptor);
        }

        private function deleteItem(selectedItem:Object):void {

            if (selectedItem is DataFeedDescriptor) {
                var descriptor:DataFeedDescriptor = uploadGrid.selectedItem as DataFeedDescriptor;
                if (descriptor.role == DataFeedDescriptor.OWNER) {
                    Alert.show("Are you sure you want to delete this data source? You will not be able to undo this operation.", "Alert",
                            Alert.OK | Alert.CANCEL, this, alertFeedListener, null, Alert.CANCEL);
                } else {
                    Alert.show("Are you sure you want to cancel your subscription to this data source?", "Alert",
                            Alert.OK | Alert.CANCEL, this, alertFeedListener, null, Alert.CANCEL);
                }
            } else if (selectedItem is InsightDescriptor) {
                Alert.show("Are you sure you want to delete this report? You will not be able to undo this operation.", "Alert",
                        Alert.OK | Alert.CANCEL, this, alertInsightListener, null, Alert.CANCEL);
            } else if (selectedItem is ReportPackageDescriptor) {
                Alert.show("Are you sure you want to delete this package? You will not be able to undo this operation.", "Alert",
                        Alert.OK | Alert.CANCEL, this, alertPackageListener, null, Alert.CANCEL);
            } else if (selectedItem is LookupTableDescriptor) {
                Alert.show("Are you sure you want to delete this lookup table? You will not be able to undo this operation.", "Alert",
                        Alert.OK | Alert.CANCEL, this, alertLookupListener, null, Alert.CANCEL);
            } else if (selectedItem is GoalTreeDescriptor) {
                Alert.show("Are you sure you want to delete this KPI tree? You will not be able to undo this operation.", "Alert",
                        Alert.OK | Alert.CANCEL, this, alertKPIListener, null, Alert.CANCEL);
            }
        }

        private function alertFeedListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var feedDescriptor:DataFeedDescriptor = uploadGrid.selectedItem as DataFeedDescriptor;
                ProgressAlert.alert(this, "Deleting data source...", null, uploadService.deleteUserUpload);
                uploadService.deleteUserUpload.send(feedDescriptor.id);
            }
        }

        private function alertKPIListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var kpiTreeDescriptor:GoalTreeDescriptor = uploadGrid.selectedItem as GoalTreeDescriptor;
                ProgressAlert.alert(this, "Deleting KPI tree...", null, goalService.deleteGoalTree);
                goalService.deleteGoalTree.send(kpiTreeDescriptor.id);
            }
        }

        private function alertLookupListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var feedDescriptor:LookupTableDescriptor = uploadGrid.selectedItem as LookupTableDescriptor;
                ProgressAlert.alert(this, "Deleting lookup table...", null, etlService.deleteLookupTable);
                etlService.deleteLookupTable.send(feedDescriptor.id);
            }
        }

        private function alertPackageListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var reportDescriptor:ReportPackageDescriptor = uploadGrid.selectedItem as ReportPackageDescriptor;
                ProgressAlert.alert(this, "Deleting package...", null, packageService.deleteReportPackage);
                packageService.deleteReportPackage.send(reportDescriptor.id);
            }
        }

        private function deletedTree():void {
            ProgressAlert.alert(this, "Refreshing...", null, uploadService.getFeedAnalysisTree);
            showLoading = true;
            uploadService.getFeedAnalysisTree.send(includeGroups, initialEntry);
        }

        private function deletedPackage():void {
            ProgressAlert.alert(this, "Refreshing...", null, uploadService.getFeedAnalysisTree);
            showLoading = true;
            uploadService.getFeedAnalysisTree.send(includeGroups, initialEntry);
        }

        private function deletedLookupTable():void {
            ProgressAlert.alert(this, "Refreshing...", null, uploadService.getFeedAnalysisTree);
            showLoading = true;
            uploadService.getFeedAnalysisTree.send(includeGroups, initialEntry);
        }

        private function alertInsightListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var definition:InsightDescriptor = uploadGrid.selectedItem as InsightDescriptor;
                ProgressAlert.alert(this, "Deleting report...", null, analysisService.deleteAnalysisDefinition);
                analysisService.deleteAnalysisDefinition.send(definition.id);
            }
        }

        private function deletedAnalysis():void {
            ProgressAlert.alert(this, "Refreshing...", null, uploadService.getFeedAnalysisTree);
            showLoading = true;
            uploadService.getFeedAnalysisTree.send(includeGroups, initialEntry);
        }

        private function gridDoubleClick(event:ListEvent):void {
            var analyzeSource:PerspectiveInfo = null;
            var selectedObject:Object = event.currentTarget.selectedItem;
            if (selectedObject is DataFeedDescriptor) {
                var descriptor:DataFeedDescriptor = selectedObject as DataFeedDescriptor;
                analyzeSource = new DescriptorAnalyzeSource(descriptor.id);
                dispatchEvent(new AnalyzeEvent(analyzeSource));
            } else if (selectedObject is LookupTableDescriptor) {
                dispatchEvent(new AnalyzeEvent(new LookupTableSource(LookupTableDescriptor(selectedObject).id)));
            } else if (selectedObject is ReportPackageDescriptor) {
                dispatchEvent(new AnalyzeEvent(new PackageAnalyzeSource(ReportPackageDescriptor(selectedObject))));
            } else if (selectedObject is GoalTreeDescriptor) {
                dispatchEvent(new AnalyzeEvent(new GoalDataAnalyzeSource(GoalTreeDescriptor(selectedObject).id)));
            } else {
                analyzeSource = new ReportAnalyzeSource(InsightDescriptor(selectedObject));
                dispatchEvent(new AnalyzeEvent(analyzeSource));
            }
        }

        public static const NO_DATA:int = 1;
        public static const LOADING_DATA:int = 2;
        public static const MY_DATA:int = 3;

        public function gotFocus():void {
            var fragmentObject:Object = new Object();
            fragmentObject.page = "myData";
            BrowserManager.getInstance().setTitle("Easy Insight - My Data");
            var fragmentString:String = URLUtil.objectToString(fragmentObject);
            BrowserManager.getInstance().setFragment(fragmentString);
            if (stackIndex == 0) {
                stackIndex = LOADING_DATA;
            } else {
                showLoading = true;
            }

            uiChangeEvent(null);
            uploadService.getFeedAnalysisTree.send(includeGroups, initialEntry);

        }

        private function uiChangeEvent(event:Event):void {
            if (User.getInstance().uiConfiguration != null) {
                var uiConfig:UIConfiguration = User.getInstance().uiConfiguration;
                showComposite = uiConfig.getConfiguration(UIConfiguration.SHOW_COMBINE_SOURCES).selected;
                showPackage = uiConfig.getConfiguration(UIConfiguration.SHOW_CREATE_PACKAGE).selected;
                showConnections = uiConfig.getConfiguration(UIConfiguration.SHOW_CONNECTIONS).selected;
                showLookupTable = uiConfig.getConfiguration(UIConfiguration.SHOW_LOOKUP_TABLE).selected;
                addGoalTreeAvailable = User.getInstance().getAccountType() >= Account.PRO && uiConfig.getConfiguration(UIConfiguration.SHOW_KPI_TREE_ADD).selected;
            }
        }

        protected override function createChildren():void {
            super.createChildren();
            var columns:Array = [];
            var nameColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
            nameColumn.dataField = "name";
            nameColumn.headerText = "Name";
            var sizeColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
            sizeColumn.dataField = "size";
            sizeColumn.width = 110;
            sizeColumn.headerText = "Size";
            sizeColumn.itemRenderer = new ClassFactory(SizeRenderer);
            var lastDataColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
            lastDataColumn.dataField = "lastDataTime";
            lastDataColumn.width = 140;
            lastDataColumn.headerText = "Last Data Time";
            lastDataColumn.sortCompareFunction = customSort;
            lastDataColumn.itemRenderer = new ClassFactory(MyDataLastDataLabel);
            var controlsColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
            controlsColumn.dataField = "size";
            controlsColumn.headerText = "";
            controlsColumn.width = 240;
            controlsColumn.sortable = false;
            var factory:ClassFactory = new ClassFactory(MyDataIconControls);
            controlsColumn.itemRenderer = factory;
            var showSize:Boolean = true;
            var showLastData:Boolean = true;
            if (User.getInstance().uiConfiguration != null) {
                var uiConfig:UIConfiguration = User.getInstance().uiConfiguration;
                if (!showComposite && !showPackage && !showConnections && !showLookupTable && !addGoalTreeAvailable) {

                }
                showSize = uiConfig.getConfiguration(UIConfiguration.SHOW_SIZE_DATA).selected;
                showLastData = uiConfig.getConfiguration(UIConfiguration.SHOW_TIME_DATA).selected;
                var i:int = 1;
                if (uiConfig.getConfiguration(UIConfiguration.SHOW_REFRESH_DATA).selected) i++;
                if (uiConfig.getConfiguration(UIConfiguration.SHOW_COPY_DATA_SOURCES).selected) i++;
                if (uiConfig.getConfiguration(UIConfiguration.SHOW_ADMIN_DATA_SOURCES).selected) i++;
                if (uiConfig.getConfiguration(UIConfiguration.SHOW_DELETE_DATA).selected) i++;
                factory.properties = {
                    showAnalyze: true,
                    showRefresh: uiConfig.getConfiguration(UIConfiguration.SHOW_REFRESH_DATA).selected,
                    showCopy: uiConfig.getConfiguration(UIConfiguration.SHOW_COPY_DATA_SOURCES).selected,
                    showAdmin: uiConfig.getConfiguration(UIConfiguration.SHOW_ADMIN_DATA_SOURCES).selected,
                    showDelete: uiConfig.getConfiguration(UIConfiguration.SHOW_DELETE_DATA).selected
                };
                controlsColumn.width = i * 46 + 10;
            }
            columns.push(nameColumn);
            if (showSize) columns.push(sizeColumn);
            if (showLastData) columns.push(lastDataColumn);
            columns.push(controlsColumn);
            uploadGrid.columns = columns;
        }

        private function passThrough(event:Event):void {
            dispatchEvent(event);
        }

        private function uploadConfigComplete(event:UploadConfigEvent):void {
            showLoading = true;
            uploadService.getFeedAnalysisTree.send(includeGroups, initialEntry);
            if (event.feedID > 0) {
                var descriptor:DataFeedDescriptor = new DataFeedDescriptor();
                descriptor.id = event.feedID;
                descriptor.name = event.name;
                if (event.startInAdmin) {
                    dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DATA_SOURCE_ADMIN, {feedID: descriptor.id})));
                } else {
                    dispatchEvent(new AnalyzeEvent(new DescriptorAnalyzeSource(event.feedID)));
                }
            }
        }

        private function gotFeedAnalysisTree():void {

            preserveOpenState();
            var sort:Sort = ICollectionView(uploadGrid.dataProvider).sort;
            var myDataTree:MyDataTree = uploadService.getFeedAnalysisTree.lastResult as MyDataTree;

            if (myDataTree != null && myDataTree.objects.length == 0) {
                stackIndex = NO_DATA;
            } else {
                stackIndex = MY_DATA;
            }

            if (initialEntry) {
                initialEntry = false;
                includeGroups = myDataTree.includeGroup;
            }
            sourceTreeData = myDataTree.objects;
            displayTreeData = new ArrayCollection(sourceTreeData.toArray());
            var hierarchicalData:HierarchicalData = new HierarchicalData();
            hierarchicalData.source = displayTreeData;
            uploadGrid.dataProvider = hierarchicalData;
            IHierarchicalCollectionView(uploadGrid.dataProvider).filterFunction = filterFunction;
            displayTreeData.sort = sort;
            displayTreeData.refresh();
            fromLastState();
            showLoading = false;
        }

        private function filterFunction(item:Object):Boolean {
            if (keyword != null && keyword.length > 0) {
                return (item.name.toLowerCase().indexOf(keyword) > -1);
            }
            return true;
        }

        private function iconFunction(item:Object, depth:int):Class {
            if (item is DataFeedDescriptor) {
                return listIcon;
            } else if (item is InsightDescriptor) {
                return crosstabIcon;
            } else if (item is ReportPackageDescriptor) {
                return packageIcon;
            } else if (item is LookupTableDescriptor) {
                return tablesIcon;
            } else if (item is GoalTreeDescriptor) {
                return kpiTreeIcon;
            }
            return null;
        }

        private function simpleIconFunction(item:Object):Class {
            if (item is DataFeedDescriptor) {
                return listIcon;
            } else if (item is InsightDescriptor) {
                return crosstabIcon;
            } else if (item is ReportPackageDescriptor) {
                return packageIcon;
            } else if (item is LookupTableDescriptor) {
                return tablesIcon;
            } else if (item is GoalTreeDescriptor) {
                return kpiTreeIcon;
            }
            return null;
        }

        private function failure(event:FaultEvent):void {
            Alert.show(event.fault.message);
        }

        private function deleted():void {
            showLoading = true;
            uploadService.getFeedAnalysisTree.send(includeGroups, initialEntry);
        }

        private function createCompositeFeed():void {
            var descriptors:ArrayCollection = new ArrayCollection();
            if (uploadGrid.selectedItems != null) {

                for each (var obj:Object in uploadGrid.selectedItems) {
                    if (obj is DataFeedDescriptor) {
                        descriptors.addItem(obj);
                    }
                }

            }
            dispatchEvent(new AnalyzeEvent(new CompositeFeedCreationSource(descriptors)));
        }

        private function help():void {
            HelpWindow.createHelpWindow(MyDataHelp, this);
        }

        private function onItemOpen(event:AdvancedDataGridEvent):void {
            var item:Object = event.item;
            var children:ArrayCollection = item.children;

        }

        public function cleanup():void {
        }

        private var _includeGroups:Boolean;


        [Bindable(event="includeGroupsChanged")]
        public function get includeGroups():Boolean {
            return _includeGroups;
        }

        public function set includeGroups(value:Boolean):void {
            if (_includeGroups == value) return;
            _includeGroups = value;
            dispatchEvent(new Event("includeGroupsChanged"));
        }

        private function toConnections():void {
            User.getEventNotifier().dispatchEvent(new NavigationEvent("Connections"));
        }

        private function groupIncludeChanged():void {
            showLoading = true;
            uploadService.getFeedAnalysisTree.send(groupInclude.selected, initialEntry);
        }

        private function createPackage():void {
            var window:ReportPackageWindow = new ReportPackageWindow();
            window.addEventListener(PackageEvent.PACKAGE_ADDED, onPackageAdded, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function onPackageAdded(event:PackageEvent):void {
            showLoading = true;
            uploadService.getFeedAnalysisTree.send(groupInclude.selected, initialEntry);
        }

        private function customSort(obj1:Object, obj2:Object):int {
            var date1:Date = null;
            var date2:Date = null;
            if (obj1 is DataFeedDescriptor) {
                date1 = DataFeedDescriptor(obj1).lastDataTime;
            }
            if (obj2 is DataFeedDescriptor) {
                date2 = DataFeedDescriptor(obj2).lastDataTime;
            }
            if (date1 == null) {
                date1 = new Date();
                date1.setUTCFullYear(1970);
            }
            if (date2 == null) {
                date2 = new Date();
                date2.setUTCFullYear(1970);
            }
            return ObjectUtil.dateCompare(date1, date2);
        }

        [Bindable]
        private var showLoading:Boolean = false;

        [Bindable]
        private var showComposite:Boolean = true;
        [Bindable]
        private var showPackage:Boolean = true;
        [Bindable]
        private var showWidget:Boolean = true;
        [Bindable]
        private var showConnections:Boolean = true;
        [Bindable]
        private var showLookupTable:Boolean = true;

        private function createLookupTable():void {
            var window:NewLookupTableWindow = new NewLookupTableWindow();
            window.addEventListener(AnalyzeEvent.ANALYZE, onAnalyze, false, 0, true);
            if (uploadGrid.selectedItems != null && uploadGrid.selectedItems.length > 0) {
                var obj:Object = uploadGrid.selectedItems[0];
                if (obj is DataFeedDescriptor) {
                    window.selectedDataSource = obj as DataFeedDescriptor;
                }
            }
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function onAnalyze(event:AnalyzeEvent):void {
            dispatchEvent(event);
        }

        private function toScheduling():void {
            var window:ScheduleManagement = new ScheduleManagement();
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function createGoalTree():void {
            dispatchEvent(new AnalyzeEvent(new GoalTreeAdminAnalyzeSource(0)));
        }

        [Bindable]
        [Embed(source="../../../../assets/branch_add.png")]
        public var addIcon:Class;

        [Bindable]
        private var addGoalTreeAvailable:Boolean = true;

        /*private function createTheme():void {
         var editor:StyleEditor = new StyleEditor();
         PopUpManager.addPopUp(editor, this, true);
         PopUpUtil.centerPopUp(editor);
         }*/

		]]>
</mx:Script>
    <mx:RemoteObject destination="goalService" id="goalService">
        <mx:method name="deleteGoalTree" result="deletedTree()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="uploadService" destination="userUpload">
        <mx:method name="getFeedAnalysisTree" result="gotFeedAnalysisTree()"/>
        <mx:method name="deleteUserUpload" result="deleted()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="analysisService" destination="analysisDefinition">
        <mx:method name="deleteAnalysisDefinition" result="deletedAnalysis()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="packageService" destination="reportPackageService">
        <mx:method name="deleteReportPackage" result="deletedPackage()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="etlService" destination="feeds">
        <mx:method name="deleteLookupTable" result="deletedLookupTable()"/>
    </mx:RemoteObject>

    <mx:ViewStack id="coreContent" height="100%" width="100%" verticalGap="10" selectedIndex="{stackIndex}"
                  creationPolicy="all">
        <mx:Box width="100%" height="100%"/>
        <listing:MyNoData/>
        <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
            <mx:ProgressBar label="Loading your data..." indeterminate="{stackIndex == 2}"/>
        </mx:Box>
        <mx:Box backgroundColor="#818285" width="100%" height="100%" horizontalAlign="center">
            <mx:Canvas width="1000" height="100%" backgroundColor="#FFFFFF">
                <mx:Button toolTip="Create composite data source..." click="createCompositeFeed()"
                           id="compositeFeedButton" icon="{joinIcon}" visible="{showComposite}" x="10" y="10"/>
                <mx:Button toolTip="Create package..." click="createPackage()" id="createPackageButton"
                           icon="{packageAddIcon}" visible="{showPackage}" x="58" y="10"/>
                <mx:Button toolTip="Create lookup table..." click="createLookupTable()" id="lookupTableButton"
                           icon="{tablesAddIcon}" visible="{showLookupTable}" x="106" y="10"/>
                <mx:Button toolTip="Scheduling..." click="toScheduling()" id="schedulingButton" icon="{calendarIcon}"
                           visible="{showLookupTable}" x="154" y="10"/>
                <mx:Button toolTip="Add KPI Tree..." click="createGoalTree()" id="uploadButton" icon="{addIcon}"
                           visible="{addGoalTreeAvailable}" x="202" y="10"/>
                <mx:ProgressBar indeterminate="true" visible="{showLoading}" x="458" y="10"/>
                <mx:Label text="Need to add data?" fontSize="16" x="482" y="34" visible="{showConnections}"/>
                <mx:Button toolTip="Go to connections..." click="toConnections()" icon="{connectionsIcon}"
                               label="Go to Connections" labelPlacement="bottom" x="635" y="10" visible="{showConnections}"/>                
                <mx:CheckBox id="groupInclude" change="groupIncludeChanged()" selected="{includeGroups}" x="786" y="10" label="Include Data from Other Users"/>

            <mx:TextArea text="The tree below shows your data sources and reports. You can click on the arrow to the left of any data source to show reports associated with that data source. Use the icons on the right side of the table to create new reports, open existing reports, or take admin actions."
                    width="980" editable="false" selectable="false" fontSize="14" x="10" y="93"/>
            <mx:AdvancedDataGrid width="980" height="100%" id="uploadGrid" allowMultipleSelection="true"
                                 fontSize="12"
                                 itemDoubleClick="gridDoubleClick(event)" headerStyleName="BlueHeader"
                                 itemOpen="onItemOpen(event)"
                                 iconFunction="simpleIconFunction" x="10" y="147">
                <mx:dataProvider>
                    <mx:HierarchicalData source="{displayTreeData}"/>
                </mx:dataProvider>
                <!--<mx:columns>
                    <mx:AdvancedDataGridColumn headerText="Name" dataField="name"/>
                    <mx:AdvancedDataGridColumn headerText="Size" dataField="size" width="110"
                                               itemRenderer="com.easyinsight.listing.SizeRenderer"/>
                    <mx:AdvancedDataGridColumn id="dataColumn" headerText="Last Data Time" dataField="lastDataTime"
                                               width="140"
                                               itemRenderer="com.easyinsight.listing.MyDataLastDataLabel"
                                               sortCompareFunction="customSort"/>
                    <mx:AdvancedDataGridColumn width="240" headerText="" dataField="name" sortable="false"
                                               itemRenderer="com.easyinsight.listing.MyDataIconControls"/>
                </mx:columns>-->
            </mx:AdvancedDataGrid>
            </mx:Canvas>
        </mx:Box>

    </mx:ViewStack>
</mx:Canvas>
