<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:skin="com.easyinsight.skin.*"
           creationComplete="initListeners()"
           implements="com.easyinsight.listing.IPerspective" xmlns:listing="com.easyinsight.listing.*"
           doubleClickEnabled="true" percentHeight="100" percentWidth="100">
    <mx:states>
        <mx:State name="noData">
            <mx:RemoveChild target="{centerCanvas}"/>
            <mx:AddChild>
                <listing:MyNoData/>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Script>
		<![CDATA[
        import com.easyinsight.customupload.UploadConfigEvent;
        import com.easyinsight.framework.PerspectiveInfo;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.quicksearch.EIDescriptor;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.util.ProgressAlert;

        import mx.binding.utils.BindingUtils;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.managers.BrowserManager;
        import mx.rpc.events.FaultEvent;
        import mx.utils.URLUtil;

        private var _dataSourceDescriptor:DataSourceDescriptor;


        [Bindable(event="dataSourceDescriptorChanged")]
        public function get dataSourceDescriptor():DataSourceDescriptor {
            return _dataSourceDescriptor;
        }

        public function set dataSourceDescriptor(value:DataSourceDescriptor):void {
            if (_dataSourceDescriptor == value) return;
            _dataSourceDescriptor = value;
            dispatchEvent(new Event("dataSourceDescriptorChanged"));
        }

        [Bindable]
        private var stackIndex:int;

        private function initListeners():void {
            addEventListener(DataSourceEvent.NAVIGATE_TO_DATA_SOURCE, navigate);
            addEventListener(UploadConfigEvent.UPLOAD_CONFIG_COMPLETE, uploadConfigComplete);
        }

        private function navigate(event:DataSourceEvent):void {
            dataSourceDescriptor = event.descriptor;
            toDataSourceView();
        }

        private function backToSources(event:Event = null):void {
            showLoading = true;
            loadingIndex = 1;
            uploadService.getFeedAnalysisTree.send(true);
            dsList.removeEventListener(DeleteDataSourceEvent.DELETE_DATA_SOURCE, onDelete);
            dsList.removeEventListener("refresh", onRefresh);
            dsList.removeEventListener("backToDataSources", backToSources);
            dataSourceDescriptor = null;
            toDataGrid();
        }

        private function onDelete(event:DeleteDataSourceEvent):void {
            if (event.descriptor is DataSourceDescriptor) {
                backToSources();
                ProgressAlert.alert(this, "Deleting data source...", null, uploadService.deleteUserUpload);
                uploadService.deleteUserUpload.send(event.descriptor.id);
            }
        }

        private function onRefresh(event:Event):void {
            showLoading = true;
            loadingIndex = 1;
            uploadService.getFeedAnalysisTree.send(true);
        }

        public function gotFocus():void {
            //updateUI();
            buttonBox.updateUI();
            var fragmentObject:Object = new Object();
            fragmentObject.page = "home";
            BrowserManager.getInstance().setTitle("Easy Insight - Home");
            var fragmentString:String = URLUtil.objectToString(fragmentObject);
            BrowserManager.getInstance().setFragment(fragmentString);

            loadingIndex = 1;
            showLoading = true;
            uploadService.getFeedAnalysisTree.send(true);
            buttonBox.refreshActions();
        }

        private function updateUI():void {
            if (dsList != null) {
                dsList.updateUI();
            }
        }

        private function passThrough(event:Event):void {
            dispatchEvent(event);
        }

        private function uploadConfigComplete(event:UploadConfigEvent):void {
            showLoading = true;
            loadingIndex = 1;
            uploadService.getFeedAnalysisTree.send(true);
            if (event.feedID > 0) {
                var descriptor:DataSourceDescriptor = new DataSourceDescriptor();
                descriptor.id = event.feedID;
                descriptor.name = event.name;
                if (event.startInAdmin) {
                    dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DATA_SOURCE_ADMIN, {feedID: descriptor.id})));
                } else {
                    dispatchEvent(new AnalyzeEvent(new DescriptorAnalyzeSource(event.feedID)));
                }
            }
        }


        private var _dataSources:ArrayCollection;


        [Bindable(event="dataSourcesChanged")]
        public function get dataSources():ArrayCollection {
            return _dataSources;
        }

        public function set dataSources(value:ArrayCollection):void {
            if (_dataSources == value) return;
            _dataSources = value;
            dispatchEvent(new Event("dataSourcesChanged"));
        }

        private function gotFeedAnalysisTree():void {
            var myDataTree:MyDataTree = uploadService.getFeedAnalysisTree.lastResult as MyDataTree;

            var dataSourceArray:Array = [];
            for each (var desc:EIDescriptor in myDataTree.objects) {
                if (desc.getType() == EIDescriptor.DATA_SOURCE) {
                    if (dsList != null && dsList.dataSourceDescriptor.id == desc.id) {
                        dsList.data = desc;
                    }
                    dataSourceArray.push(desc);
                }
            }
            this.dataSources = new ArrayCollection(dataSourceArray);

            if (myDataTree.objects.length == 1) {
                dataSourceDescriptor = myDataTree.objects.getItemAt(0) as DataSourceDescriptor;
                toDataSourceView();
            } else if (dataSourceDescriptor != null) {
                toDataSourceView();
            } else if (myDataTree.objects.length > 1) {
                if (dsList == null || !blah.contains(dsList)) {
                    toDataGrid();
                }
            } else {
                toNoData();
            }

            loadingIndex = 0;
            showLoading = false;
        }

        private function toNoData():void {
            currentState = "noData";
        }

        private function toDataGrid():void {
            currentState = "";
            blah.removeAllChildren();
            if (dataGrid == null) {
                dataGrid = new DataSourceGrid();
                BindingUtils.bindProperty(dataGrid, "dataProvider", this, "dataSources");
            }
            blah.addChild(dataGrid);
        }

        private var dataGrid:DataSourceGrid;

        private var dsList:DataSourceSpecificList;

        private function toDataSourceView():void {
            currentState = "";
            blah.removeAllChildren();
            if (dsList != null) {
                dsList.removeEventListener(DeleteDataSourceEvent.DELETE_DATA_SOURCE, onDelete);
                dsList.removeEventListener("refresh", onRefresh);
                dsList.removeEventListener("backToDataSources", backToSources);
            }
            dsList = new DataSourceSpecificList();
            dsList.showBack = dataSources.length > 1;
            dsList.data = dataSourceDescriptor;
            dsList.addEventListener(DeleteDataSourceEvent.DELETE_DATA_SOURCE, onDelete);
            dsList.addEventListener("refresh", onRefresh);
            dsList.addEventListener("backToDataSources", backToSources);
            blah.addChild(dsList);
        }

        private function failure(event:FaultEvent):void {
            Alert.show(event.fault.message);
        }

        private function deleted():void {
            showLoading = true;
            loadingIndex = 1;
            uploadService.getFeedAnalysisTree.send(true);
        }

        public function cleanup():void {
        }

        [Bindable]
        private var showLoading:Boolean = false;


        private function toAnalyze(event:AnalyzeEvent):void {
            dispatchEvent(event);
        }

        [Bindable]
        private var loadingIndex:int = 0;
        ]]>
</mx:Script>
    <mx:RemoteObject id="uploadService" destination="userUpload">
        <mx:method name="getFeedAnalysisTree" result="gotFeedAnalysisTree()"/>
        <mx:method name="deleteUserUpload" result="deleted()"/>
    </mx:RemoteObject>
    <skin:BackgroundImage width="100%" height="100%" id="centerCanvas">
        <mx:HBox horizontalGap="0">
            <listing:MyDataButton uiChange="updateUI()" id="buttonBox" />
            <mx:Canvas width="100%" height="100%" horizontalScrollPolicy="off">
                <mx:VBox paddingLeft="0" paddingRight="10" paddingTop="10" paddingBottom="10" width="100%"
                        height="100%" id="blah" verticalScrollPolicy="auto" horizontalScrollPolicy="off">

                    <!--<mx:ViewStack creationPolicy="all" width="100%" height="100%">

                        <mx:Canvas width="100%" height="100%">
                            <mx:AdvancedDataGrid width="100%" height="100%" id="uploadGrid" allowMultipleSelection="true"
                                                 fontSize="12"
                                                 itemDoubleClick="gridDoubleClick(event)" headerStyleName="BlueHeader"
                                                 iconFunction="simpleIconFunction">
                                <mx:dataProvider>
                                    <mx:HierarchicalData source="{displayTreeData}"/>
                                </mx:dataProvider>
                            </mx:AdvancedDataGrid>
                        </mx:Canvas>
                    </mx:ViewStack>-->
                    <!--<mx:AdvancedDataGrid width="100%" height="100%" id="uploadGrid" allowMultipleSelection="true"
                                         fontSize="12"
                                         itemDoubleClick="gridDoubleClick(event)" headerStyleName="BlueHeader"
                                         iconFunction="simpleIconFunction">
                        <mx:dataProvider>
                            <mx:HierarchicalData source="{displayTreeData}"/>
                        </mx:dataProvider>
                    </mx:AdvancedDataGrid>-->
                </mx:VBox>

                <mx:ViewStack selectedIndex="{loadingIndex}" width="100%" height="100%">
                    <mx:Box/>
                    <mx:Box width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
                        <mx:ProgressBar indeterminate="true" visible="{showLoading}"/>
                    </mx:Box>
                </mx:ViewStack>
            </mx:Canvas>
        </mx:HBox>
    </skin:BackgroundImage>
</mx:Canvas>
