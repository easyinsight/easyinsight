<?xml version="1.0" encoding="utf-8"?>
<mx:List xmlns:mx="http://www.adobe.com/2006/mxml" initialize="createContents()" iconField="icon" useRollOver="true"
	itemRenderer="com.easyinsight.listing.ListOptionRenderer" labelField="displayName">
	<mx:Metadata>
		[Event(name="listingChange", type="com.easyinsight.listing.ListingChangeEvent")]
	</mx:Metadata> 
	<mx:Script>
		<![CDATA[
			import com.easyinsight.goals.MyGoals;
			import com.easyinsight.solutions.SolutionsSummary;
			import com.easyinsight.groups.GroupsSummary;
			import mx.collections.ICollectionView;
			import com.easyinsight.account.AccountsListingOption;
			import com.easyinsight.account.AccountBasePage;
                    import com.easyinsight.genredata.GenreDataProvider;
                    import mx.collections.ArrayCollection;

                    [Bindable]
                    [Embed(source="../../../../assets/shopping_bag_x64.png")]
                    public var catalogIcon:Class;

                    [Bindable]
                    [Embed(source="../../../../assets/books_blue.png")]
                    public var subscriptionsIcon:Class;

                    [Bindable]
                    [Embed(source="../../../../assets/chart_area_x64.png")]
                    public var analysesIcon:Class;

                    [Bindable]
                    [Embed(source="../../../../assets/data_blue.png")]
                    public var uploadsIcon:Class;

                    [Bindable]
                    [Embed(source="../../../../assets/house.png")]
                    public var houseIcon:Class;
                    
                    [Bindable]
                    [Embed(source="../../../../assets/document.png")]
                    public var blogIcon:Class;

                    [Bindable]
                    [Embed(source="../../../../assets/branch.png")]
                    public var treeIcon:Class;

                    [Bindable]
                    [Embed(source="../../../../assets/currency_dollar.png")]
                    public var financialIcon:Class;

                    [Bindable]
                    [Embed(source="../../../../assets/basketball.png")]
                    public var sportsIcon:Class;

                    [Bindable]
                    [Embed(source="../../../../assets/crystal_ball_x64.png")]
                    public var crystalBall:Class;
                    
                    [Bindable]
                    [Embed(source="../../../../assets/users2.png")]
                    public var collabIcon:Class;
                    
                    [Bindable]
                    [Embed(source="../../../../assets/tables.png")]
                    public var googleIcon:Class;
                    
                    [Bindable]
                    [Embed(source="../../../../assets/die_blue.png")]
                    public var diceIcon:Class;
                    
                    [Bindable]
                    [Embed(source="../../../../assets/user_x64.png")]
                    public var accountIcon:Class;
                    
                    [Bindable]
                    [Embed(source="../../../../assets/users2_x64.png")]
                    public var groupsIcon:Class;
                    
                    [Bindable]
                    [Embed(source="../../../../assets/components.png")]
                    public var solutionsIcon:Class;
                    
                    [Bindable]
                    private var options:ArrayCollection;

                    private function createContents():void {
                    	createData();                        
                        addEventListener(MouseEvent.CLICK, optionClicked);
                    }
                    
                    private function createData():void {
                    	options = new ArrayCollection();
                        dataProvider = options;                        
                        labelField = "displayName"; 	
                    }
                    
                    public function explicitChange(targetPage:String):void {
                    	var listingOption:ListingOption = findNode(targetPage, options);
                    	this.selectedItem = listingOption;
                    	//this.expandItem(listingOption, true);
                    	dispatchEvent(new ListingChangeEvent(listingOption.perspective));
                    }
                    
                    public function updatePerspective(perspective:IPerspective):void {
                    	var listingOption:ListingOption = findNodeWithPerspective(perspective, options);
                    	if (listingOption == null) {
                    		this.selectedItem = null;
                    	}
                    }                                        
                    
                    private function findNodeWithPerspective(perspective:IPerspective, items:ICollectionView):ListingOption {
                    	for each (var listingOption:ListingOption in items) {
                    		if (listingOption.perspective == perspective) {
                    			return listingOption;
                    		}
                    		if (listingOption.children != null) {
                    			var childOption:ListingOption = findNodeWithPerspective(perspective, listingOption.children);
                    			if (childOption != null) {
                    				return childOption;
                    			}
                    		}
                    	}
                    	return null;
                    }
                    
                    private function findNode(targetPage:String, items:ICollectionView):ListingOption {
                    	for each (var listingOption:ListingOption in items) {
                    		if (listingOption.displayName == targetPage) {
                    			return listingOption;
                    		}
                    		if (listingOption.children != null) {
                    			var childOption:ListingOption = findNode(targetPage, listingOption.children);
                    			if (childOption != null) {
                    				return childOption;
                    			}
                    		}
                    	}
                    	return null;
                    }

                    private function optionClicked(event:MouseEvent):void {
                        var option:ListingOption = this.selectedItem as ListingOption;
                        // send an event out with a panel
                        dispatchEvent(new ListingChangeEvent(option.perspective));
                    }
                ]]>
	</mx:Script>
</mx:List>
