<?xml version="1.0"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:datasources="com.easyinsight.datasources.*"
         xmlns:listing="com.easyinsight.listing.*" xmlns:util="com.easyinsight.util.*" width="100%"
         height="100%" xmlns:containers="flexlib.containers.*"
         creationComplete="addEventListener(ChangeFolderEvent.CHANGE_FOLDER, onChangeFolder);
         addEventListener(AnalyzeEvent.ANALYZE, onAnalyze2); onCreation()"
         doubleClickEnabled="true" implements="com.easyinsight.listing.IDataSourceSpecificList">
    <mx:Metadata>
        [Event(name="backToDataSources", type="flash.events.Event")]
        [Event(name="refresh", type="flash.events.Event")]
        [Event(name="deleteDataSource", type="com.easyinsight.listing.DeleteDataSourceEvent")]
    </mx:Metadata>
    <mx:states>
        <mx:State name="noTags">
            <mx:RemoveChild target="{tagUpperRule}"/>
            <mx:RemoveChild target="{tagLowerRule}"/>
        </mx:State>
    </mx:states>
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.FilterSetDescriptor;
        import com.easyinsight.customupload.UploadConfigEvent;
        import com.easyinsight.dashboard.DashboardDescriptor;
        import com.easyinsight.datasources.DataSourceBehavior;
        import com.easyinsight.etl.LookupTableDescriptor;
        import com.easyinsight.etl.LookupTableSource;
        import com.easyinsight.etl.NewLookupTableWindow;
        import com.easyinsight.framework.DataFolder;
        import com.easyinsight.framework.PerspectiveInfo;
        import com.easyinsight.framework.User;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.quicksearch.EIDescriptor;
        import com.easyinsight.quicksearch.Roles;
        import com.easyinsight.report.ReportAnalyzeSource;
        import com.easyinsight.scorecard.ScorecardDescriptor;
        import com.easyinsight.skin.ApplicationSkin;
        import com.easyinsight.skin.HomeConfigWindow;
        import com.easyinsight.solutions.CustomFolder;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.tour.Note;
        import com.easyinsight.tour.NoteEvent;
        import com.easyinsight.util.Callout;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.ProgressAlert;
        import com.easyinsight.util.RolloverLabelEvent;

        import mx.collections.ArrayCollection;

        import mx.collections.HierarchicalData;
        import mx.collections.ICollectionView;
        import mx.collections.Sort;
        import mx.containers.Box;

        import mx.controls.Alert;
        import mx.controls.Text;
        import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
        import mx.core.UIComponent;
        import mx.events.CloseEvent;
        import mx.events.FlexEvent;
        import mx.events.MenuEvent;
        import mx.formatters.DateFormatter;
        import mx.managers.PopUpManager;
        import mx.states.RemoveChild;
        import mx.states.State;
        import mx.utils.ObjectUtil;

        private var _dataSourceDescriptor:DataSourceDescriptor;

        [Bindable]
        private var dataSourceName:String;

        private function onCreation():void {
            addEventListener(TagEvent.TAG_SELECTED, onTag);
            addEventListener(TagEvent.TAG_UNSELECTED, onUnTag);
            addEventListener(RolloverLabelEvent.ROLLOVER_LABEL, onRolloverLabelEvent);
            addEventListener("startedDragging", onStartedDragging);
            switch (User.getInstance().dateFormat) {
                case 0:
                    formatter.formatString = "MM/DD/YYYY HH:NN";
                    break;
                case 1:
                    formatter.formatString = "YYYY-MM-DD HH:NN";
                    break;
                case 2:
                    formatter.formatString = "DD-MM-YYYY HH:NN";
                    break;
                case 3:
                    formatter.formatString = "DD/MM/YYYY HH:NN";
                    break;
                case 4:
                    formatter.formatString = "DD.MM.YYYY HH:NN";
                    break;
            }
            if (showTutorial) {
                showTutorial = false;
                xyz();
            }
        }

        public var showTutorial:Boolean;

        private function onStartedDragging(event:Event):void {
            uploadGrid.collapseAll();
        }

        private var _showBack:Boolean = false;

        [Bindable(event="showBackChanged")]
        public function get showBack():Boolean {
            return _showBack;
        }

        public function set showBack(value:Boolean):void {
            if (_showBack == value) return;
            _showBack = value;
            dispatchEvent(new Event("showBackChanged"));
        }

        protected static function adapterFlowBoxUpdateCompleteHandler(event:FlexEvent):void {
            // resize the FlowBox manually, as the internal calculation doesn't work

            var fb:FlowBox = event.target as FlowBox;

            if (fb != null) {
                if (fb.numChildren > 0) {
                    // default the needed height to the top view metric

                    var maxBottom:int = fb.viewMetrics.top;

                    // Iterate over the children of the FlowBox to find the bottom-most bottom, so
                    // we can determine how big / small we can make the FlowBox.
                    // If it's a UIComponent, include it if the includeInLayout property is true.
                    // If it's not a UIComponent, include it if the visible property is true.

                    for (var idx:int = 0; idx < fb.numChildren; idx++) {
                        var displayObject:DisplayObject = fb.getChildAt(idx);

                        if ((displayObject is UIComponent && (displayObject as
                                UIComponent).includeInLayout) ||
                                (!(displayObject is UIComponent) && displayObject.visible)) {
                            var thisBottom:int = fb.getChildAt(idx).y + fb.getChildAt(idx).height;

                            if (thisBottom > maxBottom)
                                maxBottom = thisBottom;
                        }
                    }

                    fb.height = maxBottom + fb.viewMetrics.bottom +
                            fb.getStyle("paddingBottom") + 1;
                }
                else {
                    fb.height = fb.viewMetrics.top + fb.viewMetrics.bottom;
                }
            }
        }

        [Bindable]
        private var dataSourceID:int;

        [Bindable]
        private var hierarchicalData:HierarchicalData;


        [Bindable]
        private var admin:Boolean;

        [Bindable]
        private var realDataSource:Boolean;

        private function onChangeFolder(event:ChangeFolderEvent):void {
            var matchedFolder:DataFolder = null;
            for each (var folder:DataFolder in displayTreeData) {
                var found:Boolean = false;
                for each (var child:EIDescriptor in folder.children) {
                    if (child == event.movingItem) {
                        matchedFolder = folder;
                        found = true;
                        break;
                    }
                }
                if (found) {
                    break;
                }
            }
            matchedFolder.children.removeItemAt(matchedFolder.children.getItemIndex(event.movingItem));
            event.targetFolder.children.addItem(event.movingItem);
            uploadGrid.expandItem(event.targetFolder, true);
            uploadService.move.send(event.movingItem, event.targetFolder.id);
        }

        private function moved():void {

        }

        [Bindable]
        private var showRefresh:Boolean;

        override public function set data(val:Object):void {
            if (val != null) {
                var dataSourceDescriptor:DataSourceDescriptor = val as DataSourceDescriptor;
                if (_dataSourceDescriptor == null || dataSourceDescriptor.id != _dataSourceDescriptor.id) {
                    openState = new Object();
                    dataSourceChanged = true;
                }
                if (dataSourceDescriptor != this.dataSourceDescriptor) {
                    admin = false;
                    realDataSource = false;
                    dataSourceInvalidate = true;
                    this.dataSourceDescriptor = dataSourceDescriptor;
                    showRefresh = DataSourceBehavior.pullDataSource(dataSourceDescriptor.dataSourceBehavior);
                    dataSourceName = _dataSourceDescriptor.name;
                    dataSourceID = _dataSourceDescriptor.id;
                    invalidateProperties();
                }
            }
        }

        private var dataSourceInvalidate:Boolean = false;

        private var dataSourceChanged:Boolean = false;

        [Bindable(event="dataSourceDescriptorChanged")]
        public function get dataSourceDescriptor():DataSourceDescriptor {
            return _dataSourceDescriptor;
        }

        public function set dataSourceDescriptor(value:DataSourceDescriptor):void {
            if (_dataSourceDescriptor == value) return;
            _dataSourceDescriptor = value;
            dispatchEvent(new Event("dataSourceDescriptorChanged"));
        }

        override protected function commitProperties():void {
            super.commitProperties();

            if (dataSourceInvalidate) {
                if (_dataSourceDescriptor.role <= Roles.EDITOR) {
                    admin = true;
                }
                if (_dataSourceDescriptor.role <= Roles.VIEWER) {
                    realDataSource = true;
                }
                var ops:Array = [];
                if (!showBack) {
                    var removeBack:RemoveChild = new RemoveChild();
                    removeBack.target = backToListButton;
                    ops.push(removeBack);
                    var removeBackRule:RemoveChild = new RemoveChild();
                    removeBackRule.target = backToListRule;
                    ops.push(removeBackRule);
                }
                if (!admin) {
                    var removeConfig:RemoveChild = new RemoveChild();
                    removeConfig.target = configureButton;
                    ops.push(removeConfig);
                    var removeConfigRule:RemoveChild = new RemoveChild();
                    removeConfigRule.target = configureRule;
                    ops.push(removeConfigRule);
                    var removeDelete:RemoveChild = new RemoveChild();
                    removeDelete.target = deleteButton;
                    ops.push(removeDelete);
                }
                if (!realDataSource || !showRefresh) {
                    var removeRefresh:RemoveChild = new RemoveChild();
                    removeRefresh.target = refreshButton;
                    ops.push(removeRefresh);
                    var removeRefreshRule:RemoveChild = new RemoveChild();
                    removeRefreshRule.target = refreshRule;
                    ops.push(removeRefreshRule);
                }
                var state:State = new State();
                state.overrides = ops;
                state.name = "override";
                this.states = [ state ];
                this.currentState = "override";
                var currentlyShowing:Boolean = showScorecard;
                showScorecard = realDataSource && ApplicationSkin.instance().myDataNewScorecard;
                if (!currentlyShowing && showScorecard) {
                    createOptions.addItemAt({label: "New Scorecard", data: "newScorecard"}, 2);
                }
                if (selectedTags == null || selectedTags.length == 0) {
                    var dataSourceChildren:ArrayCollection = _dataSourceDescriptor.children;
                    mainViewsFolder = new DataFolder("Main Views", 1);
                    var mainViewsChildren:ArrayCollection = new ArrayCollection();
                    mainViewsFolder.children = mainViewsChildren;
                    var otherViewsFolder:DataFolder = new DataFolder("Additional Views", 2);
                    var otherViewsChildren:ArrayCollection = new ArrayCollection();
                    otherViewsFolder.children = otherViewsChildren;
                    var lookupTablesFolder:DataFolder = new DataFolder("Lookup Tables", 3);
                    var lookupTablesChildren:ArrayCollection = new ArrayCollection();
                    lookupTablesFolder.children = lookupTablesChildren;
                    var filterSetFolder:DataFolder = new DataFolder("Filter Sets", 4);
                    var filterSetFolderChildren:ArrayCollection = new ArrayCollection();
                    filterSetFolder.children = filterSetFolderChildren;
                    var folderMap:Object = new Object();
                    for each (var customFolder:CustomFolder in _dataSourceDescriptor.customFolders) {
                        var customViewFolder:DataFolder = new DataFolder(customFolder.name, customFolder.id);
                        customViewFolder.children = new ArrayCollection();
                        folderMap[customFolder.id] = customViewFolder;
                    }
                    for each (var desc:EIDescriptor in dataSourceChildren) {
                        if (desc.getType() == EIDescriptor.LOOKUP_TABLE) {
                            lookupTablesChildren.addItem(desc);
                        } else if (desc.getType() == EIDescriptor.FILTER_SET) {
                            filterSetFolderChildren.addItem(desc);
                        } else {
                            var targetFolder:DataFolder = folderMap[desc.folder] as DataFolder;
                            if (targetFolder == null) {
                                if (desc.folder == EIDescriptor.OTHER_VIEWS_FOLDER) {
                                    otherViewsChildren.addItem(desc);
                                } else {
                                    mainViewsChildren.addItem(desc);
                                }
                            } else {
                                targetFolder.children.addItem(desc);
                            }
                        }
                    }
                    var folders:ArrayCollection = new ArrayCollection();
                    folders.addItem(mainViewsFolder);
                    for each (var cFolder:DataFolder in folderMap) {
                        folders.addItem(cFolder);
                    }
                    folders.addItem(otherViewsFolder);
                    if (lookupTablesChildren.length > 0) {
                        folders.addItem(lookupTablesFolder);
                    }
                    if (filterSetFolderChildren.length > 0) {
                        folders.addItem(filterSetFolder);
                    }
                    nameColumnFactory = new ClassFactory(ReportRolloverLabel);
                    nameColumnFactory.properties = {folders: folders };
                    displayTreeData = folders;

                    this.hierarchicalData = new HierarchicalData();
                    hierarchicalData.source = folders;

                    dataSourceInvalidate = false;
                    dataChanged = true;
                }


                setupConnLabel();
                updateUI();
            }
        }

        private var existingData:ArrayCollection;

        private var nameRenderer:ClassFactory = new ClassFactory(NameRenderer);

        private var mainViewsFolder:DataFolder;

        private var dataChanged:Boolean = false;

        override public function get data():Object {
            return _dataSourceDescriptor;
        }

        private var openState:Object = new Object();

        private function preserveOpenState():void {
            if (existingData != null && (selectedTags == null || selectedTags.length == 0)) {
                openState = new Object();
                for each (var obj:Object in existingData) {
                    openState[String(obj.id)] = uploadGrid.isItemOpen(obj);
                }
                scrollPosition = uploadGrid.verticalScrollPosition;
            }
        }

        private function createReport():void {
            dispatchEvent(new AnalyzeEvent(new DescriptorAnalyzeSource(dataSourceID)));
        }

        private function createDashboard():void {
            dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DASHBOARD_EDITOR, { startDataSourceID: dataSourceID})));
        }

        public function updateUI(event:Event = null):void {
            columnsInvalid = true;
            if (!showScorecard && ApplicationSkin.instance().myDataNewScorecard) {
                createOptions.addItemAt({label: "New Scorecard", data: "newScorecard"}, 2);
            }
            if (showScorecard && !ApplicationSkin.instance().myDataNewScorecard) {
                createOptions.removeItemAt(2);
            }
            showScorecard = realDataSource && ApplicationSkin.instance().myDataNewScorecard;
            invalidateDisplayList();
        }

        private var columnsInvalid:Boolean = false;

        private var formatter:DateFormatter = new DateFormatter();

        private function createDateLabelFunction(object:Object, column:AdvancedDataGridColumn):String {
            if (object is EIDescriptor) {
                return formatter.format(EIDescriptor(object).creationDate);
            } else {
                return "";
            }
        }

        private function modifiedDateLabelFunction(object:Object, column:AdvancedDataGridColumn):String {
            if (object is EIDescriptor) {
                if (EIDescriptor(object).modifiedDate != null) {
                    return formatter.format(EIDescriptor(object).modifiedDate);
                } else {
                    return "";
                }
            } else {
                return "";
            }
        }

        private static function renderReportType(object:Object, column:AdvancedDataGridColumn):String {
            var label:String = "";
            if (object is InsightDescriptor) {
                switch (InsightDescriptor(object).reportType) {
                    case AnalysisDefinition.LIST:
                        label = "List";
                        break;
                    case AnalysisDefinition.CROSSTAB:
                        label = "Crosstab";
                        break;
                    case AnalysisDefinition.TREE:
                        label = "Tree";
                        break;
                    case AnalysisDefinition.SUMMARY:
                        label = "Summary";
                        break;
                    case AnalysisDefinition.COLUMN:
                        label = "Column Chart";
                        break;
                    case AnalysisDefinition.BAR:
                        label = "Bar";
                        break;
                    case AnalysisDefinition.PIE:
                        label = "Pie";
                        break;
                    case AnalysisDefinition.LINE:
                        label = "Line";
                        break;
                    case AnalysisDefinition.AREA:
                        label = "Area";
                        break;
                    case AnalysisDefinition.BUBBLE:
                        label = "Bubble";
                        break;
                    case AnalysisDefinition.PLOT:
                        label = "Plot";
                        break;
                    case AnalysisDefinition.MAP:
                        label = "Map";
                        break;
                    case AnalysisDefinition.FORM:
                        label = "Form";
                        break;
                    case AnalysisDefinition.YTD:
                        label = "YTD";
                        break;
                    case AnalysisDefinition.COMPARE_YEARS:
                        label = "Compare Years";
                        break;
                    case AnalysisDefinition.VERTICAL_LIST:
                        label = "Vertical List";
                        break;
                    case AnalysisDefinition.DIAGRAM:
                        label = "Diagram";
                        break;
                    case AnalysisDefinition.STACKED_COLUMN:
                        label = "Stacked Column";
                        break;
                    case AnalysisDefinition.STACKED_BAR:
                        label = "Stacked Bar";
                        break;
                    case AnalysisDefinition.TREND:
                        label = "Trend";
                        break;
                    case AnalysisDefinition.TREND_GRID:
                        label = "Trend Grid";
                        break;
                    case AnalysisDefinition.GANTT:
                        label = "Gantt";
                        break;
                    case AnalysisDefinition.TREEMAP:
                        label = "Tree Map";
                        break;
                }
            }
            return label;
        }

        private static function renderType(object:Object, column:AdvancedDataGridColumn):String {
            if (object is InsightDescriptor) {
                return "Report";
            } else if (object is DashboardDescriptor) {
                return "Dashboard";
            } else if (object is LookupTableDescriptor) {
                return "Lookup Table";
            } else if (object is FilterSetDescriptor) {
                return "Filter Set";
            }
            return "";
        }

        private var nameColumnFactory:ClassFactory;

        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
            if (dataChanged) {
                if (!dataSourceChanged) {
                    preserveOpenState();
                    var sort:Sort = ICollectionView(uploadGrid.dataProvider).sort;
                }
            }
            if (columnsInvalid || uploadGrid.columns == null || uploadGrid.columns.length == 0) {
                if (admin) {
                    uploadGrid.groupItemRenderer = nameRenderer;
                }
                var columns:Array = [];
                var selectColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                selectColumn.headerText = "";
                selectColumn.itemRenderer = new ClassFactory(EIDescriptorCheckbox);
                selectColumn.width = 40;
                selectColumn.sortable = false;
                var nameColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                nameColumn.dataField = "name";
                nameColumn.headerText = "Name";
                nameColumn.sortCompareFunction = nameSort;
                nameColumn.itemRenderer = nameColumnFactory;
                var typeColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                //typeColumn.labelFunction = renderType;
                typeColumn.dataField = "typeString";
                typeColumn.width = 120;
                typeColumn.headerText = "Type";
                var creationDateColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                creationDateColumn.dataField = "creationDate";
                creationDateColumn.width = 140;
                creationDateColumn.headerText = "Creation Date";
                creationDateColumn.sortCompareFunction = customCreationSort;
                creationDateColumn.labelFunction = createDateLabelFunction;
                //creationDateColumn.itemRenderer = new ClassFactory(MyDataCreationDateDataLabel);
                var accountVisibleColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                accountVisibleColumn.dataField = "accountVisibleDisplay";
                accountVisibleColumn.width = 130;
                accountVisibleColumn.headerText = "Account Visible";
                //accountVisibleColumn.itemRenderer = new ClassFactory(SizeRenderer);
                var ownerNameColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                ownerNameColumn.dataField = "author";
                ownerNameColumn.width = 140;
                ownerNameColumn.headerText = "Owner Name";
                var controlsColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                //controlsColumn.dataField = "";
                controlsColumn.headerText = "";
                controlsColumn.width = 90;
                controlsColumn.sortable = false;
                var factory:ClassFactory = new ClassFactory(MyDataIconControls);
                controlsColumn.itemRenderer = factory;
                //controlsColumn.width = i * 45 + 10;
                var remWidth:int = controlsColumn.width;
                columns.push(selectColumn);
                columns.push(nameColumn);
                columns.push(typeColumn);
                if (ApplicationSkin.instance().myDataOwner) {
                    columns.push(ownerNameColumn);
                    remWidth += ownerNameColumn.width;
                }
                if (ApplicationSkin.instance().myDataCreationDate) {
                    columns.push(creationDateColumn);
                    remWidth += creationDateColumn.width;
                }
                if (ApplicationSkin.instance().reportModified) {
                    var updateDateColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                    updateDateColumn.dataField = "modifiedDate";
                    updateDateColumn.width = 140;
                    updateDateColumn.headerText = "Modified Date";
                    updateDateColumn.sortCompareFunction = customCreationSort;
                    updateDateColumn.labelFunction = modifiedDateLabelFunction;
                    columns.push(updateDateColumn);
                    remWidth += updateDateColumn.width;
                }
                if (ApplicationSkin.instance().reportType) {
                    var reportTypeColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                    reportTypeColumn.width = 140;
                    reportTypeColumn.sortable = false;
                    reportTypeColumn.headerText = "Report Type";
                    reportTypeColumn.labelFunction = renderReportType;
                    columns.push(reportTypeColumn);
                    remWidth += reportTypeColumn.width;
                }
                if (ApplicationSkin.instance().myDataAccountVisible) {
                    columns.push(accountVisibleColumn);
                    remWidth += accountVisibleColumn.width;
                }
                if (ApplicationSkin.instance().reportTags) {
                    var tagColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                    tagColumn.labelFunction = renderTags;
                    tagColumn.headerText = "Tags";
                    tagColumn.width = 140;
                    tagColumn.sortable = false;

                    columns.push(tagColumn);
                }
                if (ApplicationSkin.instance().reportAPIKey) {
                    var apiKeyColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                    apiKeyColumn.dataField = "urlKey";
                    apiKeyColumn.headerText = "API Key";
                    apiKeyColumn.width = 140;
                    columns.push(apiKeyColumn);
                    remWidth += apiKeyColumn.width;
                }
                nameColumn.width = unscaledWidth - remWidth - 40;
                columns.push(controlsColumn);
                uploadGrid.columns = columns;
                columnsInvalid = false;
                populateTags(tags);
            }

            if (dataChanged || tagChanged) {
                uploadGrid.clearRenderers();
                displayTreeData.filterFunction = filterOnTag;
                if (selectedTags == null || selectedTags.length == 0) {
                    uploadGrid.dataProvider = hierarchicalData;
                    existingData = displayTreeData;
                    if (!dataSourceChanged) {
                        displayTreeData.sort = sort;
                    }
                    displayTreeData.refresh();
                    if (!dataSourceChanged) {
                        fromLastState();
                    } else {
                        uploadGrid.validateNow();
                        uploadGrid.expandItem(mainViewsFolder, true);
                        uploadGrid.validateNow();
                    }
                } else {
                    uploadGrid.dataProvider = _dataSourceDescriptor.children;
                    uploadGrid.dataProvider.filterFunction = filterOnTag;
                    uploadGrid.dataProvider.refresh();
                }
            }
            if (dataChanged) {
                dataChanged = false;
            }
            if (tagChanged) {
                tagChanged = false;
            }
            if (dataSourceChanged) {
                dataSourceChanged = false;
            }
        }

        private function renderTags(value:Object, column:AdvancedDataGridColumn):String {
            var ds:EIDescriptor = value as EIDescriptor;
            if (ds is InsightDescriptor || ds is DashboardDescriptor) {
                var tags:ArrayCollection = ds["tags"];
                if (tags == null || tags.length == 0) {
                    return "";
                } else {
                    var str:String = "";
                    for (var i:int = 0; i < tags.length; i++) {
                        var tag:Tag = tags.getItemAt(i) as Tag;
                        str += tag.name;
                        if (i < (tags.length - 1)) {
                            str += ", ";
                        }
                    }
                    return str;
                }
            }
            return "";
        }

        private function filterOnTag(obj:Object):Boolean {
            if (selectedTags != null && selectedTags.length > 0) {
                var eiDescriptor:EIDescriptor = obj as EIDescriptor;
                if (eiDescriptor is InsightDescriptor) {
                    var insightDescriptor:InsightDescriptor = eiDescriptor as InsightDescriptor;
                    if (insightDescriptor.tags != null) {
                        for each (var tag:Tag in insightDescriptor.tags) {
                            for each (var dsTag:Tag in selectedTags) {
                                if (dsTag.id == tag.id) {
                                    return true;
                                }
                            }
                        }
                    }
                } else if (eiDescriptor is DashboardDescriptor) {
                    var dashboardDescriptor:DashboardDescriptor = eiDescriptor as DashboardDescriptor;
                    if (dashboardDescriptor.tags != null) {
                        for each (var dashboardTag:Tag in dashboardDescriptor.tags) {
                            for each (var dsTestTag:Tag in selectedTags) {
                                if (dsTestTag.id == dashboardTag.id) {
                                    return true;
                                }
                            }
                        }
                    }
                }
                return false;
            } else {
                return true;
            }
        }

        private function deleteSelf():void {
            Alert.show("Are you sure you want to delete this data source? You will not be able to undo this operation.", "Alert",
                            Alert.OK | Alert.CANCEL, this, alertDataSourceListener, null, Alert.CANCEL);
        }

        private function alertDataSourceListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                dispatchEvent(new DeleteDataSourceEvent(_dataSourceDescriptor));
            }
        }

        private function simpleIconFunction(item:Object):Class {
            if (item is InsightDescriptor) {
                return crosstabIcon;
            } else if (item is LookupTableDescriptor) {
                return tablesIcon;
            } else if (item is FilterSetDescriptor) {
                return filterIcon;
            } else if (item is DashboardDescriptor) {
                return dashboardIcon;
            } else if (item is ScorecardDescriptor) {
                return scorecardIcon;
            } else if (item is DataFolder) {
                if (uploadGrid.isItemOpen(item)) {
                    return folderOpen;
                } else {
                    return folderClosed;
                }
            }
            return null;
        }

        [Embed(source="../../../../assets/folder.png")]
        private var folderOpen:Class;

        [Embed(source="../../../../assets/folder_closed.png")]
        private var folderClosed:Class;

        [Embed(source="../../../../assets/data_blue_x16.png")]
        private var listIcon:Class;

        [Embed(source="../../../../assets/funnel.png")]
        private var filterIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/presentation_chart.png")]
        private var dashboardIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/arrow2_up_green.png")]
        private var scorecardIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/chart_column.png")]
        private var crosstabIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/tables_x16.png")]
        private var tablesIcon:Class;


        private var showLoading:Boolean;
        private var loadingIndex:int;

        private static function customSort(obj1:Object, obj2:Object):int {
            var date1:Date = null;
            var date2:Date = null;
            if (obj1 is DataSourceDescriptor) {
                date1 = DataSourceDescriptor(obj1).lastDataTime;
            }
            if (obj2 is DataSourceDescriptor) {
                date2 = DataSourceDescriptor(obj2).lastDataTime;
            }
            if (date1 == null) {
                date1 = new Date();
                date1.setUTCFullYear(1970);
            }
            if (date2 == null) {
                date2 = new Date();
                date2.setUTCFullYear(1970);
            }
            return ObjectUtil.dateCompare(date1, date2);
        }

        private static function customCreationSort(obj1:Object, obj2:Object):int {
            var date1:Date = null;
            var date2:Date = null;
            if (obj1 is EIDescriptor) {
                date1 = EIDescriptor(obj1).creationDate;
            }
            if (obj2 is EIDescriptor) {
                date2 = EIDescriptor(obj2).creationDate;
            }
            if (date1 == null) {
                date1 = new Date();
                date1.setUTCFullYear(1970);
            }
            if (date2 == null) {
                date2 = new Date();
                date2.setUTCFullYear(1970);
            }
            return ObjectUtil.dateCompare(date1, date2);
        }

        private function createScorecard():void {
            dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.SCORECARD_EDITOR, { startDataSourceID: dataSourceID})));
        }

        private function iconFunction(item:Object, depth:int):Class {
            return simpleIconFunction(item);
        }

        private function deleted():void {
            dispatchEvent(new Event("refresh"));
        }

        private function createLookupTable():void {
            var window:NewLookupTableWindow = new NewLookupTableWindow();
            window.addEventListener(AnalyzeEvent.ANALYZE, onAnalyze, false, 0, true);
            window.selectedDataSource = _dataSourceDescriptor;
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function newFilterSet():void {
            dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.FILTER_SET_EDITOR, { dataSourceID: dataSourceID})));
        }

        private function onAnalyze(event:AnalyzeEvent):void {
            preserveOpenState();
            dispatchEvent(event);
        }

        private function onAnalyze2(event:AnalyzeEvent):void {
            preserveOpenState();
        }

        private function deletedAnalysis():void {
            dispatchEvent(new Event("refresh"));
        }

        private var scrollPosition:int = 0;

        [Bindable]
        private var displayTreeData:ArrayCollection;
        private var sourceTreeData:ArrayCollection;

        private function onRolloverLabelEvent(event:RolloverLabelEvent):void {
            var analyzeSource:PerspectiveInfo = null;
            var selectedObject:Object = event.data;
            if (selectedObject is DataSourceDescriptor) {
                var descriptor:DataSourceDescriptor = selectedObject as DataSourceDescriptor;
                analyzeSource = new DescriptorAnalyzeSource(descriptor.id);
                dispatchEvent(new AnalyzeEvent(analyzeSource));
            } else if (selectedObject is LookupTableDescriptor) {
                dispatchEvent(new AnalyzeEvent(new LookupTableSource(LookupTableDescriptor(selectedObject).id)));
            } else if (selectedObject is DashboardDescriptor) {
                dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DASHBOARD_VIEW, {dashboardID: DashboardDescriptor(selectedObject).id})));
            } else if (selectedObject is ScorecardDescriptor) {
                dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.SCORECARD_VIEW, {scorecardID: ScorecardDescriptor(selectedObject).id})));
            } else if (selectedObject is InsightDescriptor) {
                analyzeSource = new ReportAnalyzeSource(InsightDescriptor(selectedObject));
                dispatchEvent(new AnalyzeEvent(analyzeSource));
            } else if (selectedObject is FilterSetDescriptor) {
                dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.FILTER_SET_EDITOR, {filterSetID: selectedObject.id})));
            }
        }

        private function fromLastState():void {
            uploadGrid.validateNow();
            for each (var obj:Object in displayTreeData) {
                var open:Boolean = openState[String(obj.id)];
                if (open) {
                    uploadGrid.expandItem(obj, true);
                    uploadGrid.validateNow();
                }
            }
            uploadGrid.verticalScrollPosition = scrollPosition;
        }

        private static function nameSort(obj1:Object, obj2:Object):int {
            var name1:String = obj1.name;
            var name2:String = obj2.name;
            return ObjectUtil.stringCompare(name1, name2, true);
        }

        private function newFolder():void {
            var window:NewFolderWindow = new NewFolderWindow();
            window.dataSourceID = _dataSourceDescriptor.id;
            window.addEventListener(Event.COMPLETE, onNewFolder, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function onNewFolder(event:Event):void {
            dispatchEvent(new Event("refresh"));
        }

        private function manageFolders():void {
            var window:ManageFoldersWindow = new ManageFoldersWindow();
            window.dataSourceID = dataSourceDescriptor.id;
            window.addEventListener(Event.COMPLETE, onNewFolder, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        [Bindable]
        private var showScorecard:Boolean = false;

        override protected function createChildren():void {
            super.createChildren();

            if (User.getInstance().accountOverSize) {
                var mb:AccountMessageBar = new AccountMessageBar();
                addChildAt(mb, 0);
            }
        }

        private function onDismissed(event:Event):void {
            removeChild(DisplayObject(event.currentTarget));
        }

        private function deleteSelected():void {
            var activityList:ArrayCollection = new ArrayCollection();
            for each (var activity:EIDescriptor in hierarchicalData.source) {
                if (activity is DataFolder) {
                    var folder:DataFolder = activity as DataFolder;
                    for each (var desc:EIDescriptor in folder.children) {
                        if (desc.selected) {
                            if (desc.role != Roles.OWNER) {
                                Alert.show("You don't have permission to delete " + desc.name + ".");
                                return;
                            }
                            activityList.addItem(desc);
                        }
                    }
                }
            }
            if (activityList.length == 0) {
                Alert.show("You must select at least one item to delete.");
            } else {
                var str:String = "Are you sure you want to delete the selected?";
                var thisObj:UIComponent = this;
                Alert.show(str, "Alert", Alert.OK | Alert.CANCEL, this,
                        function (closeEvent:CloseEvent):void {
                            if (closeEvent.detail == Alert.OK) {
                                ProgressAlert.alert(thisObj, "Deleting...", null, uploadService.deleteReports);
                                uploadService.deleteReports.send(activityList);
                            }
                        });

            }
        }

        private function onItemClick(event:MenuEvent):void {
            var target:String = event.item.data;
            if (target == "newReport") {
                createReport();
            } else if (target == "newDashboard") {
                createDashboard();
            } else if (target == "newScorecard") {
                createScorecard();
            } else if (target == "newFolder") {
                newFolder();
            } else if (target == "newLookupTable") {
                createLookupTable();
            } else if (target == "tableColumns") {
                customizeMyData();
            } else if (target == "organizeFolders") {
                manageFolders();
            } else if (target == "newFilterSet") {
                newFilterSet();
            }
        }

        private function customizeMyData():void {
            var applicationSkinWindow:HomeConfigWindow = new HomeConfigWindow();
            applicationSkinWindow.addEventListener(Event.CHANGE, updateUI, false, 0, true);
            PopUpManager.addPopUp(applicationSkinWindow, this, true);
            PopUpUtil.centerPopUp(applicationSkinWindow);
        }

        private function xyz():void {
            callout = new Callout();
            callout.setStyle("backgroundColor", 0x99ccff);
            callout.setStyle("backgroundAlpha", 1);
            callout.setStyle("cornerRadius", 10);
            callout.setStyle("dropShadowEnabled", true);
            callout.setStyle("preferredTailPosition", "topRight");
            var note:Note = new Note();
            if (dataSourceDescriptor.children.length == 0) {
                note.text = "You successfully created a connection to " + dataSourceDescriptor.name + "! Click Create to design your first report.";
            } else {
                note.text = "You successfully created a connection to " + dataSourceDescriptor.name + "! Prebuilt reports and dashboards are available in the grid to the right--just click on the report or dashboard name to open it up. You can also create your own reports and dashboards through the Create button.";
            }
            callout.addEventListener(NoteEvent.CLOSE_NOTE, onClose);
            callout.content = note;
            if (dataSourceDescriptor.children.length == 0) {
                callout.show(newButton);
            } else {
                callout.show(uploadGrid);
            }
        }

        private var _tags:ArrayCollection;

        [Bindable(event="tagsChanged")]
        public function get tags():ArrayCollection {
            return _tags;
        }

        public function set tags(value:ArrayCollection):void {
            if (_tags == value) return;
            allTags = value;
            var validTags:ArrayCollection = new ArrayCollection();
            for each (var tag:Tag in value) {
                if (tag.report) {
                    validTags.addItem(tag);
                }
            }
            _tags = validTags;
            if (tagUpperRule != null) {
                populateTags(validTags);
            }
            dispatchEvent(new Event("tagsChanged"));
        }

        private var selectedTags:ArrayCollection = new ArrayCollection();

        private var tagChanged:Boolean = false;

        private function onTag(event:TagEvent):void {
            selectedTags.addItem(event.tag);
            if (selectedTags.length == 1) {
                tagChanged = true;
                invalidateDisplayList();
            } else {
                uploadGrid.dataProvider.refresh();
            }
        }

        private function onUnTag(event:TagEvent):void {
            var index:int = 0;
            var i:int = 0;
            for each (var tag:Tag in selectedTags) {
                if (tag.id == event.tag.id) {
                    index = i;
                    break;
                }
                i++;
            }
            selectedTags.removeItemAt(index);
            if (selectedTags.length == 0) {
                tagChanged = true;
                invalidateDisplayList();
            }
            uploadGrid.dataProvider.refresh();
        }

        private var allTags:ArrayCollection;

        private function onTagItemClick(event:MenuEvent):void {
            var op:String = event.item.op;
            if (op == "manageTags") {
                var window:ManageTagWindow = new ManageTagWindow();
                window.existingTags = allTags;
                window.addEventListener(TagMetadataEvent.REFRESH_TAGS, onRefreshTags);
                PopUpManager.addPopUp(window, this, true);
                PopUpUtil.centerPopUp(window);
            } else if (op == "add") {
                var addTag:Tag = event.item.data as Tag;
                applyTag(addTag);
            } else if (op == "remove") {
                var removeTag:Tag = event.item.data as Tag;
                dropTag(removeTag);
            }
        }

        private function onRefreshTags(event:TagMetadataEvent):void {
            selectedTags = new ArrayCollection();
            this.tags = event.tags;
            uploadGrid.dataProvider.refresh();
        }

        private function applyTag(addTag:Tag):void {
            var selected:ArrayCollection = new ArrayCollection();

            for each (var activity:EIDescriptor in hierarchicalData.source) {
                if (activity is DataFolder) {
                    var folder:DataFolder = activity as DataFolder;
                    for each (var desc:EIDescriptor in folder.children) {
                        if (desc.selected) {
                            selected.addItem(desc);
                        }
                    }
                }
            }
            if (selected.length == 0) {
                Alert.show("You must select at least one report to tag.");
            } else {
                ProgressAlert.alert(this, "Tagging...", null, uploadService.tagReportsAndDashboards);
                uploadService.tagReportsAndDashboards.send(selected, addTag);
            }
        }

        private function dropTag(addTag:Tag):void {
            var selected:ArrayCollection = new ArrayCollection();
            for each (var activity:EIDescriptor in hierarchicalData.source) {
                if (activity is DataFolder) {
                    var folder:DataFolder = activity as DataFolder;
                    for each (var desc:EIDescriptor in folder.children) {
                        if (desc.selected) {
                            selected.addItem(desc);
                        }
                    }
                }
            }
            if (selected.length == 0) {
                Alert.show("You must select at least one report to untag.");
            } else {
                ProgressAlert.alert(this, "Tagging...", null, uploadService.untagReportsAndDashboards);
                uploadService.untagReportsAndDashboards.send(selected, addTag);
            }
        }

        private function populateTags(tags:ArrayCollection):void {
            if (tagBox != null) {
                tagBox.removeAllChildren();
            }
            for each (var tag:Tag in tags) {
                var tagButton:TagButton = new TagButton();
                tagButton.data = tag;
                if (selectedTags != null) {
                    for each (var selectedTag:Tag in selectedTags) {
                        if (selectedTag.id == tag.id) {
                            tagButton.selectionState = true;
                            break;
                        }
                    }
                }
                if (tagBox != null) {
                    tagBox.addChild(tagButton);
                }
            }
            var tagOptions:ArrayCollection = new ArrayCollection();
            if (tags != null) {
                tagOptions.addItem({ label: "Manage Tags...", op: "manageTags" });
                for each (var opTag:Tag in tags) {
                    tagOptions.addItem({label: "Add tag - " + opTag.name + " - to selected", data: opTag, op: "add"});
                    tagOptions.addItem({label: "Remove tag - " + opTag.name + " - from selected", data: opTag, op: "remove"});
                }
            }
            if (tags.length == 0) {
                if (tagUpperRule.parent) {
                    tagUpperRule.parent.removeChild(tagUpperRule);
                }
                if (tagLowerRule.parent) {
                    tagLowerRule.parent.removeChild(tagLowerRule);
                }
            } else {
                if (!tagUpperRule.parent) {
                    blah.addChildAt(tagUpperRule, 1);
                }
                if (!tagLowerRule.parent) {
                    blah.addChildAt(tagLowerRule, 3);
                }
                var text:Text = new Text();
                text.styleName = "fallThroughFonts";
                text.setStyle("fontWeight", "bold");
                text.text = "Browse by Tag";
                tagBox.addChildAt(text, 0);
            }
            this.tagOptions = tagOptions;
        }

        private var callout:Callout;

        private function onClose(event:NoteEvent):void {
            callout = null;
        }

        [Bindable]
        private var createOptions:ArrayCollection = new ArrayCollection([
            {label: "New Report", data: "newReport"},
            {label: "New Dashboard", data: "newDashboard"},
            {label: "New Folder", data: "newFolder"},
            {label: "New Lookup Table", data: "newLookupTable"},
            {label: "New Filter Set", data: "newFilterSet"}
        ]);

        [Bindable]
        private var customizeOptions:ArrayCollection = new ArrayCollection([
            {label: "Organize Folders", data: "organizeFolders"},
            {label: "Page Settings", data: "tableColumns"}
        ]);

        [Bindable]
        private var tagOptions:ArrayCollection;

        private function tagChanges():void {
            dispatchEvent(new UploadConfigEvent(UploadConfigEvent.UPLOAD_CONFIG_COMPLETE));
        }

        private function setupConnLabel():void {
            var reports:int = 0;
            for each (var o:EIDescriptor in _dataSourceDescriptor.children) {
                if (o.getType() == EIDescriptor.REPORT) {
                    reports++;
                }
            }
            if (reports == 0) {
                /*
                 <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                 <mx:Text text="You don't have any reports on this data source yet. Click on the 'Create' button and choose 'New Report' to get started!" fontSize="20"
                 maxWidth="500"/>
                 </mx:Box>
                 */
                if (gridBox == null) {
                    gridBox = new VBox();
                    gridBox.percentWidth = 100;
                    gridBox.percentHeight = 100;
                    gridBox.setStyle("backgroundColor", 0xFFFFFF);
                    gridBox.setStyle("verticalAlign", "middle");
                    gridBox.setStyle("horizontalAlign", "center");
                    var text:Text = new Text();
                    text.text = "You don't have any reports on this data source yet. Click on the 'Create' button and choose 'New Report' to get started!";
                    text.setStyle("fontSize", 20);
                    text.maxWidth = 500;
                    gridBox.addChild(text);
                }
                gridCanvas.addChild(gridBox);
                connLabel = "This data source is your connection to " + _dataSourceDescriptor.name + ". You can click on the \"Create\" button below and choose \"New Report\" to get started. You can click on \"Back to List\" to return to the data source list.";
            } else {
                if (gridBox != null) {
                    gridCanvas.removeChild(gridBox);
                    gridBox = null;
                }
                connLabel = "This data source is your connection to " + _dataSourceDescriptor.name + ". You can click on the \"Create\" button to create new reports and dashboards. You can open up existing reports and dashboards by clicking on their names in the table. You can click on \"Back to List\" to return to the data source list.";
            }
        }

        private var gridBox:VBox;

        [Bindable]
        private var connLabel:String;
        ]]></mx:Script>
    <mx:Style>
        .myCustomPopUpStyleName {
            fontSize: 12;
            fontFamily: "Lucida Grande";
            textAlign: left;
            dropShadowEnabled: false;
            borderStyle: solid;
            borderThickness: 1;
            cornerRadius: 8;
        }
    </mx:Style>
    <mx:RemoteObject id="uploadService" destination="userUpload">
        <mx:method name="move" result="moved()"/>
        <mx:method name="deleteReports" result="deleted()"/>
        <mx:method name="tagReportsAndDashboards" result="tagChanges()"/>
        <mx:method name="untagReportsAndDashboards" result="tagChanges()"/>
    </mx:RemoteObject>
    <mx:VBox
         horizontalGap="20"
         backgroundColor="#FFFFFF" width="100%" horizontalAlign="center" verticalGap="5">
        <mx:Label text="{dataSourceName}" fontSize="20" maxWidth="300"/>
        <mx:Text maxWidth="600" text="{connLabel}" styleName="fallThroughFonts"/>
        <mx:HRule/>
        <mx:HBox verticalAlign="middle" width="100%">
            <mx:LinkButton label="Back to list" click="dispatchEvent(new Event('backToDataSources'))" fontSize="12"
                           visible="{showBack}" id="backToListButton"/>
            <mx:VRule height="10" strokeColor="#CCCCCC" id="backToListRule"/>
            <datasources:MyDataDataSourceDisplay dataSource="{dataSourceDescriptor}" visible="{realDataSource}"
                    buttonClass="mx.controls.LinkButton" id="refreshButton"/>
            <mx:VRule height="10" strokeColor="#CCCCCC" id="refreshRule"/>
            <mx:LinkButton label="Configure the data source" click="dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DATA_SOURCE_ADMIN, {feedID: dataSourceID})))" fontSize="12"
                           visible="{admin}" id="configureButton"/>
            <mx:VRule height="10" strokeColor="#CCCCCC" id="configureRule"/>
            <mx:LinkButton label="Delete the data source" click="deleteSelf()" fontSize="12"
                           visible="{admin &amp;&amp; !showBack}" id="deleteButton"/>
        </mx:HBox>
    </mx:VBox>
    <mx:VBox paddingLeft="10" paddingRight="10"
         borderStyle="solid" cornerRadius="8" borderThickness="1" dropShadowEnabled="true"
         horizontalGap="20"
         backgroundColor="#FFFFFF" paddingTop="5" paddingBottom="5" width="100%" height="100%" id="blah">
        <mx:HBox width="100%">
            <listing:ArghButton label="Create" styleName="grayButton" itemClick="onItemClick(event)" visible="{realDataSource}" width="160" id="newButton"
                    dataProvider="{createOptions}" labelField="label" openAlways="true" popUpStyleName="myCustomPopUpStyleName"/>
            <listing:ArghButton label="Customize View" styleName="grayButton" labelField="label" openAlways="true" popUpStyleName="myCustomPopUpStyleName" width="140"
                    dataProvider="{customizeOptions}" itemClick="onItemClick(event)"/>
            <listing:ArghButton label="Tag..." styleName="grayButton" itemClick="onTagItemClick(event)" width="160" id="tagButton"
                                dataProvider="{tagOptions}" labelField="label" openAlways="true" popUpStyleName="myCustomPopUpStyleName"/>
            <mx:Button label="Delete Selected" styleName="grayButton" click="deleteSelected()" width="140"/>
            <mx:Spacer width="100%"/>
        </mx:HBox>
        <mx:HRule id="tagUpperRule" width="100%" strokeColor="#CCCCCC"/>
        <containers:FlowBox id="tagBox" width="100%" updateComplete="adapterFlowBoxUpdateCompleteHandler(event)" verticalAlign="middle">

        </containers:FlowBox>
        <mx:HRule id="tagLowerRule" width="100%" strokeColor="#CCCCCC"/>
        <mx:Canvas width="100%" height="100%" id="gridCanvas">
            <util:PatchedAdvancedDataGrid id="uploadGrid" selectable="false"
                                          fontSize="12"
                                          headerStyleName="BlueHeader"
                                          iconFunction="simpleIconFunction" width="100%" height="100%">
            </util:PatchedAdvancedDataGrid>
        </mx:Canvas>
    </mx:VBox>
</mx:VBox>
