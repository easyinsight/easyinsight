<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:local="*" xmlns:listing="com.easyinsight.listing.*"
         width="100%" borderStyle="none" xmlns:easyinsight="com.easyinsight.*" horizontalGap="0" verticalAlign="middle" backgroundColor="0xF0F0F0"
        creationComplete="setup()" height="68">
    <mx:Metadata>
        [Event(name="listingChange", type="com.easyinsight.listing.ListingChangeEvent")]
        [Event(name="launchQuickSearch", type="com.easyinsight.listing.LaunchQuickSearchEvent")]
        [Event(name="reportBug", type="com.easyinsight.listing.ReportBugEvent")]
    </mx:Metadata>
    <mx:Script>
		<![CDATA[
        import com.easyinsight.account.NewFreeUserWelcome;
        import com.easyinsight.framework.LoginEvent;        
        import com.easyinsight.framework.User;        
        import com.easyinsight.preferences.UIConfiguration;
        import com.easyinsight.preferences.UIOption;
        import com.easyinsight.scorecard.LoggedInHome;
        import com.easyinsight.solutions.RevisedSolutionSummary;
        import com.easyinsight.groups.GroupsSummary;
        import com.easyinsight.account.AccountBasePage;
        import com.easyinsight.customupload.api.APIPage;
        import com.easyinsight.genredata.GenreDataProvider;

        import mx.states.RemoveChild;
        import mx.states.State;

        private function setup():void {
            User.getEventNotifier().addEventListener(LoginEvent.LOGIN, loginEvent);
            User.getEventNotifier().addEventListener(LoginEvent.LOGOUT, loginEvent);
            User.getEventNotifier().addEventListener("uiChange", uiChangeEvent);
            if (User.getInstance().uiConfiguration != null) {
                createState(User.getInstance().uiConfiguration);
            }
        }

        private function loginEvent(event:LoginEvent):void {            
            if (event.type == LoginEvent.LOGIN) {
                if (User.getInstance().uiConfiguration != null) {
                    createState(User.getInstance().uiConfiguration);
                }
            }
        }

        private function uiChangeEvent(event:Event):void {
            if (User.getInstance().uiConfiguration != null) {
                createState(User.getInstance().uiConfiguration);
            }
        }


        [Bindable]
        [Embed(source="../../../../assets/find.png")]
        private var findIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/headericons/house.png")]
        private var homeIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/headericons/chart_area.png")]
        private var myDataIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/headericons/shopping_bag.png")]
        private var catalogIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/headericons/users2.png")]
        private var groupsIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/headericons/arrow_up_green.png")]
        private var scorecardIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/headericons/components.png")]
        private var solutionsIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/headericons/branch.png")]
        private var goalsIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/headericons/user.png")]
        private var accountIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/headericons/application_enterprise.png")]
        private var apiIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/headericons/help.png")]
        private var helpIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/bug_red.png")]
        private var bugIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/logo2.PNG")]
        private var logo:Class;

        [Bindable]
        private var loggedIn:Boolean = false;

        private function onListingChange(event:ListingChangeEvent):void {
            //dispatchEvent(event);
        }

        private function findNode(targetPage:String, items:Array):ListingOption {
            for each (var obj:Object in items) {
                if (obj is ListingOption) {
                    var listingOption:ListingOption = obj as ListingOption;
                    if (listingOption.displayName == targetPage) {
                        return listingOption;
                    }
                }
            }
            return null;
        }

        public function explicitChange(targetPage:String, properties:Object):void {
            var listingOption:ListingOption = findNode(targetPage, getChildren());
            if (listingOption != null) {
                dispatchEvent(new ListingChangeEvent(listingOption.perspective, properties));
            }
        }

        private function createState(config:UIConfiguration):void {
            currentState = "";
            var ops:Array = [];
            evaluate(apiListingOption, UIConfiguration.SHOW_APIS, config, ops);
            evaluate(myDataOption, UIConfiguration.SHOW_MY_DATA, config, ops);
            evaluate(connectionsOption, UIConfiguration.SHOW_CONNECTIONS, config, ops);
            evaluate(exchangeOption, UIConfiguration.SHOW_EXCHANGE, config, ops);
            evaluate(groupsOption, UIConfiguration.SHOW_GROUPS, config, ops);            
            if (ops.length > 0) {
                var state:State = new State();
                state.overrides = ops;
                state.name = "Persona";
                states = [ state ];
                currentState = "Persona";
            }
        }

        private function evaluate(listingOption:ListingOption, key:String, uiConfig:UIConfiguration, ops:Array):void {
            var uiOption:UIOption = uiConfig.getConfiguration(key);
            if (!uiOption.selected) {
                var removeChild:RemoveChild = new RemoveChild();
                removeChild.target = listingOption;
                ops.push(removeChild);
            }
        }

        [Bindable]
        private var introPanel:Class = SimpleIntro;
        [Bindable]
        private var myData:Class = MyData;
        [Bindable]
        private var connections:Class = RevisedSolutionSummary;
        [Bindable]
        private var exchange:Class = GenreDataProvider;
        [Bindable]
        private var groupsSummary:Class = GroupsSummary;
        [Bindable]
        private var myGoals:Class = LoggedInHome;
        [Bindable]
        private var apiPage:Class = APIPage;
        [Bindable]
        private var accountBase:Class = AccountBasePage;
        [Bindable]
        private var help:Class = NewFreeUserWelcome;
		]]>
    </mx:Script>
    <mx:Image source="{logo}"/>
    <mx:Spacer width="10"/>
    <listing:ListingOption perspectiveClass="{introPanel}" displayName="Home" listingChange="onListingChange(event)" width="85">
        <mx:Image source="{homeIcon}" id="homeImage"/>
        <mx:Label text="Home" fontSize="12" fontFamily="Tahoma" fontWeight="bold" color="0x323232"/>
    </listing:ListingOption>
    <listing:ListingOption perspectiveClass="{myGoals}" displayName="Scorecards" listingChange="onListingChange(event)"
            id="scorecardOption" width="85">
        <mx:Image source="{scorecardIcon}" id="kpisImage"/>
        <mx:Label text="Scorecards" fontSize="12" fontFamily="Tahoma" fontWeight="bold" color="0x323232"/>
    </listing:ListingOption>
    <listing:ListingOption perspectiveClass="{myData}" displayName="My Data" listingChange="onListingChange(event)" id="myDataOption" width="85">
        <mx:Image source="{myDataIcon}" id="myDataImage"/>
        <mx:Label text="My Data" fontSize="12" fontFamily="Tahoma" fontWeight="bold" color="0x323232"/>
    </listing:ListingOption>
    <listing:ListingOption perspectiveClass="{connections}" displayName="Connections" listingChange="onListingChange(event)"
            id="connectionsOption" width="85">
        <mx:Image source="{solutionsIcon}" id="solutionsImage"/>
        <mx:Label text="Connections" fontSize="12" fontFamily="Tahoma" fontWeight="bold" color="0x323232"/>
    </listing:ListingOption>
    <listing:ListingOption perspectiveClass="{exchange}" displayName="Exchange" listingChange="onListingChange(event)"
            id="exchangeOption" width="85">
        <mx:Image source="{catalogIcon}" id="catalogImage"/>
        <mx:Label text="Exchange" fontSize="12" fontFamily="Tahoma" fontWeight="bold" color="0x323232"/>
    </listing:ListingOption>
    <listing:ListingOption perspectiveClass="{groupsSummary}" displayName="Groups" listingChange="onListingChange(event)"
            id="groupsOption" width="85">
        <mx:Image source="{groupsIcon}" id="groupsImage"/>
        <mx:Label text="Groups" fontSize="12" fontFamily="Tahoma" fontWeight="bold" color="0x323232"/>
    </listing:ListingOption>
    <listing:ListingOption perspectiveClass="{apiPage}" displayName="Developers" listingChange="onListingChange(event)" id="apiListingOption" width="85">
        <mx:Image source="{apiIcon}" id="apiImage"/>
        <mx:Label text="Developers" fontSize="12" fontFamily="Tahoma" fontWeight="bold" color="0x323232"/>
    </listing:ListingOption>
    <listing:ListingOption perspectiveClass="{accountBase}" displayName="Accounts" listingChange="onListingChange(event)"
            id="accountsOption" width="85">
        <mx:Image source="{accountIcon}" id="accountImage"/>
        <mx:Label text="Account" fontSize="12" fontFamily="Tahoma" fontWeight="bold" color="0x323232"/>
    </listing:ListingOption>
    <listing:ListingOption perspectiveClass="{help}" displayName="Help" listingChange="onListingChange(event)" width="85">
        <mx:Image source="{helpIcon}" id="helpImage"/>
        <mx:Label text="Help" fontSize="12" fontFamily="Tahoma" fontWeight="bold" color="0x323232"/>
    </listing:ListingOption>
    <mx:Spacer width="100%"/>
    <mx:Button icon="{bugIcon}" click="dispatchEvent(new ReportBugEvent())" toolTip="Report Bug"/>
    <mx:Spacer width="10"/>
    <mx:Button icon="{findIcon}" click="dispatchEvent(new LaunchQuickSearchEvent())" toolTip="Search (Ctrl .)"/>
    <mx:Spacer width="10"/>
    <easyinsight:LoggedOnStatus/>
</mx:HBox>
