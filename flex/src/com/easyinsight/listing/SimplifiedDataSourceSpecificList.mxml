<?xml version="1.0"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:datasources="com.easyinsight.datasources.*" width="100%"
         height="100%"
         creationComplete="addEventListener(AnalyzeEvent.ANALYZE, onAnalyze2)"
        doubleClickEnabled="true" implements="com.easyinsight.listing.IDataSourceSpecificList">
    <mx:Metadata>
        [Event(name="backToDataSources", type="flash.events.Event")]
        [Event(name="refresh", type="flash.events.Event")]
        [Event(name="deleteDataSource", type="com.easyinsight.listing.DeleteDataSourceEvent")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import com.easyinsight.dashboard.DashboardDescriptor;
        import com.easyinsight.etl.LookupTableDescriptor;
        import com.easyinsight.etl.LookupTableSource;
        import com.easyinsight.framework.DataFolder;
        import com.easyinsight.framework.PerspectiveInfo;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.quicksearch.EIDescriptor;
        import com.easyinsight.report.ReportAnalyzeSource;
        import com.easyinsight.scorecard.ScorecardDescriptor;
        import com.easyinsight.skin.ApplicationSkin;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.solutions.InsightDescriptor;

        import mx.collections.ArrayCollection;
        import mx.collections.HierarchicalData;
        import mx.collections.ICollectionView;
        import mx.collections.Sort;
        import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
        import mx.events.ListEvent;
        import mx.utils.ObjectUtil;

        private var _dataSourceDescriptor:DataSourceDescriptor;

        [Bindable]
        private var dataSourceName:String;


        private var _showBack:Boolean = false;

        [Bindable(event="showBackChanged")]
        public function get showBack():Boolean {
            return _showBack;
        }

        public function set showBack(value:Boolean):void {
            if (_showBack == value) return;
            _showBack = value;
            dispatchEvent(new Event("showBackChanged"));
        }

        [Bindable]
        private var dataSourceID:int;

        [Bindable]
        private var hierarchicalData:HierarchicalData;

        [Embed(source="../../../../assets/businessman_edit.png")]
        public var adminIcon:Class;


        [Bindable]
        private var admin:Boolean;

        [Bindable]
        private var realDataSource:Boolean;

        private function moved():void {

        }

        override public function set data(val:Object):void {
            if (val != null) {
                var dataSourceDescriptor:DataSourceDescriptor = val as DataSourceDescriptor;
                if (_dataSourceDescriptor == null || dataSourceDescriptor.id != _dataSourceDescriptor.id) {
                    openState = new Object();
                    dataSourceChanged = true;
                }
                if (dataSourceDescriptor != this.dataSourceDescriptor) {
                    admin = false;
                    realDataSource = false;
                    dataSourceInvalidate = true;
                    this.dataSourceDescriptor = dataSourceDescriptor;
                    dataSourceName = _dataSourceDescriptor.name;
                    dataSourceID = _dataSourceDescriptor.id;
                    invalidateProperties();
                }
            }
        }

        private var dataSourceInvalidate:Boolean = false;

        private var dataSourceChanged:Boolean = false;

        [Bindable(event="dataSourceDescriptorChanged")]
        public function get dataSourceDescriptor():DataSourceDescriptor {
            return _dataSourceDescriptor;
        }

        public function set dataSourceDescriptor(value:DataSourceDescriptor):void {
            if (_dataSourceDescriptor == value) return;
            _dataSourceDescriptor = value;
            dispatchEvent(new Event("dataSourceDescriptorChanged"));
        }

        override protected function commitProperties():void {
            super.commitProperties();

            if (dataSourceInvalidate) {
                if (_dataSourceDescriptor.role <= 2) {
                    admin = true;
                }
                if (_dataSourceDescriptor.role <= 3) {
                    realDataSource = true;
                }
                showScorecard = realDataSource && ApplicationSkin.instance().myDataNewScorecard;
                var dataSourceChildren:ArrayCollection = _dataSourceDescriptor.children;
                mainViewsFolder = new DataFolder("Main Views", 1);
                var mainViewsChildren:ArrayCollection = new ArrayCollection();
                mainViewsFolder.children = mainViewsChildren;
                var otherViewsFolder:DataFolder = new DataFolder("Additional Views", 2);
                var otherViewsChildren:ArrayCollection = new ArrayCollection();
                otherViewsFolder.children = otherViewsChildren;
                var lookupTablesFolder:DataFolder = new DataFolder("Lookup Tables", 3);
                var lookupTablesChildren:ArrayCollection = new ArrayCollection();
                lookupTablesFolder.children = lookupTablesChildren;
                for each (var desc:EIDescriptor in dataSourceChildren) {
                    if (desc.getType() == EIDescriptor.LOOKUP_TABLE) {
                        lookupTablesChildren.addItem(desc);
                    } else {
                        if (desc.folder == EIDescriptor.OTHER_VIEWS_FOLDER) {
                            otherViewsChildren.addItem(desc);
                        } else {
                            mainViewsChildren.addItem(desc);
                        }
                    }
                }
                var folders:ArrayCollection = new ArrayCollection();
                folders.addItem(mainViewsFolder);
                folders.addItem(otherViewsFolder);
                if (lookupTablesChildren.length > 0) {
                    folders.addItem(lookupTablesFolder);
                }
                displayTreeData = folders;

                this.hierarchicalData = new HierarchicalData();
                hierarchicalData.source = folders;

                dataSourceInvalidate = false;
                dataChanged = true;

                updateUI();
            }
        }

        private var existingData:ArrayCollection;

        private var nameRenderer:ClassFactory = new ClassFactory(NameRenderer);

        private var mainViewsFolder:DataFolder;

        private var dataChanged:Boolean = false;

        override public function get data():Object {
            return _dataSourceDescriptor;
        }

        private var openState:Object = new Object();

        private function preserveOpenState():void {
            if (existingData != null) {
                openState = new Object();
                for each (var obj:Object in existingData) {
                    openState[String(obj.id)] = uploadGrid.isItemOpen(obj);
                    if (uploadGrid.isItemOpen(obj)) {
                    }
                }
                scrollPosition = uploadGrid.verticalScrollPosition;
            }
        }

        public function updateUI(event:Event = null):void {
            columnsInvalid = true;
            showScorecard = realDataSource && ApplicationSkin.instance().myDataNewScorecard;
            invalidateDisplayList();
        }

        private var columnsInvalid:Boolean = false;

        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
            if (dataChanged) {
                if (!dataSourceChanged) {
                    preserveOpenState();
                    var sort:Sort = ICollectionView(uploadGrid.dataProvider).sort;
                }
            }
            if (columnsInvalid || uploadGrid.columns == null || uploadGrid.columns.length == 0) {
                if (admin) {
                    uploadGrid.groupItemRenderer = nameRenderer;
                }
                var columns:Array = [];
                var nameColumn:AdvancedDataGridColumn = new AdvancedDataGridColumn();
                nameColumn.dataField = "name";
                nameColumn.headerText = "Name";
                //uploadGrid.groupItemRenderer = new ClassFactory(MyDataIndividualParentRenderer);
                nameColumn.sortCompareFunction = nameSort;

                columns.push(nameColumn);
                uploadGrid.columns = columns;
                columnsInvalid = false;
            }
            if (dataChanged) {
                uploadGrid.dataProvider = hierarchicalData;
                existingData = displayTreeData;
                if (!dataSourceChanged) {
                    displayTreeData.sort = sort;
                }
                displayTreeData.refresh();
                if (!dataSourceChanged) {
                    fromLastState();
                } else {
                    uploadGrid.validateNow();
                    uploadGrid.expandItem(mainViewsFolder, true);
                    uploadGrid.validateNow();
                }
            }
            if (dataChanged) {
                dataChanged = false;
            }
            if (dataSourceChanged) {
                dataSourceChanged = false;
            }
        }

        private function simpleIconFunction(item:Object):Class {
            if (item is InsightDescriptor) {
                return crosstabIcon;
            } else if (item is LookupTableDescriptor) {
                return tablesIcon;
            } else if (item is DashboardDescriptor) {
                return dashboardIcon;
            } else if (item is ScorecardDescriptor) {
                return scorecardIcon;
            } else if (item is DataFolder) {
                if (uploadGrid.isItemOpen(item)) {
                    return folderOpen;
                } else {
                    return folderClosed;
                }
            }
            return null;
        }

        [Embed(source="../../../../assets/folder.png")]
        private var folderOpen:Class;

        [Embed(source="../../../../assets/folder_closed.png")]
        private var folderClosed:Class;

        [Embed(source="../../../../assets/data_blue_x16.png")]
        private var listIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/presentation_chart.png")]
        private var dashboardIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/arrow2_up_green.png")]
        private var scorecardIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/chart_column.png")]
        private var crosstabIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/tables_x16.png")]
        private var tablesIcon:Class;


        private var showLoading:Boolean;
        private var loadingIndex:int;

        private function customSort(obj1:Object, obj2:Object):int {
            var date1:Date = null;
            var date2:Date = null;
            if (obj1 is DataSourceDescriptor) {
                date1 = DataSourceDescriptor(obj1).lastDataTime;
            }
            if (obj2 is DataSourceDescriptor) {
                date2 = DataSourceDescriptor(obj2).lastDataTime;
            }
            if (date1 == null) {
                date1 = new Date();
                date1.setUTCFullYear(1970);
            }
            if (date2 == null) {
                date2 = new Date();
                date2.setUTCFullYear(1970);
            }
            return ObjectUtil.dateCompare(date1, date2);
        }

        private function customCreationSort(obj1:Object, obj2:Object):int {
            var date1:Date = null;
            var date2:Date = null;
            if (obj1 is EIDescriptor) {
                date1 = EIDescriptor(obj1).creationDate;
            }
            if (obj2 is EIDescriptor) {
                date2 = EIDescriptor(obj2).creationDate;
            }
            if (date1 == null) {
                date1 = new Date();
                date1.setUTCFullYear(1970);
            }
            if (date2 == null) {
                date2 = new Date();
                date2.setUTCFullYear(1970);
            }
            return ObjectUtil.dateCompare(date1, date2);
        }

        private function iconFunction(item:Object, depth:int):Class {
            return simpleIconFunction(item);
        }

        private function onAnalyze(event:AnalyzeEvent):void {
            preserveOpenState();
            dispatchEvent(event);
        }

        private function onAnalyze2(event:AnalyzeEvent):void {
            preserveOpenState();
        }

        private function deletedAnalysis():void {
            dispatchEvent(new Event("refresh"));
        }

        private var scrollPosition:int = 0;

        [Bindable]
        private var displayTreeData:ArrayCollection;
        private var sourceTreeData:ArrayCollection;

        private function gridDoubleClick(event:ListEvent):void {
            var analyzeSource:PerspectiveInfo = null;
            var selectedObject:Object = event.currentTarget.selectedItem;
            if (selectedObject is LookupTableDescriptor) {
                dispatchEvent(new AnalyzeEvent(new LookupTableSource(LookupTableDescriptor(selectedObject).id)));
            } else if (selectedObject is DashboardDescriptor) {
                dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DASHBOARD_VIEW, {dashboardID:DashboardDescriptor(selectedObject).id})));
            } else if (selectedObject is ScorecardDescriptor) {
                dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.SCORECARD_VIEW, {scorecardID:ScorecardDescriptor(selectedObject).id})));
            } else if (selectedObject is InsightDescriptor) {
                analyzeSource = new ReportAnalyzeSource(InsightDescriptor(selectedObject));
                dispatchEvent(new AnalyzeEvent(analyzeSource));
            }
        }

        private function fromLastState():void {
            uploadGrid.validateNow();
            for each (var obj:Object in displayTreeData) {
                var open:Boolean = openState[String(obj.id)];
                if (open) {
                    uploadGrid.expandItem(obj, true);
                    uploadGrid.validateNow();
                }
            }
            uploadGrid.verticalScrollPosition = scrollPosition;
        }

        private function nameSort(obj1:Object, obj2:Object):int {
            var name1:String = obj1.name;
            var name2:String = obj2.name;
            return ObjectUtil.stringCompare(name1, name2, true);
        }

        [Bindable]
        private var showScorecard:Boolean = false;
        ]]></mx:Script>
    <mx:HBox paddingLeft="20" paddingRight="20"
         borderStyle="solid" cornerRadius="8" borderThickness="1" dropShadowEnabled="true"
         horizontalGap="20"
         backgroundColor="#FFFFFF" paddingTop="5" paddingBottom="5" width="100%" verticalAlign="middle">
        <mx:VBox height="100%">
            <mx:Spacer height="100%"/>
            <mx:LinkButton label="Back to Data Sources" textDecoration="underline" click="dispatchEvent(new Event('backToDataSources'))" fontSize="12"
                    visible="{showBack}"/>
            <mx:Spacer height="100%"/>
        </mx:VBox>
        <mx:Image/>
        <mx:Spacer width="100%"/>
        <mx:VBox horizontalAlign="center" height="100%" id="nameVBox">
            <mx:Label text="{dataSourceName}" fontSize="20" maxWidth="300"/>
        </mx:VBox>
        <mx:Spacer width="100%"/>
        <datasources:MyDataDataSourceDisplay dataSource="{dataSourceDescriptor}" visible="{realDataSource}"/>
    </mx:HBox>
    <mx:VBox paddingLeft="10" paddingRight="10"
         borderStyle="solid" cornerRadius="8" borderThickness="1" dropShadowEnabled="true"
         horizontalGap="20"
         backgroundColor="#FFFFFF" paddingTop="5" paddingBottom="5" width="100%" height="100%">
        <mx:AdvancedDataGrid id="uploadGrid" horizontalGridLineColor="#DDDDDD" verticalGridLineColor="#DDDDDD" horizontalGridLines="true"
                             verticalGridLines="true" selectable="false"
                             fontSize="12"
                                             groupItemRenderer="com.easyinsight.listing.MyDataIndividualParentRenderer" headerStyleName="BlueHeader"
                                             iconFunction="simpleIconFunction" width="100%" height="100%" rowHeight="24">
        </mx:AdvancedDataGrid>
    </mx:VBox>
</mx:VBox>
