<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"  implements="com.easyinsight.filtering.IFilterDetailEditor">
	<mx:Script>
		<![CDATA[

        import mx.binding.utils.BindingUtils;
        import mx.collections.Sort;
        import mx.rpc.remoting.RemoteObject;
        import mx.rpc.events.ResultEvent;
        import mx.collections.ArrayCollection;

        import com.easyinsight.analysis.Value;
        import com.easyinsight.analysis.AnalysisDimensionResultMetadata;

        import mx.utils.ObjectUtil;

        private var _filterValueDefinition:FilterValueDefinition;

        [Bindable]
        private var sourceValues:ArrayCollection;
        [Bindable]
        private var targetValues:ArrayCollection;

        private var _feedID:int;

        private var dataService:RemoteObject;

        private function setup():void {
            BindingUtils.bindProperty(this, "keyword", availableSearch, "text");
        }

        private var _fields:ArrayCollection;

        public function set fields(value:ArrayCollection):void {
            _fields = value;
        }

        public function set filterValueDefinition(filterValueDefinition:FilterValueDefinition):void {
            this._filterValueDefinition = filterValueDefinition;
            if (_filterValueDefinition != null) {
                includeFilter = _filterValueDefinition.inclusive;
            }
        }

        public function set feedID(feedID:int):void {
            this._feedID = feedID;
        }

        [Bindable]
        private var includeFilter:Boolean;

        override protected function commitProperties():void {
            super.commitProperties();
            dataService = new RemoteObject();
            dataService.destination = "data";
            dataService.getAnalysisItemMetadata.addEventListener(ResultEvent.RESULT, gotMetadata);
            dataService.getAnalysisItemMetadata.send(_feedID, _filterValueDefinition.field, new Date().getTimezoneOffset());
        }

        private function compare(obj1:Object, obj2:Object, fields:Array = null):int {
            var string1:String = obj1 as String;
            var string2:String = obj2 as String;
            return ObjectUtil.stringCompare(string1, string2, true);
        }

        private function gotMetadata(event:ResultEvent):void {
            var analysisDimensionResultMetadata:AnalysisDimensionResultMetadata = dataService.getAnalysisItemMetadata.lastResult as
                    AnalysisDimensionResultMetadata;
            var filteredStrings:ArrayCollection = new ArrayCollection();
            for each (var filterValue:Object in _filterValueDefinition.filteredValues) {
                var filterString:String;
                if (filterValue is Value) {
                    filterString = String(Value(filterValue).getValue());
                } else {
                    filterString = String(filterValue);
                }
                filteredStrings.addItem(filterString);
            }
            var strings:ArrayCollection = new ArrayCollection();
            for each (var value:Value in analysisDimensionResultMetadata.values) {
                var string:String = String(value.getValue());
                if (!strings.contains(string) && !filteredStrings.contains(string)) {
                    strings.addItem(string);
                }
            }
            strings.sort = new Sort();
            strings.sort.compareFunction = compare;
            strings.filterFunction = filterFunction;
            strings.refresh();
            sourceValues = strings;
            filteredStrings.sort = new Sort();
            filteredStrings.sort.compareFunction = compare;
            filteredStrings.filterFunction = targetFilterFunction;
            filteredStrings.refresh();
            targetValues = filteredStrings;
            stackIndex = 1;
        }

        private function filterFunction(item:Object):Boolean {
            if (keyword != null) {
                var string:String = item as String;
                return string.toLowerCase().indexOf(keyword) != -1;
            }
            return true;
        }

        private function targetFilterFunction(item:Object):Boolean {
            if (includedKeyword != null) {
                var string:String = item as String;
                return string.toLowerCase().indexOf(includedKeyword) != -1;
            }
            return true;
        }

        private function sourceChange():void {
            keyword = availableSearch.text.toLowerCase();
            sourceValues.refresh();
        }

        private function includedChange():void {
            includedKeyword = includedSearch.text.toLowerCase();
            targetValues.refresh();
        }

        private var _includedKeyword:String;

        public function get includedKeyword():String {
            return _includedKeyword;
        }

        public function set includedKeyword(value:String):void {
            _includedKeyword = value;
        }

        private var _keyword:String;

        public function get keyword():String {
            return _keyword;
        }

        public function set keyword(value:String):void {
            _keyword = value;
        }

        public function makeUpdates():FilterDefinition {
            _filterValueDefinition.filteredValues = targetList.dataProvider as ArrayCollection;
            _filterValueDefinition.inclusive = includeCheckbox.selected;
            return _filterValueDefinition;
        }

        public function set filterDefinition(filterDefinition:FilterDefinition):void {
            _filterValueDefinition = filterDefinition as FilterValueDefinition;
            if (_filterValueDefinition != null) {
                includeFilter = _filterValueDefinition.inclusive;
            }
        }

        private function onTypeChange():void {
            if (typeGroup.selectedValue == "single") {
                dispatchEvent(new FilterEditEvent(_filterValueDefinition, _filterValueDefinition, ComboBoxFilterWindow));
            } else if (typeGroup.selectedValue == "pattern") {
                dispatchEvent(new FilterEditEvent(_filterValueDefinition, _filterValueDefinition, PatternFilterWindow));
            }
        }

        [Bindable]
        private var stackIndex:int = 0;

        private var _typeChangeAllowed:Boolean = true;
        
        [Bindable(event="typeChangeAllowedChanged")]
        public function get typeChangeAllowed():Boolean {
            return _typeChangeAllowed;
        }

        public function set typeChangeAllowed(value:Boolean):void {
            if (_typeChangeAllowed == value) return;
            _typeChangeAllowed = value;
            dispatchEvent(new Event("typeChangeAllowedChanged"));
        }


		]]>
	</mx:Script>
    <mx:HBox visible="{typeChangeAllowed}">
        <mx:RadioButtonGroup id="typeGroup" change="onTypeChange()"/>
        <mx:RadioButton group="{typeGroup}" label="Single Value" value="single"/>
        <mx:RadioButton group="{typeGroup}" label="Multi Value" selected="true" value="multi"/>
        <mx:RadioButton group="{typeGroup}" label="Pattern Match" value="pattern"/>
    </mx:HBox>
    <mx:ViewStack resizeToContent="true" selectedIndex="{stackIndex}">
        <mx:Box>
            <mx:ProgressBar label="Loading the available values..." indeterminate="true"/>
        </mx:Box>
        <mx:VBox>
            <mx:Label text="Drag Items Between Available and Filtered"/>
            <mx:CheckBox label="Filter Includes Values" id="includeCheckbox" selected="{includeFilter}"/>
            <mx:HBox verticalAlign="middle">
                <mx:VBox>
                    <mx:ApplicationControlBar width="200">
                        <mx:Label text="Available Values"/>
                    </mx:ApplicationControlBar>
                    <mx:TextInput id="availableSearch" change="sourceChange()"/>
                    <mx:List dataProvider="{sourceValues}" dragMoveEnabled="true" dropEnabled="true" dragEnabled="true" width="200"/>
                </mx:VBox>
                <mx:VBox>
                    <mx:Button label="Add All"/>
                    <mx:Button label="Remove All"/>
                </mx:VBox>
                <mx:VBox>
                    <mx:ApplicationControlBar width="200">
                        <mx:Label text="Filtered Values"/>
                    </mx:ApplicationControlBar>
                    <mx:TextInput id="includedSearch" change="includedChange()"/>
                    <mx:List dataProvider="{targetValues}" dropEnabled="true" dragEnabled="true" dragMoveEnabled="true" id="targetList"
                        width="200"/>
                </mx:VBox>
            </mx:HBox>
        </mx:VBox>
    </mx:ViewStack>
</mx:VBox>
