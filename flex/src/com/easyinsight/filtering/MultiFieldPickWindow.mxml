<?xml version="1.0" encoding="utf-8"?>
<util:EITitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*"
         horizontalAlign="center" creationComplete="creationCompleteHandler(event)" width="500" backgroundColor="#FFFFFF" paddingBottom="10"
        paddingLeft="10" paddingRight="10" paddingTop="10">
    <mx:Metadata>
        [Event(name="gotMetadataComplete", type="flash.events.Event")]
    </mx:Metadata>
    <mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.dashboard.Dashboard;
        import com.easyinsight.util.PopUpUtil;

        import mx.binding.utils.BindingUtils;
        import mx.collections.ArrayCollection;
        import mx.controls.List;
        import mx.events.FlexEvent;
        import mx.managers.PopUpManager;

        private var strings:ArrayCollection;

        public var analysisItems:ArrayCollection;

        private var filterTileList:List;

        [Bindable]
        private var sourceValues:ArrayCollection;

        private var _targetValues:ArrayCollection;

        private var _reportID:int;
        private var _report:AnalysisDefinition;

        private var _dashboardID:int;

        private var _dashboard:Dashboard;

        private var realValues:ArrayCollection;


        [Bindable(event="dashboardChanged")]
        public function get dashboard():Dashboard {
            return _dashboard;
        }

        public function set dashboard(value:Dashboard):void {
            if (_dashboard == value) return;
            _dashboard = value;
            dispatchEvent(new Event("dashboardChanged"));
        }

        [Bindable(event="targetValuesChanged")]
        public function get targetValues():ArrayCollection {
            return _targetValues;
        }

        public function set targetValues(value:ArrayCollection):void {
            if (_targetValues == value) return;
            _targetValues = value;
            dispatchEvent(new Event("targetValuesChanged"));
        }

        public var selectedItems:ArrayCollection;

        override protected function commitProperties():void {
            super.commitProperties();

        }

        private function sourceChange():void {
            sourceValues.refresh();
        }

        private function includedChange():void {
            targetValues.refresh();
        }

        private var _includedKeyword:String;

        public function get includedKeyword():String {
            return _includedKeyword;
        }

        public function set includedKeyword(value:String):void {
            _includedKeyword = value;
        }

        private var _keyword:String;

        public function get keyword():String {
            return _keyword;
        }

        public function set keyword(value:String):void {
            _keyword = value;
        }

        private function addAll():void {
            var values:Array = sourceValues.toArray();
            for each (var o:* in values) {
                targetValues.addItem(o);
            }
            sourceValues.removeAll();
        }

        private function removeAll():void {
            var values:Array = targetValues.toArray();
            for each (var o:* in values) {
                sourceValues.addItem(o);
            }
            targetValues.removeAll();
        }

        [Bindable]
        private var stackIndex:int = 0;

        private var _typeChangeAllowed:Boolean = true;

        [Bindable(event="typeChangeAllowedChanged")]
        public function get typeChangeAllowed():Boolean {
            return _typeChangeAllowed;
        }

        public function set typeChangeAllowed(value:Boolean):void {
            if (_typeChangeAllowed == value) return;
            _typeChangeAllowed = value;
            dispatchEvent(new Event("typeChangeAllowedChanged"));
        }

        private var filterString:String = "";

        private var selectedFilter:Boolean;

        private function valuesFilterFunction(o:Object):Boolean {
            var result:Boolean = true;
            if (selectedFilter) {
                result = (o.selected as Boolean);
            }
            return result && (o.label as String).toLowerCase().indexOf(filterString.toLowerCase()) != -1;
        }

        private function onCreation(event:FlexEvent):void {
            PopUpUtil.centerPopUp(this);
        }

        private function creationCompleteHandler(event:FlexEvent):void {
            filterTileList = new List();
            filterTileList.id = "solutionGrid";
            filterTileList.itemRenderer = new ClassFactory(FilterStringCheckbox);
            filterTileList.columnWidth = 150;
            filterTileList.rowHeight = 30;
            filterTileList.verticalScrollPolicy = "on";
            filterTileList.columnCount = 1;
            filterTileList.percentWidth = 100;
            filterTileList.maxHeight = 400;
            filterTileList.addEventListener(FlexEvent.CREATION_COMPLETE, onCreation);

            BindingUtils.bindProperty(filterTileList, "dataProvider", this, "targetValues");

            strings = new ArrayCollection();
            var o:Object = new Object();
            for each (var selectedItem:AnalysisItem in selectedItems) {
                o[selectedItem.display] = true;
            }
            for each (var analysisItem:AnalysisItem in analysisItems) {
                strings.addItem(analysisItem);
            }
            strings.filterFunction = filterFunction;
            strings.refresh();
            sourceValues = strings;
            loadedValuesBox.addChild(filterTileList);

            var a:Array = strings.toArray().map(function (obj:Object, a:*, b:*):Object {
                var m:BatchFieldOption = new BatchFieldOption(obj as AnalysisItem, o[obj.display]);
                return m;
            });

            realValues = new ArrayCollection(a);
            targetValues = new ArrayCollection(a);
            targetValues.filterFunction = valuesFilterFunction;
            stackIndex = 1;
        }

        private function addLoadedBox(event:FlexEvent):void {
            loadedValuesBox.addChild(filterTileList);
        }

        private function save():void {
            var a:Array = realValues.toArray().concat();

            a = a.filter(function (obj:Object, a:*, b:*):Boolean {
                return obj.selected;
            });


            var selected:ArrayCollection = new ArrayCollection(a.map(function (obj:Object, a:*, b:*):Object {
                return obj.analysisItem;
            }));

            dispatchEvent(new MultiFieldEvent(selected));
            PopUpManager.removePopUp(this);
        }

        private function filterFunction(item:Object):Boolean {
            if (keyword != null) {
                var string:String = item as String;
                return string.toLowerCase().indexOf(keyword) != -1;
            }
            return true;
        }

        private function targetFilterFunction(item:Object):Boolean {
            if (includedKeyword != null) {
                var string:String = item as String;
                return string.toLowerCase().indexOf(includedKeyword) != -1;
            }
            return true;
        }

        private function filterBox_changeHandler(event:Event):void {
            filterString = filterBox.text;
            filterTileList.dataProvider.refresh();
        }

        private function selectedFilterEvent(event:Event):void {
            selectedFilter = selectedFilterCheckBox.selected;
            filterTileList.dataProvider.refresh();
        }
        ]]>
	</mx:Script>
    <mx:HBox width="100%">
        <mx:Image source="@Embed('../../../../assets/icon-search-black.png')"/>
        <mx:TextInput id="filterBox" width="100%" change="filterBox_changeHandler(event)"/>
    </mx:HBox>
    <mx:HBox>
        <mx:CheckBox id="selectedFilterCheckBox" change="selectedFilterEvent(event)" label="Show only selected values"/>
    </mx:HBox>
    <mx:ViewStack resizeToContent="true" selectedIndex="{stackIndex}" width="100%">
        <mx:Box>
            <mx:ProgressBar label="Loading the available values..." indeterminate="true"/>
        </mx:Box>

        <mx:VBox id="loadedValuesBox" creationComplete="addLoadedBox(event)">

        </mx:VBox>

    </mx:ViewStack>
    <mx:HBox>
        <util:SaveButton label="Save" click="save()"/>
        <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
    </mx:HBox>
</util:EITitleWindow>
