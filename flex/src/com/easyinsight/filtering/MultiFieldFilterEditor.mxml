<?xml version="1.0"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
        creationComplete="setup()" implements="com.easyinsight.filtering.IFilterDetailEditor">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemHandle;
        import com.easyinsight.analysis.AnalysisItemTypes;
        import com.easyinsight.analysis.AnalysisItemWrapper;
        import com.easyinsight.util.PopUpUtil;

        import mx.collections.ArrayCollection;
        import mx.managers.PopUpManager;

        [Bindable]
        private var filterFields:ArrayCollection;

        private function setup():void {
            addEventListener(FieldFilterEvent.REMOVE_FIELD, onRemoveField);
        }

        private function onRemoveField(event:FieldFilterEvent):void {
            filterFields.removeItemAt(filterFields.getItemIndex(event.analysisItem));
        }

        private function addField():void {
            var window:AnalysisItemPickWindow = new AnalysisItemPickWindow();
            window.fields = allFields;
            window.addEventListener(FieldFilterEvent.ADD_FIELD, onAddField, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function onAddField(event:FieldFilterEvent):void {
            filterFields.addItem(event.analysisItem);
        }

        private var analysisItemFilter:MultiFieldFilterDefinition;

        public function makeUpdates():FilterDefinition {
            var handles:ArrayCollection = new ArrayCollection();
            for each (var v:AnalysisItem in filterFields) {
                var handle:AnalysisItemHandle = new AnalysisItemHandle();
                handle.analysisItemID = v.analysisItemID;
                handle.name = v.display;
                handles.addItem(handle);
            }
            analysisItemFilter.alphaSort = alphaSortCheckBox.selected;
            analysisItemFilter.availableHandles = handles;
            analysisItemFilter.availableTags = selectedTags;
            analysisItemFilter.excludeReportFields = excludeReportFieldsCheckBox.selected;
            return analysisItemFilter;
        }

        public function set filterDefinition(filterDefinition:FilterDefinition):void {
            analysisItemFilter = filterDefinition as MultiFieldFilterDefinition;

            //filterFields = analysisItemFilter.availableItems;
        }

        override protected function commitProperties():void {
            super.commitProperties();
            var byAnalysisItemName:Object = new Object();
            for each (var available:AnalysisItem in allFields) {
                byAnalysisItemName[available.display] = available;
            }
            var availables:ArrayCollection = new ArrayCollection();
            for each (var handle:AnalysisItemHandle in analysisItemFilter.availableHandles) {
                var item:AnalysisItem = byAnalysisItemName[handle.name];
                availables.addItem(item);
            }
            filterFields = availables;
            selectedTags = analysisItemFilter.availableTags;
            alphaSort = alphaSortCheckBox.selected;
            excludeReportFields = analysisItemFilter.excludeReportFields;
        }

        [Bindable]
        private var excludeReportFields:Boolean;

        private function configureExplicitFields():void {
            var window:MultiFieldPickWindow = new MultiFieldPickWindow();
            window.selectedItems = filterFields;
            window.analysisItems = allFields;
            window.addEventListener(MultiFieldEvent.MULTI_FIELD_UPDATE, onMultiFieldUpdate, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }


        private function onMultiFieldUpdate(event:MultiFieldEvent):void {
            filterFields = event.fields;
        }

        public function set feedID(feedID:int):void {
        }

        private var allFields:ArrayCollection;

        public function set fields(value:ArrayCollection):void {
            allFields = new ArrayCollection();
            for each (var wrapper:AnalysisItemWrapper in value) {
                allFields.addItem(wrapper.analysisItem);
            }
        }

        private function configureTags():void {
            var window:MultiTagPickWindow = new MultiTagPickWindow();
            window.selectedTags = selectedTags;
            window.addEventListener(MultiFieldEvent.MULTI_FIELD_UPDATE, onMultiTagUpdate, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private var selectedTags:ArrayCollection;

        private function onMultiTagUpdate(event:MultiFieldEvent):void {
            selectedTags = event.fields;
        }

        [Bindable]
        private var alphaSort:Boolean;
        ]]></mx:Script>

    <mx:HBox>
        <mx:Button label="Configure Fields..." click="configureExplicitFields()" styleName="grayButton"/>
        <mx:Button label="Configure Tags..." click="configureTags()" styleName="grayButton"/>
    </mx:HBox>
    <mx:CheckBox label="Exclude Report Fields" id="excludeReportFieldsCheckBox" selected="{excludeReportFields}"/>
    <mx:CheckBox label="Alpha Sort Fields" id="alphaSortCheckBox" selected="{alphaSort}"/>
</mx:VBox>
