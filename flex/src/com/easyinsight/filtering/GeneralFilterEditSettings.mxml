<?xml version="1.0" encoding="utf-8"?>
<util:EISlimWindow xmlns:util="com.easyinsight.util.*" xmlns:mx="http://www.adobe.com/2006/mxml">
    <mx:Script>
		<![CDATA[
        import com.easyinsight.administration.feed.ReportEventsWindow;
        import com.easyinsight.util.PopUpUtil;

        import mx.controls.Alert;
        import mx.managers.PopUpManager;
        import mx.collections.ArrayCollection;

        import com.easyinsight.analysis.AnalysisItem;

        import mx.states.State;

        [Bindable]
        private var _analysisItem:AnalysisItem;
        [Bindable]
        private var _analysisItems:ArrayCollection;

        private var _filterDefinition:FilterDefinition;

        private var _feedID:int;

        [Bindable]
        private var beforeAgg:Boolean;

        [Bindable]
        private var toggle:Boolean;

        [Bindable]
        private var showOnReportView:Boolean;

        [Bindable]
        private var noDashboardOverride:Boolean;

        public var filterMetadata:FilterMetadata;

        private var _detailClass:Class;

        private var filterDetailEditor:IFilterDetailEditor;

        private var rebuild:Boolean = false;

        public var otherFilters:ArrayCollection;

        public function set feedID(value:int):void {
            _feedID = value;
        }

        public function set analysisItems(analysisItems:ArrayCollection):void {
            _analysisItems = analysisItems;
        }

        public function set detailClass(detailClass:Class):void {
            _detailClass = detailClass;
        }

        public function set filterDefinition(filterDefinition:FilterDefinition):void {
            _filterDefinition = filterDefinition;
            _analysisItem = _filterDefinition.field;
            beforeAgg = _filterDefinition.applyBeforeAggregation;
            showOnReportView = _filterDefinition.showOnReportView;
            filterName = _filterDefinition.filterName;
            parentNames = _filterDefinition.parentFilters;
            inverse = _filterDefinition.notCondition;
            parameterFilter = _filterDefinition.templateFilter;
            toggle = _filterDefinition.toggleEnabled;
            role = _filterDefinition.minimumRole;
            fieldFilter = _filterDefinition.fieldChoiceFilterLabel;
            section = _filterDefinition.section;
            customizable = _filterDefinition.customizable;
            childParent = _filterDefinition.childToParentLabel;
            parentChild = _filterDefinition.parentChildLabel;
            noDashboardOverride = _filterDefinition.noDashboardOverride;
            if (_filterDefinition.field != null) {
                filterField = filterDefinition.field.display + " - " + filterDefinition.field.key.createString();
                idData = filterDefinition.field.analysisItemID + " - " + filterDefinition.filterID;
            }
        }

        private function onFilterEdit(event:FilterEditEvent):void {
            _filterDefinition = event.filterDefinition;
            filterDetailBox.removeAllChildren();
            _detailClass = event.editorClass;
            filterDetailEditor = new _detailClass();
            filterDetailEditor.filterDefinition = _filterDefinition;
            filterDetailEditor.addEventListener(FilterEditEvent.FILTER_EDIT, onFilterEdit);
            filterDetailEditor.feedID = _feedID;
            filterDetailBox.addChild(filterDetailEditor as DisplayObject);
            rebuild = true;
        }

        [Bindable]
        private var rules:ArrayCollection;

        override protected function createChildren():void {
            super.createChildren();
            if (_detailClass != null) {
                if (filterDetailEditor == null) {
                    filterDetailEditor = new _detailClass();
                    filterDetailEditor.fields = _analysisItems;
                    filterDetailEditor.filterDefinition = _filterDefinition;
                    filterDetailEditor.addEventListener(FilterEditEvent.FILTER_EDIT, onFilterEdit);
                    filterDetailEditor.feedID = _feedID;
                }
                filterDetailBox.addChild(filterDetailEditor as DisplayObject);
            }
            rules = new ArrayCollection();
            if (_filterDefinition.parentChildLabel != null && _filterDefinition.parentChildLabel != "") {
                var drRule:FilterRuleDefinition = new FilterRuleDefinition();
                drRule.data = { parentChildLabel:_filterDefinition.parentChildLabel};
                drRule.type = FilterRuleDefinition.DASHBOARD_TO_REPORT_LINK;
                drRule.label = "For any report level filter in this dashboard matching the property of " + _filterDefinition.parentChildLabel + ", apply that filter's field to this filter instead.";
                rules.addItem(drRule);
            } else if (_filterDefinition.childToParentLabel != null && _filterDefinition.childToParentLabel != "") {
                var rdRule:FilterRuleDefinition = new FilterRuleDefinition();
                rdRule.data = { parentChildLabel:_filterDefinition.childToParentLabel};
                rdRule.type = FilterRuleDefinition.REPORT_TO_DASHBOARD_LINK;
                rdRule.label = "Apply the field used in this filter to any dashboard or dashboard stack level filter matching the property of " + _filterDefinition.childToParentLabel + ".";
                rules.addItem(rdRule);
            }
            if (filterMetadata != null && filterMetadata.report != null && filterMetadata.report.filterEvents) {
                var events:ArrayCollection = filterMetadata.report.filterEvents[FilterDefinition.getLabelWithEnd(_filterDefinition, _filterDefinition.field, "")];
                if (events != null) {
                    var reportsEventsWindow:ReportEventsWindow = new ReportEventsWindow();
                    reportsEventsWindow.events = events;
                    tabNavigator.addChild(reportsEventsWindow);
                }
            }

            //coreBox.addChildAt(editor, index);
        }

        public function addRule():void {
            var window:AddFilterRuleWindow = new AddFilterRuleWindow();
            window.context = filterMetadata.context;
            window.settings = this;
            window.addEventListener(FilterRuleEvent.RULE_ADDED, onRuleAdded, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function onRuleAdded(event:FilterRuleEvent):void {
            rules.addItem(event.ruleDefinition);
        }

        private var editorState:State;
        private var _fieldEditable:Boolean = true;

        [Bindable]
        private var filterName:String;

        [Bindable]
        private var parameterFilter:Boolean;

        [Bindable]
        private var filterField:String = "";

        public function set fieldEditable(value:Boolean):void {
            _fieldEditable = value;
        }

        private function save():void {
            if (parentNamesInput.text != null && parentNamesInput.text != "") {
                var text:String = parentNamesInput.text;
                var filterNames:Array = text.split(",");
                for each (var filterName:String in filterNames) {
                    var found:Boolean = false;
                    if (otherFilters != null) {
                        for each (var filter:FilterDefinition in otherFilters) {
                            if (filter.filterName != null && filter.filterName == filterName) {
                                found = true;
                                break;
                            }
                        }
                    } else {
                        found = true;
                    }
                    if (!found) {
                        Alert.show("We could not find the referenced parent filter of " + filterName + ".");
                        return;
                    }
                }
            }
            var previousDefinition:FilterDefinition = _filterDefinition;
            if (filterDetailEditor != null) {
                _filterDefinition = filterDetailEditor.makeUpdates();
            }
            /*if (currentState == "editorState") {
             _filterDefinition.field = editor.save(_feedID);
             }*/
            _filterDefinition.applyBeforeAggregation = aggregationCheckbox.selected;
            _filterDefinition.parentFilters = parentNamesInput.text;
            _filterDefinition.notCondition = inverseCheckbox.selected;
            _filterDefinition.showOnReportView = reportViewCheckbox.selected;
            _filterDefinition.filterName = filterNameInput.text;
            _filterDefinition.templateFilter = parameterFilterCheckbox.selected;
            _filterDefinition.toggleEnabled = toggleCheckbox.selected;
            _filterDefinition.minimumRole = int(roleComboBox.selectedItem.data);
            _filterDefinition.section = sectionInput.value;
            _filterDefinition.parentChildLabel = parentChild;
            _filterDefinition.childToParentLabel = childParent;
            _filterDefinition.noDashboardOverride = noDashboardOverrideCheckbox.selected;
            dispatchEvent(new FilterEditEvent(_filterDefinition, previousDefinition, null, rebuild));
            PopUpManager.removePopUp(this);
        }

        private function cancel():void {
            PopUpManager.removePopUp(this);
        }

        [Bindable]
        private var inverse:Boolean;

        [Bindable]
        private var role:int;

        [Bindable]
        private var parentNames:String;

        [Bindable]
        private var fieldFilter:String;

        [Bindable]
        private var section:int;

        [Bindable]
        private var customizable:Boolean;

        public var parentChild:String;
        public var childParent:String;

        private function deleteSelected():void {
            var selected:ArrayCollection = new ArrayCollection();
            for each (var rule:FilterRuleDefinition in rules) {
                if (rule.selected) {
                    selected.addItem(rule);
                }
            }
            for each (var selectedRule:FilterRuleDefinition in selected) {
                selectedRule.clearRule(this);
                rules.removeItemAt(rules.getItemIndex(selectedRule));
            }
        }

        [Bindable]
        private var idData:String;
        ]]>
	</mx:Script>
    <mx:TabNavigator creationPolicy="all" resizeToContent="true" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"
            id="tabNavigator">
        <mx:VBox id="coreBox" label="Main Filter Options">
            <mx:HBox>
                <mx:Form>
                    <mx:FormItem label="Which field is this filter based on?">
                        <mx:Label fontWeight="normal" fontFamily="Lucida Grande" text="{filterField}"/>
                    </mx:FormItem>
                    <mx:FormItem label="IDs">
                        <mx:Label fontWeight="normal" fontFamily="Lucida Grande" text="{idData}"/>
                    </mx:FormItem>
                    <mx:FormItem label="Should this filter be applied before data is aggregated?">
                        <mx:CheckBox selected="{beforeAgg}" id="aggregationCheckbox"/>
                    </mx:FormItem>
                    <mx:FormItem label="Should this filter be shown on the end user view?">
                        <mx:CheckBox selected="{showOnReportView}" id="reportViewCheckbox"/>
                    </mx:FormItem>
                    <mx:FormItem label="What do you want this filter to be labeled as?">
                        <mx:TextInput id="filterNameInput" text="{filterName}"/>
                    </mx:FormItem>
                    <mx:FormItem label="Parent Filter Names:">
                        <mx:TextInput id="parentNamesInput" text="{parentNames}"/>
                    </mx:FormItem>
                    <mx:FormItem label="Should users be able to toggle this filter on or off?">
                        <mx:CheckBox id="toggleCheckbox" selected="{toggle}"/>
                    </mx:FormItem>
                    <mx:FormItem label="Make This a 'Not' Filter:">
                        <mx:CheckBox id="inverseCheckbox" selected="{inverse}"/>
                    </mx:FormItem>
                    <mx:FormItem label="Should this filter ignore any dashboard settings?">
                        <mx:CheckBox id="noDashboardOverrideCheckbox" selected="{noDashboardOverride}"/>
                    </mx:FormItem>
                </mx:Form>
            </mx:HBox>
            <mx:HRule width="100%"/>
            <mx:Box id="filterDetailBox"/>
        </mx:VBox>
        <mx:VBox label="Filter Rules">
            <mx:Text text="Filter rules enable you to connect filters. For example, you can connect a Region and Branch filter so that when the Region filter is updated, the Branch options adjust accordingly." width="300"/>
            <mx:HBox>
                <util:SaveButton label="Add Rule..." click="addRule()" fontSize="12"/>
                <util:SaveButton label="Delete Selected" click="deleteSelected()" fontSize="12"/>
            </mx:HBox>
            <mx:DataGrid dataProvider="{rules}" variableRowHeight="true" headerHeight="0">
                <mx:columns>
                    <mx:DataGridColumn itemRenderer="com.easyinsight.util.GenericGridCheckbox" width="30"
                                       sortable="false"/>
                    <mx:DataGridColumn dataField="label" wordWrap="true" width="600"/>
                </mx:columns>
            </mx:DataGrid>
        </mx:VBox>
        <mx:VBox id="advancedBox" label="Advanced Filter Options">
            <mx:Form>
                <mx:FormItem label="Parameter Filter:">
                    <mx:CheckBox id="parameterFilterCheckbox" selected="{parameterFilter}"/>
                </mx:FormItem>
                <mx:FormItem label="Section:">
                    <mx:NumericStepper id="sectionInput" value="{section}"/>
                </mx:FormItem>
                <mx:FormItem label="Required Role:">
                    <util:SmartComboBox id="roleComboBox" selectedProperty="data" selectedValue="{role}">
                        <util:dataProvider>
                            <mx:ArrayCollection>
                                <mx:Array>
                                    <mx:Object label="None" data="4"/>
                                    <mx:Object label="Owner" data="1"/>
                                    <mx:Object label="Editor" data="2"/>
                                    <mx:Object label="Viewer" data="3"/>
                                </mx:Array>
                            </mx:ArrayCollection>
                        </util:dataProvider>
                    </util:SmartComboBox>
                </mx:FormItem>
            </mx:Form>
        </mx:VBox>
    </mx:TabNavigator>
    <mx:HBox width="100%" horizontalAlign="center">
        <util:SaveButton label="Save" click="save()"/>
        <util:CancelButton label="Cancel" click="cancel()"/>
    </mx:HBox>

</util:EISlimWindow>
