<?xml version="1.0" encoding="utf-8"?>
<util:EISlimWindow xmlns:util="com.easyinsight.util.*" xmlns:mx="http://www.adobe.com/2006/mxml">
	<mx:Script>
		<![CDATA[
        
        import mx.managers.PopUpManager;
        import mx.collections.ArrayCollection;

        import com.easyinsight.analysis.AnalysisItem;
       
        import mx.states.State;

        [Bindable]
        private var _analysisItem:AnalysisItem;
        [Bindable]
        private var _analysisItems:ArrayCollection;

        private var _filterDefinition:FilterDefinition;

        private var _feedID:int;

        [Bindable]
        private var beforeAgg:Boolean;

        [Bindable]
        private var toggle:Boolean;

        [Bindable]
        private var showOnReportView:Boolean;

        private var _detailClass:Class;

        private var filterDetailEditor:IFilterDetailEditor;

        private var rebuild:Boolean = false;

        public function set feedID(value:int):void {
            _feedID = value;
        }

        public function set analysisItems(analysisItems:ArrayCollection):void {
            _analysisItems = analysisItems;
        }

        public function set detailClass(detailClass:Class):void {
            _detailClass = detailClass;
        }

        public function set filterDefinition(filterDefinition:FilterDefinition):void {
            _filterDefinition = filterDefinition;
            _analysisItem = _filterDefinition.field;
            beforeAgg = _filterDefinition.applyBeforeAggregation;
            showOnReportView = _filterDefinition.showOnReportView;
            filterName = _filterDefinition.filterName;
            parentNames = _filterDefinition.parentFilters;
            inverse = _filterDefinition.notCondition;
            parameterFilter = _filterDefinition.templateFilter;
            toggle = _filterDefinition.toggleEnabled;
            role = _filterDefinition.minimumRole;
            fieldFilter = _filterDefinition.fieldChoiceFilterLabel;
            section = _filterDefinition.section;
            if (_filterDefinition.field != null) {
                filterField = filterDefinition.field.display + " - " + filterDefinition.field.key.createString();
            }
        }

        private function onFilterEdit(event:FilterEditEvent):void {
            _filterDefinition = event.filterDefinition;
            filterDetailBox.removeAllChildren();
            _detailClass = event.editorClass;
            filterDetailEditor = new _detailClass();
            filterDetailEditor.filterDefinition = _filterDefinition;
            filterDetailEditor.addEventListener(FilterEditEvent.FILTER_EDIT, onFilterEdit);
            filterDetailEditor.feedID = _feedID;
            filterDetailBox.addChild(filterDetailEditor as DisplayObject);
            rebuild = true;
        }

        override protected function createChildren():void {
            super.createChildren();
            if (_detailClass != null) {
                if (filterDetailEditor == null) {
                    filterDetailEditor = new _detailClass();
                    filterDetailEditor.fields = _analysisItems;
                    filterDetailEditor.filterDefinition = _filterDefinition;
                    filterDetailEditor.addEventListener(FilterEditEvent.FILTER_EDIT, onFilterEdit);
                    filterDetailEditor.feedID = _feedID;
                }
                filterDetailBox.addChild(filterDetailEditor as DisplayObject);
            }


            //coreBox.addChildAt(editor, index);
        }

        private var editorState:State;
        private var _fieldEditable:Boolean = true;

        [Bindable]
        private var filterName:String;

        [Bindable]
        private var parameterFilter:Boolean;

        [Bindable]
        private var filterField:String = "";

        public function set fieldEditable(value:Boolean):void {
            _fieldEditable = value;
        }

        private function save():void {
            var previousDefinition:FilterDefinition = _filterDefinition;
            if (filterDetailEditor != null) {
                _filterDefinition = filterDetailEditor.makeUpdates();
            }
            /*if (currentState == "editorState") {
                _filterDefinition.field = editor.save(_feedID);
            }*/
            _filterDefinition.applyBeforeAggregation = aggregationCheckbox.selected;
            _filterDefinition.parentFilters = parentNamesInput.text;
            _filterDefinition.notCondition = inverseCheckbox.selected;
            _filterDefinition.showOnReportView = reportViewCheckbox.selected;
            _filterDefinition.filterName = filterNameInput.text;
            _filterDefinition.templateFilter = parameterFilterCheckbox.selected;
            _filterDefinition.toggleEnabled = toggleCheckbox.selected;
            _filterDefinition.minimumRole = int(roleComboBox.selectedItem.data);
            _filterDefinition.fieldChoiceFilterLabel = fieldFilterInput.text;
            _filterDefinition.section = sectionInput.value;
            dispatchEvent(new FilterEditEvent(_filterDefinition, previousDefinition, null, rebuild));
            PopUpManager.removePopUp(this);
        }

        private function cancel():void {
            PopUpManager.removePopUp(this);
        }

        [Bindable]
        private var inverse:Boolean;

        [Bindable]
        private var role:int;

        [Bindable]
        private var parentNames:String;

        [Bindable]
        private var fieldFilter:String;

        [Bindable]
        private var section:int;
		]]>
	</mx:Script>
	<mx:VBox id="coreBox">
        <mx:HBox>
            <mx:Form>
                <mx:FormItem label="Filter Field:">
                    <mx:Label fontWeight="normal" fontFamily="Lucida Grande" text="{filterField}"/>
                </mx:FormItem>
                <mx:FormItem label="Row Level:">
                    <mx:CheckBox selected="{beforeAgg}" id="aggregationCheckbox"/>
                </mx:FormItem>
                <mx:FormItem label="Show on Report View:">
                    <mx:CheckBox selected="{showOnReportView}" id="reportViewCheckbox"/>
                </mx:FormItem>
                <mx:FormItem label="Filter Name:">
                    <mx:TextInput id="filterNameInput" text="{filterName}"/>
                </mx:FormItem>
                <mx:FormItem label="Parent Filter Names:">
                    <mx:TextInput id="parentNamesInput" text="{parentNames}"/>
                </mx:FormItem>
                <mx:FormItem label="Section:">
                    <mx:NumericStepper id="sectionInput" value="{section}"/>
                </mx:FormItem>
            </mx:Form>
            <mx:Form>
                <mx:FormItem label="Make This a 'Not' Filter:">
                    <mx:CheckBox id="inverseCheckbox" selected="{inverse}"/>
                </mx:FormItem>
                <mx:FormItem label="Parameter Filter:">
                    <mx:CheckBox id="parameterFilterCheckbox" selected="{parameterFilter}"/>
                </mx:FormItem>
                <mx:FormItem label="Hide Toggle:">
                    <mx:CheckBox id="toggleCheckbox" selected="{toggle}"/>
                </mx:FormItem>
                <mx:FormItem label="Required Role:">
                    <util:SmartComboBox id="roleComboBox" selectedProperty="data" selectedValue="{role}">
                        <util:dataProvider>
                            <mx:ArrayCollection>
                                <mx:Array>
                                    <mx:Object label="None" data="4"/>
                                    <mx:Object label="Owner" data="1"/>
                                    <mx:Object label="Editor" data="2"/>
                                    <mx:Object label="Viewer" data="3"/>
                                </mx:Array>
                            </mx:ArrayCollection>
                        </util:dataProvider>
                    </util:SmartComboBox>
                </mx:FormItem>
                <mx:FormItem label="Use Field Choice Filter:">
                    <mx:TextInput id="fieldFilterInput" text="{fieldFilter}"/>
                </mx:FormItem>
            </mx:Form>
        </mx:HBox>
        <mx:HRule width="100%"/>
        <mx:Box id="filterDetailBox"/>
        <mx:HRule width="100%"/>
		<mx:HBox width="100%" horizontalAlign="center">
			<util:SaveButton label="Save" click="save()"/>
			<util:CancelButton label="Cancel" click="cancel()"/>
		</mx:HBox>	
	</mx:VBox>
	
</util:EISlimWindow>
