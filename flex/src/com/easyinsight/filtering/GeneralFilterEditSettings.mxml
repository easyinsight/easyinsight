<?xml version="1.0" encoding="utf-8"?>
<util:EITitleWindow xmlns:util="com.easyinsight.util.*" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:analysis="com.easyinsight.analysis.*">
	<mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.AnalysisItemEditor;

        import com.easyinsight.util.PopUpUtil;

        import mx.events.FlexEvent;
        import mx.managers.PopUpManager;
        import mx.collections.ArrayCollection;

        import com.easyinsight.analysis.AnalysisItem;

        import mx.states.AddChild;
        import mx.states.State;

        [Bindable]
        private var _analysisItem:AnalysisItem;
        [Bindable]
        private var _analysisItems:ArrayCollection;

        private var _filterDefinition:FilterDefinition;

        private var _feedID:int;

        [Bindable]
        private var beforeAgg:Boolean;

        private var editor:AnalysisItemEditor;

        private var _detailClass:Class;

        private var filterDetailEditor:IFilterDetailEditor;

        private var rebuild:Boolean = false;

        public function set feedID(value:int):void {
            _feedID = value;
        }

        public function set analysisItems(analysisItems:ArrayCollection):void {
            _analysisItems = analysisItems;
        }

        public function set detailClass(detailClass:Class):void {
            _detailClass = detailClass;
        }

        public function set filterDefinition(filterDefinition:FilterDefinition):void {
            _filterDefinition = filterDefinition;
            _analysisItem = _filterDefinition.field;
            beforeAgg = _filterDefinition.applyBeforeAggregation;

        }

        private function onFilterEdit(event:FilterEditEvent):void {
            var previousDefinition:FilterDefinition = _filterDefinition;
            _filterDefinition = event.filterDefinition;
            coreBox.removeChildAt(1);
            _detailClass = event.editorClass;
            filterDetailEditor = new _detailClass();
            filterDetailEditor.filterDefinition = _filterDefinition;
            filterDetailEditor.addEventListener(FilterEditEvent.FILTER_EDIT, onFilterEdit);
            filterDetailEditor.feedID = _feedID;
            coreBox.addChildAt(filterDetailEditor as DisplayObject, 1);
            rebuild = true;
        }

        override protected function createChildren():void {
            super.createChildren();
            if (_detailClass != null) {
                if (filterDetailEditor == null) {
                    filterDetailEditor = new _detailClass();
                    filterDetailEditor.fields = _analysisItems;
                    filterDetailEditor.filterDefinition = _filterDefinition;
                    filterDetailEditor.addEventListener(FilterEditEvent.FILTER_EDIT, onFilterEdit);
                    filterDetailEditor.feedID = _feedID;
                }
                filterDetailBox.addChild(filterDetailEditor as DisplayObject);
            }

            if (!_fieldEditable) {
                coreBox.removeChild(fieldBox);    
            }

            if (editor == null) {
                editorState = new State();
                editorState.name = "editorState";
                var addOp:AddChild = new AddChild();
                editor = new AnalysisItemEditor();
                editor.analysisItem = _analysisItem;
                editor.analysisItems = _analysisItems;
                editor.fieldNameEditable = false;
                addOp.target = editor;
                addOp.relativeTo = changeFieldBox;
                editorState.overrides = [ addOp ];
                states = [ editorState ];
            }
            //coreBox.addChildAt(editor, index);
        }

        private var editorState:State;
        private var _fieldEditable:Boolean = true;


        public function set fieldEditable(value:Boolean):void {
            _fieldEditable = value;
        }

        private function save():void {
            var previousDefinition:FilterDefinition = _filterDefinition;
            _filterDefinition = filterDetailEditor.makeUpdates();
            if (currentState == "editorState") {
                _filterDefinition.field = editor.save(_feedID);
            }
            _filterDefinition.applyBeforeAggregation = aggregationCheckbox.selected;

            dispatchEvent(new FilterEditEvent(_filterDefinition, previousDefinition, null, rebuild));
            PopUpManager.removePopUp(this);
        }

        private function cancel():void {
            PopUpManager.removePopUp(this);
        }

        private function changeField():void {
            if (currentState == "" || currentState == null) {
                changeButton.label = "Hide Changes to Filter Field:";
                currentState = "editorState";
            } else {
                
                changeButton.label = "Change the Filter Field:";
                currentState = "";
            }
        }
		]]>
	</mx:Script>
	<mx:VBox id="coreBox" styleName="TitleWindowContents">
		<mx:CheckBox label="Apply Before Aggregation" selected="{beforeAgg}" id="aggregationCheckbox"/>
        <mx:Box id="filterDetailBox"/>
        <mx:VBox id="fieldBox">
            <mx:Button label="Change the Filter Field:" click="changeField()" id="changeButton"/>
            <mx:Box id="changeFieldBox"/>
        </mx:VBox>
		<mx:HBox width="100%" horizontalAlign="center">
			<mx:Button label="Save" click="save()"/>
			<mx:Button label="Cancel" click="cancel()"/>
		</mx:HBox>	
	</mx:VBox>
	
</util:EITitleWindow>
