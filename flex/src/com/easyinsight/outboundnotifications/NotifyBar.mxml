<?xml version="1.0" ?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" paddingLeft="5" paddingTop="5" top="0" paddingRight="5" paddingBottom="5" creationComplete="onCreationComplete();">
    <mx:Script><![CDATA[
        import com.easyinsight.framework.LoginEvent;
        import com.easyinsight.framework.User;
        import com.easyinsight.listing.AsyncWindowEvent;

        import mx.binding.utils.BindingUtils;
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.managers.PopUpManager;
        import mx.messaging.events.MessageEvent;
        import mx.messaging.events.MessageFaultEvent;

        private var asyncWindow:AsyncNotifyWindow;

        private function onLogin(event:LoginEvent):void {
            userUploadService.getOngoingTasks.send();
            eventListener.subscribe();
        }

        private function onLogout(event:LoginEvent):void {
            eventListener.unsubscribe();
        }

        private function onCreationComplete():void {
            addEventListener(AsyncWindowEvent.LAUNCH_ASYNC_WINDOW, onAsyncWindow);
            User.getEventNotifier().addEventListener(LoginEvent.LOGIN, onLogin);
            User.getEventNotifier().addEventListener(LoginEvent.LOGOUT, onLogout);
        }

        private function handleFault(event:mx.messaging.events.MessageFaultEvent):void {
            Alert.show(event.message.faultString);
        }

        private function handleMessage(event:mx.messaging.events.MessageEvent):void {
            var info:RefreshEventInfo = event.message.body as RefreshEventInfo;
            if (info.action == RefreshEventInfo.ADD)
                _asyncData.addItem(info);
            else {
                for (var i:int = 0; i < _asyncData.length; i++) {
                    var currentEvent:RefreshEventInfo = _asyncData.getItemAt(i) as RefreshEventInfo;
                    if (currentEvent.taskId == info.taskId) {
                        _asyncData.setItemAt(info, i);
                    }
                }
            }
        }


        private function onAsyncWindow(event:AsyncWindowEvent):void {
            if (asyncWindow == null) {
                asyncWindow = new AsyncNotifyWindow();
                BindingUtils.bindProperty(asyncWindow, "data", this, "asyncData");
            }
            PopUpManager.addPopUp(asyncWindow, this, false);
        }

        [Bindable]
        private var _asyncData:ArrayCollection;

        private function tasksRetrieved():void {
            _asyncData = userUploadService.getOngoingTasks.lastResult as ArrayCollection;
        }

        [Bindable(event="_asyncDataChanged")]
        public function get asyncData():ArrayCollection {
            return _asyncData;
        }

        public function set asyncData(val:ArrayCollection):void {
            _asyncData = val;
            dispatchEvent(new Event("_asyncDataChanged"));
        }]]></mx:Script>
    <mx:Consumer id="eventListener" destination="generalNotifications" message="handleMessage(event)" fault="handleFault(event)" />
    <mx:RemoteObject id="userUploadService" destination="userUpload">
        <mx:method name="getOngoingTasks" result="tasksRetrieved()"/>
    </mx:RemoteObject>
    <mx:Button label="Async" click="dispatchEvent(new AsyncWindowEvent());" />
    <mx:Button label="TODO"  />
    <mx:Button label="Collaboration" />
</mx:HBox>