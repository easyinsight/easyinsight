<?xml version="1.0" ?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:account="com.easyinsight.account.*" horizontalAlign="center"
         width="100%" creationComplete="initHandlers()"
         paddingLeft="15"
         paddingTop="15" paddingBottom="15" paddingRight="15">
    <mx:Metadata>
        [Event(name="cancel", type="flash.events.Event")]
        [Event(name="loginEvent2", type="com.easyinsight.framework.LoginEvent")]
    </mx:Metadata>
    <mx:Script>
		<![CDATA[
        import com.easyinsight.framework.LoginComponent;
        import com.easyinsight.framework.LoginEvent;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.ProgressAlert;

        import mx.managers.PopUpManager;
        import mx.validators.Validator;

        import com.easyinsight.framework.UserTransferObject;

        private var user:UserTransferObject;

        private function showTerms():void {
            var window:TermsOfService = new TermsOfService();
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function showPrivacy():void {
            var window:PrivacyPolicy = new PrivacyPolicy();
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function validatedUser():void {
            var result:String = creationService.doesUserExist.lastResult as String;
            if (result == null) {
                var account:Account = new Account();
                account.accountType = _accountType;
                account.name = accountName.text;
                ProgressAlert.alert(this, "Creating account...", null, userService.createAccount);
                userService.createAccount(user, account, password.text, null);
            } else {
                if (result == "A user already exists by that name.") {
                    userName.errorString = result;
                    userName.setFocus();
                    userName.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
                } else if (result == "That email address is already used.") {
                    email.errorString = "That email address is already used.";
                    email.setFocus();
                    email.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
                } else {
                    accountName.errorString = result;
                    accountName.setFocus();
                    accountName.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
                }
            }
        }

        private function createdAccount():void {
            var c:LoginComponent = new LoginComponent();
            //User.getEventNotifier().addEventListener(LoginEvent.LOGIN, onLogin);
            c.addEventListener(LoginEvent.LOGIN, onLogin);
            c.signon(user.userName, password.text);
        }

        private function onLogin(event:LoginEvent):void {
            dispatchEvent(event);
        }

        private var _accountType:int;

        public function set accountType(value:int):void {
            _accountType = value;
        }

        private function initHandlers():void {
            addEventListener(KeyboardEvent.KEY_UP, onKey);
        }

        private function onKey(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.ENTER) {
                createAccount();
            }
        }

        public function createAccount():void {
            var userNameResults:Array = Validator.validateAll([userNameValidator]);
            if (userNameResults.length > 0) {
                userName.setFocus();
                userName.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
                return;
            }
            if (password.text != confirmPassword.text) {
                password.errorString = "Your passwords do not match.";
                password.setFocus();
                password.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
            } else if (!tosCheckbox.selected) {
                tosCheckbox.errorString = "You must accept the terms of service.";
                tosCheckbox.setFocus();
                tosCheckbox.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
            } else {
                user = new UserTransferObject();
                user.userName = userName.text;
                user.firstName = firstName.text;
                user.name = fullName.text;
                user.email = email.text;
                user.accountAdmin = true;
                user.optInEmail = optInCheckbox.selected;
                ProgressAlert.alert(this, "Validating the account...", null, creationService.doesUserExist);
                creationService.doesUserExist.send(userName.text, email.text, accountName.text);
            }
        }

        public function cancel():void {
            dispatchEvent(new Event("cancel"));
        }
        ]]>
    </mx:Script>
    <mx:VBox verticalGap="0" borderThickness="1" borderColor="#333333" borderStyle="solid" dropShadowEnabled="true"
            backgroundColor="#333333" cornerRadius="15" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
        <mx:Form color="#FFF3F3" fontFamily="Lucida Grande" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
            <mx:FormItem label="Company Name: " direction="horizontal">
                <mx:TextInput id="accountName" color="#000000" width="300"/>
            </mx:FormItem>
            <mx:FormItem label="User Name:" direction="horizontal">
                <mx:TextInput id="userName" fontFamily="Lucida Grande" fontWeight="normal" color="#000000" width="300"/>
            </mx:FormItem>
            <mx:FormItem label="Password:">
                <mx:TextInput id="password" displayAsPassword="true" fontFamily="Lucida Grande" fontWeight="normal" color="#000000" width="300"/>
            </mx:FormItem>
            <mx:FormItem label="Confirm Password:">
                <mx:TextInput id="confirmPassword" displayAsPassword="true" fontFamily="Lucida Grande"
                              fontWeight="normal" color="#000000" width="300"/>
            </mx:FormItem>
            <mx:FormItem label="Administrator First Name:">
                <mx:TextInput id="firstName" fontFamily="Lucida Grande" fontWeight="normal" color="#000000" width="300"/>
            </mx:FormItem>
            <mx:FormItem label="Administrator Last Name:">
                <mx:TextInput id="fullName" fontFamily="Lucida Grande" fontWeight="normal" color="#000000" width="300"/>
            </mx:FormItem>
            <mx:FormItem label="Email Address:" direction="horizontal">
                <mx:TextInput id="email" fontFamily="Lucida Grande" fontWeight="normal" color="#000000" width="300"/>
                <mx:LinkButton label="View Privacy Policy" click="showPrivacy()" textDecoration="underline"/>
            </mx:FormItem>
            <mx:FormItem label="Send Me Occasional Updates About Easy Insight" direction="horizontal">
                <mx:CheckBox id="optInCheckbox" selected="true"/>
            </mx:FormItem>
            <mx:FormItem label="I Accept the Terms of Service" direction="horizontal">
                <mx:CheckBox id="tosCheckbox"/>
                <mx:LinkButton label="View Terms of Service" click="showTerms()" textDecoration="underline"/>
            </mx:FormItem>
            <mx:FormItem>
                <mx:HBox>
                    <mx:Button label="Create" click="createAccount()" color="#000000"/>
                    <mx:LinkButton label="Cancel" click="cancel()" textDecoration="underline"/>
                </mx:HBox>
            </mx:FormItem>
        </mx:Form>
    </mx:VBox>
    <mx:StringValidator source="{userName}" property="text" id="userNameValidator" minLength="3" maxLength="20"/>
    <mx:StringValidator source="{password}" property="text" id="passwordValidator" minLength="8" maxLength="20"/>
    <mx:StringValidator source="{fullName}" property="text" id="fullNameValidator" minLength="2" maxLength="40"/>
    <mx:EmailValidator source="{email}" property="text" id="emailValidator"/>
    <mx:RemoteObject id="creationService" destination="accountAdmin">
        <mx:method name="doesUserExist" result="validatedUser()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="userService" destination="login">
        <mx:method name="createAccount" result="createdAccount()"/>
    </mx:RemoteObject>
</mx:VBox>