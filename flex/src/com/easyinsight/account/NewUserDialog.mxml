<?xml version="1.0" encoding="utf-8"?>
<util:EISlimWindow xmlns:util="com.easyinsight.util.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" creationComplete="initHandlers()">
    <util:states>
        <mx:State name="initialCreate">
            <mx:AddChild relativeTo="{baseInfoForm}">
                <mx:FormItem label="Require Password Change:" labelWidth="260">
                    <mx:CheckBox id="requirePasswordChangeCheckbox" selected="true"/>
                </mx:FormItem>
            </mx:AddChild>
            <mx:RemoveChild target="{convertButton}"/>
        </mx:State>
        <mx:State name="initialCreateNoEmail">
            <mx:RemoveChild target="{convertButton}"/>
        </mx:State>
    </util:states>
	<mx:Metadata>
		[Event(name="refreshAccount", type="com.easyinsight.account.RefreshAccountEvent")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
        import com.easyinsight.framework.UserTransferObject;
        import com.easyinsight.preferences.Persona;
        import com.easyinsight.preferences.UserDLS;
        import com.easyinsight.preferences.UserDLSConfig;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.ProgressAlert;

        import mx.binding.utils.BindingUtils;

        import mx.collections.ArrayCollection;
        import mx.containers.VBox;
        import mx.controls.Alert;
        import mx.core.Application;
        import mx.validators.Validator;
        import mx.managers.PopUpManager;

        private var validators:Array;

        [Bindable]
        private var userName:String;
        [Bindable]
        private var email:String;
        [Bindable]
        private var fullName:String;
        [Bindable]
        private var firstName:String;
        [Bindable]
        private var userTitle:String;

        public var sendEmail:Boolean;

        private var _accountAdmin:Boolean;

        [Bindable(event="accountAdminChanged")]
        public function get accountAdmin():Boolean {
            return _accountAdmin;
        }

        public function set accountAdmin(value:Boolean):void {
            if (_accountAdmin == value) return;
            _accountAdmin = value;
            dispatchEvent(new Event("accountAdminChanged"));
        }

        [Bindable]
        private var newsletterSelected:Boolean;
        private var userID:int;

        [Bindable]
        private var createLabel:String = "Create User";

        private var lastLoginDate:Date;

        public function set user(userTransferObject:UserTransferObject):void {
            this.userID = userTransferObject.userID;
            this.userName = userTransferObject.userName;
            this.email = userTransferObject.email;
            this.fullName = userTransferObject.name;
            this.accountAdmin = userTransferObject.accountAdmin;
            this.firstName = userTransferObject.firstName;
            this.personaID = userTransferObject.personaID;
            this.newsletterSelected = userTransferObject.optInEmail;
            this.viewID = userTransferObject.fixedDashboardID;
            this.autoRefresh = userTransferObject.autoRefreshReports;
            this.invoiceRecipient = userTransferObject.invoiceRecipient;
            this.lastLoginDate = userTransferObject.lastLoginDate;
            this.reportVisibility = userTransferObject.testAccountVisible;
            this.selectedDateFormat = String(userTransferObject.dateFormat);
            this.selectedLocale = userTransferObject.userLocale;
            this.selectedDefaultCurrency = String(userTransferObject.currency);
            if (userTransferObject.dateFormat == 0) {
                this.selectedDateFormat = "8";
            }
            createLabel = "Update User";
        }

        private function created():void {
            var userCreationResponse:UserCreationResponse = creationService.addUserToAccount.lastResult as UserCreationResponse;
            if (userCreationResponse.successful) {
                dispatchEvent(new RefreshAccountEvent());
                if (!sendEmail) {
                    var window:AddUserURLWindow = new AddUserURLWindow();
                    window.url = userCreationResponse.url;
                    PopUpManager.addPopUp(window, DisplayObject(Application.application), true);
                    PopUpUtil.centerPopUp(window);
                }
                PopUpManager.removePopUp(this);
            } else {
                Alert.show(userCreationResponse.failureMessage);
            }
        }

        private function updated():void {
            dispatchEvent(new RefreshAccountEvent());
            PopUpManager.removePopUp(this);
        }

        private function initHandlers():void {
            if (!sendEmail) {
                resendLabel = "Recreate Invite Link";
            }
            if (userID == 0) {
                if (sendEmail) {
                    currentState = "initialCreate";
                } else {
                    currentState = "initialCreateNoEmail";
                }
                resendButton.parent.removeChild(resendButton);
            } else if (lastLoginDate != null) {
                resendButton.parent.removeChild(resendButton);
            }
            BindingUtils.bindProperty(accountAdminCheckbox, "selected", this, "accountAdmin");
            validators = [ emailValidator, userNameValidator, fullNameValidator ];
            dashboardService.getDashboards.send();
            //if (User.getInstance().getAccountType() >= Account.PRO) {
            showPersonaOption = true;
            ProgressAlert.alert(this, "Retrieving details...", null, preferencesService.getPersonas, preferencesService.getUserDLS);
            preferencesService.getPersonas.send();
            preferencesService.getUserDLS.send(userID, personaID);
            //}
        }

        private function onPersonaChange(event:Event):void {
            var obj:Object = personaComboBox.selectedItem;
            if (obj is Persona) {
                var personaID:int = Persona(obj).personaID;
                ProgressAlert.alert(this, "Retrieving information...", null, preferencesService.getUserDLS);
                preferencesService.getUserDLS.send(userID, personaID);
            } else {
                dlsList = new ArrayCollection();
                if (dlsVBox != null && tabNavigator.contains(dlsVBox)) {
                    tabNavigator.removeChild(dlsVBox);
                }
                dlsVBox = null;
            }
        }

        private function save():void {
            var results:Array = Validator.validateAll(validators);
            if (results.length > 0) {
                Alert.show("There are one or more problems with the user information you specified.");
            } else {
                var user:UserTransferObject = new UserTransferObject();
                user.analyst = true;
                user.userID = userID;
                user.email = emailInput.text;
                user.userName = userNameInput.text;
                user.name = fullNameInput.text;
                user.firstName = firstNameInput.text;
                user.invoiceRecipient = invoiceCheckbox.selected;
                user.testAccountVisible = reportVisibilityCheckbox.selected;
                user.dateFormat = int(dateFormatBox.selectedItem.data);
                user.userLocale = localeBox.selectedItem.data;
                user.currency = int(defaultCurrencyBox.selectedItem.data);
                if (showPersonaOption) {
                    var persona:Object = personaComboBox.selectedItem;
                    if (persona != Persona.EMPTY_PERSONA) {
                        user.personaID = persona.personaID;
                    }
                }
                user.accountAdmin = accountAdminCheckbox.selected;
                if (userID == 0) {
                    ProgressAlert.alert(this, "Adding user to account...", null, creationService.addUserToAccount);
                    creationService.addUserToAccount.send(user, dlsList, !sendEmail || requirePasswordChangeCheckbox.selected, sendEmail);
                } else {
                    ProgressAlert.alert(this, "Updating user...", null, creationService.updateUser);
                    creationService.updateUser.send(user, dlsList);
                }
            }
        }

        private function cancel():void {
            PopUpManager.removePopUp(this);
        }

        [Bindable]
        private var showPersonaOption:Boolean;

        [Bindable]
        private var personas:ArrayCollection;

        private function gotPersonas():void {
            var personas:ArrayCollection = preferencesService.getPersonas.lastResult as ArrayCollection;
            personas.addItemAt(Persona.EMPTY_PERSONA, 0);
            this.personas = personas;
        }

        [Bindable]
        private var availableViews:ArrayCollection;

        private function gotDashboards():void {
            var views:ArrayCollection = dashboardService.getDashboards.lastResult as ArrayCollection;
            views.addItemAt({ id: 0, name: "[ No Fixed View ]"}, 0);
            availableViews = views;
        }

        private var dlsList:ArrayCollection;

        private function gotUserDLS():void {
            dlsList = preferencesService.getUserDLS.lastResult as ArrayCollection;
            if (dlsList.length > 0) {
                if (dlsVBox != null) {
                    dlsVBox.removeAllChildren();
                } else {
                    dlsVBox = new VBox();
                    dlsVBox.label = "Data Level Security";
                    tabNavigator.addChild(dlsVBox);
                }
                for each (var userDLS:UserDLS in dlsList) {
                    var config:UserDLSConfig = new UserDLSConfig();
                    config.userDLS = userDLS;
                    dlsVBox.addChild(config);
                }
            } else {
                if (dlsVBox != null) {
                    tabNavigator.removeChild(dlsVBox);
                    dlsVBox = null;
                }
            }
        }

        [Bindable]
        private var welcomeMessage:String;

        [Bindable]
        private var autoRefresh:Boolean;

        [Bindable]
        private var invoiceRecipient:Boolean;

        private var dlsVBox:VBox;

        [Bindable]
        private var viewID:int;

        [Bindable]
        private var personaID:int;

        private function convertToViewer():void {
            creationService.convertUser.send(userID, false);
        }

        private function converted():void {
            var result:String = creationService.convertUser.lastResult as String;
            if (result == null) {
                dispatchEvent(new RefreshAccountEvent());
                PopUpManager.removePopUp(this);
            } else {
                Alert.show(result);
            }
        }

        private function resendInvitation():void {
            if (sendEmail) {
                ProgressAlert.alert(this, "Resending the invitation email...", "The invitation email should have been resent.", creationService.resendInvite);
                creationService.resendInvite.send(userID);
            } else {
                creationService.regenerateInviteLink.send(userID);
            }
        }

        private function resent():void {

        }

        private function regenerated():void {
            var userCreationResponse:UserCreationResponse = creationService.regenerateInviteLink.lastResult as UserCreationResponse;
            var window:AddUserURLWindow = new AddUserURLWindow();
            window.url = userCreationResponse.url;
            PopUpManager.addPopUp(window, DisplayObject(Application.application), true);
            PopUpUtil.centerPopUp(window);
        }

        [Bindable]
        private var resendLabel:String = "Resend Invitation";

        [Bindable]
        private var reportVisibility:Boolean = true;

        [Bindable]
        private var selectedDefaultCurrency:String;

        [Bindable]
        private var selectedLocale:String;

        [Bindable]
        private var selectedDateFormat:String = "6";
        ]]>
	</mx:Script>
    <mx:RemoteObject destination="dashboardService" id="dashboardService">
        <mx:method name="getDashboards" result="gotDashboards()"/>
    </mx:RemoteObject>
    <mx:RemoteObject destination="preferencesService" id="preferencesService">
        <mx:method name="getPersonas" result="gotPersonas()"/>
        <mx:method name="getUserDLS" result="gotUserDLS()"/>
    </mx:RemoteObject>
    <mx:TabNavigator id="tabNavigator" resizeToContent="true" creationPolicy="all">
        <mx:VBox label="Base Info" paddingLeft="5">
            <mx:Text text="This user is a Designer. He or she can create and modify reports and dashboards." width="540"
                     selectable="false"/>
            <mx:Form  id="baseInfoForm">
                <mx:FormItem label="User ID:" direction="horizontal" labelWidth="260">
                    <mx:TextInput id="userNameInput" text="{userName}" width="400"/>
                </mx:FormItem>
                <mx:FormItem label="First Name:" direction="horizontal" labelWidth="260">
                    <mx:TextInput id="firstNameInput" text="{firstName}" width="400"/>
                </mx:FormItem>
                <mx:FormItem label="Last Name:" direction="horizontal" labelWidth="260">
                    <mx:TextInput id="fullNameInput" text="{fullName}" width="400"/>
                </mx:FormItem>
                <mx:FormItem label="Email Address:" direction="horizontal" labelWidth="260">
                    <mx:TextInput id="emailInput" text="{email}" width="400"/>
                </mx:FormItem>
                <mx:FormItem label="Account Administrator:" labelWidth="260">
                    <mx:CheckBox id="accountAdminCheckbox" selected="{accountAdmin}"/>
                </mx:FormItem>
                <mx:FormItem label="User Can See All Reports and Dashboards:" labelWidth="260">
                    <mx:CheckBox id="reportVisibilityCheckbox" selected="{reportVisibility}"/>
                </mx:FormItem>
                <mx:FormItem label="Invoice Recipient:" labelWidth="260">
                    <mx:CheckBox id="invoiceCheckbox" selected="{invoiceRecipient}"/>
                </mx:FormItem>
                <mx:FormItem label="Send Newsletter to User:" labelWidth="260">
                    <mx:CheckBox id="newsletterCheckbox" selected="{newsletterSelected}"/>
                </mx:FormItem>
            </mx:Form>
            <mx:HRule width="100%"/>
            <mx:Text text="Personas allow you to restrict users to only see certain subsets of data. You can configure Personas through the Persona section of the Account page."
                     width="540" selectable="false"/>
            <mx:Form>
                <mx:FormItem label="Persona:" visible="{showPersonaOption}" labelWidth="260">
                    <util:PersonaItemComboBox dataProvider="{personas}" labelField="name" id="personaComboBox" selectedProperty="personaID"
                                              selectedValue="{personaID}" change="onPersonaChange(event)"/>
                </mx:FormItem>
            </mx:Form>
        </mx:VBox>
        <mx:VBox label="Display Settings">
            <mx:Form>
                <mx:FormItem label="Currency:">
                    <util:SmartComboBox id="defaultCurrencyBox" selectedProperty="data" selectedValue="{selectedDefaultCurrency}" labelField="label">
                        <mx:ArrayCollection>
                            <mx:Array>
                                <mx:Object data="0" label="Use Account Default"/>
                                <mx:Object data="1" label="USD"/>
                                <mx:Object data="2" label="EUR"/>
                                <mx:Object data="3" label="GBP"/>
                            </mx:Array>
                        </mx:ArrayCollection>
                    </util:SmartComboBox>
                </mx:FormItem>
                <mx:FormItem label="Locale:">
                    <util:SmartComboBox id="localeBox" selectedProperty="data" selectedValue="{selectedLocale}" labelField="label">
                        <mx:ArrayCollection>
                            <mx:Array>
                                <mx:Object data="0" label="Use Account Default"/>
                                <mx:Object label="US/America" data="EN"/>
                                <mx:Object label="Spain" data="ES"/>
                            </mx:Array>
                        </mx:ArrayCollection>
                    </util:SmartComboBox>
                </mx:FormItem>
                <mx:FormItem label="Date Format:">
                    <util:SmartComboBox id="dateFormatBox" selectedProperty="data" selectedValue="{selectedDateFormat}" labelField="label">
                        <mx:ArrayCollection>
                            <mx:Array>
                                <mx:Object label="Use Account Default" data="6"/>
                                <mx:Object label="MM/DD/YYYY (04/26/2010)" data="8"/>
                                <mx:Object label="YYYY-MM-DD (2010-26-04)" data="1"/>
                                <mx:Object label="DD-MM-YYYY (26-04-2010)" data="2"/>
                                <mx:Object label="DD/MM/YYYY (26/04/2010)" data="3"/>
                                <mx:Object label="DD.MM.YYYY (26.04.2010)" data="4"/>
                            </mx:Array>
                        </mx:ArrayCollection>
                    </util:SmartComboBox>
                </mx:FormItem>
            </mx:Form>
        </mx:VBox>
    </mx:TabNavigator>
    <mx:HBox width="100%" horizontalAlign="center">
        <util:SaveButton label="{createLabel}" click="save()"/>
        <util:SaveButton label="{resendLabel}" click="resendInvitation()" id="resendButton"/>
        <util:SaveButton label="Convert to Viewer" click="convertToViewer()" id="convertButton"/>
        <util:CancelButton label="Cancel" click="cancel()"/>
    </mx:HBox>
	<mx:StringValidator source="{userNameInput}" property="text" id="userNameValidator" minLength="3" maxLength="60"/>
	<mx:StringValidator source="{fullNameInput}" property="text" id="fullNameValidator" minLength="1" maxLength="60"/>
	<mx:EmailValidator source="{emailInput}" property="text" id="emailValidator"/>
	<mx:RemoteObject id="creationService" destination="accountAdmin">
		<mx:method name="addUserToAccount" result="created()"/>		
		<mx:method name="updateUser" result="updated()"/>
        <mx:method name="convertUser" result="converted()"/>
        <mx:method name="resendInvite" result="resent()"/>
        <mx:method name="regenerateInviteLink" result="regenerated()"/>
	</mx:RemoteObject>
</util:EISlimWindow>
