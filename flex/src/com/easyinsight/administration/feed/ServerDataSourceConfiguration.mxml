<?xml version="1.0"?>
<feed:DataSourceWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*"
                       label="Additional Sources" paddingTop="10"
                       xmlns:feed="com.easyinsight.administration.feed.*">
    <mx:Script><![CDATA[
        import com.easyinsight.datasources.CompositeServerDataSource;
        import com.easyinsight.datasources.DataSourceType;
        import com.easyinsight.feedassembly.CompositeFeedConnection;
        import com.easyinsight.feedassembly.CompositeFeedNode;
        import com.easyinsight.feedassembly.DSPickJoinWindow;
        import com.easyinsight.feedassembly.JoinSelectionEvent;
        import com.easyinsight.listing.DataSourceEvent;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.util.PopUpUtil;

        import mx.collections.ArrayCollection;
        import mx.managers.PopUpManager;

        [Bindable]
        private var dataSources:ArrayCollection;

        private var allSources:ArrayCollection;

        [Bindable]
        private var connections:ArrayCollection;

        // You can build complex custom fields with addon reports, create report based connections against those reports, then add those fields into the data source to drag and drop into reports the same way you work with any other fields on the data source.

        private function addDataSource():void {
            var window:AddDataSourceWindow = new AddDataSourceWindow();
            window.dataSourceID = dataSource.dataFeedID;
            window.addEventListener(DataSourceEvent.ADD_DATA_SOURCE, onAdd);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function addConnection():void {
            var window:DSPickJoinWindow = new DSPickJoinWindow();
            window.dataSources = allSources;
            window.addEventListener(JoinSelectionEvent.JOIN_SELECTION, joinsSelected, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function joinsSelected(event:JoinSelectionEvent):void {
            var edges:ArrayCollection = event.addedJoins;
            for each (var compositeFeedConnection:CompositeFeedConnection in edges) {
                connections.addItem(compositeFeedConnection);
            }
        }

        private function onAdd(event:DataSourceEvent):void {
            var node:CompositeFeedNode = new CompositeFeedNode();
            node.dataFeedID = event.descriptor.id;
            node.dataSourceName = event.descriptor.name;
            dataSources.addItem(node);
            var ds:DataSourceDescriptor = new DataSourceDescriptor();
            ds.name = event.descriptor.name;
            ds.id = event.descriptor.id;
            ds.dataSourceType = event.descriptor.dataSourceType;
            allSources.addItem(ds);
        }

        private function removeSelected():void {
            var selected:ArrayCollection = new ArrayCollection();
            for each (var o:CompositeFeedNode in CompositeServerDataSource(dataSource).compositeFeedNodes) {
                if (o.selected) {
                    selected.addItem(o);
                }
            }
            for each (var s:CompositeFeedNode in selected) {
                dataSources.removeItemAt(dataSources.getItemIndex(s));
            }
        }

        private function removeSelectedConnections():void {
            var selected:ArrayCollection = new ArrayCollection();
            for each (var o:CompositeFeedConnection in connections) {
                if (o.selected) {
                    selected.addItem(o);
                }
            }
            for each (var s:CompositeFeedConnection in selected) {
                connections.removeItemAt(connections.getItemIndex(s));
            }
        }

        private function save():void {
            var toRemove:ArrayCollection = new ArrayCollection();
            for each (var node:CompositeFeedNode in CompositeServerDataSource(dataSource).compositeFeedNodes) {
                if (node.dataSourceType == DataSourceType.DISTINCT_CACHED || node.dataSourceType == DataSourceType.STATIC || node.dataSourceType == DataSourceType.EMPTY ||
                        node.dataSourceType == DataSourceType.GOOGLE || node.dataSourceType == DataSourceType.INFUSIONSOFT_REPORT) {
                    if (!dataSources.contains(node)) {
                        toRemove.addItem(node);
                    }
                }
            }
            for each (var r:CompositeFeedNode in toRemove) {
                CompositeServerDataSource(dataSource).compositeFeedNodes.removeItemAt(CompositeServerDataSource(dataSource).compositeFeedNodes.getItemIndex(r));
            }
            for each (var n:CompositeFeedNode in dataSources) {
                if (!CompositeServerDataSource(dataSource).compositeFeedNodes.contains(n)) {
                    CompositeServerDataSource(dataSource).compositeFeedNodes.addItem(n);
                }
            }
            CompositeServerDataSource(dataSource).addonConnections = connections;
            saveSource();
        }

        private function updated():void {
            PopUpManager.removePopUp(this);
        }

        override protected function gotSource():void {
            super.gotSource();
            var nonIntrinsicNodes:ArrayCollection = new ArrayCollection();
            allSources = new ArrayCollection();
            for each (var node:CompositeFeedNode in CompositeServerDataSource(dataSource).compositeFeedNodes) {
                if (node.dataSourceType == DataSourceType.DISTINCT_CACHED || node.dataSourceType == DataSourceType.STATIC || node.dataSourceType == DataSourceType.EMPTY ||
                        node.dataSourceType == DataSourceType.GOOGLE || node.dataSourceType == DataSourceType.INFUSIONSOFT_REPORT) {
                    nonIntrinsicNodes.addItem(node);
                }
                var ds:DataSourceDescriptor = new DataSourceDescriptor();
                ds.name = node.dataSourceName;
                ds.id = node.dataFeedID;
                ds.dataSourceType = node.dataSourceType;
                allSources.addItem(ds);
            }
            dataSources = nonIntrinsicNodes;
            connections = (CompositeServerDataSource(dataSource).addonConnections == null) ? new ArrayCollection() : CompositeServerDataSource(dataSource).addonConnections;
        }
        ]]></mx:Script>
    <mx:Text width="450" text="This window enables you to add report, spreadsheet and flat file sources. If you want to combine additional sources, for example combining your Basecamp data with your Zendesk data, you'll need to create a dedicated composite data source instead."/>
    <mx:HRule width="100%"/>
    <mx:HBox>
        <util:SaveButton label="Add Data Source..." click="addDataSource()" fontSize="12"/>
        <util:SaveButton label="Removed Selected" click="removeSelected()" fontSize="12"/>
    </mx:HBox>
    <mx:DataGrid id="dataSourceGrid" dataProvider="{dataSources}">
        <mx:columns>
            <mx:DataGridColumn headerText="" itemRenderer="com.easyinsight.util.GenericGridCheckbox" sortable="false" width="30"/>
            <mx:DataGridColumn headerText="Name" dataField="dataSourceName" width="400"/>
        </mx:columns>
    </mx:DataGrid>
    <mx:HBox>
        <util:SaveButton label="Add Connection..." click="addConnection()" fontSize="12"/>
        <util:SaveButton label="Removed Selected" click="removeSelectedConnections()" fontSize="12"/>
    </mx:HBox>
    <mx:DataGrid id="connectionGrid" dataProvider="{connections}">
        <mx:columns>
            <mx:DataGridColumn headerText="" itemRenderer="com.easyinsight.util.GenericGridCheckbox" sortable="false" width="30"/>
            <mx:DataGridColumn headerText="Name" dataField="display" width="400"/>
        </mx:columns>
    </mx:DataGrid>
    <mx:HBox width="100%" horizontalAlign="center">
        <util:SaveButton label="Save" click="save()"/>
        <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
    </mx:HBox>
</feed:DataSourceWindow>
