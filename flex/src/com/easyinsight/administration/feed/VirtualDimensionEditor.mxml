<?xml version="1.0" ?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:feed="com.easyinsight.administration.feed.*"
        width="100%" height="100%">
    <mx:states>
        <mx:State name="configured">
            <mx:AddChild relativeTo="{coreBox}">
                <mx:VBox>
                    <mx:HBox>
                        <mx:Button label="Add Grouping" click="addGrouping()"/>
                    </mx:HBox>
                    <mx:HBox>
                        <mx:VBox>
                            <mx:Label text="Default Grouping"/>
                            <feed:VirtualTransformEditor id="defaultEditor" data="{defaultTransform}"/>
                        </mx:VBox>
                        <mx:TileList itemRenderer="com.easyinsight.administration.feed.VirtualTransformEditor"
                                     dataProvider="{transforms}"/>
                    </mx:HBox>
                </mx:VBox>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDimension;

        import com.easyinsight.analysis.AnalysisDimensionResultMetadata;
        import com.easyinsight.analysis.NamedKey;

        import com.easyinsight.analysis.Value;

        import com.easyinsight.framework.CredentialsCache;

        import mx.collections.ArrayCollection;

        public function save():void {
            if (_dimension != null) {
                defaultEditor.save();
                for each (var transform:VirtualTransform in transforms) {
                    transform.getEditor().save();
                }
                _dimension.virtualTransforms = transforms;
            }
        }

        [Bindable]
        private var dimensionName:String;
        [Bindable]
        private var transforms:ArrayCollection;

        private var _dimension:VirtualDimension;

        [Bindable]
        private var defaultTransform:VirtualTransform;

        private var _dataSourceID:int;


        public function set dataSourceID(val:int):void {
            _dataSourceID = val;
        }

        public function set dimension(val:VirtualDimension):void {
            if (val != null) {
            }
            _dimension = val;
            invalidateProperties();
        }

        private function gotMetadata():void {
            var metadata:AnalysisDimensionResultMetadata = dataService.getAnalysisItemMetadata.lastResult as AnalysisDimensionResultMetadata;
            var values:ArrayCollection = metadata.values;
            var stringValues:ArrayCollection = new ArrayCollection();
            for each (var valueObj:Value in values) {
                stringValues.addItem(String(valueObj.getValue()));
            }
            for each (var transform:VirtualTransform in _dimension.virtualTransforms) {
                for each (var value:String in transform.stringValues) {
                    var index:int = stringValues.getItemIndex(value);
                    if (index == -1) {
                        // it's an old value, remove it
                        transform.stringValues.removeItemAt(transform.stringValues.getItemIndex(value));
                    } else {
                        stringValues.removeItemAt(index);
                    }
                }
            }
            _dimension.defaultTransform.stringValues = stringValues;
            defaultTransform = _dimension.defaultTransform;
        }


        private function addGrouping():void {
            var transform:VirtualTransform = new VirtualTransform();
            transform.transformDimension = new AnalysisDimension();
            transform.transformDimension.virtualDimension = _dimension;
            var key:NamedKey = new NamedKey();
            key.name = "";
            transform.transformDimension.key = key;
            transform.transformDimension.group = true;
            transforms.addItem(transform);
        }

        override protected function commitProperties():void {
            super.commitProperties();
            if (_dimension != null) {
                currentState = "configured";
                dimensionName = _dimension.name;
                transforms = _dimension.virtualTransforms;
                //defaultTransform = _dimension.defaultTransform;
                dataService.getAnalysisItemMetadata.send(_dataSourceID, _dimension.baseDimension, CredentialsCache.getCache().createCredentials());
            }
        }]]></mx:Script>
    <mx:RemoteObject id="dataService" destination="data">
        <mx:method name="getAnalysisItemMetadata" result="gotMetadata()"/>
    </mx:RemoteObject>
    <mx:VBox id="coreBox" width="100%" height="100%">
    </mx:VBox>
</mx:Canvas>