<?xml version="1.0" ?>
<feed:DataSourceWindow xmlns:mx="http://www.adobe.com/2006/mxml"
                       xmlns:analysis="com.easyinsight.analysis.*" xmlns:util="com.easyinsight.util.*"
                       creationComplete="setupListeners()" height="100%" width="100%" label="Field Setup"
                       xmlns:feed="com.easyinsight.administration.feed.*">
    <mx:Metadata>
        [Event(name="disableControls", type="flash.events.Event")]
        [Event(name="enableControls", type="flash.events.Event")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import com.easyinsight.AnalysisItemDeleteEvent;
        import com.easyinsight.analysis.AnalysisChangedEvent;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemCopyEvent;
        import com.easyinsight.analysis.AnalysisItemEditEvent;
        import com.easyinsight.analysis.AnalysisItemEditWindow;
        import com.easyinsight.analysis.AnalysisItemNode;
        import com.easyinsight.analysis.AnalysisItemTypeRenderer;
        import com.easyinsight.analysis.AnalysisItemWrapper;
        import com.easyinsight.analysis.IAnalysisItemEditor;
        import com.easyinsight.analysis.Key;
        import com.easyinsight.analysis.NamedKey;
        import com.easyinsight.util.PopUpUtil;

        import mx.binding.utils.ChangeWatcher;
        import mx.collections.ArrayCollection;
        import mx.collections.ICollectionView;
        import mx.collections.IHierarchicalCollectionView;
        import mx.events.CollectionEvent;
        import mx.events.FlexEvent;
        import mx.managers.PopUpManager;

        [Bindable]
        private var loaded:Boolean = false;

        private var _allFields:ArrayCollection = new ArrayCollection();

        private var _dataSourceID:int;

        private var _kpiSource:Boolean;

        public function set kpiSource(value:Boolean):void {
            _kpiSource = value;
        }

        private var openEditor:IAnalysisItemEditor;

        [Bindable(event="allFieldsChanged")]
        public function get allFields():ArrayCollection {
            return _allFields;
        }

        public function set allFields(value:ArrayCollection):void {
            if (_allFields == value) return;
            _allFields = value;
            dispatchEvent(new Event("allFieldsChanged"));
        }

        private var fieldWatcher:ChangeWatcher;

        private function onEdit(event:AnalysisItemCopyEvent):void {
            var wrapper:AnalysisItemWrapper = event.wrapper;
            toFocus(wrapper.analysisItem, itemEdited, wrapper);
        }

        private function itemEdited(event:AnalysisItemEditEvent):void {
            event.previousItemWrapper.analysisItem = event.analysisItem;
            event.previousItemWrapper.displayName = event.analysisItem.display;
            event.previousItemWrapper.invalidateItem();
            dispatchEvent(new AnalysisChangedEvent());
            allFields.dispatchEvent(new CollectionEvent(CollectionEvent.COLLECTION_CHANGE));
        }

        private function toFocus(analysisItem:AnalysisItem, handler:Function, wrapper:AnalysisItemWrapper = null):void {
            var analysisItemEditor:AnalysisItemEditWindow = new AnalysisItemEditWindow();
            analysisItemEditor.fullEditable = true;
            analysisItemEditor.dataSourceID = _dataSourceID;
            analysisItemEditor.originalWrapper = wrapper;
            analysisItemEditor.analysisItems = this.allFields;
            analysisItemEditor.analysisItem = analysisItem;
            //analysisItemEditor.kpiSource = _kpiSource;
            PopUpManager.addPopUp(analysisItemEditor, this, true);
            PopUpUtil.centerPopUp(analysisItemEditor);
            analysisItemEditor.addEventListener(AnalysisItemEditEvent.ANALYSIS_ITEM_EDIT, handler, false, 0, true);
        }

        private function onCreation(event:FlexEvent):void {
            dispatchEvent(new Event("enableControls"));
        }

        private function setupListeners():void {
            addEventListener(AnalysisItemDeleteEvent.ANALYSIS_ITEM_DELETE, onDelete);
            addEventListener(AnalysisItemCopyEvent.ITEM_COPY, onCopy);
            addEventListener(AnalysisItemCopyEvent.ITEM_EDIT, onEdit);
        }

        private function onDelete(event:AnalysisItemDeleteEvent):void {
            allFields.removeItemAt(allFields.getItemIndex(event.analysisItem));
        }

        override protected function gotSource():void {
            var fields:ArrayCollection = new ArrayCollection();
            for each (var f:AnalysisItem in dataSource.fields) {
                if (f.concrete) {
                    fields.addItem(new AnalysisItemWrapper(new AnalysisItemNode(f)));
                }
            }
            allFields = fields;
            loaded = true;
        }

        private function findName(baseName:String):Key {
            var index:int = 0;
            var valid:Boolean = false;
            while (!valid) {
                var found:Boolean = false;
                for each (var wrapper:AnalysisItemWrapper in allFields) {
                    if (wrapper.keyName == baseName) {
                        found = true;
                    }
                }
                if (found) {
                    index++;
                    baseName = baseName + " " + index;
                } else {
                    valid = true;
                }
            }
            var key:NamedKey = new NamedKey();
            key.name = baseName;
            return key;
        }

        private function itemCopied(event:AnalysisItemEditEvent):void {
            var aNode:AnalysisItemNode = new AnalysisItemNode();
            aNode.analysisItem = event.analysisItem;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(aNode);

            allFields.addItem(wrapper);
            dispatchEvent(new AnalysisChangedEvent());
        }

        private function itemAdded(event:AnalysisItemEditEvent):void {
            if (event.analysisItem.key is NamedKey) {
                var key:NamedKey = event.analysisItem.key as NamedKey;
                key.name = event.analysisItem.display;
            }
            var aNode:AnalysisItemNode = new AnalysisItemNode();
            aNode.analysisItem = event.analysisItem;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(aNode);

            allFields.addItem(wrapper);
            dispatchEvent(new AnalysisChangedEvent());
        }

        private function onAdd(event:AddBlankFieldEvent):void {
            var aNode:AnalysisItemNode = new AnalysisItemNode();
            aNode.analysisItem = event.item;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(aNode);
            allFields.addItem(wrapper);
            dispatchEvent(new AnalysisChangedEvent());
        }

        private function addField():void {
            var window:BlankDataSourceWindow = new BlankDataSourceWindow();
            window.fields = allFields;
            window.addEventListener(AddBlankFieldEvent.BLANK_ADD, onAdd, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function onCopy(event:AnalysisItemCopyEvent):void {
            event.analysisItem.concrete = false;
            toFocus(event.analysisItem, itemCopied);
        }

        private var _concreteFieldsEditable:Boolean;


        [Bindable(event="concreteFieldsEditableChanged")]
        public function get concreteFieldsEditable():Boolean {
            return _concreteFieldsEditable;
        }

        public function set concreteFieldsEditable(value:Boolean):void {
            if (_concreteFieldsEditable == value) return;
            _concreteFieldsEditable = value;
            dispatchEvent(new Event("concreteFieldsEditableChanged"));
        }

        private static function iconFunction(item:Object):Class {
            var wrapper:AnalysisItemWrapper = item as AnalysisItemWrapper;
            return AnalysisItemTypeRenderer.getImageClass(wrapper);
        }

        private function filterFunction(item:Object):Boolean {
            var a:AnalysisItemWrapper = item as AnalysisItemWrapper;
            if (a == null) return false;

            var b:IHierarchicalCollectionView = (fieldGrid.dataProvider as IHierarchicalCollectionView);
            if (b == null) return true;
            var children:ICollectionView = b.getChildren(a);
            if (a.analysisItem == null) {
                children.filterFunction = filterFunction;
                children.refresh();
            }
            return children.length > 0 || a.displayName.toLowerCase().indexOf(searchText.toLowerCase()) != -1;

        }

        private var searchText:String = "";

        private function changeFilter(event:Event):void {
            searchText = searchBox.text;
            fieldGrid.dataProvider.refresh();
        }

        private function save():void {
            var nc:ArrayCollection = new ArrayCollection();
            for each (var nonConcrete:AnalysisItem in dataSource.fields) {
                if (!nonConcrete.concrete) {
                    nc.addItem(nonConcrete);
                }
            }
            var items:ArrayCollection = new ArrayCollection();
            for each (var a:AnalysisItemWrapper in allFields) {
                items.addItem(a.analysisItem);
            }
            //var items:ArrayCollection = new ArrayCollection(allFields.toArray());
            for each (var n:AnalysisItem in nc) {
                items.addItem(n);
            }
            dataSource.fields = items;
            saveSource();
        }
        ]]></mx:Script>
    <analysis:BaseEditorFieldControlsFactory fields="{allFields}" id="controlsFactory"
                                             concreteFieldsEditable="true" fullEditable="true"/>
    <mx:VBox height="100%" width="100%" horizontalAlign="center" paddingTop="5">
        <mx:HBox paddingLeft="5">
            <mx:Button icon="@Embed(source='../../../../../assets/text_formula.png')"
                       toolTip="Add a Field..." click="addField()" styleName="grayButton"
                       label="Add Field..." fontSize="14"/>
        </mx:HBox>
        <mx:HBox paddingLeft="5" width="500" height="24">
            <mx:Canvas width="480">
                <mx:TextInput id="searchBox" paddingLeft="10" change="changeFilter(event)" width="480" borderStyle="solid" cornerRadius="12" />
                <mx:Image source="@Embed(source='../../../../../assets/icon-search-black.png')" x="454" y="2" />
            </mx:Canvas>
        </mx:HBox>
        <mx:AdvancedDataGrid height="100%" dragEnabled="true" iconFunction="iconFunction"
                             id="fieldGrid" backgroundColor="#FFFFFF"
                             alternatingItemColors="#FFFFFF" fontSize="12" rowHeight="28"
                             showHeaders="false" dataProvider="{allFields}">

            <mx:columns>
                <mx:AdvancedDataGridColumn headerText="" dataField="displayName" width="500"/>
                <mx:AdvancedDataGridColumn headerText="" dataField="displayName"
                                           width="150" itemRenderer="{controlsFactory}"
                                           sortable="false"/>
            </mx:columns>
        </mx:AdvancedDataGrid>
    </mx:VBox>
    <mx:HBox>
        <util:SaveButton label="Save" click="save()"/>
        <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
    </mx:HBox>
</feed:DataSourceWindow>