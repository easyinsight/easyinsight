<?xml version="1.0"?>
<util:EISlimWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:listing="com.easyinsight.listing.*"
                   creationComplete="onCreation()" xmlns:util="com.easyinsight.util.*">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.DerivedKey;
        import com.easyinsight.feedassembly.CompositeFeedDefinition;
        import com.easyinsight.feedassembly.CompositeFeedNode;
        import com.easyinsight.listing.Tag;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.util.ProgressAlert;
        import com.easyinsight.util.TagSelectionEvent;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.events.CollectionEvent;
        import mx.events.MenuEvent;
        import mx.managers.PopUpManager;

        [Bindable]
        private var fields:ArrayCollection;

        [Bindable]
        private var tagOptions:ArrayCollection;

        public var dataSourceID:int;

        private function onCreation():void {
            ProgressAlert.alert(this, "Retrieving...", null, feedService.getAnalysisItemConfigurations, feedService.getFieldTags, feedService.getFeedDefinition);
            feedService.getAnalysisItemConfigurations.send(dataSourceID);
            feedService.getFieldTags.send();
            feedService.getFeedDefinition.send(dataSourceID);
        }

        private function gotDataSource():void {
            var ds:FeedDefinitionData = feedService.getFeedDefinition.lastResult as FeedDefinitionData;
            var dataSources:ArrayCollection = new ArrayCollection();
            if (ds is CompositeFeedDefinition) {
                var all:Object = { name: "All" };
                dataSources.addItem(all);
                var c:CompositeFeedDefinition = ds as CompositeFeedDefinition;
                for each (var n:CompositeFeedNode in c.compositeFeedNodes) {
                    var dsd:DataSourceDescriptor = new DataSourceDescriptor();
                    dsd.id = n.dataFeedID;
                    dsd.name = n.dataSourceName;
                    dataSources.addItem(dsd);
                }
            }
            this.dataSources = dataSources;
        }

        [Bindable]
        private var filteredFields:ArrayCollection;

        private function gotConfigurations():void {

            fields = feedService.getAnalysisItemConfigurations.lastResult as ArrayCollection;
            var filteredFields:ArrayCollection = new ArrayCollection(fields.toArray());
            filteredFields.filterFunction = valuesFilterFunction;
            filteredFields.refresh();
            this.filteredFields = filteredFields;
        }

        private function gotTags():void {
            var tags:ArrayCollection = feedService.getFieldTags.lastResult as ArrayCollection;
            var tagOptions:ArrayCollection = new ArrayCollection();
            for each (var opTag:Tag in tags) {
                tagOptions.addItem({label: "Add tag - " + opTag.name + " - to selected", data: opTag, op: "add"});
                tagOptions.addItem({label: "Remove tag - " + opTag.name + " - from selected", data: opTag, op: "remove"});
            }
            this.tagOptions = tagOptions;
            this.tags = tags;
        }

        private function onTagItemClick(event:MenuEvent):void {
            var op:String = event.item.op;
            if (op == "add") {
                var addTag:Tag = event.item.data as Tag;
                applyTag(addTag);
            } else if (op == "remove") {
                var removeTag:Tag = event.item.data as Tag;
                dropTag(removeTag);
            }
        }

        private function applyTag(addTag:Tag):void {
            var selected:ArrayCollection = new ArrayCollection();


            for each (var desc:AnalysisItemConfiguration in fields) {
                if (desc.selected) {
                    selected.addItem(desc);
                }
            }

            if (selected.length == 0) {
                Alert.show("You must select at least one field to tag.");
            } else {
                for each (var descToSelect:AnalysisItemConfiguration in fields) {
                    if (descToSelect.selected) {
                        descToSelect.tags.addItem(addTag);
                    }
                }
                dataGrid.dataProvider.dispatchEvent( new CollectionEvent(CollectionEvent.COLLECTION_CHANGE));
            }
        }

        private function dropTag(addTag:Tag):void {
            var selected:ArrayCollection = new ArrayCollection();
            for each (var desc:AnalysisItemConfiguration in fields) {
                if (desc.selected) {
                    selected.addItem(desc);
                }
            }
            if (selected.length == 0) {
                Alert.show("You must select at least one field to untag.");
            } else {
                for each (var descToSelect:AnalysisItemConfiguration in fields) {
                    if (descToSelect.selected) {
                        for each (var t:Tag in descToSelect.tags) {
                            if (t.id == addTag.id) {
                                descToSelect.tags.removeItemAt(descToSelect.tags.getItemIndex(t));
                                break;
                            }
                        }
                    }
                }
                dataGrid.dataProvider.dispatchEvent( new CollectionEvent(CollectionEvent.COLLECTION_CHANGE));
            }
        }

        private function saved():void {
            PopUpManager.removePopUp(this);
        }

        private var filterString:String = "";

        private function filterBox_changeHandler(event:Event):void {
            filterString = filterBox.text;
            filteredFields.refresh();
        }

        private function valuesFilterFunction(o:Object):Boolean {
            var result:Boolean = true;
            if (result) {
                result = tagBox.filterObject(o);
            }
            if (result && dataSourceBox.selectedItem != null) {
                var dsd:DataSourceDescriptor = dataSourceBox.selectedItem as DataSourceDescriptor;
                if (dsd != null) {
                    var found:Boolean = false;
                    var c:AnalysisItemConfiguration = o as AnalysisItemConfiguration;
                    if (c.analysisItem.key is DerivedKey) {
                        var key:DerivedKey = DerivedKey(c.analysisItem.key);
                        if (key.feedID == dsd.id) {
                            found = true;
                        }
                    }
                    if (!found) {
                        result = false;
                    }
                }
            }
            return result && (o.display as String).toLowerCase().indexOf(filterString.toLowerCase()) != -1;
        }

        private function save():void {
            ProgressAlert.alert(this, "Saving...", null, feedService.updateAnalysisItemConfigurations);
            feedService.updateAnalysisItemConfigurations.send(fields, dataSourceID);
        }

        [Bindable]
        private var tags:ArrayCollection;

        private function onTagSelect(event:TagSelectionEvent):void {
            filteredFields.refresh();
        }

        [Bindable]
        private var dataSources:ArrayCollection;

        private function selectAll():void {
            if (allSelected) {
                allSelected = false;
                for each (var s:AnalysisItemConfiguration in filteredFields) {
                    s.selected = false;
                }
            } else {
                allSelected = true;
                for each (var s1:AnalysisItemConfiguration in filteredFields) {
                    s1.selected = true;
                }
            }
        }

        private var allSelected:Boolean = false;
        ]]></mx:Script>
    <mx:Style>
        .myCustomPopUpStyleName {
            fontSize: 12;
            fontFamily: "Lucida Grande";
            textAlign: left;
            dropShadowEnabled: false;
            borderStyle: solid;
            borderThickness: 1;
            cornerRadius: 8;
        }
    </mx:Style>
    <mx:RemoteObject destination="feeds" id="feedService">
        <mx:method name="getAnalysisItemConfigurations" result="gotConfigurations()"/>
        <mx:method name="updateAnalysisItemConfigurations" result="saved()"/>
        <mx:method name="getFieldTags" result="gotTags()"/>
        <mx:method name="getFeedDefinition" result="gotDataSource()"/>
    </mx:RemoteObject>
    <mx:Text maxWidth="500" text="You can use these tags to reduce the fields shown in the report editor, set up multi field filters based on these tags, and use the tags to generally manage your fields."/>
    <mx:HBox width="100%">
        <mx:Image source="@Embed('../../../../../assets/icon-search-black.png')"/>
        <mx:TextInput id="filterBox" width="100%" change="filterBox_changeHandler(event)"/>
        <mx:ComboBox id="dataSourceBox" dataProvider="{dataSources}" labelField="name" change="filteredFields.refresh()"/>
    </mx:HBox>
    <util:TagBox tags="{tags}" onTagSelect="onTagSelect(event)" id="tagBox" width="100%"/>
    <mx:HBox>
        <mx:Button label="Select All" click="selectAll()"/>
        <listing:ArghButton label="Tag..." styleName="grayButton" itemClick="onTagItemClick(event)" width="160" id="tagButton"
                            dataProvider="{tagOptions}" labelField="label" openAlways="true" popUpStyleName="myCustomPopUpStyleName"/>
    </mx:HBox>

    <mx:DataGrid dataProvider="{filteredFields}" wordWrap="true" variableRowHeight="true" height="350" id="dataGrid">
        <mx:columns>
            <mx:DataGridColumn itemRenderer="com.easyinsight.util.GenericGridCheckbox" width="30" headerText=""/>
            <mx:DataGridColumn headerText="Field" dataField="display" width="400"/>
            <mx:DataGridColumn headerText="Tags"  width="200" wordWrap="true" dataField="tagString"/>
        </mx:columns>
    </mx:DataGrid>
    <mx:HBox width="100%" horizontalAlign="center">
        <util:SaveButton label="Save" click="save()"/>
        <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
    </mx:HBox>
</util:EISlimWindow>
