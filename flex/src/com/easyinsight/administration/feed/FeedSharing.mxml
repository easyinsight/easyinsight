<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="creationComplete()">
	<mx:Script>
		<![CDATA[
        import com.easyinsight.util.PopUpUtil;

        import mx.controls.Alert;
        import mx.core.UIComponent;
        import mx.managers.PopUpManager;

        import com.easyinsight.customupload.UploadPolicy;

        import mx.collections.ArrayCollection;

        [Bindable]
        [Embed(source="../../../../../assets/user_add.png")]
        public var addUserIcon:Class;

        [Bindable]
        [Embed(source="../../../../../assets/users4_add_x32.png")]
        public var addGroupIcon:Class;

        [Bindable]
        private var _activated:Boolean;

        [Bindable]
        private var owners:ArrayCollection;
        [Bindable]
        private var viewers:ArrayCollection;
        [Bindable]
        private var anyoneCanView:Boolean;
        [Bindable]
        private var marketplaceViewable:Boolean;

        private const SHARE_ERROR:String = "You cannot share data until you have activated your account.";

        private function creationComplete():void {
            initHandlers();
            var components:Array = [ anyoneCheckbox, marketplaceCheckbox, addOwnerGroupButton, addOwnerUserButton, addViewerUserButton, addViewerGroupButton ];
            if(!_activated) {
                for each (var component:UIComponent in components) {
                    component.enabled = false;
                    component.toolTip = SHARE_ERROR;
                }
                ownersGrid.dragMoveEnabled = false;
                viewersGrid.dragMoveEnabled = false;
            }
        }

        private function initHandlers():void {
            addEventListener(UserLinkEvent.DELETE_USER_LINK, deletedOwner);
        }

        private function deletedOwner(event:UserLinkEvent):void {
            if (owners.length == 1) {
                Alert.show("A data source must have at least one owner.");
            } else {
                var index:int = owners.getItemIndex(event.userStub);
                if (index == -1) {
                    viewers.removeItemAt(viewers.getItemIndex(event.userStub));
                } else {
                    owners.removeItemAt(index);
                }
            }
        }

        public function set uploadPolicy(uploadPolicy:UploadPolicy):void {
            owners = uploadPolicy.owners;
            viewers = uploadPolicy.viewers;
            anyoneCanView = uploadPolicy.publiclyVisible;
            if (anyoneCanView && _activated) {
                marketplaceCheckbox.enabled = true;
                marketplaceViewable = uploadPolicy.marketplaceVisible;
            }
        }

        public function get uploadPolicy():UploadPolicy {
            var uploadPolicy:UploadPolicy = new UploadPolicy();
            uploadPolicy.owners = ownersGrid.dataProvider as ArrayCollection;
            uploadPolicy.viewers = viewersGrid.dataProvider as ArrayCollection;
            uploadPolicy.publiclyVisible = anyoneCheckbox.selected;
            uploadPolicy.marketplaceVisible = marketplaceCheckbox.selected;
            return uploadPolicy;
        }

        private function addGroupOwner():void {
            var window:AddGroupToFeedWindow = AddGroupToFeedWindow(PopUpManager.createPopUp(this, AddGroupToFeedWindow, true));
            window.addEventListener(GroupLinkEvent.ADD_GROUP_LINK, onGroupOwnerAdd);
            PopUpUtil.centerPopUp(window);
        }

        private function onGroupOwnerAdd(event:GroupLinkEvent):void {
            owners.addItem(event.groupDescriptor);
        }

        private function addUserOwner():void {
            var window:AddUserToFeedWindow = AddUserToFeedWindow(PopUpManager.createPopUp(this, AddUserToFeedWindow, true));
            window.addEventListener(UserLinkEvent.ADD_USER_LINK, onUserOwnerAdd);
            PopUpUtil.centerPopUp(window);
        }

        private function onUserOwnerAdd(event:UserLinkEvent):void {
            owners.addItem(event.userStub);
        }

        private function addUserViewer():void {
            var window:AddUserToFeedWindow = AddUserToFeedWindow(PopUpManager.createPopUp(this.parent.parent, AddUserToFeedWindow, true));
            window.addEventListener(UserLinkEvent.ADD_USER_LINK, onUserViewerAdd);
            PopUpUtil.centerPopUp(window);
        }

        private function onUserViewerAdd(event:UserLinkEvent):void {
            viewers.addItem(event.userStub);
        }

        private function addGroupViewer():void {
            var window:AddGroupToFeedWindow = AddGroupToFeedWindow(PopUpManager.createPopUp(this, AddGroupToFeedWindow, true));
            window.addEventListener(GroupLinkEvent.ADD_GROUP_LINK, onGroupViewerAdd);
            PopUpUtil.centerPopUp(window);
        }

        private function onGroupViewerAdd(event:GroupLinkEvent):void {
            viewers.addItem(event.groupDescriptor);
        }

        private function anyoneCanViewChange(event:MouseEvent):void {
            if (event.currentTarget.selected && _activated) {
                marketplaceCheckbox.enabled = true;
            } else {
                marketplaceCheckbox.selected = false;
                marketplaceCheckbox.enabled = false;
            }
        }

        public function get activated():Boolean {
            return _activated;
        }

        public function set activated(value:Boolean):void {
            _activated = value;
        }

        private var _liveData:Boolean;

	    [Bindable(event="liveDataChanged")]
        public function get liveData():Boolean {
            return _liveData;
        }

        public function set liveData(value:Boolean):void {
            if (_liveData == value) return;
            _liveData = value;
            dispatchEvent(new Event("liveDataChanged"));
        }
		]]>
	</mx:Script>
	<mx:HBox>
		<mx:VBox>
			<mx:HBox width="100%">
				<mx:Label text="Owners"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Button id="addOwnerUserButton" toolTip="Add User" icon="{addUserIcon}" click="addUserOwner()"/>
				<mx:Button id="addOwnerGroupButton" toolTip="Add Group" icon="{addGroupIcon}" click="addGroupOwner()"/>
			</mx:HBox>			
			<mx:DataGrid dataProvider="{owners}" dragMoveEnabled="true" id="ownersGrid">
				<mx:columns>
					<mx:DataGridColumn headerText="Type" dataField="name" itemRenderer="com.easyinsight.administration.feed.FeedConsumerRenderer"/>
					<mx:DataGridColumn headerText="Name" dataField="name"/>
					<mx:DataGridColumn headerText="" dataField="userName" width="64"
						itemRenderer="com.easyinsight.administration.feed.DeleteUserButton"/>									
				</mx:columns>
			</mx:DataGrid>	
		</mx:VBox>
		<mx:Spacer width="20"/>
		<mx:VBox>
			<mx:HBox width="100%">
				<mx:Label text="Viewers"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Button id="addViewerUserButton" toolTip="Add User" icon="{addUserIcon}" click="addUserViewer()"/>
				<mx:Button id="addViewerGroupButton" toolTip="Add Group" icon="{addGroupIcon}" click="addGroupViewer()"/>
			</mx:HBox>			
			<mx:DataGrid dataProvider="{viewers}" dragMoveEnabled="true" id="viewersGrid">
				<mx:columns>
					<mx:DataGridColumn headerText="Type" dataField="name" itemRenderer="com.easyinsight.administration.feed.FeedConsumerRenderer"/>
					<mx:DataGridColumn headerText="Name" dataField="name"/>
					<mx:DataGridColumn headerText="" dataField="userName" width="64"
						itemRenderer="com.easyinsight.administration.feed.DeleteUserButton"/>									
				</mx:columns>
			</mx:DataGrid>
		</mx:VBox>
	</mx:HBox>
	<mx:Spacer height="30"/>
	<mx:CheckBox label="Anyone Can View: " selected="{anyoneCanView}" id="anyoneCheckbox" click="anyoneCanViewChange(event)" enabled="!{liveData}"/>
	<mx:CheckBox label="Visible in the Marketplace: " selected="{marketplaceViewable}" id="marketplaceCheckbox" enabled="false"/>
</mx:VBox>