<?xml version="1.0" ?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*"
           xmlns:analysis="com.easyinsight.analysis.*"
           creationComplete="setupListeners()" height="100%" width="100%">
    <mx:Metadata>
        [Event(name="disableControls", type="flash.events.Event")]
        [Event(name="enableControls", type="flash.events.Event")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import com.easyinsight.AnalysisItemDeleteEvent;
        import com.easyinsight.analysis.AnalysisCalculation;
        import com.easyinsight.analysis.AnalysisChangedEvent;
        import com.easyinsight.analysis.AnalysisDateDimension;
        import com.easyinsight.analysis.AnalysisDimension;
        import com.easyinsight.analysis.AnalysisHierarchyItem;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemCopyEvent;
        import com.easyinsight.analysis.AnalysisItemEditor;
        import com.easyinsight.analysis.AnalysisItemNode;
        import com.easyinsight.analysis.AnalysisItemTypes;
        import com.easyinsight.analysis.AnalysisItemWrapper;

        import com.easyinsight.analysis.AnalysisMeasure;
        import com.easyinsight.analysis.AnalysisStep;
        import com.easyinsight.analysis.CalculationWindow;
        import com.easyinsight.analysis.HierarchyWindow;

        import com.easyinsight.analysis.IAnalysisItemEditor;

        import com.easyinsight.analysis.Key;
        import com.easyinsight.analysis.NamedKey;

        import com.easyinsight.util.PopUpUtil;

        import mx.binding.utils.BindingUtils;
        import mx.binding.utils.ChangeWatcher;
        import mx.collections.ArrayCollection;
        import mx.collections.IList;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.controls.Alert;
        import mx.core.UIComponent;
        import mx.events.FlexEvent;
        import mx.events.ListEvent;
        import mx.managers.PopUpManager;

        [Bindable]
        private var loaded:Boolean = false;

        private var _allFields:ArrayCollection = new ArrayCollection();

        private var _dataSourceID:int;


        public function set dataSourceID(value:int):void {
            _dataSourceID = value;
        }

        private var selectedWrapper:AnalysisItemWrapper;
        private var openEditor:IAnalysisItemEditor;

        [Bindable]
        [Embed(source="../../../../../assets/background2.JPG")]
        private var background2:Class;

        [Bindable(event="allFieldsChanged")]
        public function get allFields():ArrayCollection {
            return _allFields;
        }

        public function set allFields(value:ArrayCollection):void {
            if (_allFields == value) return;
            _allFields = value;
            dispatchEvent(new Event("allFieldsChanged"));
        }

        private var fieldWatcher:ChangeWatcher;

        private function toFocus(wrapper:AnalysisItemWrapper):void {
            try {
                if (wrapper == selectedWrapper) return;
                if (selectedWrapper != null) {
                    selectedWrapper.analysisItem = openEditor.save(_feedDefinition.dataFeedID);
                    selectedWrapper.displayName = selectedWrapper.analysisItem.display;
                    selectedWrapper.invalidateItem();
                    fieldWatcher.unwatch();
                }
                selectedWrapper = wrapper;
                if (wrapper.analysisItem.concrete) {
                    coreGrid.selectedIndex = coreFields.getItemIndex(wrapper);
                    derivedGrid.selectedIndex = -1;
                } else {
                    derivedGrid.selectedIndex = derivedFields.getItemIndex(wrapper);
                    coreGrid.selectedIndex = -1;
                }
                var editor:IAnalysisItemEditor;
                var analysisItem:AnalysisItem = wrapper.analysisItem;
                if (analysisItem.hasType(AnalysisItemTypes.HIERARCHY)) {
                    editor = new HierarchyWindow();
                } else if (analysisItem.hasType(AnalysisItemTypes.CALCULATION)) {
                    editor = new CalculationWindow();
                } else {
                    editor = new AnalysisItemEditor();
                }
                var editorComp:UIComponent = editor as UIComponent;
                editorComp.addEventListener(FlexEvent.CREATION_COMPLETE, onCreation, false, 0, true);
                editor.dataSourceID = _dataSourceID;
                openEditor = editor;
                fieldWatcher = BindingUtils.bindProperty(editor, "analysisItems", this, "allFields");
                editor.analysisItem = wrapper.analysisItem;
                editCanvas.removeAllChildren();
                editorComp.x = 25;
                editorComp.y = 25;
                editCanvas.addChild(editorComp);
                editCanvas.validateNow();
            } catch(e:Error) {
                Alert.show("On toFocus() - " + e.message + " - " + e.getStackTrace());
            }
        }

        private function onCreation(event:FlexEvent):void {
            dispatchEvent(new Event("enableControls"));
        }


        private function onItemClick(event:ListEvent):void {
            try {
                if (loaded) {
                    loaded = false;
                    dispatchEvent(new Event("disableControls"));
                    var grid:DataGrid = event.currentTarget as DataGrid;
                    var row:int = event.rowIndex;
                    var list:IList = IList(grid.dataProvider);
                    if (row < list.length) {
                        var wrapper:AnalysisItemWrapper = list.getItemAt(row) as AnalysisItemWrapper;
                        if (wrapper.isAnalysisItem() && wrapper != selectedWrapper) {
                            toFocus(wrapper);
                        } else {
                            dispatchEvent(new Event("enableControls"));
                        }
                    }
                    loaded = true;
                }
            } catch(e:Error) {
                Alert.show("On Item Click - " + e.message + " - " + e.getStackTrace());
            }
        }

        private function setupListeners():void {
            addEventListener(AnalysisItemDeleteEvent.ANALYSIS_ITEM_DELETE, onDelete);
            addEventListener(AnalysisItemCopyEvent.ITEM_COPY, onCopy);
        }

        private function onDelete(event:AnalysisItemDeleteEvent):void {
            var index:int = coreFields.getItemIndex(event.analysisItem);
            if (index == -1) {
                derivedFields.removeItemAt(derivedFields.getItemIndex(event.analysisItem));
            } else {
                coreFields.removeItemAt(coreFields.getItemIndex(event.analysisItem));
            }
            allFields.removeItemAt(allFields.getItemIndex(event.analysisItem));
        }

        [Bindable]
        private var coreFields:ArrayCollection;
        [Bindable]
        private var derivedFields:ArrayCollection;

        private var _feedDefinition:FeedDefinitionData;

        public function set feedDefinition(value:FeedDefinitionData):void {
            if (_feedDefinition != value) {
                _feedDefinition = value;
                invalidateProperties();
            }
        }

        override protected function commitProperties():void {
            super.commitProperties();
            try {
                if (_feedDefinition != null) {
                    derivedFields = new ArrayCollection();
                    allFields = new ArrayCollection();
                    coreFields = new ArrayCollection();
                    for each (var item:AnalysisItem in _feedDefinition.fields) {
                        var aNode:AnalysisItemNode = new AnalysisItemNode();
                        aNode.analysisItem = item;
                        var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(aNode);
                        if (!item.concrete) {
                            derivedFields.addItem(wrapper);
                        } else {
                            coreFields.addItem(wrapper);
                        }
                        allFields.addItem(wrapper);
                    }
                    var sort:Sort = new Sort();
                    sort.fields = [ new SortField("displayName", false) ];
                    coreFields.sort = sort;
                    coreFields.refresh();
                    derivedFields.sort = sort;
                    derivedFields.refresh();
                    loaded = true;
                }
            } catch(e:Error) {
                Alert.show(e.message);
            }
        }

        public function createFields():ArrayCollection {
            trace("saving fields");
            if (selectedWrapper != null) {
                selectedWrapper.analysisItem = openEditor.save(_feedDefinition.dataFeedID);
            }
            var fields:ArrayCollection = new ArrayCollection();
            for each (var wrapper:AnalysisItemWrapper in allFields) {
                fields.addItem(wrapper.analysisItem);
            }
            trace("saved fields");
            return fields;
        }

        private function findName(baseName:String):Key {
            var index:int = 0;
            var valid:Boolean = false;
            while (!valid) {
                var found:Boolean = false;
                for each (var wrapper:AnalysisItemWrapper in allFields) {
                    if (wrapper.keyName == baseName) {
                        found = true;
                    }
                }
                if (found) {
                    index++;
                    baseName = baseName + " " + index;
                } else {
                    valid = true;
                }
            }
            var key:NamedKey = new NamedKey();
            key.name = baseName;
            return key;
        }

        private function addGrouping():void {
            var window:NewFieldWindow = new NewFieldWindow();
            window.addEventListener(NewFieldEvent.NEW_FIELD, gotGroupingName, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function gotGroupingName(event:NewFieldEvent):void {
            var grouping:AnalysisDimension = new AnalysisDimension();
            grouping.concrete = true;
            grouping.key = findName(event.name);
            var aNode:AnalysisItemNode = new AnalysisItemNode();
            aNode.analysisItem = grouping;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(aNode);
            coreFields.addItem(wrapper);
            allFields.addItem(wrapper);
            var sort:Sort = new Sort();
            sort.fields = [ new SortField("displayName", false) ];
            coreFields.sort = sort;
            coreFields.refresh();
            dispatchEvent(new AnalysisChangedEvent());
            toFocus(wrapper);
        }

        private function addMeasure():void {
            var window:NewFieldWindow = new NewFieldWindow();
            window.addEventListener(NewFieldEvent.NEW_FIELD, gotMeasureName, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function gotMeasureName(event:NewFieldEvent):void {
            var measure:AnalysisMeasure = new AnalysisMeasure();
            measure.concrete = true;
            measure.key = findName(event.name);
            var aNode:AnalysisItemNode = new AnalysisItemNode();
            aNode.analysisItem = measure;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(aNode);
            coreFields.addItem(wrapper);
            allFields.addItem(wrapper);
            var sort:Sort = new Sort();
            sort.fields = [ new SortField("displayName", false) ];
            coreFields.sort = sort;
            coreFields.refresh();
            dispatchEvent(new AnalysisChangedEvent());
            toFocus(wrapper);
        }

        private function addDate():void {
            var window:NewFieldWindow = new NewFieldWindow();
            window.addEventListener(NewFieldEvent.NEW_FIELD, gotDateName, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function gotDateName(event:NewFieldEvent):void {
            var date:AnalysisDateDimension = new AnalysisDateDimension(AnalysisItemTypes.DAY_LEVEL);
            date.concrete = true;
            date.key = findName(event.name);
            var aNode:AnalysisItemNode = new AnalysisItemNode();
            aNode.analysisItem = date;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(aNode);
            coreFields.addItem(wrapper);
            allFields.addItem(wrapper);
            var sort:Sort = new Sort();
            sort.fields = [ new SortField("displayName", false) ];
            coreFields.sort = sort;
            coreFields.refresh();
            dispatchEvent(new AnalysisChangedEvent());
            toFocus(wrapper);
        }

        private function addHierarchy():void {
            var hierarchy:AnalysisHierarchyItem = new AnalysisHierarchyItem();
            hierarchy.key = findName("Hierarchy");
            var aNode:AnalysisItemNode = new AnalysisItemNode();
            aNode.analysisItem = hierarchy;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(aNode);
            derivedFields.addItem(wrapper);
            allFields.addItem(wrapper);
            var sort:Sort = new Sort();
            sort.fields = [ new SortField("displayName", false) ];
            derivedFields.sort = sort;
            derivedFields.refresh();
            dispatchEvent(new AnalysisChangedEvent());
            toFocus(wrapper);
        }

        private function addCalculation():void {
            var calculation:AnalysisCalculation = new AnalysisCalculation();
            calculation.key = findName("Calculation");
            var aNode:AnalysisItemNode = new AnalysisItemNode();
            aNode.analysisItem = calculation;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(aNode);
            derivedFields.addItem(wrapper);
            allFields.addItem(wrapper);
            var sort:Sort = new Sort();
            sort.fields = [ new SortField("displayName", false) ];
            derivedFields.sort = sort;
            derivedFields.refresh();
            dispatchEvent(new AnalysisChangedEvent());
            toFocus(wrapper);
        }

        private function addCycle():void {
            var cycle:AnalysisStep = new AnalysisStep();
            cycle.key = findName("Cycle");
            var aNode:AnalysisItemNode = new AnalysisItemNode();
            aNode.analysisItem = cycle;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(aNode);
            derivedFields.addItem(wrapper);
            allFields.addItem(wrapper);
            var sort:Sort = new Sort();
            sort.fields = [ new SortField("displayName", false) ];
            derivedFields.sort = sort;
            derivedFields.refresh();
            dispatchEvent(new AnalysisChangedEvent());
            toFocus(wrapper);
        }

        private function onCopy(event:AnalysisItemCopyEvent):void {
            dispatchEvent(new AnalysisChangedEvent());
            event.analysisItem.concrete = false;
            var node:AnalysisItemNode = new AnalysisItemNode();
            node.analysisItem = event.analysisItem;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(node);
            derivedFields.addItem(wrapper);
            var sort:Sort = new Sort();
            sort.fields = [ new SortField("displayName", false) ];
            derivedFields.sort = sort;
            derivedFields.refresh();
            allFields.addItem(wrapper);
            dispatchEvent(new AnalysisChangedEvent());
            toFocus(wrapper);
        }

        ]]></mx:Script>
    <analysis:BaseEditorFieldControlsFactory fields="{allFields}" id="controlsFactory"/>
    <mx:HBox height="100%" width="100%">
        <mx:VBox height="100%">
            <mx:Box width="100%" horizontalAlign="center">
                <mx:Label text="Click on the fields below to edit their properties." fontSize="14"/>
            </mx:Box>
            <mx:VDividedBox height="100%">
                <mx:VBox height="50%" enabled="{loaded}">
                    <mx:HBox width="100%" horizontalAlign="center">
                        <mx:Label text="Concrete Fields"/>
                        <mx:Label text="?" textDecoration="underline" fontSize="11"
                                  toolTip="Concrete fields define the core structure of the data source. You can publish data into fields defined here through the API, through flat files, and so on. The Key Name is the name used in API calls, while the Display Name is what shows up in reports."/>
                    </mx:HBox>
                    <mx:DataGrid dataProvider="{coreFields}" itemClick="onItemClick(event)" height="100%"
                                 dragEnabled="true"
                                 rowHeight="30" id="coreGrid">
                        <mx:columns>
                            <util:EIDataGridColumn dataField="displayName" headerText=""
                                                   itemRenderer="com.easyinsight.analysis.AnalysisItemTypeRenderer"
                                                   width="32"/>
                            <util:EIDataGridColumn dataField="keyName" headerText="Key Name"/>
                            <util:EIDataGridColumn dataField="displayName" headerText="Display Name"/>
                            <util:EIDataGridColumn dataField="displayName"
                                                   itemRenderer="com.easyinsight.analysis.BaseFieldEditButton"
                                                   rendererIsEditor="true" editorDataField="displayName" width="150"
                                                   headerText=""/>
                        </mx:columns>
                    </mx:DataGrid>
                </mx:VBox>
                <mx:VBox height="50%" enabled="{loaded}">
                    <mx:HBox width="100%" horizontalAlign="center">
                        <mx:Label text="Derived Fields"/>
                        <mx:Label text="?" textDecoration="underline" fontSize="11"
                                  toolTip="Derived fields are computed in various ways from the above concrete fields."/>
                    </mx:HBox>
                    <mx:HBox paddingLeft="5">
                        <mx:Button icon="@Embed(source='../../../../../assets/cubes_blue_add.png')"
                                   toolTip="Add Hierarchy..." click="addHierarchy()"/>
                        <mx:Button icon="@Embed(source='../../../../../assets/text_formula.png')"
                                   toolTip="Add Calculation..." click="addCalculation()"/>
                        <mx:Button icon="@Embed(source='../../../../../assets/graph_edge_curved.png')"
                                   toolTip="Add Cycle..." click="addCycle()()"/>
                    </mx:HBox>
                    <mx:DataGrid dataProvider="{derivedFields}" itemClick="onItemClick(event)" height="100%"
                                 dragEnabled="true" rowHeight="30" id="derivedGrid">
                        <mx:columns>
                            <mx:DataGridColumn dataField="displayName" headerText=""
                                               itemRenderer="com.easyinsight.analysis.AnalysisItemTypeRenderer"
                                               width="32"/>
                            <mx:DataGridColumn dataField="displayName" headerText=""/>
                            <mx:DataGridColumn dataField="displayName"
                                               itemRenderer="com.easyinsight.analysis.BaseFieldEditButton"
                                               rendererIsEditor="true" editorDataField="displayName" width="150"
                                               headerText=""/>
                        </mx:columns>
                    </mx:DataGrid>
                </mx:VBox>
            </mx:VDividedBox>
        </mx:VBox>
        <mx:Canvas id="editCanvas" width="100%" height="100%"/>
    </mx:HBox>
</mx:Canvas>