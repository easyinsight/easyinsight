<?xml version="1.0" ?>
<feeds:DataSourceWindow xmlns:mx="http://www.adobe.com/2006/mxml"
                        xmlns:analysis="com.easyinsight.analysis.*" xmlns:util="com.easyinsight.util.*"
                        creationComplete="setupListeners()" height="500" width="900"
                        xmlns:feeds="com.easyinsight.administration.feed.*">
    <mx:Metadata>
        [Event(name="disableControls", type="flash.events.Event")]
        [Event(name="enableControls", type="flash.events.Event")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import com.easyinsight.AnalysisItemDeleteEvent;
        import com.easyinsight.analysis.AnalysisCalculation;
        import com.easyinsight.analysis.AnalysisChangedEvent;
        import com.easyinsight.analysis.AnalysisHierarchyItem;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemCopyEvent;
        import com.easyinsight.analysis.AnalysisItemEditEvent;
        import com.easyinsight.analysis.AnalysisItemEditWindow;
        import com.easyinsight.analysis.AnalysisItemNode;
        import com.easyinsight.analysis.AnalysisItemTypeRenderer;
        import com.easyinsight.analysis.AnalysisItemTypes;
        import com.easyinsight.analysis.AnalysisItemWrapper;

        import com.easyinsight.analysis.AnalysisStep;
        import com.easyinsight.analysis.CalculationMeasureConfigWindow;
        import com.easyinsight.analysis.CalculationMeasureWindow;
        import com.easyinsight.analysis.DerivedAnalysisDateDimension;
        import com.easyinsight.analysis.DerivedAnalysisDimension;
        import com.easyinsight.analysis.DerivedDateConfigWindow;
        import com.easyinsight.analysis.DerivedDateWindow;
        import com.easyinsight.analysis.DerivedGroupingConfigWindow;
        import com.easyinsight.analysis.DerivedGroupingWindow;
        import com.easyinsight.analysis.FeedFolder;
        import com.easyinsight.analysis.FeedNode;
        import com.easyinsight.analysis.FolderNode;
        import com.easyinsight.analysis.HierarchyWindow;

        import com.easyinsight.analysis.IAnalysisItemEditor;

        import com.easyinsight.analysis.Key;
        import com.easyinsight.analysis.NamedKey;
        import com.easyinsight.analysis.TryAgainCalculationMeasureWindow;
        import com.easyinsight.analysis.TryAgainDerivedDateWindow;
        import com.easyinsight.analysis.TryAgainDerivedGroupingWindow;

        import com.easyinsight.util.PopUpUtil;

        import mx.binding.utils.ChangeWatcher;
        import mx.collections.ArrayCollection;
        import mx.collections.HierarchicalCollectionView;
        import mx.collections.HierarchicalData;
        import mx.collections.ICollectionView;
        import mx.collections.IHierarchicalCollectionView;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.controls.Alert;
        import mx.events.CollectionEvent;
        import mx.events.CollectionEventKind;
        import mx.events.FlexEvent;
        import mx.managers.PopUpManager;

        [Bindable]
        private var loaded:Boolean = false;

        private var _allFields:ArrayCollection = new ArrayCollection();

        override protected function gotSource():void {
            concreteFieldsEditable = dataSource.concreteFieldsEditable || dataSource.allowFieldEdit();
            try {

                var hierarchy:ArrayCollection = new ArrayCollection();
                allFields = new ArrayCollection();
                var masterItemList:ArrayCollection = new ArrayCollection(dataSource.fields.toArray());
                for each (var folder:FeedFolder in dataSource.folders) {
                    var folderNode:FeedNode = convertFolder(folder, masterItemList);
                    var folderWrapper:AnalysisItemWrapper = new AnalysisItemWrapper(folderNode);
                    hierarchy.addItem(folderWrapper);
                }
                for each (var item:AnalysisItem in masterItemList) {
                    var analysisWrapper:AnalysisItemWrapper = new AnalysisItemWrapper(convertAnalysisItem(item, null));
                    hierarchy.addItem(analysisWrapper);
                }
                fieldHierarchy = hierarchy;
                populateAllFields(fieldHierarchy, allFields);
                var hierarchyData:HierarchicalData = new HierarchicalData();
                hierarchyData.source = hierarchy;
                var myData:HierarchicalCollectionView = new HierarchicalCollectionView(hierarchyData);
                myData.filterFunction = filterFunction;
                var sort:Sort = new Sort();
                sort.fields = [ new SortField("sortType"), new SortField("displayName", true) ];
                myData.sort = sort;
                myData.refresh();

                theHierarchy = myData;
                //availableFields.sort = null;

                loaded = true;
            } catch (e:Error) {
                Alert.show(e.message);
                throw e;
            }
        }

        private function save():void {

            theHierarchy.filterFunction = null;

            if (theHierarchy.refresh()) {
                var analysisItems:ArrayCollection = new ArrayCollection();
                dataSource.folders = getFolders(analysisItems);
                dataSource.fields = analysisItems;
                saveSource();
            } else {
                theHierarchy.addEventListener(CollectionEventKind.REFRESH, saveHandler);
            }
        }

        private function saveHandler(event:Event):void {
            var analysisItems:ArrayCollection = new ArrayCollection();
            dataSource.folders = getFolders(analysisItems);
            dataSource.fields = analysisItems;
            saveSource();
        }

        private var openEditor:IAnalysisItemEditor;

        [Bindable(event="allFieldsChanged")]
        public function get allFields():ArrayCollection {
            return _allFields;
        }

        public function set allFields(value:ArrayCollection):void {
            if (_allFields == value) return;
            _allFields = value;
            dispatchEvent(new Event("allFieldsChanged"));
        }

        private var fieldWatcher:ChangeWatcher;

        public function customEditor(analysisItem:AnalysisItem):Class {
            if (analysisItem.hasType(AnalysisItemTypes.CALCULATION)) {
                return TryAgainCalculationMeasureWindow;
            } else if (analysisItem.hasType(AnalysisItemTypes.DERIVED_GROUPING)) {
                return TryAgainDerivedGroupingWindow;
            } else if (analysisItem.hasType(AnalysisItemTypes.HIERARCHY)) {
                return HierarchyWindow;
            } else if (analysisItem.hasType(AnalysisItemTypes.DERIVED_DATE)) {
                return TryAgainDerivedDateWindow;
            } else {
                return null;
            }
        }

        public function customEditor2(analysisItem:AnalysisItem):Class {
            if (analysisItem.hasType(AnalysisItemTypes.CALCULATION)) {
                return CalculationMeasureConfigWindow;
            } else if (analysisItem.hasType(AnalysisItemTypes.DERIVED_GROUPING)) {
                return DerivedGroupingConfigWindow;
            } else if (analysisItem.hasType(AnalysisItemTypes.DERIVED_DATE)) {
                return DerivedDateConfigWindow;
            } else {
                return null;
            }
        }

        private function onEdit(event:AnalysisItemCopyEvent):void {
            var wrapper:AnalysisItemWrapper = event.wrapper;
            toFocus(wrapper.analysisItem, itemEdited, wrapper);
        }

        private function itemEdited(event:AnalysisItemEditEvent):void {
            event.previousItemWrapper.analysisItem = event.analysisItem;
            event.previousItemWrapper.displayName = event.analysisItem.display;
            event.previousItemWrapper.invalidateItem();
            var index:int = fieldHierarchy.getItemIndex(event.previousItemWrapper);
            if (index != -1) {
                fieldHierarchy.removeItemAt(index);
                fieldHierarchy.addItem(event.previousItemWrapper);
            }

            dispatchEvent(new AnalysisChangedEvent());
            allFields.dispatchEvent(new CollectionEvent(CollectionEvent.COLLECTION_CHANGE));
            fieldHierarchy.dispatchEvent(new CollectionEvent(CollectionEvent.COLLECTION_CHANGE));
        }

        private function toFocus(analysisItem:AnalysisItem, handler:Function, wrapper:AnalysisItemWrapper = null):void {
            var analysisItemEditor:AnalysisItemEditWindow = new AnalysisItemEditWindow();
            analysisItemEditor.editorClass = customEditor(analysisItem);
            analysisItemEditor.editorClass2 = customEditor2(analysisItem);
            analysisItemEditor.dataSourceID = dataSourceID;
            analysisItemEditor.originalWrapper = wrapper;
            analysisItemEditor.analysisItems = this.allFields;
            analysisItemEditor.analysisItem = analysisItem;
            //analysisItemEditor.kpiSource = _kpiSource;
            PopUpManager.addPopUp(analysisItemEditor, this, true);
            PopUpUtil.centerPopUp(analysisItemEditor);
            analysisItemEditor.addEventListener(AnalysisItemEditEvent.ANALYSIS_ITEM_EDIT, handler, false, 0, true);
        }

        private function onCreation(event:FlexEvent):void {
            dispatchEvent(new Event("enableControls"));
        }

        private function setupListeners():void {
            addEventListener(AnalysisItemDeleteEvent.ANALYSIS_ITEM_DELETE, onDelete);
            addEventListener(AnalysisItemCopyEvent.ITEM_COPY, onCopy);
            addEventListener(AnalysisItemCopyEvent.ITEM_EDIT, onEdit);
        }

        private function onDelete(event:AnalysisItemDeleteEvent):void {
            removeFieldFromTree(event.analysisItem, fieldHierarchy);
            allFields.removeItemAt(allFields.getItemIndex(event.analysisItem));
        }

        private function removeFieldFromTree(analysisItem:AnalysisItemWrapper, fields:ArrayCollection):void {
            var index:int = fields.getItemIndex(analysisItem);
            if (index != -1) {
                fields.removeItemAt(index);
            } else {
                for each (var wrapper:AnalysisItemWrapper in fields) {
                    if (wrapper.children != null) removeFieldFromTree(analysisItem, wrapper.children);
                }
            }
        }

        private function convertFolder(folder:FeedFolder, masterItemList:ArrayCollection):FeedNode {
            var folderNode:FolderNode = new FolderNode();
            folderNode.folder = folder;
            var children:ArrayCollection = new ArrayCollection();
            for each (var childFolder:FeedFolder in folder.childFolders) {
                children.addItem(convertFolder(childFolder, masterItemList));
            }
            for each (var childItem:AnalysisItem in folder.childItems) {
                children.addItem(convertAnalysisItem(childItem, masterItemList));
            }
            folderNode.children = children;
            return folderNode;
        }

        private function convertAnalysisItem(item:AnalysisItem, masterItemList:ArrayCollection):FeedNode {
            var fieldNode:AnalysisItemNode = new AnalysisItemNode();
            fieldNode.analysisItem = item;
            if (masterItemList != null) masterItemList.removeItemAt(masterItemList.getItemIndex(item));
            return fieldNode;
        }

        public function getFolders(fields:ArrayCollection):ArrayCollection {
            var folders:ArrayCollection = new ArrayCollection();
            for each (var wrapper:AnalysisItemWrapper in fieldHierarchy) {
                var node:FeedNode = wrapper.feedNode;
                var folder:FeedFolder = convertNode(node, fields, wrapper);
                if (folder != null) {
                    folders.addItem(folder);
                } else {
                    var analysisNode:AnalysisItemNode = node as AnalysisItemNode;
                    fields.addItem(analysisNode.analysisItem);
                }
            }
            return folders;
        }

        private function convertNode(node:FeedNode, fields:ArrayCollection, wrapper:AnalysisItemWrapper):FeedFolder {
            if (node is FolderNode) {
                var folderNode:FolderNode = node as FolderNode;
                var feedFolder:FeedFolder = folderNode.folder;
                var items:ArrayCollection = new ArrayCollection();
                for each (var childWrapper:AnalysisItemWrapper in wrapper.children) {
                    var child:FeedNode = childWrapper.feedNode;
                    if (child is FolderNode) {
                        convertNode(child, fields, childWrapper);
                    } else {
                        var aNode:AnalysisItemNode = child as AnalysisItemNode;
                        items.addItem(aNode.analysisItem);
                        fields.addItem(aNode.analysisItem);
                    }
                }
                feedFolder.childItems = items;
                return feedFolder;
            } else {
                return null;
            }
        }

        [Bindable]
        private var theHierarchy:HierarchicalCollectionView;

        private function populateAllFields(fields:ArrayCollection, toPopulate:ArrayCollection):void {
            for each (var wrapper:AnalysisItemWrapper in fields) {
                if (wrapper.isAnalysisItem()) {
                    toPopulate.addItem(wrapper);
                } else if (wrapper.children != null) {
                    populateAllFields(wrapper.children, toPopulate);
                }
            }
        }

        private function findName(baseName:String):Key {
            var index:int = 0;
            var valid:Boolean = false;
            while (!valid) {
                var found:Boolean = false;
                for each (var wrapper:AnalysisItemWrapper in allFields) {
                    if (wrapper.keyName == baseName) {
                        found = true;
                    }
                }
                if (found) {
                    index++;
                    baseName = baseName + " " + index;
                } else {
                    valid = true;
                }
            }
            var key:NamedKey = new NamedKey();
            key.name = baseName;
            return key;
        }

        private function itemCopied(event:AnalysisItemEditEvent):void {
            var aNode:AnalysisItemNode = new AnalysisItemNode();
            aNode.analysisItem = event.analysisItem;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(aNode);
            fieldHierarchy.addItem(wrapper);
            allFields.addItem(wrapper);
            dispatchEvent(new AnalysisChangedEvent());
        }

        private function itemAdded(event:AnalysisItemEditEvent):void {
            if (event.analysisItem.key is NamedKey) {
                var key:NamedKey = event.analysisItem.key as NamedKey;
                key.name = event.analysisItem.display;
            }
            var aNode:AnalysisItemNode = new AnalysisItemNode();
            aNode.analysisItem = event.analysisItem;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(aNode);
            fieldHierarchy.addItem(wrapper);
            allFields.addItem(wrapper);
            dispatchEvent(new AnalysisChangedEvent());
        }

        private function addHierarchy():void {
            var hierarchy:AnalysisHierarchyItem = new AnalysisHierarchyItem();
            hierarchy.key = findName("Hierarchy");
            toFocus(hierarchy, itemAdded);
        }

        private function addCalculation():void {
            var calculation:AnalysisCalculation = new AnalysisCalculation();
            calculation.key = findName("Calculation");
            toFocus(calculation, itemAdded);
        }

        private function addDerivedGrouping():void {
            var calculation:DerivedAnalysisDimension = new DerivedAnalysisDimension();
            calculation.key = findName("Grouping");
            toFocus(calculation, itemAdded);
        }

        private function addDerivedDate():void {
            var calculation:DerivedAnalysisDateDimension = new DerivedAnalysisDateDimension();
            calculation.key = findName("Date");
            toFocus(calculation, itemAdded);
        }

        private function addCycle():void {
            var cycle:AnalysisStep = new AnalysisStep();
            cycle.key = findName("Cycle");
            toFocus(cycle, itemAdded);
        }

        private function onCopy(event:AnalysisItemCopyEvent):void {
            event.analysisItem.concrete = false;
            toFocus(event.analysisItem, itemCopied);
        }

        [Bindable]
        private var fieldHierarchy:ArrayCollection;

        private var _concreteFieldsEditable:Boolean;


        [Bindable(event="concreteFieldsEditableChanged")]
        public function get concreteFieldsEditable():Boolean {
            return _concreteFieldsEditable;
        }

        public function set concreteFieldsEditable(value:Boolean):void {
            if (_concreteFieldsEditable == value) return;
            _concreteFieldsEditable = value;
            dispatchEvent(new Event("concreteFieldsEditableChanged"));
        }

        private function iconFunction(item:Object):Class {
            var wrapper:AnalysisItemWrapper = item as AnalysisItemWrapper;
            return AnalysisItemTypeRenderer.getImageClass(wrapper);
        }

        private function filterFunction(item:Object):Boolean {
            var a:AnalysisItemWrapper = item as AnalysisItemWrapper;
            if (a == null) return false;

            var b:IHierarchicalCollectionView = (fieldGrid.dataProvider as IHierarchicalCollectionView);
            if (b == null) return true;
            var children:ICollectionView = b.getChildren(a);
            if (a.analysisItem == null) {
                children.filterFunction = filterFunction;
                children.refresh();
            }
            return children.length > 0 || a.displayName.toLowerCase().indexOf(searchText.toLowerCase()) != -1;

        }

        private var searchText:String = "";

        private function changeFilter(event:Event):void {
            searchText = searchBox.text;
            fieldGrid.dataProvider.refresh();
        }


        ]]></mx:Script>
    <analysis:BaseEditorFieldControlsFactory fields="{allFields}" id="controlsFactory"
                                             concreteFieldsEditable="{concreteFieldsEditable}"/>
    <mx:VBox height="100%" width="100%" horizontalAlign="center" paddingTop="5">
        <mx:HBox paddingLeft="5">
            <mx:Button toolTip="Add Hierarchy..." click="addHierarchy()" styleName="grayButton" label="Add Hierarchy"/>
            <mx:Button toolTip="Add Calculation..." click="addCalculation()" styleName="grayButton"
                       label="Add Derived Measure"/>
            <mx:Button toolTip="Add Derived Grouping..." click="addDerivedGrouping()" styleName="grayButton"
                       label="Add Derived Grouping"/>
            <mx:Button toolTip="Add Derived Date..." click="addDerivedDate()" styleName="grayButton"
                       label="Add Derived Date"/>

        </mx:HBox>
        <mx:HBox paddingLeft="5" width="500" height="24">
            <mx:Canvas width="480">
                <mx:TextInput id="searchBox" paddingLeft="10" change="changeFilter(event)" width="480" borderStyle="solid" cornerRadius="12" />
                <mx:Image source="@Embed(source='../../../../../assets/icon-search-black.png')" x="454" y="2" />
            </mx:Canvas>
        </mx:HBox>
        <mx:AdvancedDataGrid height="100%" dragEnabled="true" iconFunction="iconFunction"
                             id="fieldGrid" backgroundColor="#FFFFFF"
                             alternatingItemColors="#FFFFFF" fontSize="12" rowHeight="28"
                             showHeaders="false" dataProvider="{theHierarchy}">

            <mx:columns>
                <mx:AdvancedDataGridColumn headerText="" dataField="displayName" width="500"/>
                <mx:AdvancedDataGridColumn headerText="" dataField="displayName"
                                           width="150" itemRenderer="{controlsFactory}"
                                           sortable="false"/>
            </mx:columns>
        </mx:AdvancedDataGrid>
    </mx:VBox>
    <mx:HBox width="100%" horizontalAlign="center">
        <util:SaveButton label="Save" click="save()"/>
        <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
    </mx:HBox>
</feeds:DataSourceWindow>