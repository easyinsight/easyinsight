<?xml version="1.0" ?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*"
           xmlns:analysis="com.easyinsight.analysis.*"
           creationComplete="setupListeners()" height="100%" width="100%">
    <mx:Metadata>
        [Event(name="disableControls", type="flash.events.Event")]
        [Event(name="enableControls", type="flash.events.Event")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import com.easyinsight.AnalysisItemDeleteEvent;
        import com.easyinsight.analysis.AnalysisCalculation;
        import com.easyinsight.analysis.AnalysisChangedEvent;
        import com.easyinsight.analysis.AnalysisHierarchyItem;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemCopyEvent;
        import com.easyinsight.analysis.AnalysisItemEditEvent;
        import com.easyinsight.analysis.AnalysisItemEditWindow;
        import com.easyinsight.analysis.AnalysisItemNode;
        import com.easyinsight.analysis.AnalysisItemTypeRenderer;
        import com.easyinsight.analysis.AnalysisItemTypes;
        import com.easyinsight.analysis.AnalysisItemWrapper;

        import com.easyinsight.analysis.AnalysisStep;
        import com.easyinsight.analysis.CalculationMeasureWindow;
        import com.easyinsight.analysis.DerivedAnalysisDimension;
        import com.easyinsight.analysis.DerivedGroupingWindow;
        import com.easyinsight.analysis.FeedFolder;
        import com.easyinsight.analysis.FeedNode;
        import com.easyinsight.analysis.FolderNode;
        import com.easyinsight.analysis.HierarchyWindow;

        import com.easyinsight.analysis.IAnalysisItemEditor;

        import com.easyinsight.analysis.Key;
        import com.easyinsight.analysis.NamedKey;

        import com.easyinsight.util.PopUpUtil;

        import mx.binding.utils.ChangeWatcher;
        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.controls.Alert;
        import mx.events.FlexEvent;
        import mx.managers.PopUpManager;

        [Bindable]
        private var loaded:Boolean = false;

        private var _allFields:ArrayCollection = new ArrayCollection();

        private var _dataSourceID:int;


        public function set dataSourceID(value:int):void {
            _dataSourceID = value;
        }

        private var selectedWrapper:AnalysisItemWrapper;
        private var openEditor:IAnalysisItemEditor;

        [Bindable]
        [Embed(source="../../../../../assets/background2.JPG")]
        private var background2:Class;

        [Bindable(event="allFieldsChanged")]
        public function get allFields():ArrayCollection {
            return _allFields;
        }

        public function set allFields(value:ArrayCollection):void {
            if (_allFields == value) return;
            _allFields = value;
            dispatchEvent(new Event("allFieldsChanged"));
        }

        private var fieldWatcher:ChangeWatcher;

        public function customEditor(analysisItem:AnalysisItem):Class {
            if (analysisItem.hasType(AnalysisItemTypes.CALCULATION)) {
                return CalculationMeasureWindow;
            } else if (analysisItem.hasType(AnalysisItemTypes.DERIVED_GROUPING)) {
                return DerivedGroupingWindow;
            } else if (analysisItem.hasType(AnalysisItemTypes.HIERARCHY)) {
                return HierarchyWindow;
            } else {
                return null;
            }
        }

        private function onEdit(event:AnalysisItemCopyEvent):void {
            var wrapper:AnalysisItemWrapper = event.wrapper;
            toFocus(wrapper);
        }

        private function itemEdited(event:AnalysisItemEditEvent):void {
            selectedWrapper.analysisItem = event.analysisItem;
            selectedWrapper.displayName = event.analysisItem.display;
            selectedWrapper.invalidateItem();
        }

        private function toFocus(wrapper:AnalysisItemWrapper):void {
            selectedWrapper = wrapper;
            var analysisItemEditor:AnalysisItemEditWindow = new AnalysisItemEditWindow();
            analysisItemEditor.editorClass = customEditor(wrapper.analysisItem);
            analysisItemEditor.dataSourceID = _dataSourceID;
            analysisItemEditor.analysisItems = this.allFields;
            analysisItemEditor.analysisItem = wrapper.analysisItem;
            PopUpManager.addPopUp(analysisItemEditor, this, true);
            PopUpUtil.centerPopUp(analysisItemEditor);
            analysisItemEditor.addEventListener(AnalysisItemEditEvent.ANALYSIS_ITEM_EDIT, itemEdited, false, 0, true);
        }

        private function onCreation(event:FlexEvent):void {
            dispatchEvent(new Event("enableControls"));
        }

        private function setupListeners():void {
            addEventListener(AnalysisItemDeleteEvent.ANALYSIS_ITEM_DELETE, onDelete);
            addEventListener(AnalysisItemCopyEvent.ITEM_COPY, onCopy);
            addEventListener(AnalysisItemCopyEvent.ITEM_EDIT, onEdit);
        }

        private function onDelete(event:AnalysisItemDeleteEvent):void {
            removeFieldFromTree(event.analysisItem, availableFields);
            allFields.removeItemAt(allFields.getItemIndex(event.analysisItem));
        }

        private function removeFieldFromTree(analysisItem:AnalysisItemWrapper, fields:ArrayCollection):void {
            var index:int = fields.getItemIndex(analysisItem);
            if (index != -1) {
                fields.removeItemAt(index);
            } else {
                for each (var wrapper:AnalysisItemWrapper in fields) {
                    if (wrapper.children != null) removeFieldFromTree(analysisItem, wrapper.children);
                }
            }
        }

        private var _feedDefinition:FeedDefinitionData;

        public function set feedDefinition(value:FeedDefinitionData):void {
            if (_feedDefinition != value) {
                _feedDefinition = value;
                invalidateProperties();
            }
        }

        private function convertFolder(folder:FeedFolder, masterItemList:ArrayCollection):FeedNode {
            var folderNode:FolderNode = new FolderNode();
            folderNode.folder = folder;
            var children:ArrayCollection = new ArrayCollection();
            for each (var childFolder:FeedFolder in folder.childFolders) {
                children.addItem(convertFolder(childFolder, masterItemList));
            }
            for each (var childItem:AnalysisItem in folder.childItems) {
                children.addItem(convertAnalysisItem(childItem, masterItemList));
            }
            folderNode.children = children;
            return folderNode;
        }

        private function convertAnalysisItem(item:AnalysisItem, masterItemList:ArrayCollection):FeedNode {
            var fieldNode:AnalysisItemNode = new AnalysisItemNode();
            fieldNode.analysisItem = item;
            if (masterItemList != null) masterItemList.removeItemAt(masterItemList.getItemIndex(item));
            return fieldNode;
        }

        public function getFolders(fields:ArrayCollection):ArrayCollection {
            var folders:ArrayCollection = new ArrayCollection();
            for each (var wrapper:AnalysisItemWrapper in availableFields) {
                var node:FeedNode = wrapper.feedNode;
                var folder:FeedFolder = convertNode(node, fields);
                if (folder != null) {
                    folders.addItem(folder);
                } else {
                    var analysisNode:AnalysisItemNode = node as AnalysisItemNode;
                    fields.addItem(analysisNode.analysisItem);
                }
            }
            return folders;
        }

        private function convertNode(node:FeedNode, fields:ArrayCollection):FeedFolder {
            if (node is FolderNode) {
                var folderNode:FolderNode = node as FolderNode;
                var feedFolder:FeedFolder = folderNode.folder;
                var items:ArrayCollection = new ArrayCollection();
                for each (var child:FeedNode in node.children) {
                    if (child is FolderNode) {
                        convertNode(child, fields);
                    } else {
                        var aNode:AnalysisItemNode = child as AnalysisItemNode;
                        items.addItem(aNode.analysisItem);
                        fields.addItem(aNode.analysisItem);
                    }
                }
                feedFolder.childItems = items;
                return feedFolder;
            } else {
                return null;
            }
        }

        override protected function commitProperties():void {
            super.commitProperties();
            try {
                if (_feedDefinition != null) {
                    availableFields = new ArrayCollection();
                    allFields = new ArrayCollection();
                    var masterItemList:ArrayCollection = new ArrayCollection(_feedDefinition.fields.toArray());
                    for each (var folder:FeedFolder in _feedDefinition.folders) {
                        var folderNode:FeedNode = convertFolder(folder, masterItemList);
                        var folderWrapper:AnalysisItemWrapper = new AnalysisItemWrapper(folderNode);
                        availableFields.addItem(folderWrapper);
                    }
                    for each (var item:AnalysisItem in masterItemList) {
                        var analysisWrapper:AnalysisItemWrapper = new AnalysisItemWrapper(convertAnalysisItem(item, null));
                        availableFields.addItem(analysisWrapper);
                    }
                    var sort:Sort = new Sort();
                    sort.fields = [ new SortField("sortType"), new SortField("displayName") ];
                    availableFields.sort = sort;
                    availableFields.refresh();
                    //availableFields.sort = null;
                    populateAllFields(availableFields, allFields);
                    loaded = true;
                }
            } catch(e:Error) {
                Alert.show(e.message);
            }
        }

        private function populateAllFields(fields:ArrayCollection, toPopulate:ArrayCollection):void {
            for each (var wrapper:AnalysisItemWrapper in fields) {
                if (wrapper.isAnalysisItem()) {
                    toPopulate.addItem(wrapper);
                } else if (wrapper.children != null) {
                    populateAllFields(wrapper.children, toPopulate);
                }
            }
        }

        public function createFields():ArrayCollection {
            var fields:ArrayCollection = new ArrayCollection();
            for each (var wrapper:AnalysisItemWrapper in allFields) {
                fields.addItem(wrapper.analysisItem);
            }
            return fields;
        }

        private function findName(baseName:String):Key {
            var index:int = 0;
            var valid:Boolean = false;
            while (!valid) {
                var found:Boolean = false;
                for each (var wrapper:AnalysisItemWrapper in allFields) {
                    if (wrapper.keyName == baseName) {
                        found = true;
                    }
                }
                if (found) {
                    index++;
                    baseName = baseName + " " + index;
                } else {
                    valid = true;
                }
            }
            var key:NamedKey = new NamedKey();
            key.name = baseName;
            return key;
        }

        private function addHierarchy():void {
            var hierarchy:AnalysisHierarchyItem = new AnalysisHierarchyItem();
            hierarchy.key = findName("Hierarchy");
            var aNode:AnalysisItemNode = new AnalysisItemNode();
            aNode.analysisItem = hierarchy;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(aNode);
            availableFields.addItem(wrapper);
            allFields.addItem(wrapper);
            dispatchEvent(new AnalysisChangedEvent());
            toFocus(wrapper);
        }

        private function addCalculation():void {
            var calculation:AnalysisCalculation = new AnalysisCalculation();
            calculation.key = findName("Calculation");
            var aNode:AnalysisItemNode = new AnalysisItemNode();
            aNode.analysisItem = calculation;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(aNode);
            availableFields.addItem(wrapper);
            dispatchEvent(new AnalysisChangedEvent());
            toFocus(wrapper);
        }

        private function addDerivedGrouping():void {
            var calculation:DerivedAnalysisDimension = new DerivedAnalysisDimension();
            calculation.key = findName("Grouping");
            var aNode:AnalysisItemNode = new AnalysisItemNode();
            aNode.analysisItem = calculation;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(aNode);
            availableFields.addItem(wrapper);
            dispatchEvent(new AnalysisChangedEvent());
            toFocus(wrapper);
        }

        private function addCycle():void {
            var cycle:AnalysisStep = new AnalysisStep();
            cycle.key = findName("Cycle");
            var aNode:AnalysisItemNode = new AnalysisItemNode();
            aNode.analysisItem = cycle;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(aNode);
            availableFields.addItem(wrapper);
            dispatchEvent(new AnalysisChangedEvent());
            toFocus(wrapper);
        }

        private function onCopy(event:AnalysisItemCopyEvent):void {
            dispatchEvent(new AnalysisChangedEvent());
            event.analysisItem.concrete = false;
            var node:AnalysisItemNode = new AnalysisItemNode();
            node.analysisItem = event.analysisItem;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(node);
            availableFields.addItem(wrapper);
            dispatchEvent(new AnalysisChangedEvent());
            toFocus(wrapper);
        }

        [Bindable]
        private var availableFields:ArrayCollection;

        private function iconFunction(item:Object):Class {
            var wrapper:AnalysisItemWrapper = item as AnalysisItemWrapper;
            return AnalysisItemTypeRenderer.getImageClass(wrapper);
        }

        ]]></mx:Script>
    <analysis:BaseEditorFieldControlsFactory fields="{allFields}" id="controlsFactory"/>
        <mx:VBox height="100%" width="100%" horizontalAlign="center">
            <mx:Label text="Click on the fields below to edit their properties." fontSize="14"/>
            <mx:HBox paddingLeft="5">
                <mx:Button icon="@Embed(source='../../../../../assets/cubes_blue_add.png')"
                           toolTip="Add Hierarchy..." click="addHierarchy()"/>
                <mx:Button icon="@Embed(source='../../../../../assets/code.png')"
                           toolTip="Add Derived Grouping..." click="addDerivedGrouping()"/>
                <mx:Button icon="@Embed(source='../../../../../assets/text_formula.png')"
                           toolTip="Add Calculation..." click="addCalculation()"/>
                <mx:Button icon="@Embed(source='../../../../../assets/graph_edge_curved.png')"
                           toolTip="Add Cycle..." click="addCycle()()"/>
            </mx:HBox>
            <mx:AdvancedDataGrid height="100%" dragEnabled="true" iconFunction="iconFunction"
                         id="fieldGrid" backgroundColor="#FFFFFF"
                         alternatingItemColors="#FFFFFF" fontSize="12" rowHeight="28"
                         showHeaders="false">
                <mx:dataProvider>
                    <mx:HierarchicalData source="{availableFields}"/>
                </mx:dataProvider>
                <mx:columns>
                    <mx:AdvancedDataGridColumn headerText="" dataField="displayName" width="500"/>
                    <mx:AdvancedDataGridColumn headerText="" dataField="displayName"
                                               width="150" itemRenderer="com.easyinsight.analysis.BaseFieldEditButton" sortable="false"/>
                </mx:columns>
            </mx:AdvancedDataGrid>
        </mx:VBox>
</mx:Canvas>