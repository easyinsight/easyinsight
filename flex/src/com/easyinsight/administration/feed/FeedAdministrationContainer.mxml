<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns="com.easyinsight.*" xmlns:mx="http://www.adobe.com/2006/mxml"
           width="100%" height="100%"
           xmlns:easyinsight="com.easyinsight.*"
           creationComplete="setupListeners()"
           implements="com.easyinsight.listing.IPerspective"
           styleName="screenBackground">
	<mx:Script>
		<![CDATA[
        import com.easyinsight.administration.sharing.UserStub;
        import com.easyinsight.analysis.AnalysisChangedEvent;
        import com.easyinsight.code.DataSourceCacheWindow;
        import com.easyinsight.code.DataSourceMarmotScriptWindow;
        import com.easyinsight.datasources.CompositeServerDataSource;
        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.feedassembly.CompositeFeedDefinition;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.listing.DescriptorAnalyzeSource;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.ProgressAlert;

        import mx.controls.Alert;

        import mx.core.Container;

        import mx.core.UIComponent;

        import mx.managers.BrowserManager;
        import mx.managers.PopUpManager;
        import mx.utils.URLUtil;

        import com.easyinsight.analysis.AnalysisCloseEvent;

        import mx.collections.ArrayCollection;

        public var embedded:Boolean = false;

        private var feedAdminMode:Boolean = false;

        private var feedType:int;
        [Bindable]
        private var feedDefinition:FeedDefinitionData;


        private var unsavedChanges:Boolean = false;

        private var _feedID:int;

        public var urlKey:String;

        private function setupListeners():void {
            addEventListener(AnalysisChangedEvent.ANALYSIS_CHANGED, onChange);
            ProgressAlert.alert(this, "Retrieving the data source details...", null, feedService.getFeedDefinition);
            feedService.getFeedDefinition.send(_feedID);
        }


        [Bindable(event="feedIDChanged")]
        public function get feedID():int {
            return _feedID;
        }

        public function set feedID(value:int):void {
            if (_feedID == value) return;
            _feedID = value;
            dispatchEvent(new Event("feedIDChanged"));
        }

        private var pages:ArrayCollection;

        [Bindable]
        private var dataSourceInfo:DataSourceInfo;

        [Bindable]
        private var refreshable:Boolean;

        private function detailFunction(page:DataSourceWindow, parent:UIComponent):Function {
            return function(event:MouseEvent):void {
                var window:Container = page as Container;
                var className:String = getQualifiedClassName(window);
                var clazz:Class = getDefinitionByName(className) as Class;
                var newWindow:Container = new clazz();
                DataSourceWindow(newWindow).dataSourceID = feedDefinition.dataFeedID;
                PopUpManager.addPopUp(newWindow, parent, true);
                PopUpUtil.centerPopUp(newWindow);
            }
        }

        private function gotFeedDefinition():void {
            this.feedDefinition = feedService.getFeedDefinition.lastResult as FeedDefinitionData;
            var owner:UserStub = feedDefinition.uploadPolicy.owners.getItemAt(0) as UserStub;
            ownerID = owner.userID;
            BrowserManager.getInstance().setTitle("Easy Insight - Data Source Administration - " + feedDefinition.feedName);
            this.feedType = feedDefinition.getFeedType();
            if (!(feedDefinition is CompositeServerDataSource)) {
                mainBox.removeChild(addonRule);
                mainBox.removeChild(addonBox);
            }
            if (!(feedDefinition is CompositeFeedDefinition)) {
                mainBox.removeChild(fieldReportRule);
                mainBox.removeChild(fieldReportBox);
            }
            if (!feedDefinition.hasCustomFields()) {
                mainBox.removeChild(customFieldMappingsBox);
                mainBox.removeChild(customFieldMappingsRule);
            }
            this.pages = feedDefinition.createAdminPages();
            for each (var page:DataSourceWindow in pages) {
                var box:HBox = new HBox();
                box.setStyle("verticalAlign", "middle");
                var canvas:Canvas = new Canvas();
                canvas.width = 300;
                var button:LinkButton = new LinkButton();
                button.setStyle("fontSize", 16);
                button.setStyle("fontWeight", "bold");
                button.label = Container(page).label;
                button.addEventListener(MouseEvent.CLICK, detailFunction(page, this));
                canvas.addChild(button);
                box.addChild(canvas);
                var text:Text = new Text();
                text.maxWidth = 400;
                text.text = "Data source type specific configuration.";
                box.addChild(text);
                mainBox.addChildAt(box, 0);
                var rule:HRule = new HRule();
                rule.width = 700;
                mainBox.addChildAt(rule, 1);

            }
            this.feedAdminMode = true;

            dataSourceInfo = feedDefinition.dataSourceInfo;
            //refreshable = dataSourceInfo.type == DataSourceInfo.STORED_PULL || dataSourceInfo.type == DataSourceInfo.COMPOSITE_PULL;

            if (!embedded) {
                var fragmentObject:Object = new Object();
                fragmentObject.feedAdminID = String(feedDefinition.apiKey);
                var fragmentString:String = URLUtil.objectToString(fragmentObject);
                BrowserManager.getInstance().setFragment(fragmentString);
            }
        }

        override protected function createChildren():void {
            super.createChildren();
            if (embedded) {
                logonStatus.parent.removeChild(logonStatus);
            }
        }

        private function onChange(event:AnalysisChangedEvent):void {
            if (event.metadata) {
                this.unsavedChanges = true;
            }
        }

        private function toReport():void {
            dispatchEvent(new AnalyzeEvent(new DescriptorAnalyzeSource(feedDefinition.dataFeedID, feedDefinition.apiKey)));
        }

        private function close():void {
            dispatchEvent(new AnalysisCloseEvent(feedDefinition.apiKey));
        }



        [Bindable]
        private var ownerID:int;


        public function cleanup():void {
        }

        public function gotFocus():void {
        }




        private function fieldTags():void {
            var window:FieldTagging = new FieldTagging();
            window.dataSourceID = feedDefinition.dataFeedID;
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function fieldExtensions():void {
            var window:ServerDataSourceConfiguration = new ServerDataSourceConfiguration();
            window.dataSourceID = feedDefinition.dataFeedID;
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function moreStuff():void {
            var window:DataSourceReports = new DataSourceReports();
            window.dataSourceID = feedDefinition.dataFeedID;
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function evenMoreStuff():void {
            var window:ManageFieldRuleWindow = new ManageFieldRuleWindow();
            window.dataSourceID = feedDefinition.dataFeedID;
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function configureFields():void {
            var window:FieldAdministration = new FieldAdministration();
            window.dataSourceID = feedDefinition.dataFeedID;
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function scripting():void {
            var window:DataSourceMarmotScriptWindow = new DataSourceMarmotScriptWindow();
            window.dataSourceID = feedDefinition.dataFeedID;
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function dataSourceProperties():void {
            var window:DataSourcePropertiesWindow = new DataSourcePropertiesWindow();
            window.dataSourceID = feedDefinition.dataFeedID;
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function caches():void {
            var window:DataSourceCacheWindow = new DataSourceCacheWindow();
            window.dataSourceID = feedDefinition.dataFeedID;
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function customFieldMapping():void {
            var window:CustomFieldTagWindow = new CustomFieldTagWindow();
            window.dataSourceID = feedDefinition.dataFeedID;
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }


		]]>
	</mx:Script>
	<mx:RemoteObject id="feedService" destination="feeds">
		<mx:method name="getFeedDefinition" result="gotFeedDefinition()"/>
	</mx:RemoteObject>
    <mx:VBox verticalGap="15" width="100%" height="100%">
        <mx:HBox id="buttonBox" styleName="topButtonBar" width="100%">
            <mx:Button id="wrapButton" icon="@Embed(source='../../../../../assets/document_out.png')" click="close()" toolTip="Close"
                    label="Close Editor" labelPlacement="right" styleName="grayButton"/>
            <mx:Button icon="@Embed(source='../../../../../assets/media_play_green.png')" click="toReport()" toolTip="Jump to Report Editor"
                    label="Create a New Report" labelPlacement="right" styleName="grayButton"/>
            <mx:Spacer width="100%"/>
            <easyinsight:LoggedOnStatus textColor="#FFFFFF" id="logonStatus"/>
        </mx:HBox>
        <mx:Box width="100%" height="100%" paddingLeft="10" paddingRight="10" paddingBottom="10" paddingTop="10">
            <mx:VBox width="100%" height="100%" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10" verticalGap="0" borderStyle="solid"
                     borderThickness="1"
                     cornerRadius="8" dropShadowEnabled="true" backgroundColor="#FFFFFF" backgroundAlpha="1" id="mainBox">
                <mx:HBox  verticalAlign="middle">
                    <mx:HBox width="300">
                        <mx:LinkButton label="Fields" fontWeight="bold" click="configureFields()" fontSize="16"/>
                    </mx:HBox>
                    <mx:Text width="400" text="Configuration of data source fields."/>
                </mx:HBox>
                <mx:HRule width="700"/>
                <mx:HBox  verticalAlign="middle">
                    <mx:HBox width="300">
                        <mx:LinkButton label="Data Source Properties" fontWeight="bold" click="dataSourceProperties()" fontSize="16"/>
                    </mx:HBox>
                    <mx:Text width="400" text="Rename the data source, change account visibility, and other general settings."/>
                </mx:HBox>
                <mx:HRule width="700"/>
                <mx:HBox verticalAlign="middle">
                    <mx:Canvas width="300">
                        <mx:LinkButton label="Field Tags" fontWeight="bold" click="fieldTags()" fontSize="16"/>
                    </mx:Canvas>
                    <mx:Text width="400" text="Field tags enable you to categorize fields by different tags."/>
                </mx:HBox>
                <mx:HRule width="700" id="addonRule"/>
                <mx:HBox  verticalAlign="middle" id="addonBox">
                    <mx:Canvas width="300">
                        <mx:LinkButton label="Additional Sources" fontWeight="bold" click="fieldExtensions()" fontSize="16"/>
                    </mx:Canvas>
                    <mx:Text width="400" text="Add additional data sources such as report based sources to this data source as children."/>
                </mx:HBox>
                <mx:HRule width="700" id="fieldReportRule"/>
                <mx:HBox  verticalAlign="middle" id="fieldReportBox">
                    <mx:Canvas width="300">
                        <mx:LinkButton label="Field Reports" fontWeight="bold" click="moreStuff()" fontSize="16"/>
                    </mx:Canvas>
                    <mx:Text width="400" text="Pull custom data source level calculations from report fields."/>
                </mx:HBox>
                <mx:HRule width="700"/>
                <mx:HBox  verticalAlign="middle">
                    <mx:Canvas width="300">
                        <mx:LinkButton label="Field Rules" fontWeight="bold" click="evenMoreStuff()" fontSize="16"/>
                    </mx:Canvas>
                    <mx:Text width="400" text="Specify drillthroughs or default report behaviors for one or more fields in the data source."/>
                </mx:HBox>
                <mx:HRule width="700"/>
                <mx:HBox  verticalAlign="middle">
                    <mx:Canvas width="300">
                        <mx:LinkButton label="Caching" fontWeight="bold" click="caches()" fontSize="16"/>
                    </mx:Canvas>
                    <mx:Text width="400" text="Manage the caching of data for the data source."/>
                </mx:HBox>
                <mx:HRule width="700"/>
                <mx:HBox  verticalAlign="middle">
                    <mx:Canvas width="300">
                        <mx:LinkButton label="Scripting" fontWeight="bold" click="scripting()" fontSize="16"/>
                    </mx:Canvas>
                    <mx:Text width="400" text="Advanced customization of scripting to modify data source behavior."/>
                </mx:HBox>
                <mx:HRule width="700" id="customFieldMappingsRule"/>
                <mx:HBox  verticalAlign="middle" id="customFieldMappingsBox">
                    <mx:Canvas width="300">
                        <mx:LinkButton label="Custom Field Mappings" fontWeight="bold" click="customFieldMapping()" fontSize="16"/>
                    </mx:Canvas>
                    <mx:Text width="400" text="Map custom fields to tags."/>
                </mx:HBox>
            </mx:VBox>
        </mx:Box>
    </mx:VBox>
</mx:Module>
