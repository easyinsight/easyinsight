<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns="com.easyinsight.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
	xmlns:feed="com.easyinsight.administration.feed.*" paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10"
        creationComplete="setupListeners()" backgroundColor="#DCE2F8" implements="com.easyinsight.listing.IPerspective">
	<mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.AnalysisChangedEvent;
        import com.easyinsight.analysis.PromptEvent;
        import com.easyinsight.analysis.SavePromptWindow;
        import com.easyinsight.datasources.DataSourceType;
        import com.easyinsight.datasources.IServerDataSourceDefinition;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.listing.DescriptorAnalyzeSource;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.ProgressAlert;

        import mx.managers.BrowserManager;
        import mx.managers.PopUpManager;
        import mx.utils.URLUtil;
        import mx.validators.Validator;
        import mx.controls.Alert;

        import com.easyinsight.feedassembly.CompositeFeedDefinition;
        import com.easyinsight.feedassembly.CompositeWorkspace;

        import com.easyinsight.analysis.AnalysisCloseEvent;

        import mx.collections.ArrayCollection;


        private var feedAdminMode:Boolean = false;

        private var feedType:int;
        [Bindable]
        private var feedDefinition:FeedDefinitionData;

        [Bindable]
        private var haveFeed:Boolean = false;

        private var unsavedChanges:Boolean = false;

        [Bindable]
        private var showImpl:Boolean = false;

        private var _feedID:int;

        private var feedAdminDetail:IFeedAdminDetail;

        private var generalValidators:Array = [];

        private var fieldsValidators:Array = [];

        private function setupListeners():void {
            addEventListener(AnalysisChangedEvent.ANALYSIS_CHANGED, onChange);
            ProgressAlert.alert(this, "Retrieving the data source details...", null, feedService.getFeedDefinition);
            feedService.getFeedDefinition.send(_feedID);
        }


        [Bindable(event="feedIDChanged")]
        public function get feedID():int {
            return _feedID;
        }

        public function set feedID(value:int):void {
            if (_feedID == value) return;
            _feedID = value;
            dispatchEvent(new Event("feedIDChanged"));
        }

        private function gotFeedDefinition():void {
            this.feedDefinition = feedService.getFeedDefinition.lastResult as FeedDefinitionData;
            liveData = feedDefinition.isLiveData();
            BrowserManager.getInstance().setTitle("Easy Insight - Data Source Administration - " + feedDefinition.feedName);
            this.feedType = feedDefinition.getFeedType();
            if (feedType == DataSourceType.COMPOSITE || feedType == DataSourceType.CLEARDB) {
                var compositeFeedDefinition:CompositeFeedDefinition = feedDefinition as CompositeFeedDefinition;
                var compositeWorkspace:CompositeWorkspace = new CompositeWorkspace();
                compositeWorkspace.addExistingDef(compositeFeedDefinition.compositeFeedNodes, compositeFeedDefinition.connections,
                        compositeFeedDefinition.dataFeedID);
                implBox.addChild(compositeWorkspace);
                implBox.label = "Composite Details";
                showImpl = true;
                this.feedAdminDetail = compositeWorkspace;
            } else if (feedDefinition is IServerDataSourceDefinition && !feedDefinition.isLiveData()) {
                var sds:IServerDataSourceDefinition = feedDefinition as IServerDataSourceDefinition;
                var configClass:Class = sds.configClass();
                var admin:ServerDataSourceAdministration = new ServerDataSourceAdministration();
                admin.dataSourceClass = configClass;
                admin.dataSourceDefinition = feedDefinition as IServerDataSourceDefinition;
                implBox.addChild(admin);
                implBox.label = "Server Configuration";
                showImpl = true;
                feedAdminDetail = admin;
            } else {
                tabNav.removeChild(implBox);
            }
            if (feedDefinition.fields == null || feedDefinition.fields.length == 0) {
                tabNav.removeChild(fieldsBox);
            }
            this.feedAdminMode = true;



            var fragmentObject:Object = new Object();
            fragmentObject.feedAdminID = String(feedDefinition.apiKey);
            var fragmentString:String = URLUtil.objectToString(fragmentObject);
            BrowserManager.getInstance().setFragment(fragmentString);
            haveFeed = true;
        }

        private function onChange(event:AnalysisChangedEvent):void {
            if (event.metadata) {
                this.unsavedChanges = true;
            }
        }

        private function save(saveHandler:Function = null):void {
            var results:Array = Validator.validateAll(generalValidators);
            var detailValidated:Boolean = true;
            if (feedAdminDetail != null) {
                detailValidated = feedAdminDetail.validate();
            }
            if (results.length > 0 || !detailValidated) {
                Alert.show("There are one or more errors which must be fixed before you can save this data source.");
            } else {
                var analysisItems:ArrayCollection;
                if (fieldAdministration == null) {
                    analysisItems = feedDefinition.fields;
                } else {
                    analysisItems = new ArrayCollection();
                    feedDefinition.folders = fieldAdministration.getFolders(analysisItems);
                }
                feedDefinition.fields = analysisItems;

                if (feedAdminDetail != null) {
                    feedAdminDetail.updateDataSource(feedDefinition);
                }

                if (saveHandler == null) {
                    saveHandler = onSave;
                }
                var window:DataSourceSaveWindow = new DataSourceSaveWindow();
                window.addEventListener(DataSourceSaveEvent.DATA_SOURCE_SAVE, saveHandler, false, 0, true);
                window.dataSource = feedDefinition;
                PopUpManager.addPopUp(window, this, true);
                PopUpUtil.centerPopUp(window);

                /*feedDefinition.feedName = feedNameInput.text;
                var owners:ArrayCollection = new ArrayCollection();
                for each (var consumer:FeedConsumer in feedDefinition.uploadPolicy.owners) {
                    if (consumer is UserStub) {
                        owners.addItem(consumer);
                    }
                }
                for each (var desc:GroupDescriptor in sourceList.dataProvider) {
                    owners.addItem(desc);
                }
                feedDefinition.uploadPolicy.owners = owners;
                feedDefinition.description = feedDescriptionTextArea.text;
                feedDefinition.accountVisible = accountVisibleCheckBox.selected;
                feedDefinition.attribution = feedAttributionInput.text;
                feedDefinition.ownerName = feedOwnerNameInput.text;
                if (feedAdminDetail != null) {
                    feedAdminDetail.updateDataSource(feedDefinition);
                }
                ProgressAlert.alert(this, "Updating data source...", "Updated data source!", feedService.updateFeedDefinition);
                feedService.updateFeedDefinition.send(feedDefinition, feedTagsInput.text);
                this.unsavedChanges = false;*/
            }
        }

        private function onSave(event:DataSourceSaveEvent):void {
            unsavedChanges = false;
        }

        private function createPromptWindow(prompt:String, doneHandler:Function):void {
            var window:SavePromptWindow = new SavePromptWindow();
            window.prompt = prompt;
            window.addEventListener(PromptEvent.PROMPT_SAVE, function(event:PromptEvent):void {
                save(function(event:DataSourceSaveEvent):void {
                    doneHandler.call();
                });
            }, false, 0, true);
            window.addEventListener(PromptEvent.PROMPT_DISCARD, function(event:PromptEvent):void {
                doneHandler.call();
            }, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function toReport():void {
            if (unsavedChanges) {
                createPromptWindow("You have unsaved changes to this data source.", function():void {
                    dispatchEvent(new AnalyzeEvent(new DescriptorAnalyzeSource(feedDefinition.dataFeedID)));
                });
            } else {
                dispatchEvent(new AnalyzeEvent(new DescriptorAnalyzeSource(feedDefinition.dataFeedID)));
            }
        }

        private function close():void {
            if (unsavedChanges) {
                createPromptWindow("You have unsaved changes to this data source.", function():void {
                    dispatchEvent(new AnalysisCloseEvent());
                });
            } else {
                dispatchEvent(new AnalysisCloseEvent());
            }
        }
        [Bindable]
        private var liveData:Boolean;

        [Bindable]
        private var controlsEnabled:Boolean = true;

        public function disableControls():void {
            controlsEnabled = false;
        }

        public function enableControls():void {
            controlsEnabled = true;
        }

        public function cleanup():void {
        }

        public function gotFocus():void {
        }
		]]>
	</mx:Script>

	<mx:RemoteObject id="feedService" destination="feeds">
		<mx:method name="getFeedDefinition" result="gotFeedDefinition()"/>
	</mx:RemoteObject>
    <mx:HBox width="100%" height="100%" horizontalAlign="center">
        <mx:VBox width="1000" height="100%" paddingLeft="5">
            <mx:HBox id="buttonBox" paddingLeft="5" paddingTop="5" paddingBottom="5" enabled="{controlsEnabled}">
                <mx:Button id="wrapButton" icon="@Embed(source='../../../../../assets/document_out.png')" click="close()" toolTip="Close"/>
                <mx:Button id="saveButton" icon="@Embed(source='../../../../../assets/floppy_disk.png')" click="save()" toolTip="Save"/>
                <mx:Button icon="@Embed(source='../../../../../assets/media_play_green.png')" click="toReport()" toolTip="Jump to Report Editor"/>
                <mx:Label fontSize="14" color="#FFFFFF"/>
            </mx:HBox>
            <mx:TabNavigator width="100%" height="100%" paddingTop="0" paddingBottom="0"
                paddingLeft="0" paddingRight="0" resizeToContent="true" id="tabNav" enabled="{haveFeed}">
                <mx:Box label="Fields" id="fieldsBox">
                    <feed:FieldAdministration feedDefinition="{feedDefinition}" id="fieldAdministration" dataSourceID="{feedID}" disableControls="disableControls()"
                            enableControls="enableControls()"/>
                </mx:Box>
                <mx:Box label="Impl" paddingLeft="10" paddingTop="10" paddingBottom="10" paddingRight="10" id="implBox" visible="{showImpl}">

                </mx:Box>
            </mx:TabNavigator>
        </mx:VBox>
    </mx:HBox>
</mx:Module>
