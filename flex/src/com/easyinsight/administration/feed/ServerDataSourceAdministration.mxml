<?xml version="1.0" ?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" implements="com.easyinsight.administration.feed.IFeedAdminDetail">
    <mx:Script><![CDATA[
        import com.easyinsight.customupload.IServerDataSourceCreation;

        import com.easyinsight.datasources.IServerDataSourceDefinition;
        import com.easyinsight.framework.Credentials;

        import com.easyinsight.framework.User;

        import mx.controls.Alert;

        private function encryptedResults():void {
            var c:Credentials = uploadService.encryptCredentials.lastResult as Credentials;
            if(User.getSharedObject() == null) {
                Alert.show("You must enable local storage for easy-insight.com in order to save credentials to your computer.");
            }
            var def:FeedDefinitionData = _dataSourceDefinition as FeedDefinitionData;
            User.getSharedObject().data[def.dataFeedID.toString()] = new Object();
            User.getSharedObject().data[def.dataFeedID.toString()].username = c.userName;
            User.getSharedObject().data[def.dataFeedID.toString()].password = c.password;
            User.getSharedObject().flush();
        }

        private var _dataSourceClass:Class;
        private var dataSourceCreation:IServerDataSourceCreation;
        private var _dataSourceID:int;
        private var _dataSourceDefinition:IServerDataSourceDefinition;

        [Bindable]
        private var ready:Boolean;

        [Bindable]
        private var credentialsSaved:Boolean;

        [Bindable]
        private var refreshValue:int;

        [Bindable]
        private var clientCredentialsSaved:Boolean;

        override protected function createChildren():void {
            super.createChildren();
            ready = true;
            dataSourceCreation = new _dataSourceClass();
            var def:FeedDefinitionData = _dataSourceDefinition as FeedDefinitionData;
            dataSourceCreation.dataSourceDefinition = def;
            credentialsSaved = def.username != null;
            refreshValue = def.refreshDataInterval;
            if(User.getSharedObject() != null && User.getSharedObject().data[def.dataFeedID.toString()] != null) {
                /* This doesn't work, you get the encrypted strings, doh
                var c:Credentials = new Credentials();
                c.userName = User.getSharedObject().data[def.dataFeedID.toString()].username;
                c.password = User.getSharedObject().data[def.dataFeedID.toString()].password;
                dataSourceCreation.credentials = c;*/
                clientCredentialsSaved = true;
            }
            else {
                clientCredentialsSaved = false;
            }
            coreContent.addChild(dataSourceCreation as DisplayObject);
        }

        public function set dataSourceID(value:int):void {
            _dataSourceID = value;
        }

        public function get dataSourceDefinition():IServerDataSourceDefinition {
            return _dataSourceDefinition;
        }

        public function set dataSourceDefinition(value:IServerDataSourceDefinition):void {
            _dataSourceDefinition = value;
        }

        private function serverValidate():void {
            progressBar.visible = true;
            dataSourceCreation.updateDataSource(dataSourceDefinition as FeedDefinitionData);
            uploadService.validateCredentials.send(dataSourceDefinition, dataSourceCreation.credentials);
        }

        private function validated():void {
            progressBar.visible = false;
            var validation:String = uploadService.validateCredentials.lastResult as String;
            if (validation == null) {
                Alert.show("Validation successful!");
            } else {
                Alert.show(validation);
            }
        }

        public function set dataSourceClass(value:Class):void {
            _dataSourceClass = value;                   
        }

        /*private function credentialClick():void {
            credentialsSaved = !credentialsSaved;
            if (!credentialsSaved) {
                dailyRefresh.selected = false;
//                refreshStepper.value = 0;
            }
        }*/

        public function updateDataSource(feedDefinition:FeedDefinitionData):void {
            /*if (saveClientCredentialsCheckbox.selected) {

                uploadService.encryptCredentials.send(dataSourceCreation.credentials);
            }
            else {
                if(User.getSharedObject() != null) {

                }
            }*/


            /*if (saveCredentialsCheckbox.selected) {
//                feedDefinition.refreshDataInterval = refreshStepper.value * 1000 * 60 * 60;
                if(dailyRefresh.selected)
                    feedDefinition.refreshDataInterval = 60*60*1000*24;
                else
                    feedDefinition.refreshDataInterval = 0;
                var credentials:Credentials = dataSourceCreation.credentials;
                feedDefinition.username = credentials.userName;
                feedDefinition.password = credentials.password;
            } else {*/
            feedDefinition.refreshDataInterval = 0;
            feedDefinition.username = null;
            feedDefinition.password = null;
            /*if (saveClientCredentialsCheckbox.selected) {
                if (User.getSharedObject() != null) {
                    User.getSharedObject().data[feedDefinition.dataFeedID.toString()] = null;
                    User.getSharedObject().flush();
                }
            }*/
            //}
            dataSourceCreation.updateDataSource(feedDefinition);
        }

        public function validate():Boolean {
            return true;
        }]]></mx:Script>
    <mx:RemoteObject destination="userUpload" id="uploadService">
        <mx:method name="validateCredentials" result="validated()"/>
        <mx:method name="encryptCredentials" result="encryptedResults()" />
    </mx:RemoteObject>
    <mx:Form>
        <mx:Box id="coreContent"/>
        <mx:FormItem label="" direction="vertical">
            <mx:ProgressBar id="progressBar" indeterminate="true" visible="false"/>
        </mx:FormItem>
        <!--<mx:FormItem label="Save Credentials:" enabled="{ready}">
            <mx:CheckBox id="saveCredentialsCheckbox" click="credentialClick()" selected="{credentialsSaved}"/>
        </mx:FormItem>-->
        <!--<mx:FormItem label="Save Credentials (On Client):" enabled="{ready}">
            <mx:CheckBox id="saveClientCredentialsCheckbox" selected="{clientCredentialsSaved}" />
        </mx:FormItem>-->
        <!--<mx:FormItem label="Refresh Daily:" enabled="{credentialsSaved}">
            <mx:CheckBox id="dailyRefresh" />
        </mx:FormItem>-->
        <mx:FormItem label="" direction="horizontal">
            <mx:Button label="Validate" click="serverValidate()" enabled="{ready}"/>
        </mx:FormItem>
	</mx:Form>
</mx:Canvas>