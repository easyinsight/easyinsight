<?xml version="1.0" ?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:kpi="com.easyinsight.kpi.*"
         xmlns:util="com.easyinsight.util.*" xmlns:viewStackEffects="org.efflex.mx.viewStackEffects.*"
         creationComplete="ITutorialPanel(UIComponent(viewStack.getChildAt(0)).getChildAt(0)).gotFocus()">
    <mx:Metadata>
        [Event(name="expertMode", type="com.easyinsight.kpi.KPIModeEvent")]
        [Event(name="kpiAdded", type="com.easyinsight.kpi.KPIEvent")]
        [Event(name="kpiEdited", type="com.easyinsight.kpi.KPIEvent")]
        [Event(name="kpiCancel", type="com.easyinsight.kpi.KPIModeEvent")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import com.easyinsight.administration.sharing.UserStub;
        import com.easyinsight.framework.CredentialsCache;
        import com.easyinsight.framework.User;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.ProgressAlert;

        import mx.collections.ArrayCollection;
        import mx.core.UIComponent;
        import mx.effects.Effect;
        import mx.events.IndexChangedEvent;
        import mx.managers.PopUpManager;

        [Bindable]
        private var panelIndex:int;

        [Bindable]
        private var kpiData:KPIData;

        private var _kpi:KPI;

        private var _scorecardID:int;

        public function set kpi(value:KPI):void {
            _kpi = value;
        }

        public function set scorecardID(value:int):void {
            _scorecardID = value;
        }

        private function onCancel():void {
            dispatchEvent(new KPIModeEvent(KPIModeEvent.CANCEL));
        }

        private function addedKPI():void {
            _kpi = scorecardService.addKPIToScorecard.lastResult as KPI;
            dispatchEvent(new KPIEvent(KPIEvent.KPI_ADDED, _kpi));
        }

        private function updatedKPI():void {
            var prevKPI:KPI = _kpi;
            _kpi = scorecardService.updateKPI.lastResult as KPI;
            dispatchEvent(new KPIEvent(KPIEvent.KPI_EDITED, _kpi, prevKPI));
        }

        private function savedKPI():void {
            var prevKPI:KPI = _kpi;
            _kpi = kpiService.saveKPI.lastResult as KPI;
            dispatchEvent(new KPIEvent(KPIEvent.KPI_ADDED, _kpi, prevKPI));
        }

        protected override function commitProperties():void {
            super.commitProperties();
            kpiData = new KPIData();
            if (_kpi != null) {
                kpiData.kpiName = _kpi.name;
                kpiData.kpiIcon = _kpi.iconImage;
                kpiData.highIsGood = _kpi.highIsGood;
                kpiData.dataSourceID = _kpi.coreFeedID;
                kpiData.dataSourceName = _kpi.coreFeedName;
                kpiData.dayWindow = _kpi.dayWindow;
                kpiData.measure = _kpi.analysisMeasure;
                kpiData.filters = _kpi.filters;
            }
        }

        private function finish():void {
            var newKPI:Boolean = false;
            if (_kpi == null) {
                newKPI = true;
                _kpi = new KPI();
            }
            _kpi.name = kpiData.kpiName;
            _kpi.iconImage = kpiData.kpiIcon;
            _kpi.highIsGood = kpiData.highIsGood;
            _kpi.coreFeedID = kpiData.dataSourceID;
            _kpi.coreFeedName = kpiData.dataSourceName;
            _kpi.dayWindow = kpiData.dayWindow;
            _kpi.analysisMeasure = kpiData.measure;
            _kpi.filters = kpiData.filters;
            if (_kpi.kpiUsers == null) {
                _kpi.kpiUsers = new ArrayCollection();
                var user:KPIUser = new KPIUser();
                user.owner = true;
                user.responsible = true;
                var userStub:UserStub = new UserStub();
                userStub.userID = User.getInstance().userID;
                user.feedConsumer = userStub;
                _kpi.kpiUsers.addItem(user);
            }
            if (_scorecardID > 0) {
                if (newKPI) {
                    ProgressAlert.alert(this, "Saving the KPI...", null, scorecardService.addKPIToScorecard);
                    scorecardService.addKPIToScorecard(_kpi, _scorecardID, CredentialsCache.getCache().createCredentials());
                } else {
                    ProgressAlert.alert(this, "Saving the KPI...", null, scorecardService.updateKPI);
                    scorecardService.updateKPI(_kpi, CredentialsCache.getCache().createCredentials());
                }
            } else {
                ProgressAlert.alert(this, "Saving the KPI...", null, kpiService.saveKPI);
                kpiService.saveKPI(_kpi, CredentialsCache.getCache().createCredentials());
            }
        }

        private function onChange(event:IndexChangedEvent):void {
            var panel:TutorialPanel = viewStack.getChildAt(event.newIndex) as TutorialPanel;
            var tutorialPanel:ITutorialPanel = panel.getChildAt(0) as ITutorialPanel;
            tutorialPanel.gotFocus();
        }

        [Bindable]
        private var slideEffect:Effect = rightEffect;
        ]]></mx:Script>
    <mx:RemoteObject destination="kpiService" id="kpiService">
        <mx:method name="saveKPI" result="savedKPI()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="scorecardService" destination="scorecardService">
        <mx:method name="addKPIToScorecard" result="addedKPI()"/>
        <mx:method name="updateKPI" result="updatedKPI()"/>
    </mx:RemoteObject>
    <mx:Fade id="fadeOut" duration="1000" alphaFrom="1.0" alphaTo="0.0"/>
    <mx:Fade id="fadeIn" duration="1000" alphaFrom="0.0" alphaTo="1.0"/>
    <viewStackEffects:Slide id="leftEffect" direction="left"/>
    <viewStackEffects:Slide id="rightEffect" direction="right"/>
    <mx:ViewStack selectedIndex="{panelIndex}" change="onChange(event)"
                  id="viewStack" resizeToContent="true" width="100%" height="100%" creationPolicy="all">
        <kpi:TutorialPanel verticalGap="0" width="100%" height="100%" hideEffect="{slideEffect}" showEffect="{slideEffect}">
            <kpi:KPIDataSourceTutorialPanel kpiData="{kpiData}" id="panel1" width="100%" height="100%"/>
            <kpi:TutorialButtons backEnabled="false" nextEnabled="true" finishEnabled="false"
                                 kpiTutorialCancel="onCancel()"
                                 kpiTutorialNext="slideEffect = rightEffect; panelIndex = 1" tutorialPanel="{panel1}"
                                 expertMode="dispatchEvent(event)"/>
        </kpi:TutorialPanel>
        <kpi:TutorialPanel verticalGap="0" width="100%" height="100%" hideEffect="{slideEffect}" showEffect="{slideEffect}">
            <kpi:KPIMeasureTutorialPanel kpiData="{kpiData}" id="panel2" width="100%" height="100%"/>
            <kpi:TutorialButtons backEnabled="true" nextEnabled="true" finishEnabled="false"
                                 kpiTutorialCancel="onCancel()"
                                 kpiTutorialNext="slideEffect = rightEffect; panelIndex = 2" kpiTutorialPrevious="slideEffect = leftEffect; panelIndex = 0"
                                 tutorialPanel="{panel2}" expertMode="dispatchEvent(event)"/>
        </kpi:TutorialPanel>
        <kpi:TutorialPanel verticalGap="0" width="100%" height="100%" hideEffect="{slideEffect}" showEffect="{slideEffect}">
            <kpi:KPIFilterTutorialPanel kpiData="{kpiData}" id="panel3" width="100%" height="100%"/>
            <kpi:TutorialButtons backEnabled="true" nextEnabled="true" finishEnabled="false"
                                 kpiTutorialCancel="onCancel()"
                                 kpiTutorialNext="slideEffect = rightEffect; panelIndex = 3" kpiTutorialPrevious="slideEffect = leftEffect; panelIndex = 1"
                                 tutorialPanel="{panel3}" expertMode="dispatchEvent(event)"/>
        </kpi:TutorialPanel>
        <kpi:TutorialPanel verticalGap="0" width="100%" height="100%" hideEffect="{slideEffect}" showEffect="{slideEffect}">
            <kpi:KPIHighLowTutorialPanel kpiData="{kpiData}" id="panel4" width="100%" height="100%"/>
            <kpi:TutorialButtons backEnabled="true" nextEnabled="true" finishEnabled="false"
                                 kpiTutorialCancel="onCancel()"
                                 kpiTutorialNext="slideEffect = rightEffect; panelIndex = 4" kpiTutorialPrevious="slideEffect = leftEffect;panelIndex = 2"
                                 tutorialPanel="{panel4}" expertMode="dispatchEvent(event)"/>
        </kpi:TutorialPanel>
        <kpi:TutorialPanel verticalGap="0" width="100%" height="100%" hideEffect="{slideEffect}" showEffect="{slideEffect}">
            <kpi:KPICompareTutorialPanel kpiData="{kpiData}" id="panel5" width="100%" height="100%"/>
            <kpi:TutorialButtons backEnabled="true" nextEnabled="true" finishEnabled="false"
                                 kpiTutorialCancel="onCancel()"
                                 kpiTutorialNext="slideEffect = rightEffect; panelIndex = 5" kpiTutorialPrevious="slideEffect = leftEffect; panelIndex = 3"
                                 tutorialPanel="{panel5}" expertMode="dispatchEvent(event)"/>
        </kpi:TutorialPanel>
        <kpi:TutorialPanel verticalGap="0" width="100%" height="100%" hideEffect="{slideEffect}" showEffect="{slideEffect}">
            <kpi:KPILabelingTutorialPanel kpiData="{kpiData}" id="panel6" width="100%" height="100%"/>
            <kpi:TutorialButtons backEnabled="true" nextEnabled="false" finishEnabled="true"
                                 kpiTutorialCancel="onCancel()"
                                 kpiTutorialFinish="finish()" kpiTutorialPrevious="slideEffect = leftEffect; panelIndex = 4"
                                 tutorialPanel="{panel6}" expertMode="dispatchEvent(event)"/>
        </kpi:TutorialPanel>
    </mx:ViewStack>
</mx:VBox>