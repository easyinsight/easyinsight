<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:filtering="com.easyinsight.filtering.*"
         width="100%" height="100%" creationComplete="initStuff()" paddingLeft="0" paddingBottom="0" paddingRight="0"
         paddingTop="0"
         borderStyle="solid" borderThickness="1">
    <mx:states>
        <mx:State name="Loading">
            <mx:AddChild relativeTo="{coreVBox}">
                <mx:Canvas width="100%" height="100%" backgroundAlpha=".1" backgroundColor="0x444444"/>
            </mx:AddChild>
            <mx:AddChild relativeTo="{coreVBox}">
                <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                    <mx:ProgressBar indeterminate="true"/>
                </mx:Box>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.EmbeddedControllerLookup;
        import com.easyinsight.analysis.EmbeddedDataServiceEvent;
        import com.easyinsight.analysis.EmbeddedViewFactory;
        import com.easyinsight.analysis.HierarchyDrilldownEvent;
        import com.easyinsight.analysis.HierarchyRollupEvent;
        import com.easyinsight.analysis.IEmbeddedReportController;
        import com.easyinsight.analysis.InsightResponse;
        import com.easyinsight.commands.CommandEvent;
        import com.easyinsight.commands.CommandProcessor;
        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.filtering.TransformsUpdatedEvent;
        import com.easyinsight.framework.DataServiceLoadingEvent;
        import com.easyinsight.framework.HierarchyOverride;
        import com.easyinsight.report.EmbeddedReportExportWindow;
        import com.easyinsight.report.ReportSetupEvent;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.controls.Label;
        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;

        [Bindable]
        [Embed(source="../../../../assets/funnel.png")]
        private var filterIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/table.png")]
        private var exportIcon:Class;

        private var commandProcessor:CommandProcessor;

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }

        private function initStuff():void {
            commandProcessor = new CommandProcessor();
            addEventListener(CommandEvent.COMMAND, onCommand);
            addEventListener(HierarchyDrilldownEvent.DRILLDOWN, childFilterCreation);
            addEventListener(HierarchyRollupEvent.HIERARCHY_ROLLUP, onRollup);
            if (_urlKey != null) {
                analysisService.openAnalysisIfPossible.send(_urlKey);
            } else {
                Alert.show("No analysisID parameter was specified in the report embed HTML code.");
            }
        }

        private function onRollup(event:HierarchyRollupEvent):void {
            var overrideObj:HierarchyOverride = new HierarchyOverride();
            overrideObj.analysisItemID = event.hierarchy.analysisItemID;
            overrideObj.position = event.position;
            dataViewFactory.addOverride(overrideObj);
            transformContainer.clearFilter(event.analysisItem);
        }

        private function childFilterCreation(event:HierarchyDrilldownEvent):void {
            dataViewFactory.noCache = true;
            var overrideObj:HierarchyOverride = new HierarchyOverride();
            overrideObj.analysisItemID = event.hierarchyItem.analysisItemID;
            overrideObj.position = event.position;
            dataViewFactory.addOverride(overrideObj);
            transformContainer.processRawFilterData(event.filterRawData, event.type == HierarchyDrilldownEvent.DRILLDOWN);
        }

        [Bindable]
        private var title:String;
        [Bindable]
        private var _analysisID:int;
        private var _reportType:int;
        [Bindable]
        private var _dataSourceID:int;
        [Bindable]
        private var _reportName:String;

        private var _titleFunction:Function;
        private var _titleFunctionCaller:Object;

        [Bindable]
        private var dataViewFactory:EmbeddedViewFactory;

        [Bindable]
        private var dataSource:DataSourceInfo;

        private var _filterDefinitions:ArrayCollection;


        [Bindable(event="filterDefinitionsChanged")]
        public function get filterDefinitions():ArrayCollection {
            return _filterDefinitions;
        }

        public function set filterDefinitions(value:ArrayCollection):void {
            if (_filterDefinitions == value) return;
            _filterDefinitions = value;
            dispatchEvent(new Event("filterDefinitionsChanged"));
        }

        private var _showFilters:Boolean;

        [Bindable(event="showFiltersChanged")]
        public function get showFilters():Boolean {
            return _showFilters;
        }

        public function set showFilters(value:Boolean):void {
            if (_showFilters == value) return;
            _showFilters = value;
            dispatchEvent(new Event("showFiltersChanged"));
        }

        private var _showToolbar:Boolean;

        [Bindable(event="showToolbarChanged")]
        public function get showToolbar():Boolean {
            return _showToolbar;
        }

        public function set showToolbar(value:Boolean):void {
            if (_showToolbar == value) return;
            _showToolbar = value;
            dispatchEvent(new Event("showToolbarChanged"));
        }


        [Bindable(event="dataSourceIDChanged")]
        public function get dataSourceID():int {
            return _dataSourceID;
        }

        public function set dataSourceID(value:int):void {
            if (_dataSourceID == value) return;
            _dataSourceID = value;
            dispatchEvent(new Event("dataSourceIDChanged"));
            invalidateProperties();
        }

        public function set reportType(val:int):void {
            _reportType = val;
            invalidateProperties();
        }

        public function set reportName(val:String):void {
            _reportName = val;
            invalidateProperties();
        }

        public function set titleClickFunction(functionName:Function):void {
            _titleFunction = functionName;
            invalidateProperties();
        }

        public function set titleFunctionCaller(val:Object):void {
            _titleFunctionCaller = val;
            invalidateProperties();
        }

        public function set analysisID(analysisID:int):void {
            this._analysisID = analysisID;
        }

        private var _urlKey:String;

        public function set urlKey(value:String):void {
            _urlKey = value;
            invalidateProperties();
        }

        private function dataLoadingEvent(event:DataServiceLoadingEvent):void {
            if (event.type == DataServiceLoadingEvent.LOADING_STARTED) {
                currentState = "Loading";
                dataViewFactory.enabled = false;
            } else {
                currentState = "";
                dataViewFactory.enabled = true;
                if (_snapshotOnLoad) {

                }
            }
        }

        override protected function commitProperties():void {
            super.commitProperties();

        }

        private function gotReportInfo():void {
            var response:InsightResponse = analysisService.openAnalysisIfPossible.lastResult as InsightResponse;
            if (response.status == InsightResponse.SUCCESS) {
                _analysisID = response.insightDescriptor.id;
                if (dataViewFactory != null)
                    coreVBox.removeChild(dataViewFactory);

                var controllerClass:Class = EmbeddedControllerLookup.controllerForType(_reportType);
                var controller:IEmbeddedReportController = new controllerClass();
                dataViewFactory = controller.createEmbeddedView();
                dataViewFactory.reportID = _analysisID;
                dataViewFactory.dataSourceID = _dataSourceID;
                coreVBox.addChild(dataViewFactory);
                dataViewFactory.addEventListener(EmbeddedDataServiceEvent.DATA_RETURNED, gotData);
                dataViewFactory.addEventListener(DataServiceLoadingEvent.LOADING_STARTED, dataLoadingEvent);
                dataViewFactory.addEventListener(DataServiceLoadingEvent.LOADING_STOPPED, dataLoadingEvent);
                dataViewFactory.addEventListener(ReportSetupEvent.REPORT_SETUP, onSetup);
                dataViewFactory.setup();
            } else {
                Alert.show("Failed to load the report");
            }
        }

        private var report:AnalysisDefinition;

        private function onSetup(event:ReportSetupEvent):void {
            report = event.reportInfo.report;
            if (report.filterDefinitions != null && report.filterDefinitions.length > 0) {
                filterDefinitions = report.filterDefinitions;
                filterIndex = 1;
            } else {
                filterIndex = 0;
                filterDefinitions = new ArrayCollection();
            }
            dataViewFactory.filterDefinitions = filterDefinitions;
            transformContainer.addEventListener(TransformsUpdatedEvent.UPDATED_TRANSFORMS, transformsUpdated);
            dataViewFactory.retrieveData();
        }

        private function transformsUpdated(event:TransformsUpdatedEvent):void {
            dataViewFactory.filterDefinitions = transformContainer.getFilterDefinitions();
            dataViewFactory.retrieveData(false);
        }

        private function gotData(event:EmbeddedDataServiceEvent):void {
            dataSource = event.dataSourceInfo;
        }

        //        private var showFilters:Boolean = false;

        private var _snapshotOnLoad:Boolean = false;

        public function set snapshotOnLoad(value:Boolean):void {
            _snapshotOnLoad = value;
        }

        private function failure(event:FaultEvent):void {
            var failureLabel:String = event.message.toString();
            var label:Label = new Label();
            label.text = failureLabel;
            coreVBox.addChild(label);
        }

        private function returnToList():void {
            dispatchEvent(new ReturnToListEvent());
        }

        public function refreshData():void {
            dataViewFactory.retrieveData(false);
        }

        private function exportData():void {
            var window:EmbeddedReportExportWindow = new EmbeddedReportExportWindow();
            window.report = dataViewFactory.report;
            window.coreView = dataViewFactory.getChildAt(0);
            PopUpManager.addPopUp(window, this);
            window.x = exportButton.x - 20;
            window.y = exportButton.y + exportButton.height + 10;
        }

        [Bindable]
        [Embed(source="../../../../assets/refresh.png")]
        private var refreshIcon:Class;

        [Bindable]
        private var filterIndex:int;

        [Bindable]
        private var filterTooltip:String = "Hide Filters";

        private function toggleFilterIndex():void {
            if (filterIndex == 1) {
                filterIndex = 0;
                filterTooltip = "Show Filters";
            } else {
                filterIndex = 1;
                filterTooltip = "Hide Filters";
            }
        }
        ]]>
    </mx:Script>
    <mx:RemoteObject destination="analysisDefinition" id="analysisService">
        <mx:method name="openAnalysisIfPossible" result="gotReportInfo()"/>
    </mx:RemoteObject>
    <mx:ViewStack width="100%" resizeToContent="true" creationPolicy="all" selectedIndex="{showToolbar ? 1 : 0}">
        <mx:Box/>
        <mx:HBox width="100%">
            <mx:Button click="refreshData()" icon="{refreshIcon}" labelPlacement="bottom"
                       id="refreshButton"/>
            <mx:Button toolTip="Export Report" click="exportData()" icon="{exportIcon}" id="exportButton"/>
            <mx:Button toolTip="{filterTooltip}" click="toggleFilterIndex()" icon="{filterIcon}"/>
            <mx:Spacer width="100%"/>
        </mx:HBox>
    </mx:ViewStack>
    <mx:ViewStack width="100%" resizeToContent="true" creationPolicy="all"
                  selectedIndex="{showFilters ? filterIndex : 0}">
        <mx:Box/>
        <mx:VBox width="100%" horizontalAlign="center">
            <filtering:TransformContainer id="transformContainer" filterEditable="false"
                                                  existingFilters="{filterDefinitions}"
                                                  width="100%"
                                                  paddingLeft="10"
                                                  paddingTop="10" paddingBottom="10"
                                                  paddingRight="10" feedID="{_dataSourceID}" reportView="true" reportID="{_analysisID}"/>
        </mx:VBox>
    </mx:ViewStack>
    <mx:Canvas id="coreVBox" height="100%" width="100%">
    </mx:Canvas>
</mx:VBox>
