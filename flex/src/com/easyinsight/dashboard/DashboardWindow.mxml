<?xml version="1.0"?>
<util:EISlimWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*"
                   xmlns:dashboard="com.easyinsight.dashboard.*" creationComplete="onCreation()">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.DrillThrough;
        import com.easyinsight.analysis.ReportFormItem;
        import com.easyinsight.analysis.StyleConfiguration;

        import com.easyinsight.util.PopUpUtil;

        import mx.collections.ArrayCollection;
        import mx.events.FlexEvent;
        import mx.managers.PopUpManager;


        private var _dashboard:Dashboard;

        private var items:ArrayCollection;

        [Bindable]
        private var dashboardName:String;

        [Bindable]
        private var dashboardDescription:String;

        [Bindable]
        private var publicVisible:Boolean;

        [Bindable]
        private var exchangeVisible:Boolean;

        [Bindable]
        private var accountVisible:Boolean;

        [Bindable]
        public var reports:ArrayCollection;

        [Bindable]
        public var publicWithKey:Boolean;

        private function onCreation():void {
            dashboardService.getDashboards.send();
        }

        protected override function createChildren():void {
            super.createChildren();
            items = StyleConfiguration.getDashboardItems(_dashboard);
            var lastItem:ReportFormItem = items.getItemAt(items.length - 1) as ReportFormItem;
            lastItem.addEventListener(FlexEvent.CREATION_COMPLETE, onDone);
            for each (var item:ReportFormItem in items) {
                form.addChild(item);
            }
        }

        private function onDone(event:FlexEvent):void {
            PopUpUtil.centerPopUp(this);
        }

        private function save():void {
            var valid:Boolean = true;
            for each (var validateItem:ReportFormItem in items) {
                valid = valid && validateItem.validate();
            }
            if (valid) {
                _dashboard.name = dashboardNameInput.text;
                _dashboard.description = dashboardDescriptionInput.text;
                _dashboard.accountVisible = accountVisibleCheckbox.selected;
                _dashboard.publicVisible = publiclyVisibleCheckbox.selected;
                _dashboard.exchangeVisible = exchangeVisibleCheckbox.selected;
                _dashboard.defaultDrillthrough = drillWindow.save();
                _dashboard.publicWithKey = publicWithKeyCheckbox.selected;
                _dashboard.enableLocalStorage = localStorageCheckbox.selected;
                if (tabletComboBox.selectedItem is DashboardDescriptor) {
                    _dashboard.tabletVersion = DashboardDescriptor(tabletComboBox.selectedItem).id;
                }
                if (phoneComboBox.selectedItem is DashboardDescriptor) {
                    _dashboard.phoneVersion = DashboardDescriptor(phoneComboBox.selectedItem).id;
                }
                for each (var item:ReportFormItem in items) {
                    item.save();
                }
                PopUpManager.removePopUp(this);
            }
        }

        [Bindable]
        private var drillthrough:DrillThrough;

        public function set dashboard(value:Dashboard):void {
            _dashboard = value;
            drillthrough = _dashboard.defaultDrillthrough as DrillThrough;
            dashboardName = _dashboard.name;
            dashboardDescription = _dashboard.description;
            publicVisible =_dashboard.publicVisible;
            exchangeVisible = _dashboard.exchangeVisible;
            accountVisible = _dashboard.accountVisible;
            publicWithKey = _dashboard.publicWithKey;
            tabletID = _dashboard.tabletVersion;
            phoneID = _dashboard.phoneVersion;
            localStorage = _dashboard.enableLocalStorage;
        }

        [Bindable]
        private var tabletID:int;

        [Bindable]
        private var phoneID:int;

        [Bindable]
        private var dashboards:ArrayCollection;

        private function gotDashboards():void {
            var dashboards:ArrayCollection = dashboardService.getDashboards.lastResult as ArrayCollection;
            var empty:Object = { name: "[ No Selection ]"};
            dashboards.addItemAt(empty, 0);
            this.dashboards = dashboards;
        }

        [Bindable]
        private var localStorage:Boolean;
        ]]></mx:Script>
    <mx:TabNavigator id="tabNavigator" creationPolicy="all" width="100%" height="325" paddingLeft="5" paddingRight="5"
            paddingTop="5" paddingBottom="5">
        <mx:Box width="100%" height="100%" borderStyle="solid" borderThickness="1" borderColor="#CCCCCC" paddingLeft="5" paddingTop="5" paddingBottom="5"
            horizontalAlign="center" label="Additional Properties" verticalScrollPolicy="on">
            <mx:Form label="General Properties">
                <mx:FormItem label="Dashboard Name:">
                    <mx:TextInput id="dashboardNameInput" width="380" text="{dashboardName}"/>
                </mx:FormItem>
                <mx:FormItem label="Dashboard Description:">
                    <mx:TextArea width="380" height="75" id="dashboardDescriptionInput"
                                             text="{dashboardDescription}" borderStyle="inset" borderThickness="1"/>
                </mx:FormItem>
                <mx:FormItem label="Account Visible:">
                    <mx:CheckBox id="accountVisibleCheckbox" selected="{accountVisible}"/>
                </mx:FormItem>
                <mx:FormItem label="Publicly Visible:">
                    <mx:CheckBox id="publiclyVisibleCheckbox" selected="{publicVisible}"/>
                </mx:FormItem>
                <mx:FormItem label="Exchange Visible:">
                    <mx:CheckBox id="exchangeVisibleCheckbox" selected="{exchangeVisible}"/>
                </mx:FormItem>
                <mx:FormItem label="Publicly Visible with Key:">
                    <mx:CheckBox id="publicWithKeyCheckbox" selected="{publicWithKey}"/>
                </mx:FormItem>
                <mx:FormItem label="Enable Local Storage:">
                    <mx:CheckBox id="localStorageCheckbox" selected="{localStorage}"/>
                </mx:FormItem>
                <mx:FormItem label="Redirect Dashboard for Tablets:">
                    <util:SmartComboBox labelField="name" selectedProperty="id" selectedValue="{tabletID}" id="tabletComboBox" dataProvider="{dashboards}" width="380"/>
                </mx:FormItem>
                <mx:FormItem label="Redirect Dashboard for Phones:">
                    <util:SmartComboBox labelField="name" selectedProperty="id" selectedValue="{phoneID}" id="phoneComboBox" dataProvider="{dashboards}" width="380"/>
                </mx:FormItem>
            </mx:Form>
        </mx:Box>
        <mx:Box width="100%" height="300" borderStyle="solid" borderThickness="1" borderColor="#CCCCCC" paddingLeft="5" paddingTop="5" paddingBottom="5"
            horizontalAlign="center" label="Additional Properties" verticalScrollPolicy="on">
            <mx:Form id="form">

            </mx:Form>
        </mx:Box>
        <dashboard:DrillThroughWindow label="Default Drillthrough" id="drillWindow" reports="{reports}" drillthrough="{drillthrough}"/>
    </mx:TabNavigator>
    <mx:HBox width="100%" horizontalAlign="center">
        <util:SaveButton label="Save" click="save()"/>
        <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
    </mx:HBox>
    <mx:RemoteObject destination="dashboardService" id="dashboardService">
        <mx:method name="getDashboards" result="gotDashboards()"/>
    </mx:RemoteObject>
</util:EISlimWindow>
