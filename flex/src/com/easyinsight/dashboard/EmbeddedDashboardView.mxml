<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:filtering="com.easyinsight.filtering.*"
         xmlns:util="com.easyinsight.util.*" xmlns:report="com.easyinsight.report.*"
         width="100%" height="100%" creationComplete="initStuff()">
    <mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.EmbeddedDataServiceEvent;
        import com.easyinsight.commands.CommandEvent;
        import com.easyinsight.commands.CommandProcessor;
        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.filtering.TransformsUpdatedEvent;
        import com.easyinsight.framework.DataServiceLoadingEvent;

        import mx.collections.ArrayCollection;
        import mx.core.UIComponent;
        import mx.events.FlexEvent;

        [Bindable]
        [Embed(source="../../../../assets/funnel.png")]
        private var filterIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/table.png")]
        private var exportIcon:Class;

        private var commandProcessor:CommandProcessor;

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }

        private function initStuff():void {
            commandProcessor = new CommandProcessor();
            addEventListener(CommandEvent.COMMAND, onCommand);
            if (!_showControls) {
                removeChild(buttonBox);
            }
            filterIndex = 0;
            dashboardService.getDashboardView.send(dashboardID);
        }

        [Bindable]
        public var dashboardID:int;

        [Bindable]
        private var title:String;
        [Bindable]
        private var _dataSourceID:int;

        private var _filterDefinitions:ArrayCollection;


        [Bindable(event="filterDefinitionsChanged")]
        public function get filterDefinitions():ArrayCollection {
            return _filterDefinitions;
        }

        public function set filterDefinitions(value:ArrayCollection):void {
            if (_filterDefinitions == value) return;
            _filterDefinitions = value;
            dispatchEvent(new Event("filterDefinitionsChanged"));
        }

        private var _urlKey:String;

        public function set urlKey(value:String):void {
            _urlKey = value;
            invalidateProperties();
        }

        private function dataLoadingEvent(event:DataServiceLoadingEvent):void {
            /*if (event.type == DataServiceLoadingEvent.LOADING_STARTED) {
                currentState = "Loading";
                dataViewFactory.enabled = false;
            } else {
                currentState = "";
                dataViewFactory.enabled = true;
            }*/
        }

        private var dashboard:Dashboard;

        [Bindable]
        private var dataSource:DataSourceInfo;


        private function gotDashboard():void {
            dashboard = dashboardService.getDashboardView.lastResult as Dashboard;
            dataSource = dashboard.dataSourceInfo;
            var grid:DashboardGrid = dashboard.rootElement as DashboardGrid;
            dashboardCanvas.setStyle("backgroundAlpha", grid.backgroundAlpha);
            if (grid.backgroundColor != 0) {
                dashboardCanvas.setStyle("backgroundColor", grid.backgroundColor);
            }
            _dataSourceID = dashboard.dataSourceID;
            filterDefinitions = dashboard.filters;
            if (dashboard.filters.length > 0) {
                filterIndex = 1;
            }
            transformContainer.addEventListener(TransformsUpdatedEvent.UPDATED_TRANSFORMS, transformsUpdated);
            var dashboardEditorMetadata:DashboardEditorMetadata = new DashboardEditorMetadata();
            dashboardEditorMetadata.dataSourceID = _dataSourceID;
            dashboardEditorMetadata.role = dashboard.role;
            dashboardEditorMetadata.borderColor = dashboard.borderColor;
            dashboardEditorMetadata.borderThickness = dashboard.borderThickness;
            rootView = DashboardElementFactory.createViewUIComponent(dashboard.rootElement, dashboardEditorMetadata) as IDashboardViewComponent;
            UIComponent(rootView).addEventListener(FlexEvent.CREATION_COMPLETE, function(event:FlexEvent):void {
                var filterMap:Object = new Object();
                filterMap["master"] = dashboard.filters;
                rootView.updateAdditionalFilters(filterMap);
                rootView.initialRetrieve();
            });
            dashboardCanvas.addChild(rootView as UIComponent);
        }

        [Bindable]
        private var rootView:IDashboardViewComponent;

        private function transformsUpdated(event:TransformsUpdatedEvent):void {
            var filterMap:Object = new Object();
            if (transformContainer != null) {
                filterMap["master"] = transformContainer.getFilterDefinitions();
            }
            rootView.updateAdditionalFilters(filterMap);
            rootView.refresh();
        }

        private function gotData(event:EmbeddedDataServiceEvent):void {
            var report:AnalysisDefinition = event.analysisDefinition;
            if (report.filterDefinitions != null && report.filterDefinitions.length > 0) {
                filterDefinitions = report.filterDefinitions;
                if (!_showControls) {
                    filterIndex = 1;
                }
            } else {
                filterIndex = 0;
                filterDefinitions = new ArrayCollection();
            }
        }

        private var showFilters:Boolean = false;

        public function refreshData():void {
            rootView.refresh();
        }

        [Bindable]
        [Embed(source="../../../../assets/refresh.png")]
        private var refreshIcon:Class;

        [Bindable]
        private var filterIndex:int;

        private var _showControls:Boolean;

        public function set showControls(value:Boolean):void {
            _showControls = value;
        }

        [Bindable]
        private var filterTooltip:String = "Hide Filters";

        private function toggleFilterIndex():void {
            filterIndex = filterIndex == 1 ? 0 : 1;
            rootView.toggleFilters(filterIndex == 1);
        }
        ]]>
    </mx:Script>
    <mx:RemoteObject destination="dashboardService" id="dashboardService">
        <mx:method name="getDashboardView" result="gotDashboard()"/>
    </mx:RemoteObject>
    <mx:HBox width="100%" id="buttonBox" backgroundColor="0" backgroundAlpha="1" paddingLeft="5" paddingBottom="5" paddingTop="5">
        <report:RefreshButton icon="{refreshIcon}" labelPlacement="right"
                       id="refreshButton" styleName="grayButton" label="Refresh" viewFactory="{rootView}"
                    dataSource="{dataSource}"/>
        <mx:Button toolTip="{filterTooltip}" click="toggleFilterIndex()" icon="{filterIcon}" labelPlacement="right"
                styleName="grayButton" label="Toggle Filters"/>
        <mx:Spacer width="100%"/>
    </mx:HBox>
    <mx:ViewStack width="100%" resizeToContent="true" creationPolicy="all" selectedIndex="{filterIndex}">
        <mx:Box/>
        <mx:VBox width="100%" horizontalAlign="center">
            <filtering:TransformContainer id="transformContainer" filterEditable="false"
                          existingFilters="{filterDefinitions}"
                          updatedTransforms="transformsUpdated(event)" width="100%"
                          feedID="{_dataSourceID}" dashboardID="{dashboardID}"/>
        </mx:VBox>
    </mx:ViewStack>
    <util:AntiScrollCanvas height="100%" id="dashboardCanvas" backgroundColor="#FFFFFF"
                       backgroundAlpha=".8" width="100%"/>
</mx:VBox>
