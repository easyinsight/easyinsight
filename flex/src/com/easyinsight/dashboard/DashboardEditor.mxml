<?xml version="1.0" ?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
         xmlns:filtering="com.easyinsight.filtering.*" xmlns:easyinsight="com.easyinsight.*"
         implements="com.easyinsight.listing.IPerspective" width="100%" height="100%" creationComplete="populateData()"
         styleName="screenBackground">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisCloseEvent;

        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemNode;
        import com.easyinsight.analysis.AnalysisItemWrapper;
        import com.easyinsight.analysis.FeedMetadata;
        import com.easyinsight.code.MarmotScriptEvent;
        import com.easyinsight.code.MarmotScriptWindow;
        import com.easyinsight.commands.CommandEvent;
        import com.easyinsight.commands.CommandProcessor;
        import com.easyinsight.filtering.FilterDefinition;
        import com.easyinsight.framework.PerspectiveInfo;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.scorecard.ScorecardDescriptor;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.ActionDashboardLog;
        import com.easyinsight.util.PopUpUtil;

        import com.easyinsight.util.ProgressAlert;
        import com.easyinsight.util.UserAudit;

        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.controls.Alert;
        import mx.core.UIComponent;
        import mx.events.CloseEvent;
        import mx.events.FlexEvent;
        import mx.managers.BrowserManager;
        import mx.managers.PopUpManager;
        import mx.utils.URLUtil;

        private var dashboardChanged:Boolean;

        private function populateData():void {
            commandProcessor = new CommandProcessor();
            addEventListener(CommandEvent.COMMAND, onCommand);
            addEventListener(DashboardChangedEvent.DASHBOARD_CHANGED, function(event:DashboardChangedEvent):void {
                dashboardChanged = true;
            });
            var controls:ArrayCollection = new ArrayCollection();
            controls.addItem(new DashboardControl("Grid", DashboardGrid));
            controls.addItem(new DashboardControl("Stack", DashboardStack));
            controls.addItem(new DashboardControl("Image", DashboardImage));
            controls.addItem(new DashboardControl("Text", DashboardTextElement));
            this.availableControls = controls;
            if (_dashboardID == 0) {
                ProgressAlert.alert(this, "Retrieving reports...", null, feedService.searchForSubscribedFeeds, scorecardService.getScorecardDescriptorsForDataSource);
                feedService.searchForSubscribedFeeds.send();
            } else {
                dashboardViewable = true;
                ProgressAlert.alert(this, "Retrieving data...", null, dashboardService.getDashboard);
                dashboardService.getDashboard.send(_dashboardID);
            }
        }

        private var _startDataSourceID:int;

        public function set startDataSourceID(value:int):void {
            _startDataSourceID = value;
        }

        private var commandProcessor:CommandProcessor;

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }

        private var _dashboardID:int;

        public function set dashboardID(value:int):void {
            _dashboardID = value;
        }

        private var _dashboard:Dashboard;

        public function set dashboard(value:Dashboard):void {
            _dashboard = value;
        }

        [Bindable]
        private var availableControls:ArrayCollection;

        [Bindable]
        private var availableReports:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var availableScorecards:ArrayCollection = new ArrayCollection();

        private function gotReports():void {
            var reportList:ArrayCollection = analysisService.getInsightDescriptorsForDataSource.lastResult as ArrayCollection;
            for each (var report:InsightDescriptor in reportList) {
                availableReports.addItem(report);
            }
            var sort:Sort = new Sort();
            sort.fields = [ new SortField("name", true) ];
            availableReports.sort = sort;
            availableReports.refresh();
        }

        private function gotScorecards():void {
            var scorecardList:ArrayCollection = scorecardService.getScorecardDescriptorsForDataSource.lastResult as ArrayCollection;
            for each (var scorecard:ScorecardDescriptor in scorecardList) {
                availableScorecards.addItem(scorecard);
            }
            var sort:Sort = new Sort();
            sort.fields = [ new SortField("name", true) ];
            availableScorecards.sort = sort;
            availableScorecards.refresh();
        }

        private function gotDataSources():void {
            var window:DashboardSetupWindow = new DashboardSetupWindow();
            window.startDataSourceID = _startDataSourceID;
            window.dataSources = feedService.searchForSubscribedFeeds.lastResult as ArrayCollection;
            window.addEventListener(DashboardSetupEvent.DASHBOARD_SETUP, onDimensions, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private var metadata:DashboardEditorMetadata = new DashboardEditorMetadata();

        private function gotDashboard():void {
            _dashboard = dashboardService.getDashboard.lastResult as Dashboard;
            dataSourceID = _dashboard.dataSourceID;
            metadata.dataSourceID = dataSourceID;
            var feedFragmentObject:Object = new Object();
            feedFragmentObject.dashboardAdminID = String(_dashboard.urlKey);
            var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
            BrowserManager.getInstance().setFragment(feedFragmentString);
            var box:DashboardBox = new DashboardBox();
            rootView = box;
            box.dashboardEditorMetadata = metadata;
            box.element = _dashboard.rootElement;
            box.allowDelete = false;
            UIComponent(box).addEventListener(FlexEvent.CREATION_COMPLETE, function(event:FlexEvent):void {
                var filterMap:Object = new Object();
                filterMap["master"] = _dashboard.filters;
                box.updateAdditionalFilters(filterMap);
                box.initialRetrieve();
            });
            dashboardCanvas.addChild(box);
            ProgressAlert.alert(this, "Retrieving reports...", null, analysisService.getInsightDescriptorsForDataSource, scorecardService.getScorecardDescriptorsForDataSource);
            analysisService.getInsightDescriptorsForDataSource.send(_dashboard.dataSourceID);
            scorecardService.getScorecardDescriptorsForDataSource.send(_dashboard.dataSourceID);
            dashboardFilters = _dashboard.filters;
            UserAudit.instance().log(new ActionDashboardLog(ActionDashboardLog.EDIT, _dashboardID));
            dataService.getFeedMetadata.send(_dashboard.dataSourceID);
        }

        private var rootView:IDashboardViewComponent;

        private function onDimensions(event:DashboardSetupEvent):void {
            var grid:DashboardGrid = new DashboardGrid();
            grid.rows = event.rows;
            grid.columns = event.columns;
            var box:DashboardBox = new DashboardBox();
            box.dashboardEditorMetadata = metadata;
            box.element = grid;
            box.allowDelete = false;
            dashboardCanvas.addChild(box);
            _dashboard = new Dashboard();
            dataSourceID = event.dataSource.id;
            ProgressAlert.alert(this, "Retrieving reports...", null, analysisService.getInsightDescriptorsForDataSource);
            analysisService.getInsightDescriptorsForDataSource.send(dataSourceID);
            scorecardService.getScorecardDescriptorsForDataSource.send(dataSourceID);
            dataService.getFeedMetadata.send(dataSourceID);
            _dashboard.rootElement = grid;
        }

        private function closeEditor():void {
            if (dashboardChanged) {
                Alert.show("You have unsaved changes. Are you sure you want to exit?", "Alert",
                        Alert.OK | Alert.CANCEL, null, alertListener, null, Alert.CANCEL);
            } else {
                dispatchEvent(new AnalysisCloseEvent());
            }
        }

        private function alertListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                dispatchEvent(new AnalysisCloseEvent());
            }
        }

        private function save():void {
            var box:DashboardBox = dashboardCanvas.getChildAt(0) as DashboardBox;
            if (box.validate()) {
                box.save();
                _dashboard.dataSourceID = dataSourceID;
                _dashboard.filters = transformContainer.getFilterDefinitions();
                var window:DashboardSaveWindow = new DashboardSaveWindow();
                window.addEventListener(DashboardSaveEvent.DASHBOARD_SAVE, onSave, false, 0, true);
                window.exchangeSave = exchangeSave;
                window.dashboard = _dashboard;
                PopUpManager.addPopUp(window, this, true);
                PopUpUtil.centerPopUp(window);
            }
        }

        private function onSave(event:DashboardSaveEvent):void {
            dashboardChanged = false;
            dashboardViewable = true;
            this._dashboard = event.dashboard;
        }

        [Bindable]
        private var dataSourceID:int;

        [Bindable]
        private var availableDimensions:ArrayCollection;

        [Bindable]
        private var index:int;

        private function viewDashboard():void {
            if (dashboardChanged) {
                Alert.show("You have unsaved changes. Are you sure you want to exit?", "Alert",
                        Alert.OK | Alert.CANCEL, null, viewListener, null, Alert.CANCEL);
            } else {
                dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DASHBOARD_VIEW, {dashboardID: _dashboard.id})));
            }
        }

        private function viewListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DASHBOARD_VIEW, {dashboardID: _dashboard.id})));
            }
        }

        private function configureDashboard():void {
            var window:DashboardWindow = new DashboardWindow();
            window.dashboard = _dashboard;
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        [Bindable]
        private var allFields:ArrayCollection;

        private var feedMetadata:FeedMetadata;

        private var dashboardFilters:ArrayCollection = new ArrayCollection();

        private var exchangeSave:Boolean;

        private function gotFeedMetadata():void {
            var feedMetadata:FeedMetadata = dataService.getFeedMetadata.lastResult as FeedMetadata;
            exchangeSave = feedMetadata.exchangeSave;
            allFields = new ArrayCollection();
            var dimensions:ArrayCollection = new ArrayCollection();
            for each (var analysisItem:AnalysisItem in feedMetadata.fields) {
                dimensions.addItem(analysisItem);
                var aNode:AnalysisItemNode = new AnalysisItemNode();
                aNode.analysisItem = analysisItem;
                allFields.addItem(new AnalysisItemWrapper(aNode));
            }
            this.availableDimensions = dimensions;
            if (transformContainer.getFilterDefinitions().length == 0) {
                for each (var filter:FilterDefinition in dashboardFilters) {
                    transformContainer.addFilterDefinition(filter);
                }
            }
            metadata.allFields = allFields;
            metadata.dataSourceID = dataSourceID;
            metadata.availableFields = availableDimensions;
        }

        [Bindable]
        private var dashboardViewable:Boolean = false;

        private function editCode():void {
            var window:MarmotScriptWindow = new MarmotScriptWindow();
            window.script = _dashboard.marmotScript;
            window.addEventListener(MarmotScriptEvent.SAVE_SCRIPT, onScript, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function transformsUpdated(event:Event):void {
            var filterMap:Object = new Object();
            if (transformContainer != null) {
                filterMap["master"] = transformContainer.getFilterDefinitions();
            }
            rootView.updateAdditionalFilters(filterMap);
            rootView.refresh();
        }

        private function onScript(event:MarmotScriptEvent):void {
            _dashboard.marmotScript = event.script;
        }

        public function gotFocus():void {
        }

        public function cleanup():void {
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="analysisDefinition" id="analysisService">
        <mx:method name="getInsightDescriptorsForDataSource" result="gotReports()"/>
    </mx:RemoteObject>
    <mx:RemoteObject destination="dashboardService" id="dashboardService">
        <mx:method name="getDashboard" result="gotDashboard()"/>
    </mx:RemoteObject>
    <mx:RemoteObject destination="data" id="dataService">
        <mx:method name="getFeedMetadata" result="gotFeedMetadata()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="feedService" destination="feeds">
        <mx:method name="searchForSubscribedFeeds" result="gotDataSources()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="scorecardService" destination="scorecardService">
        <mx:method name="getScorecardDescriptorsForDataSource" result="gotScorecards()"/>
    </mx:RemoteObject>
    <mx:HBox width="100%" styleName="topButtonBar">
        <mx:Button id="wrapButton" icon="@Embed(source='../../../../assets/document_out.png')" click="closeEditor()"
                   toolTip="Close" labelPlacement="right" label="Close Editor" styleName="grayButton"/>
        <mx:Button id="saveButton" icon="@Embed(source='../../../../assets/floppy_disk.png')" click="save()"
                   toolTip="Save" labelPlacement="right" label="Save" styleName="grayButton"/>
        <mx:Button icon="@Embed(source='../../../../assets/media_play_green.png')" click="viewDashboard()"
                   toolTip="View Dashboard" label="Dashboard View" labelPlacement="right" enabled="{dashboardViewable}" styleName="grayButton"/>
        <mx:Button icon="@Embed(source='../../../../assets/document_edit.png')" click="configureDashboard()"
                   toolTip="Configure Dashboard" label="Configure Dashboard" labelPlacement="right" styleName="grayButton"/>
        <mx:Button icon="@Embed(source='../../../../assets/code_edit.png')" click="editCode()"
                   toolTip="Edit Code" label="Edit Code" labelPlacement="right" styleName="grayButton"/>
        <mx:Spacer width="100%"/>
        <easyinsight:LoggedOnStatus textColor="#FFFFFF"/>
    </mx:HBox>
    <mx:HBox width="100%" height="100%" paddingLeft="10" paddingRight="10">
        <mx:VBox height="100%" horizontalAlign="center" width="200" paddingTop="20" paddingBottom="20">
            <mx:Label text="Controls" fontSize="14"/>
            <mx:List id="controlsList" dataProvider="{availableControls}" labelField="name" dragEnabled="true"
                     width="100%" rowCount="4"/>
            <mx:Label text="Reports" fontSize="14"/>
            <mx:List id="reportsList" dataProvider="{availableReports}" labelField="name" dragEnabled="true"
                     width="100%" height="100%"/>
            <mx:List id="scorecardList" dataProvider="{availableScorecards}" labelField="name" dragEnabled="true"
                     width="100%" height="100%"/>
        </mx:VBox>
        <mx:VBox width="100%" height="100%" horizontalAlign="center">
            <mx:HBox width="100%">
                <mx:Button icon="@Embed(source='../../../../assets/funnel.png')"
                       toolTip="Create New Filter..." click="transformContainer.addNewFilter()" label="New Filter"/>
                <filtering:TransformContainer id="transformContainer" width="100%" height="100%"
                                              borderStyle="solid"
                                              borderThickness="1" backgroundColor="#ffffff"
                                              backgroundAlpha=".1" feedID="{dataSourceID}"
                                              analysisItems="{allFields}"
                                              updatedTransforms="transformsUpdated(event)"/>
            </mx:HBox>
            <mx:Canvas width="100%" height="100%" id="dashboardCanvas"/>
        </mx:VBox>
    </mx:HBox>
</mx:VBox>