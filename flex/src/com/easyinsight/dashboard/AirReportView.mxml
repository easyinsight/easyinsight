<?xml version="1.0" ?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:dashboard="com.easyinsight.dashboard.*"
           xmlns:util="com.easyinsight.util.*" width="100%"
           height="100%" creationComplete="setupListeners()">
    <mx:Metadata>
        [Event(name="airLogout", type="com.easyinsight.dashboard.AirLogoutEvent")]
        [Event(name="eiUpdate", type="com.easyinsight.dashboard.EIUpdateEvent")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import com.easyinsight.account.Account;
        import com.easyinsight.analysis.service.ReportRetrievalFault;

        import com.easyinsight.framework.User;
        import com.easyinsight.quicksearch.EIDescriptor;
        import com.easyinsight.quicksearch.QuickSearchEvent;
        import com.easyinsight.quicksearch.QuickSearchWindow;


        import com.easyinsight.util.AsyncLoadEvent;
        import com.easyinsight.util.IAsyncScreen;
        import com.easyinsight.util.IAsyncScreenFactory;

        import com.easyinsight.util.PopUpUtil;

        import mx.collections.ArrayCollection;

        import flash.data.EncryptedLocalStore;

        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.core.Container;
        import mx.core.WindowedApplication;
        import mx.managers.PopUpManager;
        import mx.rpc.events.ResultEvent;

        import flash.desktop.NativeApplication;
        import flash.display.NativeMenu;
        import flash.display.NativeWindow;
        import flash.display.NativeMenuItem;

        private function setupListeners():void {
            stage.addEventListener(KeyboardEvent.KEY_UP, onKey);
        }

        private function onKey(event:KeyboardEvent):void {
            if (event.ctrlKey && event.keyCode == 78) {
                launchQuickSearchWindow();
            }
        }

        private function launchQuickSearchWindow():void {
            var window:QuickSearchWindow = new QuickSearchWindow();
            window.addEventListener(QuickSearchEvent.QUICK_SEARCH, onQuickSearch);
            window.addEventListener(QuickSearchEvent.QUICK_SEARCH_CANCEL, onQuickSearch);
            window.descriptors = descriptors; 
            PopUpManager.addPopUp(window, this, false);
            PopUpUtil.centerPopUp(window);
        }


        private function onQuickSearch(event:QuickSearchEvent):void {
            event.currentTarget.removeEventListener(QuickSearchEvent.QUICK_SEARCH, onQuickSearch);
            event.currentTarget.removeEventListener(QuickSearchEvent.QUICK_SEARCH_CANCEL, onQuickSearch);
            if (event.type == QuickSearchEvent.QUICK_SEARCH) {
                viewDescriptor(event.eiDescriptor);
            }
        }

        private var reportMap:Object = new Object();

        private var loadingTarget:Container;

        private var _app:WindowedApplication;

        private var reportsMenu:NativeMenu;
        private var goalsMenu:NativeMenu;

        private var defaultScreen:EIDescriptor;

        [Bindable]
        private var descriptors:ArrayCollection;

        private var allDescriptors:ArrayCollection;

        [Bindable]
        private var currentView:EIDescriptor;

        private var myGoalsDescriptor:MyGoalsDescriptor;

        [Bindable]
        private var screenFactory:IAsyncScreenFactory = new AirScreenFactory();

        public function set app(value:WindowedApplication):void {
            _app = value;
        }

        private function checkForUpdates(event:Event):void {
            dispatchEvent(new EIUpdateEvent());
        }

        private function about(event:Event):void {
        }

        override protected function createChildren():void {
            super.createChildren();
            var baseMenu:NativeMenu = new NativeMenu();
            if (NativeApplication.supportsMenu) {
                _app.nativeApplication.menu = baseMenu;
            }
            if (NativeWindow.supportsMenu) {
                _app.nativeWindow.menu = baseMenu;
            }
            reportsMenu = new NativeMenu();
            baseMenu.addSubmenu(reportsMenu, "Reports");

            if (User.getInstance().getAccountType() >= Account.GROUP) {
                goalsMenu = new NativeMenu();
                baseMenu.addSubmenu(goalsMenu, "Goals");
                var myGoalsItem:NativeMenuItem = new NativeMenuItem("My Goals");
                myGoalsItem.addEventListener(Event.SELECT, onReport);
                myGoalsDescriptor = new MyGoalsDescriptor();
                myGoalsItem.data = myGoalsDescriptor;
                goalsMenu.addItem(myGoalsItem);
            }

            var helpMenu:NativeMenu = new NativeMenu();
            defaultScreen = new AirIntroDescriptor();
            var welcomeItem:NativeMenuItem = new NativeMenuItem("Welcome");
            welcomeItem.data = defaultScreen;
            welcomeItem.addEventListener(Event.SELECT, onReport);
            helpMenu.addItem(welcomeItem);

            var updatesItem:NativeMenuItem = new NativeMenuItem("Check for Updates");
            updatesItem.addEventListener(Event.SELECT, checkForUpdates);
            helpMenu.addItem(updatesItem);
            var aboutItem:NativeMenuItem = new NativeMenuItem("About");
            aboutItem.addEventListener(Event.SELECT, about);
            helpMenu.addItem(aboutItem);
            baseMenu.addSubmenu(helpMenu, "Help");
            feedService.getDescriptors.send();
        }

        private function onReport(event:Event):void {
            var widgetItem:EIDescriptor = event.currentTarget.data as EIDescriptor;
            viewDescriptor(widgetItem);
        }

        private function viewDescriptor(descriptor:EIDescriptor):void {
            currentView = descriptor;
        }

        private function gotDescriptors():void {
            descriptors = new ArrayCollection();
            var reportColl:ArrayCollection = feedService.getDescriptors.lastResult as ArrayCollection;
            var reportSort:ArrayCollection = new ArrayCollection();
            var goalSort:ArrayCollection = new ArrayCollection();
            for each (var descriptor:EIDescriptor in reportColl) {
                if (descriptor.getType() == EIDescriptor.REPORT) {
                    reportSort.addItem(descriptor);
                    /*var reportMenuItem:NativeMenuItem = new NativeMenuItem(descriptor.name);
                    reportsMenu.addItem(reportMenuItem);
                    reportMenuItem.addEventListener(Event.SELECT, onReport);
                    reportMenuItem.data = descriptor;*/
                    descriptors.addItem(descriptor);
                } else if (User.getInstance().getAccountType() >= Account.GROUP && descriptor.getType() == EIDescriptor.GOAL_TREE) {
                    goalSort.addItem(descriptor);
                    /*var goalsMenuItem:NativeMenuItem = new NativeMenuItem(descriptor.name);
                    goalsMenu.addItem(goalsMenuItem);
                    goalsMenuItem.addEventListener(Event.SELECT, onReport);
                    goalsMenuItem.data = descriptor;*/
                    descriptors.addItem(descriptor);
                }
            }
            allDescriptors = new ArrayCollection(descriptors.toArray());
            allDescriptors.addItem(defaultScreen);
            allDescriptors.addItem(myGoalsDescriptor);
            var sort:Sort = new Sort();
            sort.fields = [new SortField("name")];
            reportSort.sort = sort;
            reportSort.refresh();
            goalSort.sort = sort;
            goalSort.refresh();
            for each (var reportDescriptor:EIDescriptor in reportSort) {
                var reportMenuItem:NativeMenuItem = new NativeMenuItem(reportDescriptor.name);
                reportsMenu.addItem(reportMenuItem);
                reportMenuItem.addEventListener(Event.SELECT, onReport);
                reportMenuItem.data = reportDescriptor;
            }
            if (User.getInstance().getAccountType() >= Account.GROUP) {
                for each (var goalDescriptor:EIDescriptor in goalSort) {
                    var goalsMenuItem:NativeMenuItem = new NativeMenuItem(goalDescriptor.name);
                    goalsMenu.addItem(goalsMenuItem);
                    goalsMenuItem.addEventListener(Event.SELECT, onReport);
                    goalsMenuItem.data = goalDescriptor;
                }
            }

            var currentViewTypeBytes:ByteArray = EncryptedLocalStore.getItem("currentViewType");
            if (currentViewTypeBytes != null) {
                var currentViewType:String = currentViewTypeBytes.readUTFBytes(currentViewTypeBytes.length);

            }
            var currentViewIDBytes:ByteArray = EncryptedLocalStore.getItem("currentViewID");
            if (currentViewIDBytes != null) {
                var currentViewID:String = currentViewIDBytes.readUTFBytes(currentViewIDBytes.length);

            }
            var selectedDescriptor:EIDescriptor = defaultScreen;
            if (currentViewType != null && currentViewID != null) {
                for each (var viewDescriptor:EIDescriptor in allDescriptors) {
                    if (viewDescriptor.getType() == int(currentViewType) &&
                            viewDescriptor.id == int(currentViewID)) {
                        selectedDescriptor = viewDescriptor;
                        break;
                    }
                }
            }
            currentView = selectedDescriptor;
        }

        private function onLoadStart(event:AsyncLoadEvent):void {
            showProgress = true;
        }

        private function onLoadStop(event:AsyncLoadEvent):void {
            showProgress = false;
            statusDisplay.good();
            showRefresh = event.asyncScreen.canRefresh();
            showBrowser = event.asyncScreen.canViewInBrowser();

            var currentViewTypeBytes:ByteArray = new ByteArray();
            currentViewTypeBytes.writeUTFBytes(String(currentView.getType()));
            EncryptedLocalStore.setItem("currentViewType", currentViewTypeBytes);
            var currentViewIDBytes:ByteArray = new ByteArray();
            currentViewIDBytes.writeUTFBytes(String(currentView.id));
            EncryptedLocalStore.setItem("currentViewID", currentViewIDBytes);
        }

        private function onFault(event:ReportRetrievalFault):void {
            showProgress = false;
            statusDisplay.bad(event);
        }

        private function refreshData():void {
            var panel:IAsyncScreen = viewStack.selectedChild as IAsyncScreen;
            panel.refreshData();
        }

        private function launchBrowser():void {
            var panel:IAsyncScreen = viewStack.selectedChild as IAsyncScreen;
            flash.net.navigateToURL(new URLRequest(panel.getBrowserURL()), "_self");
        }

        [Bindable]
        private var showRefresh:Boolean = false;
        [Bindable]
        private var showBrowser:Boolean = false;
        [Bindable]
        private var showProgress:Boolean = false;
        [Bindable]
        private var reportRows:int;

        ]]></mx:Script>
    <mx:RemoteObject id="feedService" destination="feeds">
        <mx:method name="getDescriptors" result="gotDescriptors()"/>
    </mx:RemoteObject>
    <mx:VBox width="100%" height="100%" paddingLeft="5" paddingBottom="5" paddingRight="5" paddingTop="5">
        <mx:HBox width="100%" verticalAlign="middle">
            <mx:Button icon="@Embed(source=
                       '../../../../assets/refresh.png')" toolTip="Refresh Selected View" click="refreshData()"
                       visible="{showRefresh}"/>
            <mx:Button icon="@Embed(source=
                       '../../../../assets/favicon.PNG')" toolTip="Launch Browser to View in Easy Insight"
                       click="launchBrowser()" visible="{showBrowser}"/>
            <dashboard:ReportStatusDisplay id="statusDisplay"/>
            <mx:ProgressBar id="progressBar" indeterminate="true" visible="{showProgress}" width="50" label=""/>
            <mx:Spacer width="100%"/>
            <mx:Button label="Log Out" click="dispatchEvent(new AirLogoutEvent())"/>
        </mx:HBox>
        <util:AsyncViewStack id="viewStack" width="100%" height="100%" screenRenderer="{screenFactory}"
                asyncLoadStart="onLoadStart(event)" asyncLoadSuccess="onLoadStop(event)"
                targetDescriptor="{currentView}"/>
    </mx:VBox>
</mx:Canvas>