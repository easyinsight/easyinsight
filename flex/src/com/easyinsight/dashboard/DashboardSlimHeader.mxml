<?xml version="1.0"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:easyinsight="com.easyinsight.*"
         xmlns:report="com.easyinsight.report.*" xmlns:listing="com.easyinsight.listing.*"
         width="100%" styleName="topButtonBar">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.IRetrievable;
        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.framework.PerspectiveInfo;
        import com.easyinsight.framework.User;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.skin.ImageConstants;

        import mx.collections.ArrayCollection;

        import mx.controls.TextArea;
        import mx.core.UIComponent;
        import mx.states.State;


        [Bindable]
        private var _dashboardView:DashboardView;

        public function set dashboardView(value:DashboardView):void {
            _dashboardView = value;
        }

        private var _dashboard:Dashboard;

        [Bindable]
        private var editable:Boolean;

        [Bindable]
        private var showControl:Boolean = true;

        public function set dashboard(value:Dashboard):void {
            _dashboard = value;
            if (_dashboard != null) {
                description = _dashboard.description;
                dashboardName = _dashboard.name;
                editable = _dashboard.role == 1 && User.getInstance().analyst;
                showControl = !User.getInstance().onlyShowTopReports;
            }
        }

        [Bindable]
        private var description:String;

        [Bindable]
        private var dashboardName:String;

        private var stateIndex:int;
        private var lastState:State;

        public function generateState(description:String, dashboardView:DashboardView):void {
            _dashboardView = dashboardView;
            var ops:Array = [];
            var textAreas:Array = [];
            var remainingSections:Array = [];

            if (ops.length > 0) {
                var len:int = Math.max(2, textAreas.length);
                for each (var area:TextArea in textAreas) {
                    area.width = 780 / len;
                }
                for each (var comp:UIComponent in remainingSections) {
                    comp.width = 830 / len;
                }
                var state:State = new State();
                var name:String = "report" + stateIndex++;
                state.name = name;
                state.overrides = ops;
                var states:Array = [];
                states.push(state);
                if (lastState != null) {
                    states.push(lastState);
                }
                this.states = states;
                lastState = state;
                currentState = name;
            } else {
                currentState = "";
            }
        }

        private var _dataSource:DataSourceInfo;

        private var _viewFactory:IRetrievable;


        [Bindable(event="dataSourceChanged")]
        public function get dataSource():DataSourceInfo {
            return _dataSource;
        }

        public function set dataSource(value:DataSourceInfo):void {
            if (_dataSource == value) return;
            _dataSource = value;
            dispatchEvent(new Event("dataSourceChanged"));
        }

        [Bindable(event="viewFactoryChanged")]
        public function get viewFactory():IRetrievable {
            return _viewFactory;
        }

        public function set viewFactory(value:IRetrievable):void {
            if (_viewFactory == value) return;
            _viewFactory = value;
            dispatchEvent(new Event("viewFactoryChanged"));
        }

        private function viewInHTML():void {
            if (_dashboard != null) {
                navigateToURL(new URLRequest("/app/html/dashboard/" + _dashboard.urlKey), "_blank");
            }
        }

        private function toggleFilters():void {
            if (_dashboardView != null) {
                _dashboardView.toggleFilters();
            }
        }

        private function resetFilters():void {
            if (_dashboardView != null) {
                _dashboardView.resetFilters();
            }
        }

        [Bindable]
        public var configLabel:String;

        [Bindable]
        public var options:ArrayCollection;

        ]]></mx:Script>
    <mx:Style>
        .myCustomPopUpStyleName {
            fontSize: 12;
            fontFamily: "Lucida Grande";
            textAlign: left;
            dropShadowEnabled: false;
            borderStyle: solid;
            borderThickness: 1;
            cornerRadius: 8;
        }
    </mx:Style>
    <mx:LinkButton click="_dashboardView.close()" styleName="solidMenuButton" labelPlacement="right"
               id="backButton"
               toolTip="Close the report view" label="Close Dashboard"/>
    <report:RefreshButton styleName="solidMenuButton" labelPlacement="right"
               id="refreshButton" toolTip="Refresh this dashboard" label="Refresh" viewFactory="{viewFactory}"
            dataSource="{dataSource}" visible="{showControl}"/>
    <mx:LinkButton styleName="solidMenuButton" click="_dashboardView.exportDashboard(exportButton)"
           labelPlacement="right"  visible="{showControl}"
           id="exportButton" toolTip="Export the dashboard..." label="Export"/>
    <mx:LinkButton click="toggleFilters()" styleName="solidMenuButton" labelPlacement="right"
               id="filterButton" label="Toggle Filters" visible="{showControl}"/>
    <!--<mx:Button click="resetFilters()" styleName="grayButton" labelPlacement="right"
               id="resetButton" label="Reset Filters" icon="{filterIcon}"/>-->
    <mx:LinkButton click="viewInHTML()" styleName="solidMenuButton" labelPlacement="right" id="viewInHTMLButton" label="View in HTML" visible="{showControl}"/>
    <listing:ArghButton label="{configLabel}" styleName="flatTransparentMenuButton" itemClick="_dashboardView.onConfigurationClick(event)" width="160" id="newButton"
                        dataProvider="{options}" labelField="label" openAlways="true" popUpStyleName="myCustomPopUpStyleName" visible="{showControl}"/>
    <mx:LinkButton click="dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DASHBOARD_EDITOR, { dashboardID: _dashboard.id})))" styleName="solidMenuButton" labelPlacement="right"
               id="editButton" label="Edit the Dashboard" visible="{editable}"/>
    <mx:Spacer width="100%"/>
    <easyinsight:LoggedOnStatus textColor="#FFFFFF"/>
</mx:HBox>
