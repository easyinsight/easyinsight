<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
         xmlns:dashboard="com.easyinsight.dashboard.*"
         width="100%" height="100%" creationComplete="initStuff()">
    <mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.MultiPagePDFCreator;
        import com.easyinsight.commands.CommandEvent;
        import com.easyinsight.commands.CommandProcessor;
        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.skin.ImageLoadEvent;
        import com.easyinsight.skin.ImageLoader;

        import mx.collections.ArrayCollection;

        private var commandProcessor:CommandProcessor;

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }

        private function initStuff():void {
            commandProcessor = new CommandProcessor();
            addEventListener(CommandEvent.COMMAND, onCommand);
            filterIndex = 0;
            dashboardService.getDashboardViewWithHeader.send(dashboardID);
        }

        [Bindable]
        public var dashboardID:int;

        [Bindable]
        public var showHeader:Boolean;

        [Bindable]
        public var orientation:String;

        [Bindable]
        private var title:String;
        [Bindable]
        private var _dataSourceID:int;

        private var _filterDefinitions:ArrayCollection;


        [Bindable(event="filterDefinitionsChanged")]
        public function get filterDefinitions():ArrayCollection {
            return _filterDefinitions;
        }

        public function set filterDefinitions(value:ArrayCollection):void {
            if (_filterDefinitions == value) return;
            _filterDefinitions = value;
            dispatchEvent(new Event("filterDefinitionsChanged"));
        }

        private var _urlKey:String;

        public function set urlKey(value:String):void {
            _urlKey = value;
            invalidateProperties();
        }

        private var _seleniumID:int;

        public function set seleniumID(value:int):void {
            _seleniumID = value;
        }

        private var timer:Timer;

        private function dashboardLoaded(event:DashboardReportLoadEvent):void {
            timer = new Timer(5000);
            timer.addEventListener(TimerEvent.TIMER, onTimer);
            timer.start();

        }

        private function onTimer(event:TimerEvent):void {
            timer.stop();
            var pageList:ArrayCollection = MultiPagePDFCreator.exportReportToPDF(dashboardRenderer, true, headerArea);
            exportService.seleniumDashboardDraw.send(_seleniumID, pageList, true);
        }

        [Bindable]
        private var dashboard:Dashboard;

        [Bindable]
        private var dataSource:DataSourceInfo;

        private function onHeaderLoaded(event:ImageLoadEvent):void {
            headerVisible = true;
            logoImage.source = event.bitmap;
            imageLoader.removeEventListener(ImageLoadEvent.IMAGE_LOADED, onHeaderLoaded);
            imageLoader = null;
        }

        private var imageLoader:ImageLoader;

        private function gotDashboard():void {
            dashboard = dashboardService.getDashboardViewWithHeader.lastResult as Dashboard;
            reportLabel.setStyle("color", dashboard.headerTextColor);
            headerArea.setStyle("backgroundColor", dashboard.headerBackgroundColor);
            if (dashboard.headerImage != null) {

                imageLoader = new ImageLoader();
                imageLoader.addEventListener(ImageLoadEvent.IMAGE_LOADED, onHeaderLoaded);
                imageLoader.load(dashboard.headerImage.id);
            }
            dashboardName = dashboard.name;
            dataSource = dashboard.dataSourceInfo;
            _dataSourceID = dashboard.dataSourceID;
            rootView = dashboardRenderer.createDashboard();
        }

        private var showFilters:Boolean = false;

        public function refreshData():void {
            dashboardRenderer.refreshData();
        }

        [Bindable]
        private var filterIndex:int;

        private var _showControls:Boolean;

        public function set showControls(value:Boolean):void {
            _showControls = value;
        }

        [Bindable]
        public var rootView:IDashboardViewComponent;

        [Bindable]
        private var filterTooltip:String = "Hide Filters";

        private function toggleFilterIndex():void {
            dashboardRenderer.toggleFilters();
        }

        private function sent():void {

        }

        [Bindable]
        private var dashboardName:String;

        [Bindable]
        private var headerVisible:Boolean;
        ]]>
    </mx:Script>
    <mx:RemoteObject destination="exportService" id="exportService">
        <mx:method name="seleniumDashboardDraw" result="sent()"/>
    </mx:RemoteObject>
    <mx:RemoteObject destination="dashboardService" id="dashboardService">
        <mx:method name="getDashboardViewWithHeader" result="gotDashboard()"/>
    </mx:RemoteObject>
    <mx:HBox width="100%" id="headerArea" paddingTop="5" paddingBottom="5" paddingLeft="10" verticalAlign="middle">
        <mx:Box backgroundColor="#FFFFFF" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" borderColor="#FFFFFF" borderThickness="1" cornerRadius="5"
                borderStyle="solid" visible="{headerVisible}">
            <mx:Image id="logoImage"/>
        </mx:Box>
        <mx:Spacer width="100%"/>
        <mx:HBox id="breadCrumbBox"/>
        <mx:Label text="{dashboardName}" fontSize="24" maxWidth="600" id="reportLabel"/>
        <mx:Spacer width="100%"/>
    </mx:HBox>
    <dashboard:DashboardRenderer id="dashboardRenderer" dashboard="{dashboard}" dashboardID="{dashboardID}"
                                 dataSourceID="{_dataSourceID}" initialFilters="{filterDefinitions}" filterIndex="{filterIndex}" dashboardLoad="dashboardLoaded(event)"/>
</mx:VBox>
