<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:filtering="com.easyinsight.filtering.*"
         xmlns:datasources="com.easyinsight.datasources.*"
         width="100%" height="100%" creationComplete="initStuff()" paddingLeft="7" paddingBottom="7" paddingRight="7"
         paddingTop="7"
         borderStyle="solid" borderThickness="1">
    <mx:states>
        <mx:State name="Loading">
            <mx:AddChild relativeTo="{coreVBox}">
                <mx:Canvas width="100%" height="100%" backgroundAlpha=".1" backgroundColor="0x444444"/>
            </mx:AddChild>
            <mx:AddChild relativeTo="{coreVBox}">
                <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                    <mx:ProgressBar indeterminate="true"/>
                </mx:Box>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.EmbeddedControllerLookup;
        import com.easyinsight.analysis.EmbeddedViewFactory;
        import com.easyinsight.analysis.IEmbeddedReportController;
        import com.easyinsight.analysis.InsightResponse;
        import com.easyinsight.analysis.PNGCreator;
        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.framework.DataServiceLoadingEvent;
        import com.easyinsight.util.UserAudit;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.controls.Label;
        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;

        [Bindable]
        [Embed(source="../../../../assets/funnel.png")]
        private var filterIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/table.png")]
        private var exportIcon:Class;

        private function initStuff():void {
            //UserAudit.instance().audit(UserAudit.USED_EMBEDDED);

            if (_urlKey != null) {
                analysisService.openAnalysisIfPossible.send(_urlKey);
            }
        }

        [Bindable]
        private var title:String;

        private var _seleniumID:int;
        [Bindable]
        private var _analysisID:int;
        private var _reportType:int;
        [Bindable]
        private var _dataSourceID:int;
        [Bindable]
        private var _reportName:String;

        private var _prefix:String = "";

        private var _titleFunction:Function;
        private var _titleFunctionCaller:Object;

        [Bindable]
        private var dataViewFactory:EmbeddedViewFactory;

        [Bindable]
        private var dataSource:DataSourceInfo;

        private var _filterDefinitions:ArrayCollection;


        public function set seleniumID(value:int):void {
            _seleniumID = value;
        }

        [Bindable(event="filterDefinitionsChanged")]
        public function get filterDefinitions():ArrayCollection {
            return _filterDefinitions;
        }

        public function set filterDefinitions(value:ArrayCollection):void {
            if (_filterDefinitions == value) return;
            _filterDefinitions = value;
            dispatchEvent(new Event("filterDefinitionsChanged"));
        }


        [Bindable(event="dataSourceIDChanged")]
        public function get dataSourceID():int {
            return _dataSourceID;
        }

        public function set dataSourceID(value:int):void {
            if (_dataSourceID == value) return;
            _dataSourceID = value;
            dispatchEvent(new Event("dataSourceIDChanged"));
            invalidateProperties();
        }

        public function set prefix(val:String):void {
            _prefix = val;
            invalidateProperties();
        }

        public function set reportType(val:int):void {
            _reportType = val;
            invalidateProperties();
        }

        public function set reportName(val:String):void {
            _reportName = val;
            invalidateProperties();
        }

        public function set titleClickFunction(functionName:Function):void {
            _titleFunction = functionName;
            invalidateProperties();
        }

        public function set titleFunctionCaller(val:Object):void {
            _titleFunctionCaller = val;
            invalidateProperties();
        }

        public function set analysisID(analysisID:int):void {
            this._analysisID = analysisID;
        }

        private var _urlKey:String;

        public function set urlKey(value:String):void {
            _urlKey = value;
            invalidateProperties();
        }

        private var timer:Timer;

        private function dataLoadingEvent(event:DataServiceLoadingEvent):void {
            if (event.type == DataServiceLoadingEvent.LOADING_STOPPED) {
                timer = new Timer(5000);
                timer.addEventListener(TimerEvent.TIMER, onTimer);
                timer.start();
            }
        }

        private function onTimer(event:TimerEvent):void {
            exportService.seleniumDraw.send(_seleniumID, new PNGCreator().drawToBytes(coreVBox));
            timer.stop();
            timer = null;
        }

        private function sent():void {

        }

        private function gotReportInfo():void {
            var response:InsightResponse = analysisService.openAnalysisIfPossible.lastResult as InsightResponse;
            _analysisID = response.insightDescriptor.id;
            if (response.status == InsightResponse.SUCCESS) {
                if (dataViewFactory != null)
                    coreVBox.removeChild(dataViewFactory);

                var controllerClass:Class = EmbeddedControllerLookup.controllerForType(_reportType);
                var controller:IEmbeddedReportController = new controllerClass();
                dataViewFactory = controller.createEmbeddedView();
                dataViewFactory.prefix = _prefix;
                dataViewFactory.reportID = _analysisID;
                dataViewFactory.dataSourceID = _dataSourceID;
                coreVBox.addChild(dataViewFactory);
                dataViewFactory.addEventListener(DataServiceLoadingEvent.LOADING_STARTED, dataLoadingEvent);
                dataViewFactory.addEventListener(DataServiceLoadingEvent.LOADING_STOPPED, dataLoadingEvent);
                dataViewFactory.retrieveData(false);
            }
        }

        private var _snapshotOnLoad:Boolean = false;

        public function set snapshotOnLoad(value:Boolean):void {
            _snapshotOnLoad = value;
        }

        private function failure(event:FaultEvent):void {
            var failureLabel:String = event.message.toString();
            var label:Label = new Label();
            label.text = failureLabel;
            coreVBox.addChild(label);
        }

        private function returnToList():void {
            dispatchEvent(new ReturnToListEvent());
        }

        public function refreshData():void {
            dataViewFactory.retrieveData(false);
        }
                ]]>
    </mx:Script>
    <mx:RemoteObject destination="analysisDefinition" id="analysisService">
        <mx:method name="openAnalysisIfPossible" result="gotReportInfo()"/>
    </mx:RemoteObject>
    <mx:RemoteObject destination="exportService" id="exportService">
        <mx:method name="seleniumDraw" result="sent()"/>
    </mx:RemoteObject>
    <mx:Canvas id="coreVBox" height="100%" width="100%">
    </mx:Canvas>
</mx:VBox>
