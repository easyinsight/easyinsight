<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
         width="100%" height="100%" creationComplete="initStuff()" paddingLeft="7" paddingBottom="7" paddingRight="7"
         paddingTop="7"
         borderStyle="solid" borderThickness="1">
    <mx:states>
        <mx:State name="Loading">
            <mx:AddChild relativeTo="{coreVBox}">
                <mx:Canvas width="100%" height="100%" backgroundAlpha=".1" backgroundColor="0x444444"/>
            </mx:AddChild>
            <mx:AddChild relativeTo="{coreVBox}">
                <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                    <mx:ProgressBar indeterminate="true"/>
                </mx:Box>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.EmbeddedControllerLookup;
        import com.easyinsight.analysis.EmbeddedViewFactory;
        import com.easyinsight.analysis.IEmbeddedReportController;
        import com.easyinsight.analysis.InsightResponse;
        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.framework.DataServiceLoadingEvent;
        import com.easyinsight.report.ReportSetupEvent;
        import com.easyinsight.skin.ImageLoadEvent;
        import com.easyinsight.skin.ImageLoader;
        import com.easyinsight.util.PNGEnc;

        import mx.collections.ArrayCollection;
        import mx.controls.Label;
        import mx.rpc.events.FaultEvent;

        [Bindable]
        [Embed(source="../../../../assets/funnel.png")]
        private var filterIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/table.png")]
        private var exportIcon:Class;

        private function initStuff():void {
            if (_urlKey != null) {
                analysisService.openAnalysisIfPossible.send(_urlKey);
            } else {
            }
        }

        [Bindable]
        private var title:String;

        private var _seleniumID:int;
        [Bindable]
        private var _analysisID:int;
        private var _reportType:int;
        [Bindable]
        private var _dataSourceID:int;
        [Bindable]
        private var _reportName:String;

        private var _titleFunction:Function;
        private var _titleFunctionCaller:Object;

        [Bindable]
        private var dataViewFactory:EmbeddedViewFactory;

        [Bindable]
        private var dataSource:DataSourceInfo;

        [Bindable]
        public var showHeader:Boolean;

        private var _filterDefinitions:ArrayCollection;


        public function set seleniumID(value:int):void {
            _seleniumID = value;
        }

        [Bindable(event="filterDefinitionsChanged")]
        public function get filterDefinitions():ArrayCollection {
            return _filterDefinitions;
        }

        public function set filterDefinitions(value:ArrayCollection):void {
            if (_filterDefinitions == value) return;
            _filterDefinitions = value;
            dispatchEvent(new Event("filterDefinitionsChanged"));
        }


        [Bindable(event="dataSourceIDChanged")]
        public function get dataSourceID():int {
            return _dataSourceID;
        }

        public function set dataSourceID(value:int):void {
            if (_dataSourceID == value) return;
            _dataSourceID = value;
            dispatchEvent(new Event("dataSourceIDChanged"));
            invalidateProperties();
        }

        public function set reportType(val:int):void {
            _reportType = val;
            invalidateProperties();
        }

        public function set reportName(val:String):void {
            _reportName = val;
            invalidateProperties();
        }

        public function set titleClickFunction(functionName:Function):void {
            _titleFunction = functionName;
            invalidateProperties();
        }

        public function set titleFunctionCaller(val:Object):void {
            _titleFunctionCaller = val;
            invalidateProperties();
        }

        public function set analysisID(analysisID:int):void {
            this._analysisID = analysisID;
        }

        private var _urlKey:String;

        public function set urlKey(value:String):void {
            _urlKey = value;
            invalidateProperties();
        }

        private var timer:Timer;

        private var _reportWidth:int;

        private var _reportHeight:int;

        [Bindable(event="reportWidthChanged")]
        public function get reportWidth():int {
            return _reportWidth;
        }

        public function set reportWidth(value:int):void {
            if (_reportWidth == value) return;
            _reportWidth = value;
            dispatchEvent(new Event("reportWidthChanged"));
        }

        [Bindable(event="reportHeightChanged")]
        public function get reportHeight():int {
            return _reportHeight;
        }

        public function set reportHeight(value:int):void {
            if (_reportHeight == value) return;
            _reportHeight = value;
            dispatchEvent(new Event("reportHeightChanged"));
        }

        private function dataLoadingEvent(event:DataServiceLoadingEvent):void {
            if (event.type == DataServiceLoadingEvent.LOADING_STOPPED) {
                timer = new Timer(5000);
                timer.addEventListener(TimerEvent.TIMER, onTimer);
                timer.start();
            }
        }

        private function onTimer(event:TimerEvent):void {
            var bd:BitmapData = new BitmapData(canvas.width, canvas.height);
            bd.draw(canvas);
            var ba:ByteArray = PNGEnc.encode(bd);
            exportService.seleniumDraw.send(_seleniumID, ba);
            timer.stop();
            timer = null;
        }

        private function sent():void {

        }

        private function gotReportInfo():void {
            var response:InsightResponse = analysisService.openAnalysisIfPossible.lastResult as InsightResponse;
            _analysisID = response.insightDescriptor.id;
            if (response.status == InsightResponse.SUCCESS) {
                if (dataViewFactory != null)
                    coreVBox.removeChild(dataViewFactory);

                var controllerClass:Class = EmbeddedControllerLookup.controllerForType(_reportType);
                var controller:IEmbeddedReportController = new controllerClass();
                dataViewFactory = controller.createEmbeddedView();
                dataViewFactory.reportID = _analysisID;
                dataViewFactory.showHeader = showHeader;
                dataViewFactory.dataSourceID = _dataSourceID;
                coreVBox.addChild(dataViewFactory);
                dataViewFactory.addEventListener(DataServiceLoadingEvent.LOADING_STARTED, dataLoadingEvent);
                dataViewFactory.addEventListener(DataServiceLoadingEvent.LOADING_STOPPED, dataLoadingEvent);
                dataViewFactory.addEventListener(ReportSetupEvent.REPORT_SETUP, onSetup);
                dataViewFactory.setup();
            }
        }

        private function onSetup(event:ReportSetupEvent):void {
            reportLabel.setStyle("color", event.reportInfo.textColor);
            headerArea.setStyle("backgroundColor", event.reportInfo.backgroundColor);
            if (event.reportInfo.headerImage != null) {
                imageLoader = new ImageLoader();
                imageLoader.addEventListener(ImageLoadEvent.IMAGE_LOADED, onHeaderLoaded);
                imageLoader.load(event.reportInfo.headerImage.id);
            }
            dataViewFactory.filterDefinitions = event.reportInfo.report.filterDefinitions;
            dataViewFactory.refresh();
        }

        private function onHeaderLoaded(event:ImageLoadEvent):void {
            logoImage.source = event.bitmap;
            imageLoader.removeEventListener(ImageLoadEvent.IMAGE_LOADED, onHeaderLoaded);
            imageLoader = null;
        }

        override protected function createChildren():void {
            super.createChildren();
            /*if (!showHeader) {
             canvas.removeChild(headerArea);
             }*/
        }

        private var imageLoader:ImageLoader;

        private var _snapshotOnLoad:Boolean = false;

        public function set snapshotOnLoad(value:Boolean):void {
            _snapshotOnLoad = value;
        }

        private function failure(event:FaultEvent):void {
            var failureLabel:String = event.message.toString();
            var label:Label = new Label();
            label.text = failureLabel;
            coreVBox.addChild(label);
        }

        private function returnToList():void {
            dispatchEvent(new ReturnToListEvent());
        }

        public function refreshData():void {
            dataViewFactory.refresh();
        }

        [Bindable]
        private var headerFontSize:int;


        [Bindable]
        private var maxHeaderWidth:int;
        ]]>
    </mx:Script>
    <mx:RemoteObject destination="analysisDefinition" id="analysisService">
        <mx:method name="openAnalysisIfPossible" result="gotReportInfo()"/>
    </mx:RemoteObject>
    <mx:RemoteObject destination="exportService" id="exportService">
        <mx:method name="seleniumDraw" result="sent()"/>
    </mx:RemoteObject>
    <mx:VBox id="canvas">
        <mx:HBox width="100%" id="headerArea" paddingTop="5" paddingBottom="5" paddingLeft="10" verticalAlign="middle">
            <mx:Box backgroundColor="#FFFFFF" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" borderColor="#FFFFFF" borderThickness="1" cornerRadius="5"
                    borderStyle="solid">
                <mx:Image id="logoImage"/>
            </mx:Box>
            <mx:Spacer width="100%"/>
            <mx:Label text="{_reportName}" fontSize="{headerFontSize}" maxWidth="{maxHeaderWidth}" id="reportLabel"/>
            <mx:Spacer width="100%"/>
        </mx:HBox>
        <mx:Canvas id="coreVBox" width="{reportWidth}" height="{reportHeight}">
        </mx:Canvas>
    </mx:VBox>
</mx:VBox>
