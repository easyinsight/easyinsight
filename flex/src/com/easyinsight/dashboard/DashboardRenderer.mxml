<?xml version="1.0"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:filtering="com.easyinsight.filtering.*" width="100%"
         paddingLeft="10" paddingRight="10" paddingBottom="10" horizontalScrollPolicy="off"
        verticalGap="0">
    <mx:Metadata>
        [Event(name="dashboardLoad", type="com.easyinsight.dashboard.DashboardReportLoadEvent")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.IRetrievalState;
        import com.easyinsight.filtering.AnalysisItemFilterDefinition;
        import com.easyinsight.filtering.FilterDefinition;
        import com.easyinsight.filtering.TransformsUpdatedEvent;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.Container;
        import mx.core.UIComponent;
        import mx.events.FlexEvent;

        private var _dashboard:Dashboard;
        private var rootView:IDashboardViewComponent;

        [Bindable]
        private var filterDefinitions:ArrayCollection;
        private var _dataSourceID:int;
        private var _filterIndex:int;
        [Bindable]
        private var _dashboardID:int;
        private var _initialFilters:ArrayCollection;
        private var _fixedID:Boolean;

        [Bindable]
        private var showingFilters:Boolean = true;

        public function set fixedID(value:Boolean):void {
            _fixedID = value;
        }

        private function transformsUpdated(event:TransformsUpdatedEvent):void {
            var filterMap:Object = new Object();
            if (transformContainer != null) {
                filterMap["master"] = transformContainer.getVisibleFilterDefinitions();
            }
            rootView.updateAdditionalFilters(filterMap);
            if (event.rerender) {
                rootView.refresh();
            }
        }

        public function styleUpdated():void {
            if (!dashboard.absoluteSizing) {
                percentHeight = 100;
                dashboardCanvas.percentHeight = 100;
                dashboardStyleArea.percentHeight = 100;
            } else {
                percentHeight = NaN;
                dashboardCanvas.percentHeight = NaN;
                dashboardStyleArea.percentHeight = NaN;
            }
        }

        public function positionsPopulate(positions:DashboardStackPositions):void {
            if (transformContainer != null) {
                for each (var filterDefinition:FilterDefinition in transformContainer.getFilterDefinitions()) {
                    var str:String = FilterPositionKey.createString(FilterPositionKey.DASHBOARD, filterDefinition.filterID);
                    positions.filterMap[str] = filterDefinition;
                }
            }
            rootView.stackPopulate(positions);
        }

        private var _retrievalState:IRetrievalState;


        [Bindable(event="retrievalStateChanged")]
        public function get retrievalState():IRetrievalState {
            return _retrievalState;
        }

        public function set retrievalState(value:IRetrievalState):void {
            if (_retrievalState == value) return;
            _retrievalState = value;
            dispatchEvent(new Event("retrievalStateChanged"));
        }

        private var _dashboardStackPositions:DashboardStackPositions;

        public function set dashboardStackPositions(value:DashboardStackPositions):void {
            _dashboardStackPositions = value;
        }

        private var loadCount:int = 0;
        private var requiredCount:int = 0;

        private function onReportLoad(event:DashboardReportLoadEvent):void {
            loadCount++;
            if (loadCount == requiredCount) {
                dispatchEvent(new DashboardReportLoadEvent(DashboardReportLoadEvent.DASHBOARD_LOAD));
            }
        }

        private function onBlah(event:DashboardFilterEvent):void {
            transformContainer.hideFilters(event.filters);
        }

        public function resetState():void {
            var so:SharedObject = SharedObject.getLocal("d" + dashboard.urlKey + dashboard.version);
            so.clear();
            so.flush();
        }

        public function createDashboard(width:int = 0, height:int = 0):IDashboardViewComponent {

            addEventListener(DashboardReportLoadEvent.DASHBOARD_REPORT_LOAD, onReportLoad);
            addEventListener(DashboardFilterEvent.BLAH, onBlah);
            /*var primary:VBox = new VBox();
             primary.percentHeight = 100;
             primary.percentWidth = 100;
             primary.setStyle("verticalGap", 0);
             primary.setStyle("horizontalAlign", "center");*/

            if (!_fixedID) {
                /*dashboardStyleArea.setStyle("paddingLeft", dashboard.padding);
                 dashboardStyleArea.setStyle("paddingRight", dashboard.padding);
                 dashboardStyleArea.setStyle("paddingTop", dashboard.padding);
                 dashboardStyleArea.setStyle("paddingBottom", dashboard.padding);*/
            } else {
                removeChild(filterViewStack);
                /*setStyle("paddingTop", 0);
                 setStyle("paddingLeft", 0);
                 setStyle("paddingRight", 0);
                 setStyle("paddingBottom", 0);*/
            }

            /*if (ApplicationSkin.instance() != null && ApplicationSkin.instance().reportHeader && dashboard.borderThickness > 0) {
             dashboardStyleArea.setStyle("backgroundColor", ApplicationSkin.instance().headerBackgroundColor);
             } else {
             dashboardStyleArea.setStyle("backgroundColor", dashboard.backgroundColor);
             }*/

            /*if (dashboard.backgroundColor == 0xFFFFFF) {
             setStyle("backgroundColor", 0xFFFFFF);
             }*/
            dashboardStyleArea.setStyle("backgroundColor", 0xFFFFFF);
            dashboardStyleArea.setStyle("borderThickness", dashboard.borderThickness);
            if (dashboard.borderThickness > 0) {
                dashboardStyleArea.setStyle("cornerRadius", 8);
                dashboardStyleArea.setStyle("borderStyle", "solid");
                dashboardStyleArea.setStyle("borderColor", dashboard.borderColor);
                dashboardStyleArea.setStyle("dropShadowEnabled", true);
            }

            var fObj:Object = new Object();
            var paramObj:Object = new Object();
            var toUse:ArrayCollection = new ArrayCollection();
            var fToAdd:Object = new Object();
            if (_initialFilters != null) {
                for each (var eFilter:FilterDefinition in _initialFilters) {
                    if (eFilter.getType() == FilterDefinition.ANALYSIS_ITEM) {
                        paramObj[eFilter.filterName] = eFilter;
                    } else {
                        fObj[eFilter.qualifiedName()] = eFilter;
                        fToAdd[eFilter.qualifiedName()] = eFilter;
                    }
                }
            }

            for each (var filter:FilterDefinition in dashboard.filters) {
                if (filter.getType() == FilterDefinition.ANALYSIS_ITEM) {
                    var aFilter:AnalysisItemFilterDefinition = paramObj[filter.filterName];
                    if (aFilter != null) {
                        var ourFilter:AnalysisItemFilterDefinition = filter as AnalysisItemFilterDefinition;
                        ourFilter.targetItem = aFilter.targetItem;
                    }
                    toUse.addItem(filter);
                } else {
                    var existing:FilterDefinition = fObj[filter.qualifiedName()];
                    if (existing) {
                        toUse.addItem(existing);
                        existing.showOnReportView = filter.showOnReportView;
                        delete fToAdd[filter.qualifiedName()];
                    } else {
                        toUse.addItem(filter);
                    }
                }
            }

            for each (var remainingFilter:FilterDefinition in fToAdd) {
                toUse.addItem(remainingFilter);
            }

            var visibleCount:int = 0;
            for each (var visibleFilter:FilterDefinition in toUse) {
                if (visibleFilter.showOnReportView) {
                    // retrieve and compare to version
                    try {
                        if (_retrievalState != null) {
                            _retrievalState.forFilter(visibleFilter, "", _dashboard.overridenFilters);
                        }
                    } catch (e:Error) {
                    }
                    //visibleFilter.loadFromSharedObject(null, 0, dashboard.urlKey, dashboard.version);
                    visibleCount++;
                }
            }

            this.filterDefinitions = toUse;

            filterIndex = (visibleCount > 0) ? 1 : 0;

            if (!dashboard.absoluteSizing) {
                percentHeight = 100;
                dashboardCanvas.percentHeight = 100;
                dashboardStyleArea.percentHeight = 100;
            }

            var dashboardEditorMetadata:DashboardEditorMetadata = new DashboardEditorMetadata();
            dashboardEditorMetadata.transformContainer = transformContainer;
            dashboardEditorMetadata.dashboardStackPositions = _dashboardStackPositions;
            dashboardEditorMetadata.dataSourceID = dataSourceID;
            dashboardEditorMetadata.dashboardID = dashboard.id;
            dashboardEditorMetadata.role = dashboard.role;
            dashboardEditorMetadata.fixedID = _fixedID > 0;
            dashboardEditorMetadata.borderColor = dashboard.borderColor;
            dashboardEditorMetadata.borderThickness = dashboard.borderThickness;
            dashboardEditorMetadata.dashboard = dashboard;
            dashboardEditorMetadata.dashboardView = this;
            dashboardEditorMetadata.retrievalState = _retrievalState;
            rootView = DashboardElementFactory.createViewUIComponent(dashboard.rootElement, dashboardEditorMetadata, null) as IDashboardViewComponent;
            Container(rootView).verticalScrollPolicy = "off";
            Container(rootView).horizontalScrollPolicy = "off";
            Container(dashboardStyleArea).horizontalScrollPolicy = "off";
            UIComponent(rootView).addEventListener(FlexEvent.CREATION_COMPLETE, function (event:FlexEvent):void {
                requiredCount = rootView.reportCount().length;
                var filterMap:Object = new Object();
                filterMap["master"] = toUse;
                rootView.updateAdditionalFilters(filterMap);
                rootView.initialRetrieve();
            });
            dashboardCanvas.addChild(rootView as UIComponent);
            loadingBox.parent.removeChild(loadingBox);
            return rootView;
        }

        public function getRootView():IDashboardViewComponent {
            return rootView;
        }

        public function refreshData():void {
            rootView.refresh();
        }

        public function toggleFilters():void {
            showingFilters = !showingFilters;
            filterIndex = filterIndex == 1 ? 0 : 1;
            rootView.toggleFilters(showingFilters);
        }

        public function getFilterDefinitions():ArrayCollection {
            return transformContainer.getFilterDefinitions();
        }

        [Bindable(event="dashboardChanged")]
        public function get dashboard():Dashboard {
            return _dashboard;
        }

        public function set dashboard(value:Dashboard):void {
            if (_dashboard == value) return;
            _dashboard = value;
            dispatchEvent(new Event("dashboardChanged"));
        }

        [Bindable(event="dataSourceIDChanged")]
        public function get dataSourceID():int {
            return _dataSourceID;
        }

        public function set dataSourceID(value:int):void {
            if (_dataSourceID == value) return;
            _dataSourceID = value;
            dispatchEvent(new Event("dataSourceIDChanged"));
        }

        [Bindable(event="filterIndexChanged")]
        public function get filterIndex():int {
            return _filterIndex;
        }

        public function set filterIndex(value:int):void {
            if (_filterIndex == value) return;
            _filterIndex = value;
            dispatchEvent(new Event("filterIndexChanged"));
        }

        [Bindable(event="dashboardIDChanged")]
        public function get dashboardID():int {
            return _dashboardID;
        }

        public function set dashboardID(value:int):void {
            if (_dashboardID == value) return;
            _dashboardID = value;
            dispatchEvent(new Event("dashboardIDChanged"));
        }

        public function set initialFilters(value:ArrayCollection):void {
            _initialFilters = value;
        }
        ]]></mx:Script>
    <mx:ViewStack width="100%" resizeToContent="true" creationPolicy="all" selectedIndex="{filterIndex}" id="filterViewStack">
        <mx:Box/>

            <filtering:TransformContainer id="transformContainer" filterEditable="false"
                                          existingFilters="{filterDefinitions}"
                                          width="100%" feedID="{dataSourceID}"
                                          reportView="true" dashboardID="{_dashboardID}" updatedTransforms="transformsUpdated(event)"
                    dashboard="{dashboard}" retrievalState="{retrievalState}" filterStorageKey=""/>

    </mx:ViewStack>
    <mx:Canvas width="100%" backgroundAlpha="1" borderColor="0" id="dashboardStyleArea">
        <mx:Canvas id="dashboardCanvas" width="100%" horizontalScrollPolicy="off"/>
        <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" id="loadingBox">
            <mx:ProgressBar indeterminate="true" label="Loading the dashboard..."/>
        </mx:Box>
    </mx:Canvas>
</mx:VBox>
