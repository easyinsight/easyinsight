<?xml version="1.0"?>
<report:DataViewPage xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:dashboard="com.easyinsight.dashboard.*"
                     creationComplete="onCreation()"
                     implements="com.easyinsight.listing.IPerspective" xmlns:report="com.easyinsight.report.*"
        styleName="screenBackground" width="100%" height="100%" verticalGap="0">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisCloseEvent;
        import com.easyinsight.analysis.list.SizeOverrideEvent;
        import com.easyinsight.framework.PerspectiveInfo;
        import com.easyinsight.quicksearch.EIDescriptor;
        import com.easyinsight.report.BreadCrumb;
        import com.easyinsight.skin.ApplicationSkin;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.CookieUtil;
        import com.easyinsight.framework.User;

        import mx.binding.utils.BindingUtils;

        import mx.controls.Button;

        import mx.messaging.config.ServerConfig;

        import com.easyinsight.analysis.IRetrievable;
        import com.easyinsight.commands.CommandEvent;

        import com.easyinsight.commands.CommandProcessor;

        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.framework.LoginEvent;

        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.report.ReportAnalyzeSource;
        import com.easyinsight.report.ReportNavigationEvent;
        import com.easyinsight.util.ActionDashboardLog;

        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.UserAudit;

        import mx.collections.ArrayCollection;
        import mx.managers.BrowserManager;
        import mx.managers.PopUpManager;
        import mx.utils.URLUtil;

        [Bindable]
        private var _fixedID:Boolean = false;


        public function set fixedID(value:Boolean):void {
            _fixedID = value;
        }

        [Bindable]
        private var _dashboardID:int = -1;

        [Bindable]
        private var dataSourceID:int;

        [Bindable]
        private var filterDefinitions:ArrayCollection;

        private function sizeOverride(event:SizeOverrideEvent):void {
            autoSize = true;
        }

        private var autoSize:Boolean = false;

        private function onCreation():void {
            commandProcessor = new CommandProcessor();
            addEventListener(CommandEvent.COMMAND, onCommand);
            addEventListener(ReportNavigationEvent.TO_REPORT, onNavigation);
            addEventListener(SizeOverrideEvent.SIZE_OVERRIDE, sizeOverride);
            var logoutItem:ContextMenuItem = new ContextMenuItem("Log Out");
            logoutItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function (event:ContextMenuEvent):void {
                User.destroy();
                CookieUtil.deleteCookie("eisession");
                ServerConfig.getChannelSet(dashboardService.destination).logout();
                User.getEventNotifier().dispatchEvent(new LoginEvent(LoginEvent.LOGOUT));
            });
            if (!_fixedID) {
                //Alert.show("normal dashboard, no?");
                dashboardHeader.visible = true;
                dashboardHeader.includeInLayout = true;
                //addChildAt(dashboardHeader, 0);
                headerArea.includeInLayout = true;
                //addChildAt(nameContainer, 1);
                descriptionBox.visible = true;
                descriptionBox.includeInLayout = true;
                //addChildAt(box, 2);
            }
            var contextMenu:ContextMenu = new ContextMenu();
            contextMenu.customItems = [ logoutItem ];
            this.contextMenu = contextMenu;
            dashboardService.getDashboardView.send(_dashboardID);
        }

        private function onNavigation(event:ReportNavigationEvent):void {
            if (_breadCrumbs == null) {
                _breadCrumbs = [];
            }
            var dashboardDesc:DashboardDescriptor = new DashboardDescriptor();
            dashboardDesc.id = _dashboardID;
            dashboardDesc.name = dashboard.name;
            _breadCrumbs.push(new BreadCrumb(dashboardDesc, dashboardRenderer.getFilterDefinitions()));
            if (event.descriptor is InsightDescriptor) {
                dispatchEvent(new AnalyzeEvent(new ReportAnalyzeSource(InsightDescriptor(event.descriptor), event.filters, null, null, 0, _breadCrumbs)));
            } else if (event.descriptor is DashboardDescriptor) {
                dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DASHBOARD_VIEW, {dashboardID:DashboardDescriptor(event.descriptor).id,
                    initialFilters:event.filters, breadCrumbs: _breadCrumbs, exchangeItem:exchangeItem, reportList: reportList, reportIndex: reportIndex,
                originalExchangeItem: originalExchangeItem  != null ? originalExchangeItem : dashboardDesc })));
            }
        }

        override protected function myType():int {
            return EIDescriptor.DASHBOARD;
        }

        [Bindable]
        private var _initialFilters:ArrayCollection;

        public function set initialFilters(value:ArrayCollection):void {
            _initialFilters = value;
        }

        private var _breadCrumbs:Array;


        public function set breadCrumbs(value:Array):void {
            _breadCrumbs = value;
        }

        private var commandProcessor:CommandProcessor;

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }

        [Bindable]
        public var rootView:IDashboardViewComponent;


        public function set dashboardID(value:int):void {
            _dashboardID = value;
        }



        private function gotDashboard():void {
            BindingUtils.bindProperty(this, "headerBarLogo", ApplicationSkin.instance(), "headerBarLogo");
            BindingUtils.bindProperty(this, "headerBackgroundColor", ApplicationSkin.instance(), "headerBackgroundColor");
            BindingUtils.bindProperty(this, "headerTextColor", ApplicationSkin.instance(), "headerTextColor");
            BindingUtils.bindProperty(this, "headerVisible", ApplicationSkin.instance(), "reportHeader");
            dashboard = dashboardService.getDashboardView.lastResult as Dashboard;
            if (dashboard.borderThickness == 0 && exchangeItem == null) {
                headerArea.includeInLayout = false;
                descriptionBox.includeInLayout = false;
            }
            if (dashboard.backgroundColor == 0xFFFFFF) {
                setStyle("backgroundColor", 0xFFFFFF);
            }
            if (_fixedID) {
                setStyle("paddingLeft", 0);
                setStyle("paddingTop", 0);
                setStyle("paddingRight", 0);
                setStyle("paddingBottom", 0);
            }
            dataSource = dashboard.dataSourceInfo;
            dashboardName = dashboard.name;
            description = dashboard.description;
            dataSourceID = dashboard.dataSourceID;
            filterDefinitions = dashboard.filters;

            rootView = dashboardRenderer.createDashboard();
            if (dashboardHeader != null) {
                dashboardHeader.dashboard = dashboard;
                dashboardHeader.generateState(description, exchangeItem, this);
            }
            if (_dashboardID != 0 && exchangeItem == null && _breadCrumbs == null) {
                UserAudit.instance().log(new ActionDashboardLog(ActionDashboardLog.VIEW, _dashboardID));
            }
            generateState();

            var desc:DashboardDescriptor = new DashboardDescriptor();
            desc.id = dashboard.id;

            /*if (_fixedID) {
             primary.removeChild(topDisplay);
             }*/
            if (_breadCrumbs != null && _breadCrumbs.length > 0) {
                var backButton:Button = new Button();
                var crumb:BreadCrumb = _breadCrumbs[_breadCrumbs.length - 1] as BreadCrumb;
                backButton.styleName = "grayButton";
                backButton.label = "Back to " + crumb.eiDescriptor.name;
                backButton.addEventListener(MouseEvent.CLICK, function (event:MouseEvent):void {
                    _breadCrumbs.pop();
                    if (crumb.eiDescriptor is InsightDescriptor) {
                        dispatchEvent(new AnalyzeEvent(new ReportAnalyzeSource(InsightDescriptor(crumb.eiDescriptor), crumb.filters, null, null, 0, _breadCrumbs)));
                    } else {
                        dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DASHBOARD_VIEW, {dashboardID:crumb.eiDescriptor.id,
                            initialFilters:crumb.filters, breadCrumbs: _breadCrumbs, exchangeItem:exchangeItem, reportList: reportList, reportIndex: reportIndex,
                            originalExchangeItem: originalExchangeItem  != null ? originalExchangeItem : desc })));
                    }
                });
                breadCrumbBox.addChild(backButton);
            }
        }



        [Bindable]
        private var description:String;

        [Bindable]
        private var dashboardName:String;

        [Bindable]
        private var exchangeIndex:int;

        [Bindable]
        private var dashboard:Dashboard;

        public function close():void {
            dispatchEvent(new AnalysisCloseEvent());
        }

        public function toFullScreen():void {
            currentState = "fullScreen";
            stage.addEventListener(KeyboardEvent.KEY_DOWN, onKey);
        }

        private function onKey(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.ESCAPE) {
                stage.removeEventListener(KeyboardEvent.KEY_DOWN, onKey);
                currentState = "";
            }
        }

        override protected function myID():int {
            return dashboard.id;
        }

        override protected function keptEntity():void {
            exchangeItem = null;
            _showAddBar = false;
            generateState();
            var window:DashboardAddedWindow = new DashboardAddedWindow();
            window.dashboard = dashboard;
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }



        /*public function saveReport():void {
            dashboardService.keepDashboard.send(originalExchangeItem != null ? dashboardExchangeID : dashboard.id, exchangeItem.id);
        }*/

        [Bindable]
        private var filterIndex:int = 0;

        public function refreshData():void {
            dashboardRenderer.refreshData();
        }


        private var _viewFactory:IRetrievable;

        [Bindable(event="viewFactoryChanged")]
        public function get viewFactory():IRetrievable {
            return _viewFactory;
        }

        public function set viewFactory(value:IRetrievable):void {
            if (_viewFactory == value) return;
            _viewFactory = value;
            dispatchEvent(new Event("viewFactoryChanged"));
        }

        public function toggleFilters():void {
            dashboardRenderer.toggleFilters();
        }

        public function exportDashboard(exportButton:Button):void {
            var window:DashboardExportWindow = new DashboardExportWindow();
            window.dashboard = dashboard;
            window.fitToScreen = !autoSize;
            window.coreView = rootView as DisplayObject;
            PopUpManager.addPopUp(window, this, true);
            window.x = exportButton.x - 20;
            window.y = exportButton.y + exportButton.height + 10;
        }

        private var dashboardWidth:int;


        private var _dataSource:DataSourceInfo;


        [Bindable(event="dataSourceChanged")]
        public function get dataSource():DataSourceInfo {
            return _dataSource;
        }

        public function set dataSource(value:DataSourceInfo):void {
            if (_dataSource == value) return;
            _dataSource = value;
            dispatchEvent(new Event("dataSourceChanged"));
        }

        private function toggleReportInfo():void {
            if (reportInfoLabel == "Show Dashboard Info") {
                reportInfoLabel = "Hide Dashboard Info";
                addChildAt(descriptionBox, 2);
            } else {
                reportInfoLabel = "Show Report Info";
                removeChild(descriptionBox);
            }
        }

        [Bindable]
        private var reportInfoLabel:String = "Show Dashboard Info";

        [Bindable]
        private var showReportInfoButton:Boolean;

        public function cleanup():void {
        }

        override protected function generateState():void {
            super.generateState();
            showReportInfoButton = !_showAddBar;
            if (descriptionBox != null && !_showAddBar && contains(descriptionBox)) {
                removeChild(descriptionBox);
            }
            if (descriptionBox != null) {
                descriptionBox.visible = true;
            }
            if (!_fixedID) {
                var feedFragmentObject:Object = new Object();
                if (exchangeItem == null) {
                    feedFragmentObject.dashboardID = String(dashboard.urlKey);
                } else {
                    feedFragmentObject.reportTemplateID = String(exchangeItem.descriptor.urlKey);
                }
            }
            var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
            BrowserManager.getInstance().setFragment(feedFragmentString);
            BrowserManager.getInstance().setTitle("Easy Insight - " + dashboardName);
        }

        [Bindable]
        private var showLoading:Boolean;

        private var _headerBarLogoChanged:Boolean = false;
        private var _headerBackgroundColorChanged:Boolean = false;
        private var _headerTextColorChanged:Boolean = false;

        public function set headerBarLogo(value:Object):void {
            _headerLogo = value;
            _headerBarLogoChanged = true;
            invalidateDisplayList();
        }

        public function set headerBackgroundColor(color:uint):void {
            _headerBackgroundColor = color;
            _headerBackgroundColorChanged = true;
            invalidateDisplayList();
        }

        public function set headerTextColor(color:uint):void {
            _headerTextColor = color;
            _headerTextColorChanged = true;
            invalidateDisplayList();
        }

        private var _headerVisibleChanged:Boolean;

        private var _headerBackgroundColor:uint;
        private var _headerTextColor:uint;
        private var _headerVisible:Boolean;

        private var _headerLogo:Object;

        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
            if (_headerVisible) {
                if (_headerBarLogoChanged) {
                    if (_headerLogo is Bitmap) {
                        var bitmap:Bitmap = ApplicationSkin.instance().headerBarLogo as Bitmap;
                        logoImage.source = new Bitmap(bitmap.bitmapData);
                        _headerBarLogoChanged = false;
                    }
                }
                if (_headerTextColorChanged) {
                    linkButton.setStyle("color", _headerTextColor);
                    reportLabel.setStyle("color", _headerTextColor);
                    _headerTextColorChanged = false;
                }
                if (_headerBackgroundColorChanged) {
                    headerArea.setStyle("backgroundColor", _headerBackgroundColor);
                    _headerBackgroundColorChanged = false;
                }
            }
        }


        [Bindable(event="headerVisibleChanged")]
        public function get headerVisible():Boolean {
            return _headerVisible;
        }

        public function set headerVisible(value:Boolean):void {
            if (_headerVisible == value) return;
            _headerVisible = value;
            invalidateDisplayList();
            dispatchEvent(new Event("headerVisibleChanged"));
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="dashboardService" id="dashboardService">
        <mx:method name="getDashboardView" result="gotDashboard()"/>
    </mx:RemoteObject>
    <dashboard:DashboardSlimHeader id="dashboardHeader" dataSource="{dataSource}" viewFactory="{rootView}" includeInLayout="false" visible="false"/>
    <mx:HBox width="100%" id="headerArea" paddingTop="5" paddingBottom="5" paddingLeft="10" verticalAlign="middle">
        <mx:Box backgroundColor="#FFFFFF" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" borderColor="#FFFFFF" borderThickness="1" cornerRadius="5"
                borderStyle="solid" visible="{headerVisible}">
            <mx:Image id="logoImage"/>
        </mx:Box>
        <mx:Spacer width="100%"/>
        <mx:HBox id="breadCrumbBox"/>
        <mx:Label text="{dashboardName}" fontSize="24" maxWidth="600" id="reportLabel"/>
        <mx:LinkButton label="{reportInfoLabel}" textDecoration="underline" fontSize="14" visible="{showReportInfoButton}" click="toggleReportInfo()"
                       id="linkButton"/>
        <mx:Spacer width="100%"/>
    </mx:HBox>
    <mx:Box width="100%" styleName="descriptionContainer" id="descriptionBox" visible="false" includeInLayout="false">
        <report:DefaultDescriptionArea previousReportLabel="{previousReportLabel}" previousReportAvailable="{previousReportAvailable}"
                                   nextReportAvailable="{nextReportAvailable}" nextReportLabel="{nextReportLabel}" showAdd="{_showAddBar}" description="{description}"
                                   previousReport="toPreviousReport()" nextReport="toNextReport()" saveToAccount="keepEntity()"/>
    </mx:Box>
    <!--<mx:Box width="100%" height="100%" paddingLeft="10" paddingRight="10" paddingBottom="10" id="coreDashboardArea" horizontalScrollPolicy="off">
        <mx:VBox width="100%" height="100%" backgroundAlpha="1" borderColor="0" id="dashboardStyleArea" borderStyle="solid" borderThickness="1">
            <mx:Canvas width="100%" height="100%" horizontalScrollPolicy="off">
                <mx:Canvas id="dashboardCanvas" width="100%" height="100%" horizontalScrollPolicy="off"/>
                <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" id="loadingBox">
                    <mx:ProgressBar indeterminate="true" label="Loading the dashboard..."/>
                </mx:Box>
            </mx:Canvas>
        </mx:VBox>
    </mx:Box>-->
    <dashboard:DashboardRenderer id="dashboardRenderer" dashboard="{dashboard}" dashboardID="{_dashboardID}"
            dataSourceID="{dataSourceID}" initialFilters="{_initialFilters}" filterIndex="{filterIndex}"
            fixedID="{_fixedID}"/>
</report:DataViewPage>
