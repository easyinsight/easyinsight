<?xml version="1.0"?>
<report:DataViewPage xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:dashboard="com.easyinsight.dashboard.*"
                     xmlns:filtering="com.easyinsight.filtering.*"
                     creationComplete="onCreation()"
                     implements="com.easyinsight.listing.IPerspective" xmlns:report="com.easyinsight.report.*"
        styleName="screenBackground" width="100%" height="100%">
    <report:states>
        <mx:State name="normalDashboard">
            <mx:AddChild relativeTo="{coreDashboardArea}" position="before">
                <dashboard:DashboardSlimHeader id="dashboardHeader" dataSource="{dataSource}" viewFactory="{rootView}"/>
            </mx:AddChild>
            <mx:AddChild relativeTo="{coreDashboardArea}" position="before">
                <mx:HBox width="100%" horizontalAlign="center" paddingTop="5" paddingBottom="5" verticalAlign="middle" id="nameContainer">
                    <mx:Label text="{dashboardName}" fontSize="24" maxWidth="600" color="#000000"/>
                    <mx:LinkButton label="{reportInfoLabel}" textDecoration="underline" fontSize="14" visible="{showReportInfoButton}" click="toggleReportInfo()"/>
                </mx:HBox>
            </mx:AddChild>
            <mx:AddChild relativeTo="{coreDashboardArea}" position="before">
                <mx:Box width="100%" styleName="descriptionContainer" id="box" visible="false">
                    <report:DefaultDescriptionArea previousReportLabel="{previousReportLabel}" previousReportAvailable="{previousReportAvailable}"
                            nextReportAvailable="{nextReportAvailable}" nextReportLabel="{nextReportLabel}" showAdd="{_showAddBar}" description="{description}"
                            previousReport="toPreviousReport()" nextReport="toNextReport()" saveToAccount="saveReport()"/>
                </mx:Box>
            </mx:AddChild>
            <mx:AddChild relativeTo="{coreDashboardArea}" position="before">
                <mx:ViewStack width="100%" resizeToContent="true" creationPolicy="all" selectedIndex="{filterIndex}">
                    <mx:Box/>
                    <mx:VBox width="100%" horizontalAlign="center">
                        <filtering:TransformContainer id="transformContainer" filterEditable="false"
                                                      existingFilters="{filterDefinitions}"
                                                      width="100%" feedID="{dataSourceID}"
                                                      reportView="true" dashboardID="{_dashboardID}" updatedTransforms="transformsUpdated(event)"/>
                    </mx:VBox>
                </mx:ViewStack>
            </mx:AddChild>
        </mx:State>
    </report:states>
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisCloseEvent;
        import com.easyinsight.util.CookieUtil;
        import com.easyinsight.framework.User;

        import mx.containers.VBox;

        import mx.controls.Button;

        import mx.events.FlexEvent;

        import mx.messaging.config.ServerConfig;

        import com.easyinsight.analysis.IRetrievable;
        import com.easyinsight.commands.CommandEvent;

        import com.easyinsight.commands.CommandProcessor;

        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.framework.LoginEvent;

        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.report.ReportAnalyzeSource;
        import com.easyinsight.report.ReportNavigationEvent;
        import com.easyinsight.util.ActionDashboardLog;

        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.UserAudit;

        import mx.collections.ArrayCollection;
        import mx.core.UIComponent;
        import mx.managers.BrowserManager;
        import mx.managers.PopUpManager;
        import mx.utils.URLUtil;

        private var _fixedID:Boolean = false;


        public function set fixedID(value:Boolean):void {
            _fixedID = value;
        }

        [Bindable]
        private var _dashboardID:int = -1;

        [Bindable]
        private var dataSourceID:int;

        [Bindable]
        private var filterDefinitions:ArrayCollection;


        private function onCreation():void {
            commandProcessor = new CommandProcessor();
            addEventListener(CommandEvent.COMMAND, onCommand);
            addEventListener(ReportNavigationEvent.TO_REPORT, onNavigation);
            var logoutItem:ContextMenuItem = new ContextMenuItem("Log Out");
            logoutItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(event:ContextMenuEvent):void {
                User.destroy();
                CookieUtil.deleteCookie("eisession");
                ServerConfig.getChannelSet(dashboardService.destination).logout();
                User.getEventNotifier().dispatchEvent(new LoginEvent(LoginEvent.LOGOUT));
            });
            if (!_fixedID) {
                currentState = "normalDashboard";
            }
            var contextMenu:ContextMenu = new ContextMenu();
            contextMenu.customItems = [ logoutItem ];
            this.contextMenu = contextMenu;
            dashboardService.getDashboardView.send(_dashboardID);
        }

        private function onNavigation(event:ReportNavigationEvent):void {
            dispatchEvent(new AnalyzeEvent(new ReportAnalyzeSource(event.descriptor, event.filters)));
        }

        private var commandProcessor:CommandProcessor;

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }

        [Bindable]
        private var rootView:IDashboardViewComponent;


        public function set dashboardID(value:int):void {
            _dashboardID = value;
        }

        private function createDashboard():void {
            var primary:VBox = new VBox();
            primary.percentHeight = 100;
            primary.percentWidth = 100;
            primary.setStyle("verticalGap", 0);
            primary.setStyle("horizontalAlign", "center");

            if (!_fixedID) {
                dashboardStyleArea.setStyle("paddingLeft", dashboard.padding);
                dashboardStyleArea.setStyle("paddingRight", dashboard.padding);
                dashboardStyleArea.setStyle("paddingTop", dashboard.padding);
                dashboardStyleArea.setStyle("paddingBottom", dashboard.padding);
            } else {
                coreDashboardArea.setStyle("paddingLeft", 0);
                coreDashboardArea.setStyle("paddingRight", 0);
                coreDashboardArea.setStyle("paddingBottom", 0);
            }

            dashboardStyleArea.setStyle("backgroundColor", dashboard.backgroundColor);

            if (dashboard.backgroundColor == 0xFFFFFF) {
                setStyle("backgroundColor", 0xFFFFFF);
            }

            dashboardStyleArea.setStyle("borderThickness", dashboard.borderThickness);
            if (dashboard.borderThickness > 0) {
                dashboardStyleArea.setStyle("cornerRadius", 8);
                dashboardStyleArea.setStyle("borderStyle", "solid");
                dashboardStyleArea.setStyle("borderColor", dashboard.borderColor);
                dashboardStyleArea.setStyle("dropShadowEnabled", true);
            }

            /*primary.setStyle("paddingLeft", dashboard.paddingLeft);
             primary.setStyle("paddingRight", dashboard.paddingRight);*/
            /*if (dashboard.filters.length > 0) {
             var transformContainer:TransformContainer = new TransformContainer();
             transformContainer.filterEditable = false;
             transformContainer.setStyle("borderStyle", "solid");
             transformContainer.setStyle("borderThickness", 1);
             transformContainer.existingFilters = dashboard.filters;
             transformContainer.percentWidth = 100;
             transformContainer.setStyle("paddingLeft", 10);
             transformContainer.setStyle("paddingTop", 10);
             transformContainer.setStyle("paddingBottom", 10);
             transformContainer.setStyle("paddingRight", 10);
             transformContainer.feedID = dashboard.dataSourceID;
             transformContainer.setStyle("borderColor", 0xAAAAAA);
             transformContainer.setStyle("backgroundColor", 0xFFFFFF);
             transformContainer.setStyle("backgroundAlpha", 0.8);
             transformContainer.reportView = true;
             transformContainer.addEventListener(TransformsUpdatedEvent.UPDATED_TRANSFORMS, transformsUpdated);
             primary.addChild(transformContainer);
             }*/
            filterDefinitions = dashboard.filters;
            filterIndex = (dashboard.filters != null && dashboard.filters.length > 0) ? 1 : 0;
            /*var dashboardCanvas:Box = new Box();
             dashboardCanvas.percentHeight = 100;

             dashboardCanvas.setStyle("paddingLeft", 10);
             dashboardCanvas.setStyle("paddingRight", 10);
             dashboardCanvas.setStyle("borderStyle", "solid");
             dashboardCanvas.setStyle("borderThickness", 1);
             dashboardCanvas.setStyle("cornerRadius", 8);*/
            var grid:DashboardGrid = dashboard.rootElement as DashboardGrid;
            /*if (grid.width != 0) {
             dashboardCanvas.width = grid.width;
             } else {
             dashboardCanvas.percentWidth = 100;
             }
             dashboardCanvas.setStyle("backgroundAlpha", grid.backgroundAlpha);
             if (grid.backgroundColor != 0) {
             dashboardCanvas.setStyle("backgroundColor", grid.backgroundColor);
             }*/
            var dashboardEditorMetadata:DashboardEditorMetadata = new DashboardEditorMetadata();
            dashboardEditorMetadata.dataSourceID = dataSourceID;
            dashboardEditorMetadata.role = dashboard.role;
            dashboardEditorMetadata.fixedID = _fixedID > 0;
            dashboardEditorMetadata.borderColor = dashboard.borderColor;
            dashboardEditorMetadata.borderThickness = dashboard.borderThickness;
            rootView = DashboardElementFactory.createViewUIComponent(dashboard.rootElement, dashboardEditorMetadata) as IDashboardViewComponent;
            UIComponent(rootView).addEventListener(FlexEvent.CREATION_COMPLETE, function(event:FlexEvent):void {
                var filterMap:Object = new Object();
                filterMap["master"] = dashboard.filters;
                rootView.updateAdditionalFilters(filterMap);
                rootView.initialRetrieve();
            });
            dashboardCanvas.addChild(rootView as UIComponent);
            //primary.addChild(dashboardCanvas);
            //addChild(primary);
            if (dashboardHeader != null) {
                dashboardHeader.dashboard = dashboard;
                dashboardHeader.generateState(description, exchangeItem, this);
            }
        }

        private function gotDashboard():void {
            dashboard = dashboardService.getDashboardView.lastResult as Dashboard;
            dataSource = dashboard.dataSourceInfo;
            dashboardName = dashboard.name;
            description = dashboard.description;
            dataSourceID = dashboard.dataSourceID;
            filterDefinitions = dashboard.filters;
            createDashboard();
            UserAudit.instance().log(new ActionDashboardLog(ActionDashboardLog.VIEW, _dashboardID));
            generateState();
            loadingBox.parent.removeChild(loadingBox);
            /*if (_fixedID) {
             primary.removeChild(topDisplay);
             }*/
        }

        private function transformsUpdated(event:Event):void {
            var filterMap:Object = new Object();
            if (transformContainer != null) {
                filterMap["master"] = transformContainer.getFilterDefinitions();
            }
            rootView.updateAdditionalFilters(filterMap);
            rootView.refresh();
        }

        [Bindable]
        private var description:String;

        [Bindable]
        private var dashboardName:String;

        [Bindable]
        private var exchangeIndex:int;

        private var dashboard:Dashboard;

        public function close():void {

            dispatchEvent(new AnalysisCloseEvent());
        }

        public function toFullScreen():void {
            currentState = "fullScreen";
            stage.addEventListener(KeyboardEvent.KEY_DOWN, onKey);
        }

        private function onKey(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.ESCAPE) {
                stage.removeEventListener(KeyboardEvent.KEY_DOWN, onKey);
                currentState = "";
            }
        }

        private function keptDashboard():void {
            exchangeItem = null;
            _showAddBar = false;
            generateState();
            var window:DashboardAddedWindow = new DashboardAddedWindow();
            window.dashboard = dashboard;
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        public function saveReport():void {
            dashboardService.keepDashboard.send(dashboard.id, exchangeItem.id);
        }

        [Bindable]
        private var filterIndex:int = 0;

        public function refreshData():void {
            rootView.refresh();
        }


        private var _viewFactory:IRetrievable;

        [Bindable(event="viewFactoryChanged")]
        public function get viewFactory():IRetrievable {
            return _viewFactory;
        }

        public function set viewFactory(value:IRetrievable):void {
            if (_viewFactory == value) return;
            _viewFactory = value;
            dispatchEvent(new Event("viewFactoryChanged"));
        }

        public function toggleFilters():void {
            filterIndex = filterIndex == 1 ? 0 : 1;
            rootView.toggleFilters(filterIndex == 1);
        }

        public function exportDashboard(exportButton:Button):void {
            var window:DashboardExportWindow = new DashboardExportWindow();
            window.dashboard = dashboard;
            PopUpManager.addPopUp(window, this, true);
            window.x = exportButton.x - 20;
            window.y = exportButton.y + exportButton.height + 10;
        }

        private var dashboardWidth:int;


        private var _dataSource:DataSourceInfo;


        [Bindable(event="dataSourceChanged")]
        public function get dataSource():DataSourceInfo {
            return _dataSource;
        }

        public function set dataSource(value:DataSourceInfo):void {
            if (_dataSource == value) return;
            _dataSource = value;
            dispatchEvent(new Event("dataSourceChanged"));
        }

        private function toggleReportInfo():void {
            if (reportInfoLabel == "Show Dashboard Info") {
                reportInfoLabel = "Hide Dashboard Info";
                addChildAt(box, 2);
            } else {
                reportInfoLabel = "Show Report Info";
                removeChild(box);
            }
        }

        [Bindable]
        private var reportInfoLabel:String = "Show Dashboard Info";

        [Bindable]
        private var showReportInfoButton:Boolean;

        public function cleanup():void {
        }

        override protected function generateState():void {
            super.generateState();
            showReportInfoButton = !_showAddBar;
            if (box != null && !_showAddBar && contains(box)) {
                removeChild(box);
            }
            if (box != null) {
                box.visible = true;
            }
            if (!_fixedID) {
                var feedFragmentObject:Object = new Object();
                if (exchangeItem == null) {
                    feedFragmentObject.dashboardID = String(dashboard.urlKey);
                } else {
                    feedFragmentObject.reportTemplateID = String(exchangeItem.descriptor.urlKey);
                }
            }
            var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
            BrowserManager.getInstance().setFragment(feedFragmentString);
            BrowserManager.getInstance().setTitle("Easy Insight - " + dashboardName);
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="dashboardService" id="dashboardService">
        <mx:method name="getDashboardView" result="gotDashboard()"/>
        <mx:method name="keepDashboard" result="keptDashboard()"/>
    </mx:RemoteObject>
    <mx:Box width="100%" height="100%" paddingLeft="10" paddingRight="10" paddingBottom="10" id="coreDashboardArea">
        <mx:VBox width="100%" height="100%" backgroundAlpha="1" borderColor="0" id="dashboardStyleArea">
            <mx:Canvas width="100%" height="100%">
                <mx:Canvas id="dashboardCanvas" width="100%" height="100%"/>
                <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" id="loadingBox">
                    <mx:ProgressBar indeterminate="true" label="Loading the dashboard..."/>
                </mx:Box>
            </mx:Canvas>
        </mx:VBox>
    </mx:Box>
</report:DataViewPage>
