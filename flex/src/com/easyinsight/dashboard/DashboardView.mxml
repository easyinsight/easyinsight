<?xml version="1.0"?>
<skin:BackgroundImage xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:skin="com.easyinsight.skin.*"
                      xmlns:filtering="com.easyinsight.filtering.*" xmlns:util="com.easyinsight.util.*"
                      xmlns:datasources="com.easyinsight.datasources.*"
                      applyCenterScreenLogic="false" creationComplete="onCreation()"
                      implements="com.easyinsight.listing.IPerspective">
    <skin:states>
        <mx:State name="fullScreen">
            <mx:RemoveChild target="{topDisplay}"/>
        </mx:State>
    </skin:states>
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisCloseEvent;

        import com.easyinsight.analysis.IRetrievable;
        import com.easyinsight.commands.CommandEvent;

        import com.easyinsight.commands.CommandProcessor;

        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.filtering.TransformsUpdatedEvent;

        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.report.ReportAnalyzeSource;
        import com.easyinsight.report.ReportNavigationEvent;

        import com.easyinsight.util.PopUpUtil;

        import mx.collections.ArrayCollection;
        import mx.controls.TextArea;
        import mx.core.UIComponent;
        import mx.managers.BrowserManager;
        import mx.managers.PopUpManager;
        import mx.utils.URLUtil;

        [Bindable]
        [Embed(source="../../../../assets/document_out.png")]
        private var closeIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/table.png")]
        private var exportIcon:Class;

        private var _dashboardID:int;

        [Bindable]
        private var dataSourceID:int;

        [Bindable]
        private var filterDefinitions:ArrayCollection;

        [Bindable]
        [Embed(source="../../../../assets/banner4.jpg")]
        public var backImage:Class;

        private function onCreation():void {
            commandProcessor = new CommandProcessor();
            addEventListener(CommandEvent.COMMAND, onCommand);
            addEventListener(ReportNavigationEvent.TO_REPORT, onNavigation);
        }

        private function onNavigation(event:ReportNavigationEvent):void {
            dispatchEvent(new AnalyzeEvent(new ReportAnalyzeSource(event.descriptor, event.filters)));
        }

        private var commandProcessor:CommandProcessor;

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }

        private var rootView:IDashboardViewComponent;

        [Bindable]
        [Embed(source="../../../../assets/plasma_tv.png")]
        private var fullScreenIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/edit.png")]
        private var reportEditorIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/funnel.png")]
        private var filterIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/bookmark_blue.png")]
        private var bookmarkIcon:Class;
        [Bindable]
        [Embed(source="../../../../assets/refresh.png")]
        private var refreshIcon:Class;

        public function set dashboardID(value:int):void {
            _dashboardID = value;
        }

        override protected function createChildren():void {
            super.createChildren();
            dashboardService.getDashboard.send(_dashboardID);
        }

        private var _connectionID:int;

        private var _dashboardRating:Number;

        private var _dashboardURLKey:String;

        private var _originDashboardID:int;

        [Bindable(event="originDashboardIDChanged")]
        public function get originDashboardID():int {
            return _originDashboardID;
        }

        public function set originDashboardID(value:int):void {
            if (_originDashboardID == value) return;
            _originDashboardID = value;
            dispatchEvent(new Event("originDashboardIDChanged"));
        }

        public function set connectionID(value:int):void {
            _connectionID = value;
        }

        public function set dashboardURLKey(value:String):void {
            _dashboardURLKey = value;
        }

        private function gotDashboard():void {
            dashboard = dashboardService.getDashboard.lastResult as Dashboard;
            var grid:DashboardGrid = dashboard.rootElement as DashboardGrid;
            if (grid.width == 0) {
                dashboardWidth = 1000;
            } else {
                dashboardWidth = grid.width;
            }
            dashboardCanvas.setStyle("backgroundAlpha", grid.backgroundAlpha);
            if (grid.backgroundColor != 0) {
                dashboardCanvas.setStyle("backgroundColor", grid.backgroundColor);
            }
            dashboardName = dashboard.name;
            description = dashboard.description;
            dataSourceID = dashboard.dataSourceID;
            filterDefinitions = dashboard.filters;
            var feedFragmentObject:Object = new Object();
            if (_dashboardURLKey == null) {
                feedFragmentObject.dashboardID = String(dashboard.urlKey);
            } else {
                feedFragmentObject.reportTemplateID = String(_dashboardURLKey);
            }
            var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
            BrowserManager.getInstance().setFragment(feedFragmentString);
            if (dashboard.filters.length > 0) {
                filterIndex = 1;
            }
            transformContainer.addEventListener(TransformsUpdatedEvent.UPDATED_TRANSFORMS, transformsUpdated);
            rootView = dashboard.rootElement.createViewComponent() as IDashboardViewComponent;
            dashboardCanvas.addChild(rootView as UIComponent);
            generateState();
        }

        private function generateState():void {
            var ops:Array = [];
            var textAreas:Array = [];
            var remainingSections:Array = [];
            if (description == null || description.length == 0) {
                var removeDescription:RemoveChild = new RemoveChild();
                removeDescription.target = descriptionBox;
                ops.push(removeDescription);
                var removeRule1:RemoveChild = new RemoveChild();
                removeRule1.target = rule1;
                ops.push(removeRule1);
            } else {
                textAreas.push(descriptionArea);
                remainingSections.push(descriptionBox);
            }
            if (_connectionID == 0) {
                var removeExchange:RemoveChild = new RemoveChild();
                removeExchange.target = exchangeBox;
                ops.push(removeExchange);
            } else {
                textAreas.push(exchangeArea);
                remainingSections.push(exchangeBox);
            }

            if (_connectionID != 0) {
                var removeData:RemoveChild = new RemoveChild();
                removeData.target = dataSourceDisplay;
                ops.push(removeData);
            } else {
                textAreas.push(dataSourceDisplay.sourceLabel);
                remainingSections.push(dataSourceDisplay);
            }
            if (ops.length > 0) {
                var len:int = Math.max(2, textAreas.length);
                for each (var area:TextArea in textAreas) {
                    area.width = 900 / len;
                }
                for each (var comp:UIComponent in remainingSections) {
                    comp.width = 950 / len;
                }
                var state:State = new State();
                var name:String = "report" + stateIndex++;
                state.name = name;
                state.overrides = ops;
                var states:Array = [];
                states.push(state);
                if (lastState != null) {
                    states.push(lastState);
                }
                this.states = states;
                lastState = state;
                currentState = name;
            } else {
                currentState = "";
            }
        }

        private var _installs:int;

        public function set installs(value:int):void {
            _installs = value;
        }

        private var stateIndex:int;
        private var lastState:State;

        private function transformsUpdated(event:Event):void {
            rootView.refresh(transformContainer.getFilterDefinitions());
        }

        [Bindable]
        private var description:String;

        [Bindable]
        private var dashboardName:String;

        [Bindable]
        private var exchangeIndex:int;

        [Bindable]
        private var ratingText:String;

        private var dashboard:Dashboard;

        private function close():void {

            dispatchEvent(new AnalysisCloseEvent());
        }

        private function toFullScreen():void {
            currentState = "fullScreen";
            stage.addEventListener(KeyboardEvent.KEY_DOWN, onKey);
        }

        private function onKey(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.ESCAPE) {
                stage.removeEventListener(KeyboardEvent.KEY_DOWN, onKey);
                currentState = "";
            }
        }

        private function keptDashboard():void {
            _connectionID = 0;
            generateState();
            var window:DashboardAddedWindow = new DashboardAddedWindow();
            window.dashboard = dashboard;
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function saveReport(event:Event):void {
            dashboardService.keepDashboard.send(dashboard.id, _originDashboardID);
        }

        [Bindable]
        private var filterIndex:int = 0;

        private function refreshData():void {
            rootView.retrieveData();
        }

        [Bindable]
        private var viewFactory:IRetrievable;

        private function toggleFilters():void {
            filterIndex = filterIndex == 0 ? 1 : 0;
        }

        private function exportDashboard():void {
            var window:DashboardExportWindow = new DashboardExportWindow();
            window.dashboard = dashboard;
            PopUpManager.addPopUp(window, this, true);
            window.x = exportButton.x - 20;
            window.y = exportButton.y + exportButton.height + 10;
        }

        [Bindable]
        private var dashboardWidth:int;

        [Bindable]
        private var dataSource:DataSourceInfo;

        public function gotFocus():void {
        }

        public function cleanup():void {
            cleanupBindings();
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="dashboardService" id="dashboardService">
        <mx:method name="getDashboard" result="gotDashboard()"/>
        <mx:method name="keepDashboard" result="keptDashboard()"/>
    </mx:RemoteObject>
    <mx:VBox width="100%" height="100%" paddingLeft="10" paddingRight="10" verticalGap="0"
             horizontalAlign="center"
             direction="vertical">
        <mx:VBox borderStyle="solid" borderThickness="1" borderColor="#DDDDDD" id="topDisplay"
                 backgroundColor="#FFFFFF">
                <mx:VBox width="1000" id="highBox" paddingLeft="10" paddingRight="10">
                    <mx:HBox paddingTop="10" id="leftButtonBar" paddingBottom="10" width="100%">
                        <mx:Button click="close()" icon="{closeIcon}" labelPlacement="right"
                                   id="backButton"
                                   toolTip="Close the report view" label="Close Dashboard"/>
                        <mx:Button click="toFullScreen()" icon="{fullScreenIcon}" labelPlacement="right"
                                   id="fullScreenButton" toolTip="View full screen" label="Full Screen"/>
                        <mx:Button click="refreshData()" icon="{refreshIcon}" labelPlacement="right"
                                   id="refreshButton" toolTip="Refresh this dashboard" label="Refresh"/>
                        <mx:Button icon="{exportIcon}" click="exportDashboard()"
                               labelPlacement="right"
                               id="exportButton" toolTip="Export the report..." label="Export"/>
                        <mx:Button click="toggleFilters()" icon="{filterIcon}" labelPlacement="right"
                                   id="filterButton" label="Toggle Filters"/>
                        <mx:Spacer width="100%"/>
                        <mx:Label text="{dashboardName}" maxWidth="350"
                                  fontSize="14"/>
                        <mx:Spacer width="100%"/>
                    </mx:HBox>
                    <mx:HBox width="100%" verticalAlign="middle">
                        <mx:VBox id="descriptionBox">
                            <util:AutoSizeTextArea text="{description}" width="250" id="descriptionArea"
                                    focusEnabled="false" editable="false" selectable="false"/>
                        </mx:VBox>
                        <mx:VRule height="30" id="rule1"/>
                        <mx:VBox verticalAlign="middle" horizontalAlign="center" id="exchangeBox">
                            <util:AutoSizeTextArea
                                    text="Want to save this dashboard to your account? You can alter the dashboard after saving."
                                    editable="false" selectable="false" width="250" backgroundAlpha="0"
                                    focusEnabled="false" id="exchangeArea"/>
                            <mx:Button label="Save to my Account" fontSize="12" styleName="grayButton"
                                       click="saveReport(event)"/>
                        </mx:VBox>
                        <datasources:DataSourceDisplay dataSource="{dataSource}" dataView="{viewFactory}"
                                                   id="dataSourceDisplay"/>
                    </mx:HBox>
                </mx:VBox>
            <mx:Box width="100%" backgroundImage="{backImage}" backgroundSize="100%" height="18"/>
        </mx:VBox>
        <mx:VBox width="100%" height="100%" paddingLeft="0" paddingRight="0" horizontalAlign="center" verticalGap="0">
            <mx:ViewStack width="{dashboardWidth}" resizeToContent="true" creationPolicy="all"
                          selectedIndex="{filterIndex}">
                <mx:Box/>
                <mx:VBox width="100%" horizontalAlign="center">
                    <filtering:TransformContainer id="transformContainer" filterEditable="false" borderStyle="solid"
                                                  borderThickness="1"
                                                  existingFilters="{filterDefinitions}"
                                                  width="100%" paddingLeft="10"
                                                  paddingTop="10" paddingBottom="10"
                                                  paddingRight="10" feedID="{dataSourceID}" borderColor="#AAAAAA"
                                                  backgroundColor="#FFFFFF" backgroundAlpha=".8" reportView="true"/>
                </mx:VBox>
            </mx:ViewStack>
            <util:AntiScrollCanvas width="{dashboardWidth}" height="100%" id="dashboardCanvas" backgroundColor="#FFFFFF"
                       backgroundAlpha=".8"/>
        </mx:VBox>
    </mx:VBox>
</skin:BackgroundImage>
