<?xml version="1.0"?>
<report:DataViewPage xmlns:mx="http://www.adobe.com/2006/mxml"
                     xmlns:filtering="com.easyinsight.filtering.*" xmlns:util="com.easyinsight.util.*"
                     xmlns:dashboard="com.easyinsight.dashboard.*"
                     applyCenterScreenLogic="false" creationComplete="onCreation()"
                     implements="com.easyinsight.listing.IPerspective" xmlns:report="com.easyinsight.report.*">
    <report:states>
        <mx:State name="defaultHeader">
            <mx:AddChild relativeTo="{topTarget}">
                <dashboard:DashboardHeader id="topDisplay" dataSource="{dataSource}" viewFactory="{viewFactory}"/>
            </mx:AddChild>
        </mx:State>
    </report:states>
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisCloseEvent;
        import com.easyinsight.util.CookieUtil;
        import com.easyinsight.framework.User;

        import mx.controls.Button;

        import mx.events.FlexEvent;

        import mx.messaging.config.ServerConfig;

        import com.easyinsight.analysis.IRetrievable;
        import com.easyinsight.commands.CommandEvent;

        import com.easyinsight.commands.CommandProcessor;

        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.filtering.TransformsUpdatedEvent;
        import com.easyinsight.framework.LoginEvent;

        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.report.ReportAnalyzeSource;
        import com.easyinsight.report.ReportNavigationEvent;
        import com.easyinsight.util.ActionDashboardLog;

        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.UserAudit;

        import mx.collections.ArrayCollection;
        import mx.core.UIComponent;
        import mx.managers.BrowserManager;
        import mx.managers.PopUpManager;
        import mx.utils.URLUtil;

        private var _fixedID:Boolean = false;


        public function set fixedID(value:Boolean):void {
            _fixedID = value;
        }

        private var _dashboardID:int = -1;

        [Bindable]
        private var dataSourceID:int;

        [Bindable]
        private var filterDefinitions:ArrayCollection;



        private function onCreation():void {
            commandProcessor = new CommandProcessor();
            addEventListener(CommandEvent.COMMAND, onCommand);
            addEventListener(ReportNavigationEvent.TO_REPORT, onNavigation);
            var logoutItem:ContextMenuItem = new ContextMenuItem("Log Out");
            logoutItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(event:ContextMenuEvent):void {
                User.destroy();
                CookieUtil.deleteCookie("eisession");
                ServerConfig.getChannelSet(dashboardService.destination).logout();
                User.getEventNotifier().dispatchEvent(new LoginEvent(LoginEvent.LOGOUT));
            });
            var contextMenu:ContextMenu = new ContextMenu();
            contextMenu.customItems = [ logoutItem ];
            this.contextMenu = contextMenu;
            if (!_fixedID) {
                currentState = "defaultHeader";
            }
            dashboardService.getDashboard.send(_dashboardID);
        }

        private function onNavigation(event:ReportNavigationEvent):void {
            dispatchEvent(new AnalyzeEvent(new ReportAnalyzeSource(event.descriptor, event.filters)));
        }

        private var commandProcessor:CommandProcessor;

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }

        private var rootView:IDashboardViewComponent;



        public function set dashboardID(value:int):void {
            _dashboardID = value;
        }

        private function gotDashboard():void {
            dashboard = dashboardService.getDashboard.lastResult as Dashboard;
            var grid:DashboardGrid = dashboard.rootElement as DashboardGrid;
            if (grid.width != 0) {
                dashboardCanvas.width = grid.width;
            } else {
                dashboardCanvas.percentWidth = 100;
            }
            dashboardCanvas.setStyle("backgroundAlpha", grid.backgroundAlpha);
            if (grid.backgroundColor != 0) {
                dashboardCanvas.setStyle("backgroundColor", grid.backgroundColor);
            }
            dataSource = dashboard.dataSourceInfo;
            dashboardName = dashboard.name;
            description = dashboard.description;
            dataSourceID = dashboard.dataSourceID;
            filterDefinitions = dashboard.filters;
            dashboardPaddingLeft = dashboard.paddingLeft;
            dashboardPaddingRight = dashboard.paddingRight;
            if (!_fixedID) {
                var feedFragmentObject:Object = new Object();
                if (exchangeItem == null) {
                    feedFragmentObject.dashboardID = String(dashboard.urlKey);
                } else {
                    feedFragmentObject.reportTemplateID = String(dashboard.urlKey);
                }
            }
            var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
            BrowserManager.getInstance().setFragment(feedFragmentString);
            BrowserManager.getInstance().setTitle("Easy Insight - " + dashboardName);
            if (dashboard.filters.length > 0) {
                filterIndex = 1;
            }
            transformContainer.addEventListener(TransformsUpdatedEvent.UPDATED_TRANSFORMS, transformsUpdated);
            var dashboardEditorMetadata:DashboardEditorMetadata = new DashboardEditorMetadata();
            dashboardEditorMetadata.dataSourceID = dataSourceID;
            rootView = DashboardElementFactory.createViewUIComponent(dashboard.rootElement, dashboardEditorMetadata) as IDashboardViewComponent;
            UIComponent(rootView).addEventListener(FlexEvent.CREATION_COMPLETE, function(event:FlexEvent):void {
                rootView.retrieveData();
            });
            dashboardCanvas.addChild(rootView as UIComponent);
            UserAudit.instance().log(new ActionDashboardLog(ActionDashboardLog.VIEW, _dashboardID));
            generateState();
            /*if (_fixedID) {
                primary.removeChild(topDisplay);
            }*/
        }

        override protected function generateState():void {
            super.generateState();
            if (topDisplay != null && currentState == "defaultHeader") {
                topDisplay.generateState(description, exchangeItem, this);
            }
        }



        private function transformsUpdated(event:Event):void {
            rootView.refresh(transformContainer.getFilterDefinitions());
        }

        [Bindable]
        private var description:String;

        [Bindable]
        private var dashboardName:String;

        [Bindable]
        private var exchangeIndex:int;

        private var dashboard:Dashboard;

        public function close():void {

            dispatchEvent(new AnalysisCloseEvent());
        }

        public function toFullScreen():void {
            currentState = "fullScreen";
            stage.addEventListener(KeyboardEvent.KEY_DOWN, onKey);
        }

        private function onKey(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.ESCAPE) {
                stage.removeEventListener(KeyboardEvent.KEY_DOWN, onKey);
                currentState = "";
            }
        }

        private function keptDashboard():void {
            exchangeItem = null;
            generateState();
            var window:DashboardAddedWindow = new DashboardAddedWindow();
            window.dashboard = dashboard;
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        public function saveReport(event:Event):void {
            dashboardService.keepDashboard.send(dashboard.id, exchangeItem.id);
        }

        [Bindable]
        private var filterIndex:int = 0;

        public function refreshData():void {
            rootView.retrieveData();
        }

        [Bindable]
        private var viewFactory:IRetrievable;

        public function toggleFilters():void {
            filterIndex = filterIndex == 0 ? 1 : 0;
        }

        public function exportDashboard(exportButton:Button):void {
            var window:DashboardExportWindow = new DashboardExportWindow();
            window.dashboard = dashboard;
            PopUpManager.addPopUp(window, this, true);
            window.x = exportButton.x - 20;
            window.y = exportButton.y + exportButton.height + 10;
        }

        [Bindable]
        private var dashboardWidth:int;

        [Bindable]
        private var dataSource:DataSourceInfo;

        [Bindable]
        private var dashboardPaddingLeft:int;

        [Bindable]
        private var dashboardPaddingRight:int;

        public function cleanup():void {
            cleanupBindings();
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="dashboardService" id="dashboardService">
        <mx:method name="getDashboard" result="gotDashboard()"/>
        <mx:method name="keepDashboard" result="keptDashboard()"/>
    </mx:RemoteObject>
    <mx:VBox width="100%" height="100%" verticalGap="0"
             horizontalAlign="center"
             direction="vertical" id="primary" paddingLeft="{dashboardPaddingLeft}" paddingRight="{dashboardPaddingRight}">
        <mx:Box id="topTarget" width="100%" horizontalAlign="center"/>
            <!--<mx:VBox borderStyle="solid" borderThickness="1" borderColor="#DDDDDD" id="topDisplay"
                 backgroundColor="#FFFFFF">
                <mx:VBox width="1000" id="highBox" paddingLeft="10" paddingRight="10">
                    <mx:HBox paddingTop="10" id="leftButtonBar" paddingBottom="10" width="100%">
                        <mx:Button click="close()" icon="{closeIcon}" labelPlacement="right"
                                   id="backButton"
                                   toolTip="Close the report view" label="Close Dashboard"/>
                        <mx:Button click="refreshData()" icon="{refreshIcon}" labelPlacement="right"
                                   id="refreshButton" toolTip="Refresh this dashboard" label="Refresh"/>
                        <mx:Button icon="{exportIcon}" click="exportDashboard()"
                               labelPlacement="right"
                               id="exportButton" toolTip="Export the report..." label="Export"/>
                        <mx:Button click="toggleFilters()" icon="{filterIcon}" labelPlacement="right"
                                   id="filterButton" label="Toggle Filters"/>
                        <mx:Spacer width="100%"/>
                        <mx:Label text="{dashboardName}" maxWidth="350"
                                  fontSize="14"/>
                        <mx:Spacer width="100%"/>
                    </mx:HBox>
                    <mx:HBox width="100%" verticalAlign="middle">
                        <mx:Button icon="{previousReportArrow}" labelPlacement="bottom" toolTip="{previousReportLabel}"
                            click="toPreviousReport()" id="previousReportButton" visible="{previousReportAvailable}"/>
                        <mx:VBox id="descriptionBox">
                            <util:AutoSizeTextArea text="{description}" width="250" id="descriptionArea"
                                    focusEnabled="false" editable="false" selectable="false"/>
                        </mx:VBox>
                        <mx:VRule height="30" id="rule1"/>
                        <mx:VBox verticalAlign="middle" horizontalAlign="center" id="exchangeBox">
                            <util:AutoSizeTextArea
                                    text="Want to save this dashboard to your account? You can alter the dashboard after saving."
                                    editable="false" selectable="false" width="250" backgroundAlpha="0"
                                    focusEnabled="false" id="exchangeArea"/>
                            <mx:Button label="Save to my Account" fontSize="12" styleName="grayButton"
                                       click="saveReport(event)"/>
                        </mx:VBox>
                        <datasources:DataSourceDisplay dataSource="{dataSource}" dataView="{viewFactory}"
                                                   id="dataSourceDisplay"/>
                        <mx:Button icon="{nextReportArrow}" labelPlacement="bottom" toolTip="{nextReportLabel}"
                            click="toNextReport()" id="nextReportButton" visible="{nextReportAvailable}"/>
                    </mx:HBox>
                </mx:VBox>
            <mx:Box width="100%" backgroundImage="{backImage}" backgroundSize="100%" height="18"/>
        </mx:VBox>-->
        <mx:VBox width="100%" height="100%" paddingLeft="0" paddingRight="0" horizontalAlign="center" verticalGap="0">
            <mx:ViewStack width="{dashboardWidth}" resizeToContent="true" creationPolicy="all"
                          selectedIndex="{filterIndex}">
                <mx:Box/>
                <mx:VBox width="100%" horizontalAlign="center">
                    <filtering:TransformContainer id="transformContainer" filterEditable="false" borderStyle="solid"
                                                  borderThickness="1"
                                                  existingFilters="{filterDefinitions}"
                                                  width="100%" paddingLeft="10"
                                                  paddingTop="10" paddingBottom="10"
                                                  paddingRight="10" feedID="{dataSourceID}" borderColor="#AAAAAA"
                                                  backgroundColor="#FFFFFF" backgroundAlpha=".8" reportView="true"/>
                </mx:VBox>
            </mx:ViewStack>
            <util:AntiScrollCanvas height="100%" id="dashboardCanvas" backgroundColor="#FFFFFF"
                       backgroundAlpha=".8"/>
        </mx:VBox>
    </mx:VBox>
</report:DataViewPage>
