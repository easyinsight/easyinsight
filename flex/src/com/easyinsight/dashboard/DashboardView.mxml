<?xml version="1.0"?>
<report:DataViewPage xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:dashboard="com.easyinsight.dashboard.*"
                     creationComplete="onCreation()"
                     implements="com.easyinsight.listing.IPerspective" xmlns:report="com.easyinsight.report.*"
        width="100%" height="100%" verticalGap="0" verticalScrollPolicy="off" horizontalScrollPolicy="off">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisCloseEvent;
        import com.easyinsight.analysis.IRetrievalState;
        import com.easyinsight.analysis.list.SizeOverrideEvent;
        import com.easyinsight.framework.PerspectiveInfo;
        import com.easyinsight.quicksearch.EIDescriptor;
        import com.easyinsight.report.BreadCrumb;
        import com.easyinsight.report.SaveConfigurationWindow;
        import com.easyinsight.report.SavedConfiguration;
        import com.easyinsight.report.SavedConfigurationEvent;
        import com.easyinsight.skin.ApplicationSkin;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.AsyncResponderAlert;
        import com.easyinsight.util.CookieUtil;
        import com.easyinsight.framework.User;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.ProgressAlert;

        import mx.controls.Alert;

        import mx.controls.Button;
        import mx.core.Application;
        import mx.core.UIComponent;
        import mx.events.CloseEvent;
        import mx.events.MenuEvent;

        import mx.messaging.config.ServerConfig;

        import com.easyinsight.analysis.IRetrievable;
        import com.easyinsight.commands.CommandEvent;

        import com.easyinsight.commands.CommandProcessor;

        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.framework.LoginEvent;

        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.report.ReportAnalyzeSource;
        import com.easyinsight.report.ReportNavigationEvent;
        import com.easyinsight.util.ActionDashboardLog;
        import com.easyinsight.util.UserAudit;

        import mx.collections.ArrayCollection;
        import mx.managers.BrowserManager;
        import mx.managers.PopUpManager;
        import mx.rpc.AsyncResponder;
        import mx.rpc.AsyncToken;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;
        import mx.utils.URLUtil;

        [Bindable]
        private var _fixedID:Boolean = false;


        public function set fixedID(value:Boolean):void {
            _fixedID = value;
        }

        private var _retrievalState:IRetrievalState;

        [Bindable(event="retrievalStateChanged")]
        public function get retrievalState():IRetrievalState {
            return _retrievalState;
        }

        public function set retrievalState(value:IRetrievalState):void {
            if (_retrievalState == value) return;
            _retrievalState = value;
            dispatchEvent(new Event("retrievalStateChanged"));
        }

        [Bindable]
        private var _dashboardID:int = -1;

        [Bindable]
        private var dataSourceID:int;

        [Bindable]
        private var filterDefinitions:ArrayCollection;

        private function sizeOverride(event:SizeOverrideEvent):void {
            autoSize = true;
        }

        private var autoSize:Boolean = false;

        private function logoutResultEvent(event:ResultEvent, token:Object = null):void {
            User.getEventNotifier().dispatchEvent(new LoginEvent(LoginEvent.LOGOUT));
        }

        private function logoutFaultEvent(event:FaultEvent, token:Object = null):void {
        }

        private function onCreation():void {
            commandProcessor = new CommandProcessor();
            stage.addEventListener(Event.RESIZE, onResize);
            addEventListener(CommandEvent.COMMAND, onCommand);
            addEventListener(ReportNavigationEvent.TO_REPORT, onNavigation);
            addEventListener(SizeOverrideEvent.SIZE_OVERRIDE, sizeOverride);
            var blah:DashboardView = this;
            var logoutItem:ContextMenuItem = new ContextMenuItem("Log Out");
            logoutItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function (event:ContextMenuEvent):void {
                User.destroy();
                CookieUtil.deleteCookie("eisession");
                CookieUtil.deleteCookie("eiRememberMe");
                CookieUtil.deleteCookie("eiUserName");
                var token:AsyncToken = ServerConfig.getChannelSet(dashboardService.destination).logout();
                AsyncResponderAlert.alert(blah, "Logging out...", token);
                token.addResponder(new AsyncResponder(logoutResultEvent, logoutFaultEvent));
            });
            if (!_fixedID) {
                //Alert.show("normal dashboard, no?");
                dashboardHeader.dashboardView = this;
                dashboardHeader.visible = true;
                dashboardHeader.includeInLayout = true;
                //addChildAt(dashboardHeader, 0);
                headerArea.includeInLayout = true;
                //addChildAt(nameContainer, 1);
                descriptionBox.visible = true;
                descriptionBox.includeInLayout = true;
                //addChildAt(box, 2);
            }
            var contextMenu:ContextMenu = new ContextMenu();
            contextMenu.customItems = [ logoutItem ];
            this.contextMenu = contextMenu;
            dashboardService.getDashboardView.send(_dashboardID, dashboardStackPositions);
        }

        private function onNavigation(event:ReportNavigationEvent):void {
            if (_breadCrumbs == null) {
                _breadCrumbs = [];
            }
            var dashboardDesc:DashboardDescriptor = new DashboardDescriptor();
            dashboardDesc.id = _dashboardID;
            dashboardDesc.name = dashboard.name;
            var pos:DashboardStackPositions = new DashboardStackPositions();
            dashboardRenderer.positionsPopulate(pos);
            _breadCrumbs.push(new BreadCrumb(dashboardDesc, dashboardRenderer.getFilterDefinitions(), pos));
            if (event.descriptor is InsightDescriptor) {
                dispatchEvent(new AnalyzeEvent(new ReportAnalyzeSource(InsightDescriptor(event.descriptor), event.filters, null, null, 0, _breadCrumbs)));
            } else if (event.descriptor is DashboardDescriptor) {
                dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DASHBOARD_VIEW, {dashboardID:DashboardDescriptor(event.descriptor).id,
                    initialFilters:event.filters, breadCrumbs:_breadCrumbs, exchangeItem:exchangeItem, reportList:reportList, reportIndex:reportIndex,
                    originalExchangeItem:originalExchangeItem != null ? originalExchangeItem : dashboardDesc })));
            }
        }

        override protected function myType():int {
            return EIDescriptor.DASHBOARD;
        }

        [Bindable]
        private var _initialFilters:ArrayCollection;

        public function set initialFilters(value:ArrayCollection):void {
            _initialFilters = value;
        }

        private var _forceDefault:Boolean = false;

        public function set forceDefault(value:Boolean):void {
            _forceDefault = value;
        }

        private var _breadCrumbs:Array;


        public function set breadCrumbs(value:Array):void {
            _breadCrumbs = value;
        }

        private var commandProcessor:CommandProcessor;

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }

        [Bindable]
        public var rootView:IDashboardViewComponent;


        public function set dashboardID(value:int):void {
            _dashboardID = value;
        }

        private function refreshEvent(event:Event):void {
            dashboardRenderer.refreshData();
        }

        [Bindable]
        private var logoVisible:Boolean = false;

        private function gotDashboard():void {
            this.headerBarLogo = ApplicationSkin.instance().reportHeaderImage;
            this.headerBackgroundColor = ApplicationSkin.instance().headerBackgroundColor;
            this.headerTextColor = ApplicationSkin.instance().headerTextColor;
            this.headerVisible = ApplicationSkin.instance().reportHeader;
            logoVisible = User.getInstance().reportLogo != null;
            dashboard = dashboardService.getDashboardView.lastResult as Dashboard;

            var configurations:ArrayCollection = dashboard.configurations;
            if (selectedConfiguration == null) {
                options = new ArrayCollection();
                options.addItem( {label: "Reset to Default", data: 1});
                if (User.getInstance().analyst) {
                    options.addItem({label: "Save a New Configuration...", data: 2});
                }
            } else {
                configLabel = selectedConfiguration.name;
                options = new ArrayCollection();
                if (User.getInstance().analyst) {
                    options.addItem({label: "Update " + selectedConfiguration.name, data: 2});
                    options.addItem({label: "Delete " + selectedConfiguration.name, data: 3});
                }
                options.addItem({label: "Reset to Default", data: 1});
            }
            for each (var sc:SavedConfiguration in configurations) {
                options.addItem({ label: sc.name, data: sc });
            }

            if (!_forceDefault && dashboard.enableLocalStorage && exchangeItem == null && selectedConfiguration == null) {
                var delegate:DashboardStackPositionsRetrievalState = null;
                if (dashboardStackPositions != null) {
                    delegate = new DashboardStackPositionsRetrievalState(dashboardStackPositions);
                }
                retrievalState = new LocalStorageRetrievalState(dashboard.urlKey, dashboard.version, delegate);
            } else if (dashboardStackPositions != null) {
                retrievalState = new DashboardStackPositionsRetrievalState(dashboardStackPositions);
            }
            if (selectedConfiguration != null) {
                var feedFragmentObject:Object = new Object();
                feedFragmentObject.dashboardConfigurationID = selectedConfiguration.urlKey;
                var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
                BrowserManager.getInstance().setFragment(feedFragmentString);
            }
            if (dashboard.borderThickness == 0 && exchangeItem == null) {
                headerArea.includeInLayout = false;
                headerArea.visible = false;
                descriptionBox.includeInLayout = false;
            }
            if (_fixedID) {
                setStyle("paddingLeft", 0);
                setStyle("paddingTop", 0);
                setStyle("paddingRight", 0);
                setStyle("paddingBottom", 0);
            }
            //EIGlobalTimer.instance().dataSourceTime = dashboard.dataSourceInfo.lastDataTime;
            dataSource = dashboard.dataSourceInfo;
            dashboardName = dashboard.name;
            description = dashboard.description;
            dataSourceID = dashboard.dataSourceID;
            filterDefinitions = dashboard.filters;

            rootView = dashboardRenderer.createDashboard();
            if (dashboardHeader != null) {
                dashboardHeader.dashboard = dashboard;
                dashboardHeader.generateState(description, exchangeItem, this);
                if (!dashboard.absoluteSizing) {
                    vbox.percentHeight = 100;
                }
            }
            if (_dashboardID != 0 && exchangeItem == null && _breadCrumbs == null) {
                UserAudit.instance().log(new ActionDashboardLog(ActionDashboardLog.VIEW, _dashboardID));
            }
            generateState();

            var desc:DashboardDescriptor = new DashboardDescriptor();
            desc.id = dashboard.id;

            /*if (_fixedID) {
             primary.removeChild(topDisplay);
             }*/
            if (_breadCrumbs != null && _breadCrumbs.length > 0) {
                var backButton:Button = new Button();

                var crumb:BreadCrumb = _breadCrumbs[_breadCrumbs.length - 1] as BreadCrumb;
                backButton.styleName = "grayButton";
                backButton.label = "Back to " + crumb.eiDescriptor.name;
                backButton.addEventListener(MouseEvent.CLICK, function (event:MouseEvent):void {
                    _breadCrumbs.pop();
                    if (crumb.eiDescriptor is InsightDescriptor) {
                        dispatchEvent(new AnalyzeEvent(new ReportAnalyzeSource(InsightDescriptor(crumb.eiDescriptor), crumb.filters, null, null, 0, _breadCrumbs)));
                    } else {
                        dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DASHBOARD_VIEW, {dashboardID:crumb.eiDescriptor.id,
                            initialFilters:crumb.filters, breadCrumbs:_breadCrumbs, exchangeItem:exchangeItem, reportList:reportList, reportIndex:reportIndex,
                            originalExchangeItem:originalExchangeItem != null ? originalExchangeItem : desc, dashboardStackPositions:crumb.stackPositions })));
                    }
                });
                breadCrumbBox.addChild(backButton);
            }
        }

        private var _dashboardStackPositions:DashboardStackPositions;


        [Bindable(event="dashboardStackPositionsChanged")]
        public function get dashboardStackPositions():DashboardStackPositions {
            return _dashboardStackPositions;
        }

        public function set dashboardStackPositions(value:DashboardStackPositions):void {
            if (_dashboardStackPositions == value) return;
            _dashboardStackPositions = value;
            dispatchEvent(new Event("dashboardStackPositionsChanged"));
        }

        [Bindable]
        private var description:String;

        [Bindable]
        private var dashboardName:String;

        [Bindable]
        private var exchangeIndex:int;

        [Bindable]
        private var dashboard:Dashboard;

        public function close():void {
            dispatchEvent(new AnalysisCloseEvent());
        }

        public function toFullScreen():void {
            currentState = "fullScreen";
            stage.addEventListener(KeyboardEvent.KEY_DOWN, onKey);
        }

        private function onKey(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.ESCAPE) {
                stage.removeEventListener(KeyboardEvent.KEY_DOWN, onKey);
                currentState = "";
            }
        }

        override protected function myID():int {
            return dashboard.id;
        }

        override protected function keptEntity():void {
            exchangeItem = null;
            _showAddBar = false;
            generateState();
        }

        [Bindable]
        private var filterIndex:int = 0;

        public function refreshData():void {
            dashboardRenderer.refreshData();
        }


        private var _viewFactory:IRetrievable;

        [Bindable(event="viewFactoryChanged")]
        public function get viewFactory():IRetrievable {
            return _viewFactory;
        }

        public function set viewFactory(value:IRetrievable):void {
            if (_viewFactory == value) return;
            _viewFactory = value;
            dispatchEvent(new Event("viewFactoryChanged"));
        }

        public function toggleFilters():void {
            dashboardRenderer.toggleFilters();
        }

        public function exportDashboard(exportButton:Button):void {
            var window:DashboardExportWindow = new DashboardExportWindow();
            window.dashboard = dashboard;
            window.dashboardRenderer = dashboardRenderer;
            window.headerArea = headerArea;
            window.coreView = dashboardRenderer;
            window.rootView = rootView;

            PopUpManager.addPopUp(window, this, true);
            window.x = exportButton.x - 20;
            window.y = exportButton.y + exportButton.height + 10;
            PopUpManager.removePopUp(this);
        }

        private var dashboardWidth:int;


        private var _dataSource:DataSourceInfo;


        [Bindable(event="dataSourceChanged")]
        public function get dataSource():DataSourceInfo {
            return _dataSource;
        }

        public function set dataSource(value:DataSourceInfo):void {
            if (_dataSource == value) return;
            _dataSource = value;
            dispatchEvent(new Event("dataSourceChanged"));
        }

        private function toggleReportInfo():void {
            if (reportInfoLabel == "Show Dashboard Info") {
                reportInfoLabel = "Hide Dashboard Info";
                vbox.addChildAt(descriptionBox, 2);
            } else {
                reportInfoLabel = "Show Dashboard Info";
                vbox.removeChild(descriptionBox);
            }
        }

        [Bindable]
        private var reportInfoLabel:String = "Show Dashboard Info";

        [Bindable]
        private var showReportInfoButton:Boolean;

        public function cleanup():void {
            stage.removeEventListener(Event.RESIZE, onResize);
        }

        override protected function generateState():void {
            super.generateState();
            showReportInfoButton = !_showAddBar && description != null && description != "";
            if (descriptionBox != null && !_showAddBar && contains(descriptionBox)) {
                vbox.removeChild(descriptionBox);
            }
            if (descriptionBox != null) {
                descriptionBox.visible = true;
            }
            if (!_fixedID) {
                var feedFragmentObject:Object = new Object();
                if (exchangeItem == null) {
                    feedFragmentObject.dashboardID = String(dashboard.urlKey);
                } else {
                    feedFragmentObject.reportTemplateID = String(exchangeItem.descriptor.urlKey);
                }
            }
            if (selectedConfiguration == null) {
                if (dashboardStackPositions == null || dashboardStackPositions.urlKey == null) {
                    var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
                    BrowserManager.getInstance().setFragment(feedFragmentString);
                }
            }
            BrowserManager.getInstance().setTitle("Easy Insight - " + dashboardName);
        }

        [Bindable]
        private var showLoading:Boolean;

        private var _headerBarLogoChanged:Boolean = false;
        private var _headerBackgroundColorChanged:Boolean = false;
        private var _headerTextColorChanged:Boolean = false;

        public function set headerBarLogo(value:Object):void {
            _headerLogo = value;
            _headerBarLogoChanged = true;
            invalidateDisplayList();
        }

        public function set headerBackgroundColor(color:uint):void {
            _headerBackgroundColor = color;
            _headerBackgroundColorChanged = true;
            invalidateDisplayList();
        }

        public function set headerTextColor(color:uint):void {
            _headerTextColor = color;
            _headerTextColorChanged = true;
            invalidateDisplayList();
        }

        private var _headerVisibleChanged:Boolean;

        private var _headerBackgroundColor:uint;
        private var _headerTextColor:uint;
        private var _headerVisible:Boolean;

        private var _headerLogo:Object;

        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
            if (_headerVisible) {
                if (_headerBarLogoChanged) {
                    if (_headerLogo is Bitmap) {
                        var bitmap:Bitmap = _headerLogo as Bitmap;
                        logoImage.source = new Bitmap(bitmap.bitmapData);
                        _headerBarLogoChanged = false;
                    }
                }
                if (_headerTextColorChanged) {
                    linkButton.setStyle("color", _headerTextColor);
                    reportLabel.setStyle("color", _headerTextColor);
                    _headerTextColorChanged = false;
                }
                if (_headerBackgroundColorChanged) {
                    headerArea.setStyle("backgroundColor", _headerBackgroundColor);
                    _headerBackgroundColorChanged = false;
                }
            }
        }


        [Bindable(event="headerVisibleChanged")]
        public function get headerVisible():Boolean {
            return _headerVisible;
        }

        public function set headerVisible(value:Boolean):void {
            if (_headerVisible == value) return;
            _headerVisible = value;
            invalidateDisplayList();
            dispatchEvent(new Event("headerVisibleChanged"));
        }

        override protected function measure():void {
            super.measure();
            vbox.width = Application(Application.application).width;
            vbox.maxHeight = Application(Application.application).height - dashboardHeader.height;
        }

        private function onResize(event:Event):void {
            invalidateSize();
        }

        public function resetFilters():void {
            dashboardRenderer.resetState();
            dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DASHBOARD_VIEW, {dashboardID: _dashboardID })));
        }

        private function deletedConfiguration():void {
            dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DASHBOARD_VIEW, {dashboardID: _dashboardID })));
        }

        public var selectedConfiguration:SavedConfiguration;

        public function onConfigurationClick(event:MenuEvent):void {
            var data:Object = event.item.data;
            if (data == 1) {
                if (selectedConfiguration == null) {
                    dashboardRenderer.resetState();
                }
                dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DASHBOARD_VIEW, {dashboardID: _dashboardID })));
            } else if (data == 2) {
                var pos:DashboardStackPositions = new DashboardStackPositions();
                dashboardRenderer.positionsPopulate(pos);
                var c:SavedConfiguration;
                var window:SaveConfigurationWindow = new SaveConfigurationWindow();
                if (selectedConfiguration == null) {
                    var config:SavedConfiguration = new SavedConfiguration();
                    config.dashboardStackPositions = pos;
                    c = config;
                    window.addEventListener(SavedConfigurationEvent.CONFIGURATION_ADD, onConfigAdd, false, 0, true);
                } else {
                    c = selectedConfiguration;
                    c.dashboardStackPositions = pos;
                    window.addEventListener(SavedConfigurationEvent.CONFIGURATION_UPDATE, onConfigUpdate, false, 0, true);
                    // Tier (1/2/3/Reassignment)
                }

                window.dashboardID = _dashboardID;
                window.savedConfiguration = c;

                PopUpManager.addPopUp(window, this, true);
                PopUpUtil.centerPopUp(window);
            } else if (data is SavedConfiguration) {
                dashboardService.getConfiguration.send(SavedConfiguration(data).urlKey);
            } else if (data == 3) {
                var thisObj:UIComponent = this;
                Alert.show("Are you sure you want to delete the selected configuration?", "Alert", Alert.OK | Alert.CANCEL, this,
                        function(closeEvent:CloseEvent):void {
                            if (closeEvent.detail == Alert.OK) {
                                ProgressAlert.alert(thisObj, "Deleting configuration...", null, dashboardService.deleteConfiguration);
                                dashboardService.deleteConfiguration.send(selectedConfiguration);
                            }
                        });
            }
        }

        private function gotConfiguration():void {
            var config:SavedConfiguration = dashboardService.getConfiguration.lastResult as SavedConfiguration;
            dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DASHBOARD_VIEW, {dashboardID: _dashboardID, dashboardStackPositions: config.dashboardStackPositions,
                selectedConfiguration:config })));
        }

        [Bindable]
        private var configLabel:String = "Configurations";

        [Bindable]
        private var options:ArrayCollection;

        private function onConfigAdd(event:SavedConfigurationEvent):void {
            var feedFragmentObject:Object = new Object();
            feedFragmentObject.dashboardConfigurationID = event.configuration.urlKey;
            var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
            BrowserManager.getInstance().setFragment(feedFragmentString);
            configLabel = event.configuration.name;
            options.addItem({label: event.configuration.name, data: event.configuration});
        }

        private function onConfigUpdate(event:SavedConfigurationEvent):void {

        }
        ]]></mx:Script>
    <mx:RemoteObject destination="dashboardService" id="dashboardService">
        <mx:method name="getDashboardView" result="gotDashboard()"/>
        <mx:method name="deleteConfiguration" result="deletedConfiguration()"/>
        <mx:method name="getConfiguration" result="gotConfiguration()"/>
    </mx:RemoteObject>
    <mx:Style>
        .myCustomPopUpStyleName {
            fontSize: 12;
            fontFamily: "Lucida Grande";
            textAlign: left;
            dropShadowEnabled: false;
            borderStyle: solid;
            borderThickness: 1;
            cornerRadius: 8;
        }
    </mx:Style>
    <dashboard:DashboardSlimHeader id="dashboardHeader" dataSource="{dataSource}" viewFactory="{rootView}" includeInLayout="false" visible="false"
            options="{options}" configLabel="{configLabel}"/>
    <mx:VBox id="vbox" verticalScrollPolicy="auto" verticalGap="0">
        <mx:HBox width="100%" id="headerArea" paddingTop="5" paddingBottom="5" paddingLeft="10" verticalAlign="middle">
            <mx:Box backgroundColor="#FFFFFF" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" borderColor="#FFFFFF" borderThickness="1" cornerRadius="5"
                    borderStyle="solid" visible="{logoVisible}">
                <mx:Image id="logoImage"/>
            </mx:Box>
            <mx:Spacer width="100%"/>
            <mx:HBox id="breadCrumbBox"/>
            <mx:Label text="{dashboardName}" fontSize="24" maxWidth="600" id="reportLabel"/>
            <mx:LinkButton label="{reportInfoLabel}" textDecoration="underline" fontSize="14" visible="{showReportInfoButton}" click="toggleReportInfo()"
                           id="linkButton"/>
            <mx:Spacer width="100%"/>
        </mx:HBox>
        <mx:Spacer height="10"/>
        <mx:Box width="100%" styleName="descriptionContainer" id="descriptionBox" visible="false" includeInLayout="false">
            <report:DefaultDescriptionArea previousReportLabel="{previousReportLabel}" previousReportAvailable="{previousReportAvailable}"
                                       nextReportAvailable="{nextReportAvailable}" nextReportLabel="{nextReportLabel}" showAdd="{_showAddBar}" description="{description}"
                                       previousReport="toPreviousReport()" nextReport="toNextReport()" saveToAccount="keepEntity()"/>
        </mx:Box>
        <dashboard:DashboardRenderer id="dashboardRenderer" dashboard="{dashboard}" dashboardID="{_dashboardID}"
                dataSourceID="{dataSourceID}" initialFilters="{_initialFilters}" filterIndex="{filterIndex}"
                fixedID="{_fixedID}" dashboardStackPositions="{dashboardStackPositions}" retrievalState="{retrievalState}"/>
    </mx:VBox>
</report:DataViewPage>
