<?xml version="1.0"?>
<util:EITitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*"
        backgroundColor="#FFFFFF">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemTypes;
        import com.easyinsight.analysis.DateValue;
        import com.easyinsight.analysis.NumericValue;
        import com.easyinsight.analysis.StringValue;
        import com.easyinsight.analysis.Value;
        import com.easyinsight.util.ProgressAlert;
        import com.easyinsight.util.SmartComboBox;

        import mx.collections.ArrayCollection;
        import mx.containers.Form;

        import mx.containers.FormItem;
        import mx.controls.Alert;
        import mx.controls.ComboBox;
        import mx.controls.DateField;
        import mx.controls.TextArea;
        import mx.controls.TextInput;

        import mx.core.UIComponent;

        import mx.managers.PopUpManager;
        
        public var actualRowSet:ActualRowSet;

        override protected function createChildren():void {
            super.createChildren();
            if (actualRowSet != null) {
                var actualRow:ActualRow = actualRowSet.rows.getItemAt(0) as ActualRow;
                showDelete = actualRow.rowID > 0;
                var forms:ArrayCollection = actualRowSet.forms;
                for each (var item:ActualRowLayoutItem in forms) {
                    var hbox:HBox = new HBox();
                    target.addChild(hbox);
                    for (var k:int = 0; k < item.columns; k++) {
                        var form:Form = new Form();
                        //form.setStyle("maxLabelWidth", item.formLabelWidth);
                        hbox.addChild(form);
                    }
                    var i:int = 0;
                    for each (var analysisItem:AnalysisItem in item.analysisItems) {
                        var value:Value = actualRow.values[analysisItem.qualifiedName()];
                        if (value == null) {
                            continue;
                        }
                        var comp:UIComponent;
                        var options:ArrayCollection = actualRowSet.options[analysisItem.display];
                        if (options != null) {
                            var comboBox:SmartComboBox = new SmartComboBox();
                            comboBox.dataProvider = options;
                            comboBox.width = item.columnWidth;
                            comboBox.labelField = "displayName";
                            comboBox.selectedProperty = "value";
                            comboBox.selectedValue = value.getValue();
                            comp = comboBox;
                        } else if (analysisItem.hasType(AnalysisItemTypes.DATE)) {
                            var dateField:DateField = new DateField();
                            dateField.editable = true;
                            if (value.type() == Value.DATE) {
                                dateField.selectedDate = value.getValue() as Date;
                            }
                            comp = dateField;
                        } else if (analysisItem.hasType(AnalysisItemTypes.MEASURE)) {
                            var textInput:TextInput = new TextInput();
                            textInput.text = String(value.getValue());
                            textInput.width = item.columnWidth;
                            comp = textInput;
                        } else if (analysisItem.hasType(AnalysisItemTypes.TEXT)) {
                            var textArea:TextArea = new TextArea();
                            textArea.width = item.columnWidth;
                            textArea.height = 50;
                            textArea.text = String(value.getValue());
                            comp = textArea;
                        } else {
                            var groupingInput:TextInput = new TextInput();
                            groupingInput.width = item.columnWidth;
                            groupingInput.text = String(value.getValue());
                            comp = groupingInput;
                        }
                        var formItem:FormItem = new FormItem();
                        formItem.setStyle("labelWidth", item.formLabelWidth);
                        formItem.data = analysisItem;
                        formItem.addChild(comp);
                        formItem.label = analysisItem.display;
                        var pos:int = i % item.columns;
                        var targetForm:Form = hbox.getChildAt(pos) as Form;
                        targetForm.addChild(formItem);
                        i++;
                    }
                }
            }
        }
        
        private function saveForm(actualRow:ActualRow,  form:Form):void {
            for each (var formItem:FormItem in form.getChildren()) {
                var comp:UIComponent = formItem.getChildAt(0) as UIComponent;
                var analysisItem:AnalysisItem = formItem.data as AnalysisItem;
                if (comp is ComboBox) {
                    actualRow.values[analysisItem.qualifiedName()] = ComboBox(comp).selectedItem.value;
                } else if (analysisItem.hasType(AnalysisItemTypes.DATE)) {
                    var dateField:DateField = comp as DateField;
                    actualRow.values[analysisItem.qualifiedName()] = new DateValue(dateField.selectedDate);
                } else if (analysisItem.hasType(AnalysisItemTypes.MEASURE)) {
                    var input:TextInput = comp as TextInput;
                    if (input.text == "") {
                        actualRow.values[analysisItem.qualifiedName()] = new NumericValue(Number(input.text));
                    } else {
                        actualRow.values[analysisItem.qualifiedName()] = new NumericValue(parseFloat(input.text));
                    }
                } else if (analysisItem.hasType(AnalysisItemTypes.TEXT)) {
                    var area:TextArea = comp as TextArea;
                    actualRow.values[analysisItem.qualifiedName()] = new StringValue(area.text);
                } else {
                    var textInput:TextInput = comp as TextInput;
                    actualRow.values[analysisItem.qualifiedName()] = new StringValue(textInput.text);
                }
            }
        }

        private function save():void {
            var actualRow:ActualRow = actualRowSet.rows.getItemAt(0) as ActualRow;
            for each (var hbox:HBox in target.getChildren()) {
                for each (var form:Form in hbox.getChildren()) {
                    saveForm(actualRow,  form);
                }
            }
            if (actualRow.rowID > 0) {
                ProgressAlert.alert(this, "Updating row...", null, analysisService.updateRow);
                analysisService.updateRow.send(actualRow, actualRowSet.dataSourceID);
            } else {
                ProgressAlert.alert(this, "Adding row...", null, analysisService.addRow);
                analysisService.addRow.send(actualRow, actualRowSet.dataSourceID);
            }
        }

        private function deleteRow():void {
            var actualRow:ActualRow = actualRowSet.rows.getItemAt(0) as ActualRow;
            ProgressAlert.alert(this, "Deleting row...", null, analysisService.deleteRow);
            analysisService.deleteRow.send(actualRow, actualRowSet.dataSourceID);
        }

        [Bindable]
        private var showDelete:Boolean;
        
        private function updated():void {
            PopUpManager.removePopUp(this);
        }

        private function deleted():void {
            PopUpManager.removePopUp(this);
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="analysisDefinition" id="analysisService">
        <mx:method name="updateRow" result="updated()"/>
        <mx:method name="deleteRow" result="deleted()"/>
        <mx:method name="addRow" result="updated()"/>
    </mx:RemoteObject>
    <mx:VBox width="100%" height="100%" paddingLeft="10" paddingRight="10" verticalGap="15" paddingBottom="10" paddingTop="10">
        <mx:VBox width="900" maxHeight="500" id="target">
            
        </mx:VBox>
        <mx:HBox width="100%" horizontalAlign="center">
            <util:SaveButton label="Save" click="save()"/>
            <util:SaveButton label="Delete" click="deleteRow()" enabled="{showDelete}"/>
            <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
        </mx:HBox>
    </mx:VBox>
</util:EITitleWindow>
