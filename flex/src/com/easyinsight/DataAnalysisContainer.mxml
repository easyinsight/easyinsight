<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:core="com.easyinsight.*" xmlns:mx="http://www.adobe.com/2006/mxml"
                     xmlns:analysis="com.easyinsight.analysis.*"
                     xmlns:datasources="com.easyinsight.datasources.*"
                     creationComplete="initializeForWorksheet()" width="100%"
                     height="100%"
                     xmlns:util="com.easyinsight.util.*"
                     xmlns:filtering="com.easyinsight.filtering.*"
                     xmlns:feed="com.easyinsight.administration.feed.*" doubleClickEnabled="true"
                     paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10"
        implements="com.easyinsight.listing.IPerspective">
    <mx:states>
        <mx:State name="NotLoggedIn">
            <mx:RemoveChild target="{saveButton}"/>
            <mx:RemoveChild target="{saveAsButton}"/>
        </mx:State>
        <mx:State name="Professional">

        </mx:State>
        <mx:State name="Group" basedOn="Professional">

        </mx:State>
        <mx:State name="Individual" basedOn="Group">
            <!--<mx:RemoveChild target="{createFeedButton}"/>-->
        </mx:State>
        <mx:State name="Free" basedOn="Individual">

        </mx:State>
    </mx:states>
    <mx:Script>
		<![CDATA[
        import com.easyinsight.account.Account;
        import com.easyinsight.analysis.AddedItemUpdateEvent;
        import com.easyinsight.analysis.AnalysisCalculation;
        import com.easyinsight.analysis.AnalysisChangedEvent;
        import com.easyinsight.analysis.AnalysisHierarchyItem;
        import com.easyinsight.analysis.AnalysisItemCopyEvent;
        import com.easyinsight.analysis.AnalysisItemNode;
        import com.easyinsight.analysis.AnalysisItemTypeRenderer;
        import com.easyinsight.analysis.AnalysisLatitude;
        import com.easyinsight.analysis.AnalysisList;
        import com.easyinsight.analysis.AnalysisLongitude;
        import com.easyinsight.analysis.AnalysisStep;
        import com.easyinsight.analysis.AnalysisText;
        import com.easyinsight.analysis.AnalysisUtil;
        import com.easyinsight.analysis.AnalysisZipCode;
        import com.easyinsight.analysis.AvailableFieldRenderer;
        import com.easyinsight.analysis.ControllerLookup;
        import com.easyinsight.analysis.CoordinateValue;
        import com.easyinsight.analysis.DataServiceEvent;
        import com.easyinsight.analysis.DerivedAnalysisDimension;
        import com.easyinsight.analysis.DrillThrough;
        import com.easyinsight.analysis.DrillThroughEvent;
        import com.easyinsight.analysis.FeedNode;
        import com.easyinsight.analysis.HierarchyDrilldownEvent;
        import com.easyinsight.analysis.AnalysisStateChangeEvent;
        import com.easyinsight.analysis.DataViewFactory;
        import com.easyinsight.analysis.HierarchyRollupEvent;

        import com.easyinsight.analysis.IReportController;
        import com.easyinsight.analysis.ImprovedSaveWindow;
        import com.easyinsight.analysis.ReportEditorFieldEvent;
        import com.easyinsight.analysis.SixSigmaMeasure;
        import com.easyinsight.analysis.StringValue;
        import com.easyinsight.analysis.URLLink;
        import com.easyinsight.analysis.list.ListController;
        import com.easyinsight.analysis.UserCapabilities;
        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.framework.InvalidFieldsEvent;
        import com.easyinsight.framework.LoginEvent;
        import com.easyinsight.framework.PerspectiveInfo;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.listing.DescriptorAnalyzeSource;
        import com.easyinsight.preferences.UIConfiguration;
        import com.easyinsight.report.MultiReportAnalyzeSource;
        import com.easyinsight.report.ReportAnalyzeSource;
        import com.easyinsight.skin.ApplicationSkin;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.ErrorReportView;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.UserAudit;

        import mx.binding.utils.BindingUtils;
        import mx.binding.utils.ChangeWatcher;
        import mx.collections.Sort;
        import mx.events.DragEvent;
        import mx.events.ListEvent;

        import com.easyinsight.analysis.AnalysisItemWrapper;
        import com.easyinsight.analysis.AnalysisCloseEvent;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.util.ProgressAlert;
        import com.easyinsight.commands.CommandEvent;

        import mx.utils.ObjectUtil;
        import mx.utils.URLUtil;
        import mx.managers.BrowserManager;
        import mx.controls.Alert;
        import mx.events.CloseEvent;

        import com.easyinsight.commands.CommandProcessor;
        import com.easyinsight.framework.DataServiceLoadingEvent;
        import com.easyinsight.framework.DataService;
        import com.easyinsight.analysis.SavedAnalysisEvent;
        import com.easyinsight.framework.User;
        import com.easyinsight.filtering.TransformsUpdatedEvent;
        import com.easyinsight.feedassembly.CompositeFeedCreatedEvent;

        import mx.managers.PopUpManager;

        import com.easyinsight.filtering.FilterDefinition;
        import com.easyinsight.filtering.FilterRawData;
        import com.easyinsight.analysis.FeedMetadata;

        import mx.collections.ArrayCollection;

        import com.easyinsight.analysis.AnalysisDefinition;


        [Bindable]
        public var dataService:DataService;

        [Bindable]
        private var availableFields:ArrayCollection;


        private var _dataSourceInfo:DataSourceInfo;


        [Bindable(event="dataSourceInfoChanged")]
        public function get dataSourceInfo():DataSourceInfo {
            return _dataSourceInfo;
        }

        public function set dataSourceInfo(value:DataSourceInfo):void {
            if (_dataSourceInfo == value) return;
            _dataSourceInfo = value;
            dispatchEvent(new Event("dataSourceInfoChanged"));
        }

        [Bindable]
        private var selectedMode:int;

        private var _analysisDefinition:AnalysisDefinition;

        [Bindable]
        private var _previewMode:Boolean = false;

        [Bindable]
        private var saveAsEnabled:Boolean;

        [Bindable]
        private var admin:Boolean;

        public var filterOverrides:ArrayCollection = null;

        private var feedMetadata:FeedMetadata;

        [Bindable]
        private var dataView:DataViewFactory;

        private var commandProcessor:CommandProcessor;

        [Bindable]
        private var canSubscribeToInsight:Boolean;

        [Bindable]
        private var canAddInsightToGroup:Boolean;

        [Bindable]
        private var canSubscribeToFeed:Boolean;

        [Bindable]
        private var canAddFeedToGroup:Boolean;

        [Bindable]
        private var wrappers:ArrayCollection;

        private var analysisChanged:Boolean = false;

        [Bindable]
        private var canMultiViewAnalysis:Boolean;

        [Bindable]
        private var dataSourceName:String;

        [Bindable]
        private var fieldsLabel:String;

        [Bindable]
        public var dataSourceID:int;

        [Bindable]
        private var _reportID:int;

        [Bindable]
        private var originSolution:int;

        [Bindable]
        private var reportName:String;

        private var _tutorialOnStart:int;

        public function set tutorialOnStart(value:int):void {
            _tutorialOnStart = value;
        }

        private var loading:Boolean = false;

        public function set previewMode(previewMode:Boolean):void {
            this._previewMode = previewMode;
            this.dataService.previewMode = previewMode;
        }

        public function onInvalidFields(event:InvalidFieldsEvent):void {
            transformContainer.invalidateItems(event.invalidAnalysisItemIDs);
            dataView.invalidateItems(event.invalidAnalysisItemIDs);
            availableFields = new ArrayCollection();
            for each (var feedNode:FeedNode in event.feedMetadata.fieldHierarchy) {
                var analysisWrapper:AnalysisItemWrapper = new AnalysisItemWrapper(feedNode);
                availableFields.addItem(analysisWrapper);
            }
            dataView.availableFields = availableFields;
            Alert.show("The underlying data to this data source has been changed, so some fields may have been removed from your filters or report.");
            dataView.retrieveData();
        }

        private function onAnalysisStateChange(event:AnalysisStateChangeEvent):void {
            var controller:IReportController = event.controller;
            loadController(controller);
        }

        private function onDataReturn(event:DataServiceEvent):void {
            this.dataSourceInfo = event.dataSource;
            auditString = event.reportAudit;
        }

        [Bindable]
        private var auditString:ArrayCollection;

        private function loadController(controller:IReportController, shareDataSourceSettings:Boolean = false):void {
            var dataViewFactory:DataViewFactory = controller.createDataView();
            dataViewFactory.availableFields = wrappers;
            if (dataView != null) {
                dataView.removeEventListener(DataServiceLoadingEvent.LOADING_STARTED, startLoading);
                dataView.removeEventListener(DataServiceLoadingEvent.LOADING_STOPPED, stopLoading);
                dataView.removeEventListener(AnalysisChangedEvent.ANALYSIS_CHANGED, onAnalysisChanged);
                dataView.removeEventListener(DataServiceEvent.DATA_RETURNED, onDataReturn);
                dataControlVBox.removeChild(dataView);
                viewWatcher.unwatch();
                selectableWatcher.unwatch();
                selectionWatcher.unwatch();
            }
            if (analysisDefinition == null) {
                this.analysisDefinition = dataViewFactory.createNewDefinition();
                analysisDefinition.canSaveDirectly = true;
                analysisDefinition.visibleAtFeedLevel = shareDataSourceSettings;
                analysisDefinition.dataFeedID = dataSourceID;
            } else {
                analysisDefinition = dataViewFactory.fromExistingDefinition(analysisDefinition);
                dataViewFactory.analysisDefinition = analysisDefinition;
            }
            dataView = dataViewFactory;
            dataView.dataSourceID = dataSourceID;
            dataView.addEventListener(DataServiceLoadingEvent.LOADING_STARTED, startLoading);
            dataView.addEventListener(DataServiceLoadingEvent.LOADING_STOPPED, stopLoading);
            dataView.addEventListener(AnalysisChangedEvent.ANALYSIS_CHANGED, onAnalysisChanged);
            dataView.addEventListener(DataServiceEvent.DATA_RETURNED, onDataReturn);

            viewWatcher = BindingUtils.bindProperty(dataViewFactory, "adHocMode", adHocButton, "adHoc");
            selectableWatcher = BindingUtils.bindProperty(this, "reportSelectable", dataViewFactory, "reportSelectable");
            selectionWatcher = BindingUtils.bindProperty(dataViewFactory, "reportSelectionEnabled", this, "reportSelectionEnabled");
            dataControlVBox.addChild(dataViewFactory);
            dataViewFactory.retrieveData();
        }

        protected override function commitProperties():void {
            super.commitProperties();
            setStyle("backgroundImage", ApplicationSkin.instance().reportBackground);
            setStyle("backgroundSize", ApplicationSkin.instance().reportBackgroundSize);
        }

        private var _reportSelectable:Boolean = false;

        [Bindable(event="reportSelectableChanged")]
        public function get reportSelectable():Boolean {
            return _reportSelectable;
        }

        public function set reportSelectable(value:Boolean):void {
            if (_reportSelectable == value) return;
            _reportSelectable = value;
            dispatchEvent(new Event("reportSelectableChanged"));
            if (!value) {
                reportSelectionEnabled = false;
                reportSelectableTooltip = "This report type does not support selection mode.";
                includeFilterDataTooltip = "This report type does not support selection mode.";
                excludeFilterDataTooltip = "This report type does not support selection mode.";
            } else {
                reportSelectableTooltip = "Click to toggle report selection mode";
                includeFilterDataTooltip = "Restrict report to the selected items";
                excludeFilterDataTooltip = "Exclude the selected items from the report";
            }
        }

        [Bindable]
        private var reportSelectableTooltip:String;

        [Bindable]
        private var includeFilterDataTooltip:String;

        [Bindable]
        private var excludeFilterDataTooltip:String;

        private var viewWatcher:ChangeWatcher;
        private var selectableWatcher:ChangeWatcher;
        private var selectionWatcher:ChangeWatcher;


        public function newAnalysis(shareDataSourceSettings:Boolean):void {
            var controller:IReportController = new ListController();
            loadController(controller, shareDataSourceSettings);
        }


        [Bindable(event="analysisDefinitionChanged")]
        public function get analysisDefinition():AnalysisDefinition {
            return _analysisDefinition;
        }

        public function set analysisDefinition(value:AnalysisDefinition):void {
            if (_analysisDefinition == value) return;
            _analysisDefinition = value;
            dispatchEvent(new Event("analysisDefinitionChanged"));
        }

        public function set reportID(val:int):void {
            _reportID = val;
        }

        public function openAnalysis(analysisDefinition:AnalysisDefinition):void {
            BrowserManager.getInstance().setTitle("Easy Insight - " + analysisDefinition.name);
            this.analysisDefinition = analysisDefinition;

            //analysisPolicy = analysisDefinition.policy;
        }

        private function onLogin(event:LoginEvent):void {
            setState();
            User.getEventNotifier().removeEventListener(LoginEvent.LOGIN, onLogin);
        }

        private function setState():void {
            switch (User.getInstance().getAccountType()) {
                case Account.PREMIUM:
                    currentState = "Professional";
                    break;
                case Account.PRO:
                    currentState = "Group";
                    break;
                case Account.BASIC:
                case Account.PLUS:
                    currentState = "Individual";
                    break;
                case Account.PERSONAL:
                    currentState = "Free";
                    break;
            }
        }

        private function goAdmin():void {
            if (analysisChanged) {
                Alert.show("You have unsaved changes. Are you sure you want to go to data source administration?", "Alert",
                        Alert.OK | Alert.CANCEL, null, adminAlertListener, null, Alert.CANCEL);
            } else {
                dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DATA_SOURCE_ADMIN, {feedID: dataSourceID})));
            }
        }

        private function adminAlertListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.DATA_SOURCE_ADMIN, {feedID: dataSourceID})));
            }
        }

        private function onMetadataReceipt(feedMetadata:FeedMetadata):void {
            try {
                if (User.getInstance() == null) {
                    currentState = "NotLoggedIn";
                    User.getEventNotifier().addEventListener(LoginEvent.LOGIN, onLogin);
                } else {
                    setState();
                }

                dataSourceID = feedMetadata.dataFeedID;
                this.feedMetadata = feedMetadata;
                dataSourceInfo = feedMetadata.dataSourceInfo;
                this.originSolution = feedMetadata.originSolution;
                this.admin = feedMetadata.dataSourceAdmin;
                dataSourceName = this.feedMetadata.dataSourceName;


                fieldsLabel = this.feedMetadata.dataSourceName + " Fields";
                availableFields = new ArrayCollection();
                wrappers = new ArrayCollection();
                for each (var feedNode:FeedNode in feedMetadata.fieldHierarchy) {
                    var analysisWrapper:AnalysisItemWrapper = new AnalysisItemWrapper(feedNode);
                    if (!analysisWrapper.hidden) {
                        availableFields.addItem(analysisWrapper);
                    }
                }
                for each (var listItem:AnalysisItem in feedMetadata.fields) {
                    var analysisNode:AnalysisItemNode = new AnalysisItemNode();
                    analysisNode.analysisItem = listItem;
                    var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(analysisNode);
                    wrappers.addItem(wrapper);
                }

                if (analysisDefinition == null || analysisDefinition.analysisID == 0) {
                    var fragmentObject:Object = new Object();
                    fragmentObject.feedID = String(feedMetadata.urlKey);
                    var fragmentString:String = URLUtil.objectToString(fragmentObject);
                    BrowserManager.getInstance().setTitle("Easy Insight - " + dataSourceName);
                    BrowserManager.getInstance().setFragment(fragmentString);
                } else {
                    var feedFragmentObject:Object = new Object();
                    feedFragmentObject.analysisID = String(analysisDefinition.urlKey);
                    var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
                    BrowserManager.getInstance().setTitle("Easy Insight - " + analysisDefinition.name);
                    BrowserManager.getInstance().setFragment(feedFragmentString);
                }

                if (analysisDefinition == null) {
                    UserAudit.instance().audit(UserAudit.NEW_REPORT);
                    saveAsEnabled = false;
                    newAnalysis(User.getInstance().defaultReportSharing);
                    for each (var filter:FilterDefinition in feedMetadata.intrinsicFilters) {
                        transformContainer.addFilterDefinition(filter);
                    }


                } else {
                    //this.title = analysisDefinition.name;
                    reportName = analysisDefinition.name;
                    saveAsEnabled = !_previewMode;
                    var controllerClass:Class = ControllerLookup.controllerForType(analysisDefinition.type);
                    var controller:IReportController = new controllerClass();
                    loadController(controller);

                    analysisState.selectedLabel = analysisDefinition.type;


                    if (analysisDefinition.filterDefinitions == null) {
                        analysisDefinition.filterDefinitions = new ArrayCollection();
                    }
                    if (filterOverrides != null) {
                        analysisDefinition.filterDefinitions = filterOverrides;
                    }
                    createFilterBoxes(analysisDefinition.filterDefinitions.toArray());

                    // add the fields which are specifically added in the context of the report, such as
                    // calculations and hierarchies
                    if (analysisDefinition.addedItems != null) {
                        for each (var item:AnalysisItem in analysisDefinition.addedItems) {
                            var analysisItemNode:AnalysisItemNode = new AnalysisItemNode();
                            analysisItemNode.analysisItem = item;
                            var addedWrapper:AnalysisItemWrapper = new AnalysisItemWrapper(analysisItemNode);
                            availableFields.addItem(addedWrapper);
                            wrappers.addItem(addedWrapper);
                        }
                        sortFields();
                    }
                    UserAudit.instance().audit(UserAudit.OPEN_REPORT_EDITOR);
                }
                dataView.availableFields = wrappers;
                loading = false;
                stopLoading(null);
            } catch(e:Error) {
                var errorWindow:ErrorReportView = new ErrorReportView();
                errorWindow.error = e;
                PopUpManager.addPopUp(errorWindow, this, true);
                PopUpUtil.centerPopUp(errorWindow);
            }
        }

        private function sortFields():void {
            var sort:Sort = new Sort();
            sort.compareFunction = customSort;
            availableFields.sort = sort;
            availableFields.refresh();
            wrappers.sort = sort;
            wrappers.refresh();
        }

        private function customSort(obj1:Object, obj2:Object, fields:Array = null):int {
            var wrapper1:AnalysisItemWrapper = obj1 as AnalysisItemWrapper;
            var wrapper2:AnalysisItemWrapper = obj2 as AnalysisItemWrapper;
            if (wrapper1.isAnalysisItem() && !wrapper2.isAnalysisItem()) {
                return 1;
            } else if (!wrapper1.isAnalysisItem() && wrapper2.isAnalysisItem()) {
                return -1;
            } else {
                return ObjectUtil.stringCompare(wrapper1.displayName, wrapper2.displayName, true);
            }
        }

        public function deleteItem(item:AnalysisItem):void {
            var index:int = 0;
            for each (var wrapper:AnalysisItemWrapper in availableFields) {
                if (wrapper.analysisItem.analysisItemID == item.analysisItemID) {
                    break;
                }
                index++;
            }
            availableFields.removeItemAt(index);
        }

        public function getAnalysisItems():ArrayCollection {
            var analysisItems:ArrayCollection = new ArrayCollection();
            for each (var analysisItemWrapper:AnalysisItemWrapper in wrappers) {
                analysisItems.addItem(analysisItemWrapper.analysisItem);
            }
            return analysisItems;
        }

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }

        private function onAnalysisChanged(event:AnalysisChangedEvent):void {
            this.analysisChanged = true;
        }

        // tutorial ramifications...
        // we need a good tooltip rendering
        // we need to be able to selectively disable the various parts
        // we have to be able to look for key events that will trigger the next stage of the tutorial


        public function initializeForWorksheet():void {
            try {
                if (dataService == null) {
                    dataService = new DataService();
                    dataService.dataFeedID = dataSourceID;
                }
                loading = true;
                uiConfig();
                rendererFactory = new ClassFactory(AvailableFieldRenderer);
                commandProcessor = new CommandProcessor();
                addEventListener(ReportEditorFieldEvent.ITEM_ADD_TO_REPORT, addFieldToReport);
                addEventListener(ReportEditorFieldEvent.ITEM_COPY, fieldEventHandler.copyField);
                addEventListener(ReportEditorFieldEvent.ITEM_DELETE, fieldEventHandler.deleteField);
                addEventListener(ReportEditorFieldEvent.ITEM_EDIT, fieldEventHandler.editField);
                addEventListener(ReportEditorFieldEvent.ITEM_FILTER, filterField);
                addEventListener(AnalysisChangedEvent.ANALYSIS_CHANGED, onAnalysisChanged);
                addEventListener(AddedItemUpdateEvent.UPDATE, onFieldUpdate);
                addEventListener(AnalysisItemCopyEvent.ITEM_COPY, onCopy);
                addEventListener(AnalysisItemDeleteEvent.ANALYSIS_ITEM_DELETE, onAnalysisItemDelete);
                addEventListener(CommandEvent.COMMAND, onCommand);
                //stage.addEventListener(KeyboardEvent.KEY_UP, onKey, false, 0, true);
                addEventListener(HierarchyDrilldownEvent.DRILLDOWN, childFilterCreation);
                addEventListener(HierarchyRollupEvent.HIERARCHY_ROLLUP, onRollup);
                dataService.addEventListener(DataServiceLoadingEvent.LOADING_STARTED, startLoading);
                dataService.addEventListener(DataServiceLoadingEvent.LOADING_STOPPED, stopLoading);
                dataService.addEventListener(InvalidFieldsEvent.INVALID_FIELDS, onInvalidFields);
                transformContainer.addEventListener(TransformsUpdatedEvent.UPDATED_TRANSFORMS, transformsUpdated);
                try {
                    var hints:String = User.getSharedObject().data["reportHints"];
                    if (hints == null || hints == "y") {
                        fieldIndex = 1;
                    } else {
                        fieldIndex = 0;
                    }
                } catch(e:Error) {
                }
                startLoading(null);
                if (_reportID > 0) {
                    ProgressAlert.alert(this, "Retrieving the report...", null, analysisService.openAnalysisDefinition);
                    analysisService.openAnalysisDefinition.send(_reportID);
                } else {
                    initializeState();
                }
            } catch(e:Error) {
                var errorWindow:ErrorReportView = new ErrorReportView();
                errorWindow.error = e;
                PopUpManager.addPopUp(errorWindow, this, true);
                PopUpUtil.centerPopUp(errorWindow);
            }
        }

        private function hideHints():void {
            try {
                User.getSharedObject().data["reportHints"] = "n";
                User.getSharedObject().flush();
            } catch(e:Error) {
            }
            fieldIndex = 0;
        }

        private function restoreHints(event:Event):void {
            try {
                User.getSharedObject().data["reportHints"] = "y";
                User.getSharedObject().flush();
            } catch(e:Error) {
            }
            fieldIndex = 1;
        }

        private function uiConfig():void {
            try {
                if (User.getInstance().uiConfiguration != null) {
                    var uiConfig:UIConfiguration = User.getInstance().uiConfiguration;
                    if (!uiConfig.getConfiguration(UIConfiguration.SHOW_ADMIN_DATA_SOURCES).selected) {
                        controlBar.removeChild(adminButton);
                    }
                    if (uiConfig.getConfiguration(UIConfiguration.SHOW_DATA_TAB).selected) {
                        if (!uiConfig.getConfiguration(UIConfiguration.SHOW_CALCULATION).selected) reportDataTab.removeCalculationButton();
                        if (!uiConfig.getConfiguration(UIConfiguration.SHOW_HIERARCHY).selected) reportDataTab.removeHierarchy();
                        if (!uiConfig.getConfiguration(UIConfiguration.SHOW_REPORT_EDITOR_API).selected) reportDataTab.removeAPI();
                    } else {
                        tabNavigator.removeChild(reportDataTab);
                    }
                    if (!uiConfig.getConfiguration(UIConfiguration.SHOW_FILTER_BUTTONS).selected) {
                        transformContainer.removeChild(filterButton);
                        transformContainer.removeChild(excludeButton);
                    }
                    if (uiConfig.getConfiguration(UIConfiguration.SHOW_EXPORT).selected) {
                        if (!uiConfig.getConfiguration(UIConfiguration.SHOW_DLS).selected) exportTab.removeDLS();
                        if (!uiConfig.getConfiguration(UIConfiguration.SHOW_PNG).selected) exportTab.removePNG();
                        if (!uiConfig.getConfiguration(UIConfiguration.SHOW_EMBED).selected) exportTab.removeEmbed();
                        if (!uiConfig.getConfiguration(UIConfiguration.SHOW_EMAIL).selected) exportTab.removeEmail();
                    } else {
                        tabNavigator.removeChild(exportTab);
                    }
                    if (!uiConfig.getConfiguration(UIConfiguration.SHOW_SHARING).selected) {
                        tabNavigator.removeChild(reportSharingTab);
                    }
                    guestMode = User.getInstance().guestUser;
                }
            } catch(e:Error) {
            }
        }

        [Bindable]
        private var guestMode:Boolean;

        private function addFieldToReport(event:ReportEditorFieldEvent):void {
            dataView.addItem(event.item.analysisItem);
            dispatchEvent(new AnalysisChangedEvent(false));
        }

        private function filterField(event:ReportEditorFieldEvent):void {
            transformContainer.createNewFilter(event.item.analysisItem, event.x, event.y);
            tabNavigator.selectedIndex = 3;
        }

        private function gotReport():void {
            this.analysisDefinition = analysisService.openAnalysisDefinition.lastResult as AnalysisDefinition;
            BrowserManager.getInstance().setTitle("Easy Insight - " + this.analysisDefinition.name);
            //analysisPolicy = this.analysisDefinition.policy;
            initializeState();
        }

        private function initializeState():void {
            if (analysisDefinition != null) {
                ProgressAlert.alert(this, "Retrieving security metadata...", null, analysisService.getUserCapabilitiesForInsight);
                analysisService.getUserCapabilitiesForInsight.send(dataSourceID, analysisDefinition.analysisID);
            } else {
                ProgressAlert.alert(this, "Retrieving security metadata...", null, analysisService.getUserCapabilitiesForFeed);
                analysisService.getUserCapabilitiesForFeed.send(dataSourceID);
            }
            dataService.reloadInitialContent(this, onMetadataReceipt);
        }

        private function onRollup(event:HierarchyRollupEvent):void {
            transformContainer.clearFilter(event.analysisItem);
        }

        private function childFilterCreation(event:HierarchyDrilldownEvent):void {
            transformContainer.processRawFilterData(event.filterRawData, event.type == HierarchyDrilldownEvent.DRILLDOWN);
        }

        private function createFilterBoxes(filters:Array):void {
            if (filters != null) {
                transformContainer.loadingFromReport = true;
                for (var i:int = 0; i < filters.length; i++) {
                    var filterDefinition:FilterDefinition = filters[i];
                    transformContainer.addFilterDefinition(filterDefinition);
                }
                transformContainer.loadingFromReport = false;
            }
        }

        private function createFilter():void {
            var filterRawData:FilterRawData = dataView.createFilterRawData();
            if (filterRawData.keys == null || filterRawData.keys.length == 0) {
                Alert.show("Select items from the grid, click this button, and the report will filter down to that set of items.");
            }
            dispatchEvent(new AnalysisChangedEvent());
            transformContainer.processRawFilterData(filterRawData, true);
        }

        private function getFilterDefinitions():Array {
            return transformContainer.getFilterDefinitions().toArray();
        }

        private function compositeFeedCreated(event:CompositeFeedCreatedEvent):void {
            dataService.dataFeedID = event.compositeFeedID;
            analysisDefinition.dataFeedID = event.compositeFeedID;
            dataService.reloadInitialContent(this, onMetadataReceipt);
        }

        private function exclude():void {
            var filterRawData:FilterRawData = dataView.createFilterRawData();
            if (filterRawData.keys == null || filterRawData.keys.length == 0) {
                Alert.show("Select items from the grid, click this button, and the report will create an exclusive filter to remove those items.");
            }
            transformContainer.processRawFilterData(filterRawData, false);
        }

        private function transformsUpdated(event:TransformsUpdatedEvent):void {
            analysisDefinition.filterDefinitions = event.filterDefinitions;
            dataView.retrieveData();
        }

        private function save():void {
            if (analysisDefinition.canSaveDirectly) {
                dataView.updateExportMetadata();
                var window:ImprovedSaveWindow = new ImprovedSaveWindow();
                window.addEventListener(SavedAnalysisEvent.SAVED_ANALYSIS, saved);
                window.report = analysisDefinition;
                window.originConnection = originSolution;
                PopUpManager.addPopUp(window, this, true);
                PopUpUtil.centerPopUp(window);
            } else {
                Alert.show("You are not allowed to directly modify this report--use Save As instead.");
            }
        }

        private function saved(event:SavedAnalysisEvent):void {
            var savedDef:AnalysisDefinition = event["report"];
            AnalysisUtil.updateReport(analysisDefinition, savedDef);
            var feedFragmentObject:Object = new Object();
            feedFragmentObject.analysisID = String(savedDef.urlKey);
            var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
            BrowserManager.getInstance().setFragment(feedFragmentString);
            reportName = event.report.name;
            BrowserManager.getInstance().setTitle("Easy Insight - " + event.report.name);
            aboutReportTab.invalidateProperties();
            reportSaveable = true;
            this.analysisChanged = false;
            saveAsEnabled = true;
        }

        private function saveAs():void {
            // if we're in admin mode, this should be disabled...
            var saveDialog:SaveDialog = SaveDialog(PopUpManager.createPopUp(this, SaveDialog, true));
            dataView.updateExportMetadata();
            saveDialog.analysisDefinition = analysisDefinition;
            saveDialog.addEventListener(SavedAnalysisEvent.SAVED_ANALYSIS, savedAnalysis);
            PopUpUtil.centerPopUp(saveDialog);
        }

        private function savedAnalysis(event:SavedAnalysisEvent):void {
            //title = event.title;
            var savedDef:AnalysisDefinition = event["report"];
            analysisDefinition.canSaveDirectly = true;
            var feedFragmentObject:Object = new Object();
            feedFragmentObject.analysisID = String(event.report.urlKey);
            var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
            BrowserManager.getInstance().setFragment(feedFragmentString);
            reportName = analysisDefinition.name;
            aboutReportTab.invalidateProperties();
            BrowserManager.getInstance().setTitle("Easy Insight - " + event.report.name);
            this.analysisChanged = false;
        }

        private function startLoading(event:DataServiceLoadingEvent):void {
        }

        private function stopLoading(event:DataServiceLoadingEvent):void {
        }

        protected function geticon(item:Object):Class {
            return item["icon"];
        }


        private function undo():void {
            commandProcessor.undo();
        }

        private function redo():void {
            commandProcessor.redo();
        }

        public function cleanup():void {
            removeEventListener(CommandEvent.COMMAND, onCommand);
            /*if (stage != null)
             stage.removeEventListener(KeyboardEvent.KEY_UP, onKey);*/
            removeEventListener(AnalysisChangedEvent.ANALYSIS_CHANGED, onAnalysisChanged);
            removeEventListener(HierarchyDrilldownEvent.DRILLDOWN, childFilterCreation);
            removeEventListener(HierarchyRollupEvent.HIERARCHY_ROLLUP, onRollup);
            reportMetadataTab.cleanup();
            if (dataService != null) {
                dataService.removeEventListener(DataServiceLoadingEvent.LOADING_STARTED, startLoading);
                dataService.removeEventListener(DataServiceLoadingEvent.LOADING_STOPPED, stopLoading);
                dataService.removeEventListener(InvalidFieldsEvent.INVALID_FIELDS, onInvalidFields);
            }
            if (transformContainer != null) {
                transformContainer.removeEventListener(TransformsUpdatedEvent.UPDATED_TRANSFORMS, transformsUpdated);
            }
            if (dataView != null) {
                dataView.removeEventListener(DataServiceLoadingEvent.LOADING_STARTED, startLoading);
                dataView.removeEventListener(DataServiceLoadingEvent.LOADING_STOPPED, stopLoading);
                dataView.removeEventListener(AnalysisChangedEvent.ANALYSIS_CHANGED, onAnalysisChanged);
                dataView.removeEventListener(DataServiceEvent.DATA_RETURNED, onDataReturn);
                dataView.cleanup();
            }
        }

        private function close():void {
            if (analysisChanged) {
                Alert.show("You have unsaved changes. Are you sure you want to exit?", "Alert",
                        Alert.OK | Alert.CANCEL, null, alertListener, null, Alert.CANCEL);
            } else {
                dispatchEvent(new AnalysisCloseEvent(this));
            }
        }

        private function alertListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                dispatchEvent(new AnalysisCloseEvent(this));
            }
        }


        [Bindable]
        private var reportSaveable:Boolean;

        private function gotUserCapabilitiesForFeed():void {
            var userCapabilities:UserCapabilities = analysisService.getUserCapabilitiesForFeed.lastResult as UserCapabilities;
            canSubscribeToFeed = userCapabilities.feedRole > 3;
            canAddFeedToGroup = userCapabilities.groupMember;
            canMultiViewAnalysis = userCapabilities.reportingAvailable;
        }

        private function onCopy(event:AnalysisItemCopyEvent):void {
            dispatchEvent(new AnalysisChangedEvent());


            var wrapper:AnalysisItemWrapper;
            if (event.wrapper == null) {
                var node:AnalysisItemNode = new AnalysisItemNode();
                node.analysisItem = event.analysisItem;
                wrapper = new AnalysisItemWrapper(node);
            } else {
                wrapper = event.wrapper;
            }

            availableFields.addItem(wrapper);
            wrappers.addItem(wrapper);
            if (analysisDefinition.addedItems == null) {
                analysisDefinition.addedItems = new ArrayCollection();
            }
            analysisDefinition.addedItems.addItem(event.analysisItem);
        }

        private function onFieldUpdate(event:AddedItemUpdateEvent):void {
            availableFields.removeItemAt(availableFields.getItemIndex(event.wrapper));
            availableFields.addItem(event.wrapper);
            analysisDefinition.addedItems.removeItemAt(analysisDefinition.addedItems.getItemIndex(event.previousItem));
            analysisDefinition.addedItems.addItem(event.newItem);
        }

        private function gotUserCapabilitiesForInsight():void {
            var userCapabilities:UserCapabilities = analysisService.getUserCapabilitiesForInsight.lastResult as UserCapabilities;
            reportSaveable = userCapabilities.groupMember;
            canSubscribeToFeed = userCapabilities.feedRole > 3;
            canSubscribeToInsight = userCapabilities.analysisRole > 3;
            canAddFeedToGroup = userCapabilities.groupMember;
            canAddInsightToGroup = userCapabilities.groupMember;
            canMultiViewAnalysis = userCapabilities.reportingAvailable;
        }

        private function subscribedToFeed():void {
            canSubscribeToFeed = false;
            Alert.show("This data source will now show in your My Data page.");
        }


        private function onItemDoubleClick(event:ListEvent):void {
            var field:AnalysisItemWrapper = event.currentTarget.selectedItem as AnalysisItemWrapper;
            if (field.isAnalysisItem()) {
                dataView.addItem(field.analysisItem);
                dispatchEvent(new AnalysisChangedEvent(false));
            }
        }

        private function onDragComplete(event:DragEvent):void {
            event.preventDefault();
            dataView.revertDropAreas();
            transformContainer.closeDropMessage();
        }

        private function onDragStart():void {
            dataView.highlightDropAreas();
            if (tabNavigator.selectedIndex == 2) {
                transformContainer.showDropMessage();
            }
        }

        private function onDragEnd():void {
            dataView.revertDropAreas();
            transformContainer.closeDropMessage();
        }

        private function iconFunction(item:Object):Class {
            var wrapper:AnalysisItemWrapper = item as AnalysisItemWrapper;
            return AnalysisItemTypeRenderer.getImageClass(wrapper);
        }

        private function toReports():void {
            if (analysisChanged) {
                Alert.show("You have unsaved changes. Are you sure you want to go to reports?", "Alert",
                        Alert.OK | Alert.CANCEL, null, multiReportAlertListener, null, Alert.CANCEL);
            } else {
                dispatchEvent(new AnalyzeEvent(new MultiReportAnalyzeSource(dataSourceID)));
            }
        }

        private function multiReportAlertListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                dispatchEvent(new AnalyzeEvent(new MultiReportAnalyzeSource(dataSourceID)));
            }
        }

        private function goReport():void {
            if (analysisDefinition.analysisID == 0) {
                Alert.show("You need to save this report first.");
            } else if (analysisChanged) {
                Alert.show("You have unsaved changes. Are you sure you want to go to reports?", "Alert",
                        Alert.OK | Alert.CANCEL, null, goReportListener, null, Alert.CANCEL);
            } else {
                var report:InsightDescriptor = new InsightDescriptor();
                report.dataFeedID = dataSourceID;
                report.id = analysisDefinition.analysisID;
                report.name = analysisDefinition.name;
                report.reportType = analysisDefinition.reportType;
                dispatchEvent(new AnalyzeEvent(new ReportAnalyzeSource(report)));
            }
        }

        private function goReportListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var report:InsightDescriptor = new InsightDescriptor();
                report.dataFeedID = dataSourceID;
                report.id = analysisDefinition.analysisID;
                report.name = analysisDefinition.name;
                report.reportType = analysisDefinition.reportType;
                dispatchEvent(new AnalyzeEvent(new ReportAnalyzeSource(report)));
            }
        }


        private function newReport():void {
            if (analysisChanged) {
                Alert.show("You have unsaved changes. Are you sure you want to create a new report?", "Alert",
                        Alert.OK | Alert.CANCEL, null, newReportListener, null, Alert.CANCEL);
            } else {
                dispatchEvent(new AnalyzeEvent(new DescriptorAnalyzeSource(dataSourceID)));
            }
        }

        private function newReportListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                dispatchEvent(new AnalyzeEvent(new DescriptorAnalyzeSource(dataSourceID)));
            }
        }

        private function onAnalysisItemDelete(event:AnalysisItemDeleteEvent):void {
            var wrapperIndex:int = wrappers.getItemIndex(event.analysisItem);
            if (wrapperIndex != -1) {
                wrappers.removeItemAt(wrapperIndex);
            }
            var availableFieldIndex:int = availableFields.getItemIndex(event.analysisItem);
            if (availableFieldIndex != -1) {
                availableFields.removeItemAt(availableFieldIndex);
            }
            var addedIndex:int = analysisDefinition.addedItems.getItemIndex(event.analysisItem.analysisItem);
            if (addedIndex != -1) {
                analysisDefinition.addedItems.removeItemAt(addedIndex);
            }
        }

        private var _reportSelectionEnabled:Boolean;


        [Bindable(event="reportSelectionEnabledChanged")]
        public function get reportSelectionEnabled():Boolean {
            return _reportSelectionEnabled;
        }

        public function set reportSelectionEnabled(value:Boolean):void {
            if (_reportSelectionEnabled == value) return;
            _reportSelectionEnabled = value;
            dispatchEvent(new Event("reportSelectionEnabledChanged"));
        }

        private function blah():void {
            var analysisStep:AnalysisStep;
            var analysisLat:AnalysisLatitude;
            var analysisLong:AnalysisLongitude;
            var analysisText:AnalysisText;
            var analysisZip:AnalysisZipCode;
            var sigma:SixSigmaMeasure;
            var tags:AnalysisList;
            var hierarchy:AnalysisHierarchyItem;
            var calc:AnalysisCalculation;
            var derived:DerivedAnalysisDimension;
            var urlLink:URLLink;
            var drillthrough:DrillThrough;
            var coordinate:CoordinateValue;
            var stringValue:StringValue;
            var drill:DrillThroughEvent;
        }

        [Bindable]
        private var fieldsIndex:int = 0;

        [Bindable]
        private var fieldIndex:int = 0;

        [Bindable]
        private var rendererFactory:IFactory;

        public function gotFocus():void {
        }
        ]]>
    </mx:Script>
    <mx:RemoteObject id="analysisService" destination="analysisDefinition">
        <mx:method name="openAnalysisDefinition" result="gotReport()"/>
        <mx:method name="getUserCapabilitiesForFeed" result="gotUserCapabilitiesForFeed()"/>
        <mx:method name="getUserCapabilitiesForInsight" result="gotUserCapabilitiesForInsight()"/>
    </mx:RemoteObject>
    <analysis:AnalysisItemEventHandler id="fieldEventHandler" dataSourceID="{dataSourceID}" analysisItems="{wrappers}"/>
    <mx:VBox height="100%" width="100%" id="reportEditor" disabledOverlayAlpha=".275">
        <mx:HBox verticalAlign="middle" id="controlBar">
            <mx:Button id="wrapButton" icon="@Embed(source='../../../assets/document_out.png')" click="close()"
               toolTip="Close"/>
            <mx:VRule strokeColor="#DDDDDD" height="16"/>
            <mx:Button id="saveButton" icon="@Embed(source='../../../assets/floppy_disk.png')" click="save()"
                       toolTip="Save" enabled="{!_previewMode &amp;&amp; !guestMode}"/>
            <mx:Button id="saveAsButton" icon="@Embed(source='../../../assets/save_as.png')" click="saveAs()"
                       toolTip="Save As" enabled="{saveAsEnabled &amp;&amp; !guestMode}"/>
            <mx:VRule strokeColor="#DDDDDD" height="16"/>
            <mx:Button id="refreshButton" toolTip="Refresh Data"
               icon="@Embed(source='../../../assets/refresh.png')"
               click="dataView.forceRetrieve()"/>
            <analysis:AdHocMode id="adHocButton" modeChange="dataView.forceRetrieve()"/>
            <mx:VRule strokeColor="#DDDDDD" height="16"/>
            <mx:Button id="dataSourceButton" toolTip="Create a New Report from Data Source"
                       icon="@Embed(source='../../../assets/table.png')" click="newReport()"/>
            <mx:Button id="reportsButton" icon="@Embed(source='../../../assets/tables_x16.png')" click="toReports()"
                       toolTip="View All Reports for Data Source" enabled="{!_previewMode &amp;&amp; canMultiViewAnalysis}"/>
            <mx:Button id="reportButton" icon="@Embed(source='../../../assets/media_play_green.png')" click="goReport()"
                       toolTip="View Report"/>
            <mx:Button id="adminButton" icon="@Embed(source='../../../assets/businessman_edit.png')" click="goAdmin()"
                       toolTip="Adminster" visible="{admin}"/>
        </mx:HBox>
        <mx:TabNavigator id="tabNavigator" width="100%" creationPolicy="all" enabled="{!_previewMode}" paddingTop="0"
                         paddingBottom="0"
                         paddingLeft="0" paddingRight="0" resizeToContent="true">
            <analysis:ReportMetadataTab id="reportMetadataTab" dataSourceInfo="{dataSourceInfo}"
                    dataView="{dataView}"/>
            <analysis:AboutReportTab id="aboutReportTab" report="{analysisDefinition}"/>
            <analysis:ReportDataTab id="reportDataTab" analysisDefinition="{analysisDefinition}" dataService="{dataService}"
                    wrappers="{wrappers}" availableFields="{availableFields}"
                    dataView="{dataView}" analysisItemEdit="sortFields()"
                    dataSourceID="{dataSourceID}" reportAudit="{auditString}"/>
            <filtering:TransformContainer id="transformContainer" paddingLeft="10" paddingTop="10" paddingBottom="10"
                                          paddingRight="10" label="Filters" icon="@Embed(source='../../../assets/funnel.png')"
                                          width="100%" height="100%" backgroundColor="#ffffff" backgroundAlpha=".1"
                                          feedID="{dataSourceID}"
                                          analysisItems="{wrappers}" minHeight="40">
                <mx:Button id="selectionModeButton" icon="@Embed(source='../../../assets/funnel.png')"
                           toolTip="{reportSelectableTooltip}" click="reportSelectionEnabled = !reportSelectionEnabled"
                        enabled="{reportSelectable}"/>
                <mx:Button id="filterButton" icon="@Embed(source='../../../assets/funnel_new.png')"
                           toolTip="{includeFilterDataTooltip}" click="createFilter()" enabled="{reportSelectionEnabled}"/>
                <mx:Button id="excludeButton" icon="@Embed(source='../../../assets/funnel_delete.png')"
                           toolTip="{excludeFilterDataTooltip}" click="exclude()" enabled="{reportSelectionEnabled}"/>
            </filtering:TransformContainer>
            <analysis:ExportTab analysisDefinition="{analysisDefinition}" dataView="{dataView}" id="exportTab"/>
            <analysis:ReportSharingTab analysisDefinition="{analysisDefinition}" originSolution="{originSolution}" id="reportSharingTab"
                    reportSaveable="{reportSaveable}" canSubscribeToFeed="{canSubscribeToFeed}" canAddFeedToGroup="{canAddFeedToGroup}"
                    canSaveToMyData="{canSubscribeToInsight}" dataService="{dataService}"/>
            
        </mx:TabNavigator>

        <mx:HDividedBox id="hbox1" height="100%" width="100%">
            <mx:VBox height="100%" width="240" id="leftHandBox">
                <mx:HBox>
                    <mx:Label text="Report Type:" fontWeight="bold"/>
                    <analysis:AnalysisStatePopupButton analysisStateChange="onAnalysisStateChange(event)" id="analysisState"
                                                   mode="all"/>
                </mx:HBox>


                <mx:VBox height="100%" width="100%" verticalGap="0" borderThickness="1" borderColor="#DCE2F8"
                         borderStyle="solid" dropShadowEnabled="true">
                    <mx:Canvas width="100%" height="5" backgroundColor="#10319A" left="0" right="0"/>
                    <mx:Box width="100%" backgroundColor="#3B56AF" horizontalAlign="center" verticalAlign="middle" height="28">
                        <mx:Label text="{fieldsLabel}" color="0xFFFFFF" fontWeight="bold"/>
                    </mx:Box>
                    <mx:AdvancedDataGrid width="100%" height="100%" dragEnabled="true" iconFunction="iconFunction"
                                 id="fieldGrid" backgroundColor="#FFFFFF"
                                 alternatingItemColors="#FFFFFF" fontSize="12" rowHeight="28"
                                 itemDoubleClick="onItemDoubleClick(event)"
                                 dragComplete="onDragComplete(event)" mouseDown="onDragStart()"
                                 mouseUp="onDragEnd()" showHeaders="false" groupItemRenderer="{rendererFactory}">
                        <mx:dataProvider>
                            <mx:HierarchicalData source="{availableFields}"/>
                        </mx:dataProvider>
                        <mx:columns>
                            <mx:AdvancedDataGridColumn headerText="" dataField="displayName"/>                            
                        </mx:columns>
                    </mx:AdvancedDataGrid>
                </mx:VBox>
            </mx:VBox>
            <mx:VBox width="100%" height="100%" id="dataControlVBox"/>
        </mx:HDividedBox>
    </mx:VBox>
</mx:Module>
