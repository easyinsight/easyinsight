<?xml version="1.0" encoding="utf-8"?>
<core:FullScreenPage xmlns:core="com.easyinsight.*" xmlns:mx="http://www.adobe.com/2006/mxml"
                     xmlns:analysis="com.easyinsight.analysis.*" xmlns:mxeffects="com.adobe.ac.mxeffects.*"
                     xmlns:datasources="com.easyinsight.datasources.*"
                     creationComplete="initializeForWorksheet()" xmlns:ns1="com.easyinsight.analysis.*" width="100%"
                     height="100%"
                     xmlns:transforms="com.easyinsight.transforms.*"
                     xmlns:util="com.easyinsight.util.*" xmlns:map="com.easyinsight.map.*"
                     xmlns:filtering="com.easyinsight.filtering.*"
                     xmlns:feed="com.easyinsight.administration.feed.*" doubleClickEnabled="true"
                     backgroundImage="{background2}" backgroundSize="100%"
                     paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10" backgroundColor="#DCE2F8">
    <core:states>
        <mx:State name="NotLoggedIn">
            <mx:RemoveChild target="{subscribeToFeedButton}"/>
            <mx:RemoveChild target="{groupAddFeedButton}"/>
            <mx:RemoveChild target="{subscribeToInsightButton}"/>
            <mx:RemoveChild target="{groupAddInsightButton}"/>
            <mx:RemoveChild target="{saveButton}"/>
            <mx:RemoveChild target="{saveAsButton}"/>
            <mx:RemoveChild target="{sharingSettingsBox}"/>
            <mx:RemoveChild target="{createFeedButton}"/>
            <mx:SetProperty target="{analysisNameInput}" name="editable" value="false"/>
            <mx:SetProperty target="{analysisTagsInput}" name="editable" value="false"/>
        </mx:State>
        <mx:State name="Professional">

        </mx:State>
        <mx:State name="Group" basedOn="Professional">

        </mx:State>
        <mx:State name="Individual" basedOn="Group">
            <mx:RemoveChild target="{createFeedButton}"/>
        </mx:State>
        <mx:State name="Free" basedOn="Individual">

        </mx:State>
    </core:states>
    <mx:Script>
		<![CDATA[
        import com.easyinsight.account.Account;
        import com.easyinsight.administration.feed.DeleteAnalysisItemEvent;
        import com.easyinsight.analysis.AnalysisChangedEvent;
        import com.easyinsight.analysis.AnalysisItemEditEvent;
        import com.easyinsight.analysis.AnalysisItemEditWindow;
        import com.easyinsight.analysis.AnalysisItemNode;
        import com.easyinsight.analysis.AnalysisItemTypeRenderer;
        import com.easyinsight.analysis.AnalysisUtil;
        import com.easyinsight.analysis.ControllerLookup;
        import com.easyinsight.analysis.CredentialRequirement;
        import com.easyinsight.analysis.CredentialsEvent;
        import com.easyinsight.analysis.DataServiceEvent;
        import com.easyinsight.analysis.DescriptionEditWindow;
        import com.easyinsight.analysis.DescriptionUpdateEvent;
        import com.easyinsight.analysis.FeedNode;
        import com.easyinsight.analysis.HierarchyDrilldownEvent;
        import com.easyinsight.analysis.AnalysisStateChangeEvent;
        import com.easyinsight.analysis.DataViewFactory;
        import com.easyinsight.analysis.HierarchyRollupEvent;
        import com.easyinsight.analysis.HierarchyWindow;
        import com.easyinsight.analysis.IReportController;
        import com.easyinsight.analysis.QuickDataSourceAPIWindow;
        import com.easyinsight.analysis.RuntimeCredentialsWindow;
        import com.easyinsight.analysis.list.ListController;
        import com.easyinsight.analysis.scrub.LookupTableScrubListWindow;
        import com.easyinsight.analysis.scrub.TextReplaceScrubListWindow;
        import com.easyinsight.analysis.NewBlankFeedWindow;
        import com.easyinsight.analysis.scrub.LookupTableScrubWindow;
        import com.easyinsight.analysis.EmbedInsightWindow;
        import com.easyinsight.analysis.AddFeedToGroupWindow;
        import com.easyinsight.analysis.SubscriptionEvent;
        import com.easyinsight.analysis.AddInsightToGroupWindow;
        import com.easyinsight.analysis.UserCapabilities;
        import com.easyinsight.administration.feed.TagCloud;
        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.detail.DataDetailEvent;
        import com.easyinsight.detail.DetailBook;
        import com.easyinsight.framework.InvalidFieldsEvent;
        import com.easyinsight.framework.LoginEvent;

        import com.easyinsight.genredata.ModuleAnalyzeEvent;
        import com.easyinsight.listing.DescriptorAnalyzeSource;
        import com.easyinsight.listing.FeedAdminAnalyzeSource;

        import com.easyinsight.report.MultiReportAnalyzeSource;
        import com.easyinsight.report.ReportAnalyzeSource;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.PNGEnc;

        import mx.collections.SortField;
        import mx.collections.Sort;
        import mx.events.DragEvent;
        import mx.events.ListEvent;
        import mx.validators.Validator;

        import com.easyinsight.analysis.AnalysisItemWrapper;
        import com.easyinsight.administration.feed.FeedDefinitionData;
        import com.easyinsight.analysis.AnalysisCloseEvent;
        import com.easyinsight.analysis.PNGCreator;
        import com.easyinsight.analysis.ExcelCreator;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemCreationEvent;
        import com.easyinsight.analysis.CalculationWindow;
        import com.easyinsight.analysis.scrub.DataScrubEvent;
        import com.easyinsight.analysis.scrub.TextReplaceScrubWindow;
        import com.easyinsight.util.ProgressAlert;
        import com.easyinsight.commands.CommandEvent;

        import mx.utils.URLUtil;
        import mx.managers.BrowserManager;
        import mx.controls.Alert;
        import mx.events.CloseEvent;

        import com.easyinsight.commands.CommandProcessor;
        import com.easyinsight.framework.DataServiceLoadingEvent;
        import com.easyinsight.framework.DataService;
        import com.easyinsight.analysis.feed.AnalysisBasedFeedCreationWindow;
        import com.easyinsight.analysis.SavedAnalysisEvent;
        import com.easyinsight.framework.User;

        import mx.rpc.events.ResultEvent;

        import com.easyinsight.filtering.TransformsUpdatedEvent;
        import com.easyinsight.feedassembly.CompositeFeedCreatedEvent;

        import mx.managers.PopUpManager;

        import com.easyinsight.filtering.FilterDefinition;
        import com.easyinsight.filtering.FilterRawData;
        import com.easyinsight.analysis.FeedMetadata;

        import com.easyinsight.framework.CredentialsCache;

        import mx.collections.ArrayCollection;

        import com.easyinsight.analysis.AnalysisDefinition;

        [Bindable]
        [Embed(source="../../../assets/background2.JPG")]
        private var background2:Class;

        [Bindable]
        [Embed(source="../../../assets/table.png")]
        public var listIcon:Class;

        [Bindable]
        [Embed(source="../../../assets/table2_selection_block.png")]
        public var crosstabIcon:Class;

        [Bindable]
        [Embed(source="../../../assets/chart_pie2.png")]
        public var graphIcon:Class;

        [Bindable]
        [Embed(source="../../../assets/earth.png")]
        public var yahooMapIcon:Class;

        [Bindable]
        public var dataService:DataService;

        [Bindable]
        private var availableFields:ArrayCollection;

        [Bindable]
        private var dataSourceInfo:DataSourceInfo;

        [Bindable]
        private var selectedMode:int;

        [Bindable]
        private var analysisDefinition:AnalysisDefinition;

        [Bindable]
        private var feedDefinition:FeedDefinitionData;

        [Bindable]
        private var labelNameField:String;

        [Bindable]
        private var tags:String;

        [Bindable]
        private var analysisPolicy:int;

        [Bindable]
        private var _previewMode:Boolean = false;

        [Bindable]
        private var admin:Boolean;

        private var feedMetadata:FeedMetadata;

        [Bindable]
        private var dataView:DataViewFactory;

        private var commandProcessor:CommandProcessor;

        [Bindable]
        private var limits:ArrayCollection;

        [Bindable]
        private var canSubscribeToInsight:Boolean;
        [Bindable]
        private var canAddInsightToGroup:Boolean;
        [Bindable]
        private var canSubscribeToFeed:Boolean;
        [Bindable]
        private var canAddFeedToGroup:Boolean;

        private var analysisValidators:Array;

        [Bindable]
        private var marketplaceVisible:Boolean;

        [Bindable]
        private var wrappers:ArrayCollection;

        [Bindable]
        private var publiclyVisible:Boolean;

        [Bindable]
        private var shareDataSourceSharing:Boolean;

        [Bindable]
        private var modeText:String = "";

        private var analysisChanged:Boolean = false;

        [Bindable]
        private var dataSourceName:String;

        [Bindable]
        private var _reportID:int;

        private var loading:Boolean = false;

        public function set previewMode(previewMode:Boolean):void {
            this._previewMode = previewMode;
            this.dataService.previewMode = previewMode;
        }

        public function onInvalidFields(event:InvalidFieldsEvent):void {
            transformContainer.invalidateItems(event.invalidAnalysisItemIDs);
            dataView.invalidateItems(event.invalidAnalysisItemIDs);
            availableFields = new ArrayCollection();
            for each (var feedNode:FeedNode in event.feedMetadata.fieldHierarchy) {
                var analysisWrapper:AnalysisItemWrapper = new AnalysisItemWrapper(feedNode);
                availableFields.addItem(analysisWrapper);
            }
            dataView.availableFields = availableFields;
            Alert.show("The underlying data to this data source has been changed, so some fields may have been removed from your filters or report.");
            dataView.retrieveData();
        }

        private function onAnalysisStateChange(event:AnalysisStateChangeEvent):void {
            var controller:IReportController = event.controller;
            loadController(controller);
        }

        private function onDataReturn(event:DataServiceEvent):void {
            this.dataSourceInfo = event.dataSource; 
        }

        private function loadController(controller:IReportController):void {
            var dataViewFactory:DataViewFactory = controller.createDataView();
            dataViewFactory.availableFields = wrappers;
            if (dataView != null) {
                dataView.removeEventListener(DataServiceLoadingEvent.LOADING_STARTED, startLoading);
                dataView.removeEventListener(DataServiceLoadingEvent.LOADING_STOPPED, stopLoading);
                dataView.removeEventListener(AnalysisChangedEvent.ANALYSIS_CHANGED, onAnalysisChanged);
                dataControlVBox.removeChild(dataView);
            }
            if (analysisDefinition == null) {
                this.analysisDefinition = dataViewFactory.createNewDefinition();
                analysisDefinition.canSaveDirectly = true;
                analysisDefinition.dataFeedID = dataService.dataFeedID;
            } else {
                analysisDefinition = dataViewFactory.fromExistingDefinition(analysisDefinition);
                dataViewFactory.analysisDefinition = analysisDefinition;
            }
            dataView = dataViewFactory;
            dataView.addEventListener(DataServiceLoadingEvent.LOADING_STARTED, startLoading);
            dataView.addEventListener(DataServiceLoadingEvent.LOADING_STOPPED, stopLoading);
            dataView.addEventListener(AnalysisChangedEvent.ANALYSIS_CHANGED, onAnalysisChanged);
            dataView.addEventListener(DataServiceEvent.DATA_RETURNED, onDataReturn);
            dataControlVBox.addChild(dataViewFactory);
            dataViewFactory.retrieveData();
        }

        public function newAnalysis():void {
            var controller:IReportController = new ListController();
            loadController(controller);
        }

        public function getAnalysisDefinition():AnalysisDefinition {
            return analysisDefinition;
        }

        public function set reportID(val:int):void {
            _reportID = val;
        }

        public function openAnalysis(analysisDefinition:AnalysisDefinition):void {
            BrowserManager.getInstance().setTitle("Easy Insight - " + analysisDefinition.name);
            this.analysisDefinition = analysisDefinition;
            labelNameField = analysisDefinition.name;
            tags = TagCloud.toString(analysisDefinition.tagCloud);
            analysisPolicy = analysisDefinition.policy;
        }

        private function onLogin(event:LoginEvent):void {
            currentState = "";
            User.getEventNotifier().removeEventListener(LoginEvent.LOGIN, onLogin);
        }

        private function goAdmin():void {
            if (analysisChanged) {
                Alert.show("You have unsaved changes. Are you sure you want to go to data source administration?", "Alert",
                        Alert.OK | Alert.CANCEL, null, adminAlertListener, null, Alert.CANCEL);
            } else {
                cleanup();
                dispatchEvent(new ModuleAnalyzeEvent(new FeedAdminAnalyzeSource(dataService.dataFeedID)));
            }
        }

        private function adminAlertListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                cleanup();
                dispatchEvent(new ModuleAnalyzeEvent(new FeedAdminAnalyzeSource(dataService.dataFeedID)));
            }
        }

        private function onMetadataReceipt(feedMetadata:FeedMetadata):void {
            if (User.getInstance() == null) {
                currentState = "NotLoggedIn";
                User.getEventNotifier().addEventListener(LoginEvent.LOGIN, onLogin);
            } else {
                switch (User.getInstance().getAccountType()) {
                    case Account.PROFESSIONAL:
                        currentState = "Professional";
                        break;
                    case Account.GROUP:
                        currentState = "Group";
                        break;
                    case Account.INDIVIDUAL:
                        currentState = "Individual";
                        break;
                    case Account.FREE:
                        currentState = "Free";
                        break;
                }
            }

            this.analysisValidators = [ analysisNameValidator ];
            this.feedMetadata = feedMetadata;
            this.admin = feedMetadata.dataSourceAdmin;
            dataSourceName = this.feedMetadata.dataSourceName;
            availableFields = new ArrayCollection();
            wrappers = new ArrayCollection();
            for each (var feedNode:FeedNode in feedMetadata.fieldHierarchy) {
                var analysisWrapper:AnalysisItemWrapper = new AnalysisItemWrapper(feedNode);
                if (!analysisWrapper.hidden) {
                    availableFields.addItem(analysisWrapper);
                }
            }
            for each (var listItem:AnalysisItem in feedMetadata.fields) {
                var analysisNode:AnalysisItemNode = new AnalysisItemNode();
                analysisNode.analysisItem = listItem;
                var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(analysisNode);
                wrappers.addItem(wrapper);
            }

            if (analysisDefinition == null) {
                newAnalysis();
                for each (var filter:FilterDefinition in feedMetadata.intrinsicFilters) {
                    transformContainer.addFilterDefinition(filter);
                }
                var fragmentObject:Object = new Object();
                fragmentObject.feedID = String(dataService.dataFeedID);
                var fragmentString:String = URLUtil.objectToString(fragmentObject);
                BrowserManager.getInstance().setFragment(fragmentString);
            } else {
                //this.title = analysisDefinition.name;
                var controllerClass:Class = ControllerLookup.controllerForType(analysisDefinition.type);
                var controller:IReportController = new controllerClass();
                loadController(controller);

                analysisState.selectedLabel = analysisDefinition.type;

                shareDataSourceSharing = analysisDefinition.visibleAtFeedLevel;
                publiclyVisible = analysisDefinition.publiclyVisible;
                marketplaceVisible = analysisDefinition.marketplaceVisible;

                var feedFragmentObject:Object = new Object();
                feedFragmentObject.analysisID = String(analysisDefinition.analysisID);
                var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
                BrowserManager.getInstance().setFragment(feedFragmentString);
                createFilterBoxes(analysisDefinition.filterDefinitions.toArray());

                // add the fields which are specifically added in the context of the report, such as
                // calculations and hierarchies
                if (analysisDefinition.addedItems != null) {
                    for each (var item:AnalysisItem in analysisDefinition.addedItems) {
                        var analysisItemNode:AnalysisItemNode = new AnalysisItemNode();
                        analysisItemNode.analysisItem = item;
                        var addedWrapper:AnalysisItemWrapper = new AnalysisItemWrapper(analysisItemNode);
                        availableFields.addItem(addedWrapper);
                        wrappers.addItem(addedWrapper);
                    }
                    var sort:Sort = new Sort();
                    sort.fields = [ new SortField("displayName", false) ];
                    availableFields.sort = sort;
                    availableFields.refresh();
                    wrappers.sort = sort;
                    wrappers.refresh();
                }
            }
            dataView.availableFields = wrappers;
            loading = false;
            stopLoading(null);
        }

        public function deleteItem(item:AnalysisItem):void {
            var index:int = 0;
            for each (var wrapper:AnalysisItemWrapper in availableFields) {
                if (wrapper.analysisItem.analysisItemID == item.analysisItemID) {
                    break;
                }
                index++;
            }
            availableFields.removeItemAt(index);
        }

        public function getAnalysisItems():ArrayCollection {
            var analysisItems:ArrayCollection = new ArrayCollection();
            for each (var analysisItemWrapper:AnalysisItemWrapper in wrappers) {
                analysisItems.addItem(analysisItemWrapper.analysisItem);
            }
            return analysisItems;
        }

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }

        private function onAnalysisChanged(event:AnalysisChangedEvent):void {
            this.analysisChanged = true;
        }

        public function initializeForWorksheet():void {
            loading = true;
            commandProcessor = new CommandProcessor();
            addEventListener(AnalysisChangedEvent.ANALYSIS_CHANGED, onAnalysisChanged);
            addEventListener(DeleteAnalysisItemEvent.DELETE_ANALYSIS_ITEM, onFieldDelete);
            addEventListener(CommandEvent.COMMAND, onCommand);
            addEventListener(KeyboardEvent.KEY_UP, onKey);
            addEventListener(HierarchyDrilldownEvent.DRILLDOWN, childFilterCreation);
            addEventListener(HierarchyRollupEvent.HIERARCHY_ROLLUP, onRollup);
            addEventListener(DataDetailEvent.DATA_DETAIL, toDetails);
            dataService.addEventListener(DataServiceLoadingEvent.LOADING_STARTED, startLoading);
            dataService.addEventListener(DataServiceLoadingEvent.LOADING_STOPPED, stopLoading);
            dataService.addEventListener(InvalidFieldsEvent.INVALID_FIELDS, onInvalidFields);
            transformContainer.addEventListener(TransformsUpdatedEvent.UPDATED_TRANSFORMS, transformsUpdated);
            startLoading(null);
            if (_reportID > 0) {
                analysisService.openAnalysisDefinition.send(_reportID);
            } else {
                initializeState();
            }
        }

        private function gotReport():void {
            this.analysisDefinition = analysisService.openAnalysisDefinition.lastResult as AnalysisDefinition;
            BrowserManager.getInstance().setTitle("Easy Insight - " + this.analysisDefinition.name);
            labelNameField = this.analysisDefinition.name;
            tags = TagCloud.toString(this.analysisDefinition.tagCloud);
            analysisPolicy = this.analysisDefinition.policy;
            initializeState();
        }

        private function initializeState():void {
            if (analysisDefinition != null) {
                analysisService.getUserCapabilitiesForInsight.send(dataService.dataFeedID, analysisDefinition.analysisID);
            } else {
                analysisService.getUserCapabilitiesForFeed.send(dataService.dataFeedID);
            }
            // need to identify credential requirements at this point...

            //dataService.reloadInitialContent(this, onMetadataReceipt);
            detailService.getCredentialRequirements.send(dataService.dataFeedID);
        }

        private function onCredentials(event:CredentialsEvent):void {
            dataService.reloadInitialContent(this, onMetadataReceipt);
        }

        private function gotCredentialRequirements():void {
            var requirements:ArrayCollection = detailService.getCredentialRequirements.lastResult as ArrayCollection;
            var canDirectly:Boolean = true;
            for each (var credential:CredentialRequirement in requirements) {
                if (CredentialsCache.getCache().getCredentials(credential.dataSourceID) == null) {
                    var window:RuntimeCredentialsWindow = new RuntimeCredentialsWindow();
                    window.requirement = credential;
                    window.addEventListener(CredentialsEvent.CREDENTIALS_SAVED, onCredentials);
                    PopUpManager.addPopUp(window, this, true);
                    PopUpManager.centerPopUp(window);
                    canDirectly = false;
                }
            }
            if (canDirectly) {
                dataService.reloadInitialContent(this, onMetadataReceipt);
            }
        }

        private function onRollup(event:HierarchyRollupEvent):void {
            transformContainer.clearFilter(event.analysisItem);
        }

        private function childFilterCreation(event:HierarchyDrilldownEvent):void {
            transformContainer.processRawFilterData(event.filterRawData, event.type == HierarchyDrilldownEvent.DRILLDOWN);
        }

        private function toDetails(event:DataDetailEvent):void {
            var filter:FilterDefinition = transformContainer.createSimpleFilter(event.filterRawData);
            var filters:ArrayCollection = transformContainer.getFilterDefinitions();
            var allFilters:ArrayCollection = new ArrayCollection(filters.toArray());
            allFilters.addItem(filter);
            detailService.getAllData.send(dataService.dataFeedID, allFilters);
        }

        private function gotDetailData():void {
            var window:DetailBook = new DetailBook();
            window.details = detailService.getAllData.lastResult as ArrayCollection;
            PopUpManager.addPopUp(window, this);
            PopUpManager.centerPopUp(window);
        }

        private function onKey(event:KeyboardEvent):void {
            if (event.ctrlKey && event.shiftKey) {
                if (event.keyCode == 90) {
                    redo();
                }
            } else if (event.ctrlKey) {
                if (event.keyCode == 90) {
                    undo();
                }
            }
        }

        private function createFilterBoxes(filters:Array):void {
            if (filters != null) {
                for (var i:int = 0; i < filters.length; i++) {
                    var filterDefinition:FilterDefinition = filters[i];
                    transformContainer.addFilterDefinition(filterDefinition);
                }
            }
        }

        private function createFilter():void {
            var filterRawData:FilterRawData = dataView.createFilterRawData();
            dispatchEvent(new AnalysisChangedEvent());
            transformContainer.processRawFilterData(filterRawData, true);
        }

        private function getFilterDefinitions():Array {
            return transformContainer.getFilterDefinitions().toArray();
        }

        private function compositeFeedCreated(event:CompositeFeedCreatedEvent):void {
            dataService.dataFeedID = event.compositeFeedID;
            analysisDefinition.dataFeedID = event.compositeFeedID;
            dataService.reloadInitialContent(this, onMetadataReceipt);
        }

        private function exclude():void {
            var filterRawData:FilterRawData = dataView.createFilterRawData();
            transformContainer.processRawFilterData(filterRawData, false);
        }

        private function transformsUpdated(event:TransformsUpdatedEvent):void {
            analysisDefinition.filterDefinitions = event.filterDefinitions;
            dataView.retrieveData();
        }

        private function closeWindow():void {
            PopUpManager.removePopUp(this);
        }

        private function save():void {
            var user:User = User.getInstance();
            if (user == null) {
                var loginDialog:LoginDialog = LoginDialog(PopUpManager.createPopUp(this, LoginDialog, true));
                PopUpManager.centerPopUp(loginDialog);
            } else {
                if (getAnalysisDefinition().canSaveDirectly) {
                    var valid:Boolean = Validator.validateAll(analysisValidators).length == 0;
                    if (valid) {
                        dataView.updateExportMetadata();
                        var bd:BitmapData = new BitmapData(dataView.getCoreView().width, dataView.getCoreView().height);
                        bd.draw(dataView.getCoreView());
                        var ba:ByteArray = PNGEnc.encode(bd);
                        analysisDefinition.name = analysisNameInput.text;
                        analysisDefinition.tagCloud = TagCloud.fromString(analysisTagsInput.text);
                        analysisDefinition.marketplaceVisible = marketplaceVisibleCheckbox.selected;
                        analysisDefinition.publiclyVisible = publiclyVisibleCheckbox.selected;
                        analysisDefinition.visibleAtFeedLevel = shareDataSourceSharingCheckbox.selected;
                        ProgressAlert.alert(this, "Saving the report...", "Saved!", analysisService.saveAnalysisDefinition);
                        analysisService.saveAnalysisDefinition(analysisDefinition, ba);
                    } else {
                        tabNavigator.selectedIndex = 0;
                        Alert.show("There are one or more errors which need to be corrected before this report can be saved.");
                    }
                } else {
                    Alert.show("You are not allowed to directly modify this report--use Save As instead.");
                }
            }
        }

        private function saved():void {
            var savedDef:AnalysisDefinition = analysisService.saveAnalysisDefinition.lastResult as AnalysisDefinition;
            AnalysisUtil.updateReport(analysisDefinition, savedDef);
            var feedFragmentObject:Object = new Object();
            feedFragmentObject.analysisID = String(analysisDefinition.analysisID);
            var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
            BrowserManager.getInstance().setFragment(feedFragmentString);
            this.analysisChanged = false;
        }

        private function saveAs():void {
            // if we're in admin mode, this should be disabled...
            var user:User = User.getInstance();
            if (user == null) {
                var loginContainer:LoginDialog = LoginDialog(PopUpManager.createPopUp(this, LoginDialog, true));
                PopUpManager.centerPopUp(loginContainer);
            } else {
                var saveDialog:SaveDialog = SaveDialog(PopUpManager.createPopUp(this, SaveDialog, true));
                dataView.updateExportMetadata();
                saveDialog.analysisDefinition = getAnalysisDefinition();
                saveDialog.addEventListener(SavedAnalysisEvent.SAVED_ANALYSIS, savedAnalysis);
                PopUpManager.centerPopUp(saveDialog);
            }
        }

        private function savedAnalysis(event:SavedAnalysisEvent):void {
            //title = event.title;
            analysisNameInput.text = event.title;
            var feedFragmentObject:Object = new Object();
            feedFragmentObject.analysisID = String(analysisDefinition.analysisID);
            var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
            BrowserManager.getInstance().setFragment(feedFragmentString);
            BrowserManager.getInstance().setTitle("Easy Insight - " + event.title);
            this.analysisChanged = false;
        }

        private function createFeed():void {
            if (getAnalysisDefinition().analysisID == 0) {
                save();
            } else {
                var feedCreationWindow:AnalysisBasedFeedCreationWindow = AnalysisBasedFeedCreationWindow(PopUpManager.
                        createPopUp(this, AnalysisBasedFeedCreationWindow, true));
                feedCreationWindow.analysisDefinition = getAnalysisDefinition();
                PopUpManager.centerPopUp(feedCreationWindow);
            }
        }

        private function startLoading(event:DataServiceLoadingEvent):void {
            loadingBar.visible = true;
        }

        private function stopLoading(event:DataServiceLoadingEvent):void {
            loadingBar.visible = false;
        }

        protected function geticon(item:Object):Class {
            return item["icon"];
        }

        private function showAPIInfo():void {
            var window:QuickDataSourceAPIWindow = new QuickDataSourceAPIWindow();
            window.dataSourceID = dataService.dataFeedID;
            PopUpManager.addPopUp(window, this);
            PopUpManager.centerPopUp(window);
        }

        private function undo():void {
            commandProcessor.undo();
        }

        private function redo():void {
            commandProcessor.redo();
        }

        private function bought(event:ResultEvent):void {
            this._previewMode = false;
            this.dataService.previewMode = false;
            dataView.retrieveData();
        }

        private function refresh():void {
            dataView.retrieveData();
        }

        private function newTextReplaceScrub():void {
            var textWindow:TextReplaceScrubWindow = TextReplaceScrubWindow(PopUpManager.createPopUp(this, TextReplaceScrubWindow, false));
            textWindow.addEventListener(DataScrubEvent.ADDED_SCRUB, scrubAdded);
            PopUpManager.centerPopUp(textWindow);
        }

        private function newLookupTableScrub():void {
            var lookupWindow:LookupTableScrubWindow = LookupTableScrubWindow(PopUpManager.createPopUp(this, LookupTableScrubWindow, false));
            lookupWindow.availableFields = getAnalysisItems();
            lookupWindow.feedID = dataService.dataFeedID;
            lookupWindow.addEventListener(DataScrubEvent.ADDED_SCRUB, scrubAdded);
            PopUpManager.centerPopUp(lookupWindow);
        }

        private function editTextReplaceScrubs():void {
            var scrubListWindow:TextReplaceScrubListWindow = TextReplaceScrubListWindow(PopUpManager.createPopUp(this, TextReplaceScrubListWindow, false));
            scrubListWindow.definition = getAnalysisDefinition();
            scrubListWindow.addEventListener(DataScrubEvent.UPDATED_SCRUB, scrubUpdated);
            scrubListWindow.addEventListener(DataScrubEvent.DELETED_SCRUB, scrubDeleted);
            scrubListWindow.initState(getAnalysisItems(), dataService.dataFeedID);
            PopUpManager.centerPopUp(scrubListWindow);
        }

        private function editLookupTableScrubs():void {
            var scrubListWindow:LookupTableScrubListWindow = LookupTableScrubListWindow(PopUpManager.createPopUp(this, LookupTableScrubListWindow, false));
            scrubListWindow.definition = getAnalysisDefinition();
            scrubListWindow.addEventListener(DataScrubEvent.UPDATED_SCRUB, scrubUpdated);
            scrubListWindow.addEventListener(DataScrubEvent.DELETED_SCRUB, scrubDeleted);
            scrubListWindow.initState(getAnalysisItems(), dataService.dataFeedID);
            PopUpManager.centerPopUp(scrubListWindow);
        }

        private function scrubAdded(event:DataScrubEvent):void {
            dispatchEvent(new AnalysisChangedEvent());
            getAnalysisDefinition().dataScrubs.addItem(event.dataScrub);
            dataView.retrieveData();
        }

        private function scrubUpdated(event:DataScrubEvent):void {
            dispatchEvent(new AnalysisChangedEvent());
            dataView.retrieveData();
        }

        private function scrubDeleted(event:DataScrubEvent):void {
            dispatchEvent(new AnalysisChangedEvent());
            getAnalysisDefinition().dataScrubs.removeItemAt(getAnalysisDefinition().dataScrubs.getItemIndex(event.dataScrub));
            dataView.retrieveData();
        }

        private function createCalculation():void {
            var window:AnalysisItemEditWindow = new AnalysisItemEditWindow();
            window.editorClass = CalculationWindow;
            window.addEventListener(AnalysisItemEditEvent.ANALYSIS_ITEM_EDIT, onNewItem);
            PopUpManager.addPopUp(window, this);
            PopUpManager.centerPopUp(window);
        }

        private function onNewItem(event:AnalysisItemEditEvent):void {
            dispatchEvent(new AnalysisChangedEvent());
            var node:AnalysisItemNode = new AnalysisItemNode();
            node.analysisItem = event.analysisItem;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(node);
            availableFields.addItem(wrapper);
            wrappers.addItem(wrapper);
            var sort:Sort = new Sort();
            sort.fields = [ new SortField("displayName", false) ];
            availableFields.sort = sort;
            availableFields.refresh();
            wrappers.sort = sort;
            wrappers.refresh();
            if (getAnalysisDefinition().addedItems == null) {
                getAnalysisDefinition().addedItems = new ArrayCollection();
            }
            getAnalysisDefinition().addedItems.addItem(event.analysisItem);
        }

        private function createHierarchy():void {
            var window:AnalysisItemEditWindow = new AnalysisItemEditWindow();
            window.editorClass = HierarchyWindow;
            window.analysisItems = wrappers;
            window.addEventListener(AnalysisItemEditEvent.ANALYSIS_ITEM_EDIT, onNewItem);
            PopUpManager.addPopUp(window, this);
            PopUpManager.centerPopUp(window);
        }

        private function createBlankField():void {
            var window:NewBlankFeedWindow = NewBlankFeedWindow(PopUpManager.createPopUp(this, NewBlankFeedWindow));
            window.addEventListener(AnalysisItemCreationEvent.ANALYSIS_ITEM_CREATED, newFieldCreated);
            PopUpManager.centerPopUp(window);
        }

        private function newFieldCreated(event:AnalysisItemCreationEvent):void {
            dispatchEvent(new AnalysisChangedEvent());
            var node:AnalysisItemNode = new AnalysisItemNode();
            node.analysisItem = event.analysisItem;
            var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(node);
            availableFields.addItem(wrapper);
            wrappers.addItem(wrapper);
            var sort:Sort = new Sort();
            sort.fields = [ new SortField("displayName", false) ];
            availableFields.sort = sort;
            availableFields.refresh();
            wrappers.sort = sort;
            wrappers.refresh();
            if (getAnalysisDefinition().addedItems == null) {
                getAnalysisDefinition().addedItems = new ArrayCollection();
            }
            getAnalysisDefinition().addedItems.addItem(event.analysisItem);
        }

        private function exportPNG():void {
            new PNGCreator().draw(dataView.getCoreView());
        }

        private function exportExcel():void {
            dataView.updateExportMetadata();
            new ExcelCreator().exportExcel(analysisDefinition);
        }

        public function cleanup():void {
            removeEventListener(CommandEvent.COMMAND, onCommand);
            removeEventListener(KeyboardEvent.KEY_UP, onKey);
            removeEventListener(AnalysisChangedEvent.ANALYSIS_CHANGED, onAnalysisChanged);
            removeEventListener(DeleteAnalysisItemEvent.DELETE_ANALYSIS_ITEM, onFieldDelete);
            removeEventListener(HierarchyDrilldownEvent.DRILLDOWN, childFilterCreation);
            removeEventListener(HierarchyRollupEvent.HIERARCHY_ROLLUP, onRollup);
            dataService.removeEventListener(DataServiceLoadingEvent.LOADING_STARTED, startLoading);
            dataService.removeEventListener(DataServiceLoadingEvent.LOADING_STOPPED, stopLoading);
            dataService.removeEventListener(InvalidFieldsEvent.INVALID_FIELDS, onInvalidFields);
            transformContainer.removeEventListener(TransformsUpdatedEvent.UPDATED_TRANSFORMS, transformsUpdated);
            if (dataView != null) {
                dataView.removeEventListener(DataServiceLoadingEvent.LOADING_STARTED, startLoading);
                dataView.removeEventListener(DataServiceLoadingEvent.LOADING_STOPPED, stopLoading);
                dataView.removeEventListener(AnalysisChangedEvent.ANALYSIS_CHANGED, onAnalysisChanged);
                dataView.cleanup();
            }
        }

        private function close():void {
            if (analysisChanged) {
                Alert.show("You have unsaved changes. Are you sure you want to exit?", "Alert",
                        Alert.OK | Alert.CANCEL, null, alertListener, null, Alert.CANCEL);
            } else {
                cleanup();
                dispatchEvent(new AnalysisCloseEvent(this));
            }
        }

        private function alertListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                cleanup();
                dispatchEvent(new AnalysisCloseEvent(this));
            }
        }

        private function netvibes():void {
            flash.net.navigateToURL(new URLRequest("http://www.netvibes.com/subscribe.php?module=UWA&moduleUrl=" + escape("https://www.easy-insight.com/app/widgets/UWAWidget.html?insightCombo=" + escape(String(analysisDefinition.analysisID)) + "&reportName=" + escape(analysisDefinition.name) + "&reportType=" + escape(String(analysisDefinition.type)) + "&dataSourceID=" + escape(String(analysisDefinition.dataFeedID)))));
        }

        private function igoogle():void {
            flash.net.navigateToURL(new URLRequest("http://www.google.com/ig/add?moduleurl=" + escape("http://www.netvibes.com/api/uwa/compile/google.php?moduleUrl=" + escape("https://www.easy-insight.com/app/widgets/UWAWidget.html?insightCombo=" + escape(String(analysisDefinition.analysisID)) + "&reportName=" + escape(analysisDefinition.name) + "&reportType=" + escape(String(analysisDefinition.type)) + "&dataSourceID=" + escape(String(analysisDefinition.dataFeedID))))));
        }

        private function subscribeToFeed():void {
            userUploadService.subscribe.send(dataService.dataFeedID);
        }

        private function subscribeToInsight():void {
            analysisService.subscribeToAnalysis.send(analysisDefinition.analysisID);
        }

        private function addInsightToGroup():void {
            var window:AddInsightToGroupWindow = AddInsightToGroupWindow(PopUpManager.createPopUp(this, AddInsightToGroupWindow));
            window.insightID = analysisDefinition.analysisID;
            window.addEventListener(SubscriptionEvent.GROUP_TO_INSIGHT, addedToGroup);
            PopUpManager.centerPopUp(window);
        }

        private function addFeedToGroup():void {
            var window:AddFeedToGroupWindow = AddFeedToGroupWindow(PopUpManager.createPopUp(this, AddFeedToGroupWindow));
            window.feedID = dataService.dataFeedID;
            window.addEventListener(SubscriptionEvent.GROUP_TO_INSIGHT, addedToGroup);
            PopUpManager.centerPopUp(window);
        }

        private function addedToGroup(event:SubscriptionEvent):void {

        }

        private function gotUserCapabilitiesForFeed():void {
            var userCapabilities:UserCapabilities = analysisService.getUserCapabilitiesForFeed.lastResult as UserCapabilities;
            canSubscribeToFeed = userCapabilities.feedRole > 3;
            canAddFeedToGroup = userCapabilities.groupMember;
        }

        private function onFieldDelete(event:DeleteAnalysisItemEvent):void {
            for each (var analysisItemWrapper:AnalysisItemWrapper in availableFields) {
                if (analysisItemWrapper == event.analysisItemWrapper) {
                    availableFields.removeItemAt(availableFields.getItemIndex(analysisItemWrapper));
                    break;
                }
            }
        }

        private function gotUserCapabilitiesForInsight():void {
            var userCapabilities:UserCapabilities = analysisService.getUserCapabilitiesForInsight.lastResult as UserCapabilities;

            canSubscribeToFeed = userCapabilities.feedRole > 3;
            canSubscribeToInsight = userCapabilities.analysisRole > 3;
            canAddFeedToGroup = userCapabilities.groupMember;
            canAddInsightToGroup = userCapabilities.groupMember;
        }

        private function subscribedToFeed():void {
            canSubscribeToFeed = false;
            Alert.show("This data source will now show in your My Data page.");
        }

        private function subscribedToInsight():void {
            canSubscribeToInsight = false;
            Alert.show("This report will now show in your My Data page.");
        }

        private function sourceSharingChange(event:MouseEvent):void {
            if (shareDataSourceSharingCheckbox.selected) {
                marketplaceVisibleCheckbox.selected = false;
                marketplaceVisibleCheckbox.enabled = false;
                publiclyVisibleCheckbox.selected = false;
                publiclyVisibleCheckbox.enabled = false;
            } else {
                marketplaceVisibleCheckbox.enabled = true;
                publiclyVisibleCheckbox.enabled = true;
            }
        }

        private function embed():void {
            if (analysisDefinition.analysisID > 0) {
                var embedWindow:EmbedInsightWindow = EmbedInsightWindow(PopUpManager.createPopUp(this, EmbedInsightWindow));
                embedWindow.analysisID = analysisDefinition.analysisID;
                embedWindow.reportType = analysisDefinition.reportType;
                embedWindow.dataSourceID = analysisDefinition.dataFeedID;
                embedWindow.reportName = analysisDefinition.name;
                embedWindow.reportHeight = 346;
                embedWindow.reportWidth = 450;
                PopUpManager.centerPopUp(embedWindow);
            } else {
                Alert.show("You need to save the report first.");
            }
        }

        private function onItemDoubleClick(event:ListEvent):void {
            var field:AnalysisItemWrapper = event.currentTarget.selectedItem as AnalysisItemWrapper;
            if (field.isAnalysisItem()) {
                dataView.addItem(field.analysisItem);
                dispatchEvent(new AnalysisChangedEvent(false));
            }
        }

        private function onDragComplete(event:DragEvent):void {
            event.preventDefault();
            transformContainer.closeDropMessage();
        }

        private function onDragStart():void {
            if (tabNavigator.selectedIndex == 2) {
                transformContainer.showDropMessage();
            }
        }

        private function onDragEnd():void {
            transformContainer.closeDropMessage();
        }

        private function iconFunction(item:Object):Class {
            var wrapper:AnalysisItemWrapper = item as AnalysisItemWrapper;
            return AnalysisItemTypeRenderer.getImageClass(wrapper);
        }

        private function toReports():void {
            if (analysisChanged) {
                Alert.show("You have unsaved changes. Are you sure you want to go to reports?", "Alert",
                        Alert.OK | Alert.CANCEL, null, adminAlertListener, null, Alert.CANCEL);
            } else {
                cleanup();
                dispatchEvent(new ModuleAnalyzeEvent(new MultiReportAnalyzeSource(dataService.dataFeedID)));
            }
        }

        private function goReport():void {
            if (analysisDefinition.analysisID == 0) {
                Alert.show("You need to save this report first.");
            } else if (analysisChanged) {
                Alert.show("You have unsaved changes. Are you sure you want to go to reports?", "Alert",
                        Alert.OK | Alert.CANCEL, null, goReportListener, null, Alert.CANCEL);
            } else {
                cleanup();
                var report:InsightDescriptor = new InsightDescriptor();
                report.dataFeedID = dataService.dataFeedID;
                report.id = analysisDefinition.analysisID;
                report.name = analysisDefinition.name;
                report.reportType = analysisDefinition.reportType;
                dispatchEvent(new ModuleAnalyzeEvent(new ReportAnalyzeSource(report)));
            }
        }

        private function goReportListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                cleanup();
                var report:InsightDescriptor = new InsightDescriptor();
                report.dataFeedID = dataService.dataFeedID;
                report.id = analysisDefinition.analysisID;
                report.name = analysisDefinition.name;
                report.reportType = analysisDefinition.reportType;
                dispatchEvent(new ModuleAnalyzeEvent(new ReportAnalyzeSource(report)));
            }
        }

        private function onDescriptionUpdate(event:DescriptionUpdateEvent):void {
            analysisDefinition.description = event.text;
        }

        private function editDescription():void {
            var window:DescriptionEditWindow = new DescriptionEditWindow();
            window.addEventListener(DescriptionUpdateEvent.DESCRIPTION_UPDATE, onDescriptionUpdate);
            window.text = analysisDefinition.description;
            PopUpManager.addPopUp(window, this, true);
            PopUpManager.centerPopUp(window);
        }

        private function newReport():void {
            if (analysisChanged) {
                Alert.show("You have unsaved changes. Are you sure you want to create a new report?", "Alert",
                        Alert.OK | Alert.CANCEL, null, newReportListener, null, Alert.CANCEL);
            } else {
                cleanup();
                dispatchEvent(new ModuleAnalyzeEvent(new DescriptorAnalyzeSource(dataService.dataFeedID, dataSourceName)));
            }
        }

        private function newReportListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                cleanup();
                dispatchEvent(new ModuleAnalyzeEvent(new DescriptorAnalyzeSource(dataService.dataFeedID, dataSourceName)));
            }
        }
        ]]>
    </mx:Script>
    <mx:RemoteObject id="analysisService" destination="analysisDefinition">
        <mx:method name="saveAnalysisDefinition" result="saved()"/>
        <mx:method name="openAnalysisDefinition" result="gotReport()"/>
        <mx:method name="getUserCapabilitiesForFeed" result="gotUserCapabilitiesForFeed()"/>
        <mx:method name="getUserCapabilitiesForInsight" result="gotUserCapabilitiesForInsight()"/>
        <mx:method name="subscribeToAnalysis" result="subscribedToInsight()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="userUploadService" destination="userUpload">
        <mx:method name="subscribe" result="subscribedToFeed()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="detailService" destination="data">
        <mx:method name="getAllData" result="gotDetailData()"/>
        <mx:method name="getCredentialRequirements" result="gotCredentialRequirements()"/>
    </mx:RemoteObject>
    <mx:VBox height="100%" width="100%">
        <mx:HBox id="buttonBox" verticalAlign="middle">
            <mx:Button id="wrapButton" icon="@Embed(source='../../../assets/document_out.png')" click="close()"
                       toolTip="Close"/>
            <!--<mx:VRule strokeColor="#DDDDDD" height="16"/>
            <mx:Button id="undoButton" icon="@Embed(source='../../../assets/undo.png')" click="undo()" toolTip="Undo"/>
            <mx:Button id="redoButton" icon="@Embed(source='../../../assets/redo.png')" click="redo()" toolTip="Redo"/>-->
            <mx:VRule strokeColor="#DDDDDD" height="16"/>
            <mx:Button id="saveButton" icon="@Embed(source='../../../assets/floppy_disk.png')" click="save()"
                       toolTip="Save" enabled="{!_previewMode}"/>
            <mx:Button id="saveAsButton" icon="@Embed(source='../../../assets/save_as.png')" click="saveAs()"
                       toolTip="Save As" enabled="{!_previewMode}"/>
            <mx:VRule strokeColor="#DDDDDD" height="16"/>
            <mx:Button id="dataSourceButton" toolTip="Create a New Report from Data Source"
                       icon="@Embed(source='../../../assets/table.png')" click="newReport()"/>
            <mx:Button id="reportsButton" icon="@Embed(source='../../../assets/tables_x16.png')" click="toReports()"
                       toolTip="View All Reports for Data Source" enabled="{!_previewMode}"/>
            <mx:Button id="reportButton" icon="@Embed(source='../../../assets/media_play_green.png')" click="goReport()"
                       toolTip="View Report"/>
            <mx:Button id="adminButton" icon="@Embed(source='../../../assets/businessman_edit.png')" click="goAdmin()"
                       toolTip="Adminster"
                       visible="{admin}"/>
            <mx:VRule strokeColor="#DDDDDD" height="16"/>
            <mx:Button id="subscribeToFeedButton" icon="@Embed(source='../../../assets/folder_into.png')"
                       click="subscribeToFeed()" toolTip="Add Data Source to My Data" enabled="{canSubscribeToFeed}"/>
            <mx:Button id="groupAddFeedButton" icon="@Embed(source='../../../assets/users_into.png')"
                       click="addFeedToGroup()" toolTip="Add Data Source to Group" enabled="{canAddFeedToGroup}"/>
            <mx:Button id="subscribeToInsightButton" icon="@Embed(source='../../../assets/folder_into.png')"
                       click="subscribeToInsight()" toolTip="Add Report to My Data" enabled="{canSubscribeToInsight}"/>
            <mx:Button id="groupAddInsightButton" icon="@Embed(source='../../../assets/users_into.png')"
                       click="addInsightToGroup()" toolTip="Add Report to Group" enabled="{canAddInsightToGroup}"/>
            <mx:VRule strokeColor="#DDDDDD" height="16"/>
            <mx:ProgressBar indeterminate="true" visible="false" id="loadingBar"/>
        </mx:HBox>
        <mx:TabNavigator id="tabNavigator" width="100%" creationPolicy="all" enabled="{!_previewMode}" paddingTop="0"
                         paddingBottom="0"
                         paddingLeft="0" paddingRight="0" resizeToContent="true">
            <mx:HBox label="Metadata" icon="@Embed(source='../../../assets/note.png')" paddingLeft="10" paddingTop="10"
                     paddingBottom="10" id="metadataBox">

                <mx:Form paddingTop="0" paddingBottom="0" id="analysisNameForm">
                    <mx:FormItem label="Report Name:">
                        <mx:TextInput text="{labelNameField}" id="analysisNameInput"/>
                    </mx:FormItem>
                    <mx:FormItem label="Tags:">
                        <mx:TextInput text="{tags}" id="analysisTagsInput"/>
                    </mx:FormItem>
                    <mx:FormItem label="Description:">
                        <mx:Button icon="@Embed(source='../../../assets/text.png')" toolTip="Edit Description..."
                                   click="editDescription()"/>
                    </mx:FormItem>
                </mx:Form>
                <mx:VBox id="sharingSettingsBox">
                    <mx:CheckBox label="Use Data Source Sharing Settings"
                                 id="shareDataSourceSharingCheckbox" selected="{shareDataSourceSharing}"
                                 click="sourceSharingChange(event)"/>
                    <mx:HBox verticalAlign="middle">
                        <mx:CheckBox label="Publicly Visible" id="publiclyVisibleCheckbox"
                                     selected="{publiclyVisible}"
                                     change="publiclyVisible = publiclyVisibleCheckbox.selected"/>
                        <mx:Label fontSize="10" textDecoration="underline" text="What is this?"
                                  toolTip="By checking this box, you make the report visible to other users that you send the URL to."/>
                    </mx:HBox>
                    <mx:HBox verticalAlign="middle">
                        <mx:CheckBox label="Marketplace Visible" id="marketplaceVisibleCheckbox"
                                     selected="{marketplaceVisible}" enabled="{publiclyVisible}"/>
                        <mx:Label fontSize="10" textDecoration="underline" text="What is this?"
                                  toolTip="By checking this box, you make the report visible to all other Easy Insight users in the marketplace."/>
                    </mx:HBox>
                </mx:VBox>
            </mx:HBox>
            <mx:HBox label="Data" icon="@Embed(source='../../../assets/data_table.png')" paddingLeft="10"
                     paddingTop="10" paddingBottom="10"
                     paddingRight="10" width="100%" height="100%">
                <mx:Button id="refreshButton" toolTip="Refresh Data"
                           icon="@Embed(source='../../../assets/refresh.png')"
                           click="refresh()"/>
                <mx:Button id="calculationButton" toolTip="Create Calculation"
                           icon="@Embed(source='../../../assets/text_formula.png')"
                           click="createCalculation()"/>
                <mx:Button id="newFieldButton" toolTip="Create Blank Field"
                           icon="@Embed(source='../../../assets/document_add.png')"
                           click="createBlankField()"/>
                <mx:Button icon="@Embed(source='../../../assets/cubes_blue_add.png')"
                           toolTip="Add Hierarchy..." click="createHierarchy()"/>
                <mx:Button id="apiButton" toolTip="Show API Info for this Data Source"
                           icon="@Embed(source='../../../assets/app_enterprise_x16.png')" click="showAPIInfo()"/>
                <analysis:ResultLimitComboBox limits="{limits}"/>
                <datasources:DataSourceDisplay dataSource="{dataSourceInfo}"/>
            </mx:HBox>
            <filtering:TransformContainer id="transformContainer" paddingLeft="10" paddingTop="10" paddingBottom="10"
                                          paddingRight="10" transformAdded="transformsUpdated(event)" label="Filters"
                                          icon="@Embed(source='../../../assets/funnel.png')"
                                          width="100%" height="100%" backgroundColor="#ffffff" backgroundAlpha=".1"
                                          feedID="{dataService.dataFeedID}"
                                          analysisItems="{wrappers}">
                <mx:Button id="filterButton" icon="@Embed(source='../../../assets/funnel_new.png')"
                           toolTip="Filter Data" click="createFilter()"/>
                <mx:Button id="excludeButton" icon="@Embed(source='../../../assets/funnel_delete.png')"
                           toolTip="Exclude Data" click="exclude()"/>
            </filtering:TransformContainer>
            <!--<mx:HBox label="Scrubbing" visible="false" icon="@Embed(source='../../../assets/brush2.png')"
                     paddingLeft="10" paddingTop="10" paddingBottom="10"
                     paddingRight="10" width="100%" height="100%">
                <mx:Button id="textScrubButton" toolTip="Text Replace"
                           icon="@Embed(source='../../../assets/text_find.png')"
                           click="newTextReplaceScrub()"/>
                <mx:Button id="textListButton" toolTip="Edit Text Replaces..."
                           icon="@Embed(source='../../../assets/document_edit.png')"
                           click="editTextReplaceScrubs()"/>
                <mx:Button id="lookupTableScrubButton" toolTip="Lookup Table"
                           icon="@Embed(source='../../../assets/tables_add.png')"
                           click="newLookupTableScrub()"/>
                <mx:Button id="lookupListButton" toolTip="Edit Lookup Tables..."
                           icon="@Embed(source='../../../assets/tables_edit.png')"
                           click="editLookupTableScrubs()"/>
            </mx:HBox>-->
            <mx:HBox label="Export" icon="@Embed(source='../../../assets/tables_add.png')" paddingLeft="10"
                     paddingTop="10" paddingBottom="10"
                     paddingRight="10">
                <mx:Button id="createFeedButton" toolTip="Create Derived Data Source" click="createFeed()"
                           icon="@Embed(source='../../../assets/data_add.png')"/>
                <mx:Button id="embedButton" toolTip="Embed" click="embed()"
                           icon="@Embed(source='../../../assets/link.png')"/>
                <mx:Button id="imageButton" toolTip="Export PNG Image"
                           icon="@Embed(source='../../../assets/camera.png')" click="exportPNG()"/>
                <mx:Button id="excelButton" toolTip="Export to Excel"
                           icon="@Embed(source='../../../assets/table.png')" click="exportExcel()"/>

                <mx:Button id="netvibesButton" toolTip="Add to netvibes"
                           icon="@Embed(source='../../../assets/uwa-netvibes.png')" click="netvibes()"/>
                <mx:Button id="igoogleButton" toolTip="Add to iGoogle"
                           icon="@Embed(source='../../../assets/uwa-google.png')" click="igoogle()"/>
            </mx:HBox>
        </mx:TabNavigator>

        <mx:HDividedBox id="hbox1" height="100%" width="100%">
            <mx:VBox height="100%" width="240" id="leftHandBox">

                <analysis:AnalysisStatePopupButton analysisStateChange="onAnalysisStateChange(event)" id="analysisState"
                                                   mode="all"/>

                <mx:VBox height="100%" width="100%" verticalGap="0" borderThickness="1" borderColor="#DCE2F8"
                         borderStyle="solid" dropShadowEnabled="true">
                    <mx:Box width="100%" height="5" backgroundColor="#10319A" left="0" right="0"/>
                    <mx:Box width="100%" backgroundColor="#3B56AF" horizontalAlign="center">
                        <mx:Label text="{dataSourceName}" color="0xFFFFFF"/>
                    </mx:Box>
                    <mx:AdvancedDataGrid width="100%" height="100%" dragEnabled="true" iconFunction="iconFunction"
                                         id="Measure" backgroundColor="#FFFFFF"
                                         alternatingItemColors="#FFFFFF" fontSize="12" rowHeight="28"
                                         itemDoubleClick="onItemDoubleClick(event)"
                                         dragComplete="onDragComplete(event)" mouseDown="onDragStart()"
                                         mouseUp="onDragEnd()">
                        <mx:dataProvider>
                            <mx:HierarchicalData source="{availableFields}"/>
                        </mx:dataProvider>
                        <mx:columns>
                            <mx:AdvancedDataGridColumn dataField="displayName" headerText=""
                                    />
                        </mx:columns>
                    </mx:AdvancedDataGrid>
                </mx:VBox>
            </mx:VBox>
            <mx:VBox width="100%" height="100%" id="dataControlVBox"/>
        </mx:HDividedBox>
    </mx:VBox>
    <mx:StringValidator id="analysisNameValidator" source="{analysisNameInput}" property="text" minLength="3"
                        maxLength="40"/>
</core:FullScreenPage>
