<?xml version="1.0" encoding="utf-8"?>
<core:FullScreenPage xmlns:core="com.easyinsight.*" xmlns:mx="http://www.adobe.com/2006/mxml"
                     xmlns:analysis="com.easyinsight.analysis.*"
                     xmlns:datasources="com.easyinsight.datasources.*"
                     creationComplete="initializeForWorksheet()" width="100%"
                     height="100%"
                     xmlns:util="com.easyinsight.util.*"
                     xmlns:filtering="com.easyinsight.filtering.*"
                     xmlns:feed="com.easyinsight.administration.feed.*" doubleClickEnabled="true"
                     backgroundImage="{background2}" backgroundSize="100%"
                     paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10" backgroundColor="#DCE2F8"
                     removedFromStage="cleanupStage()"
        implements="com.easyinsight.framework.IFullScreenPage">
    <core:states>
        <mx:State name="NotLoggedIn">
            <mx:RemoveChild target="{saveButton}"/>
            <mx:RemoveChild target="{saveAsButton}"/>
        </mx:State>
        <mx:State name="Professional">

        </mx:State>
        <mx:State name="Group" basedOn="Professional">

        </mx:State>
        <mx:State name="Individual" basedOn="Group">
            <!--<mx:RemoveChild target="{createFeedButton}"/>-->
        </mx:State>
        <mx:State name="Free" basedOn="Individual">

        </mx:State>
    </core:states>
    <mx:Script>
		<![CDATA[
        import com.easyinsight.account.Account;
        import com.easyinsight.analysis.AddedItemUpdateEvent;
        import com.easyinsight.analysis.AnalysisChangedEvent;
        import com.easyinsight.analysis.AnalysisItemCopyEvent;
        import com.easyinsight.analysis.AnalysisItemNode;
        import com.easyinsight.analysis.AnalysisItemTypeRenderer;
        import com.easyinsight.analysis.AnalysisUtil;
        import com.easyinsight.analysis.AvailableFieldRenderer;
        import com.easyinsight.analysis.ControllerLookup;
        import com.easyinsight.analysis.DataServiceEvent;
        import com.easyinsight.analysis.FeedNode;
        import com.easyinsight.analysis.HierarchyDrilldownEvent;
        import com.easyinsight.analysis.AnalysisStateChangeEvent;
        import com.easyinsight.analysis.DataViewFactory;
        import com.easyinsight.analysis.HierarchyRollupEvent;
        import com.easyinsight.analysis.IReportController;
        import com.easyinsight.analysis.ReportEditorFieldEvent;
        import com.easyinsight.analysis.ReportEditorHelp;
        import com.easyinsight.analysis.ReportSizingEvent;
        import com.easyinsight.analysis.list.ListController;
        import com.easyinsight.analysis.UserCapabilities;
        import com.easyinsight.datasources.DataSourceInfo;
        import com.easyinsight.framework.InvalidFieldsEvent;
        import com.easyinsight.framework.LoginEvent;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.listing.DescriptorAnalyzeSource;
        import com.easyinsight.listing.FeedAdminAnalyzeSource;
        import com.easyinsight.preferences.UIConfiguration;
        import com.easyinsight.report.MultiReportAnalyzeSource;
        import com.easyinsight.report.ReportAnalyzeSource;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.ErrorReportView;
        import com.easyinsight.util.PNGEnc;
        import com.easyinsight.util.PopUpUtil;

        import mx.binding.utils.BindingUtils;
        import mx.binding.utils.ChangeWatcher;
        import mx.collections.Sort;
        import mx.events.DragEvent;
        import mx.events.ListEvent;

        import com.easyinsight.analysis.AnalysisItemWrapper;
        import com.easyinsight.analysis.AnalysisCloseEvent;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.util.ProgressAlert;
        import com.easyinsight.commands.CommandEvent;

        import mx.utils.ObjectUtil;
        import mx.utils.URLUtil;
        import mx.managers.BrowserManager;
        import mx.controls.Alert;
        import mx.events.CloseEvent;

        import com.easyinsight.commands.CommandProcessor;
        import com.easyinsight.framework.DataServiceLoadingEvent;
        import com.easyinsight.framework.DataService;
        import com.easyinsight.analysis.SavedAnalysisEvent;
        import com.easyinsight.framework.User;
        import com.easyinsight.filtering.TransformsUpdatedEvent;
        import com.easyinsight.feedassembly.CompositeFeedCreatedEvent;

        import mx.managers.PopUpManager;

        import com.easyinsight.filtering.FilterDefinition;
        import com.easyinsight.filtering.FilterRawData;
        import com.easyinsight.analysis.FeedMetadata;
        import com.easyinsight.framework.CredentialsCache;

        import mx.collections.ArrayCollection;

        import com.easyinsight.analysis.AnalysisDefinition;

        private function cleanupStage():void {
            stage.removeEventListener(KeyboardEvent.KEY_UP, onKey);
        }

        [Bindable]
        [Embed(source="../../../assets/background2.JPG")]
        private var background2:Class;

        [Bindable]
        public var dataService:DataService;

        [Bindable]
        private var availableFields:ArrayCollection;


        private var _dataSourceInfo:DataSourceInfo;


        [Bindable(event="dataSourceInfoChanged")]
        public function get dataSourceInfo():DataSourceInfo {
            return _dataSourceInfo;
        }

        public function set dataSourceInfo(value:DataSourceInfo):void {
            if (_dataSourceInfo == value) return;
            _dataSourceInfo = value;
            dispatchEvent(new Event("dataSourceInfoChanged"));
        }

        [Bindable]
        private var selectedMode:int;

        private var _analysisDefinition:AnalysisDefinition;

        [Bindable]
        private var _previewMode:Boolean = false;

        [Bindable]
        private var saveAsEnabled:Boolean;

        [Bindable]
        private var admin:Boolean;

        public var filterOverrides:ArrayCollection = null;

        private var feedMetadata:FeedMetadata;

        [Bindable]
        private var dataView:DataViewFactory;

        private var commandProcessor:CommandProcessor;

        [Bindable]
        private var canSubscribeToInsight:Boolean;

        [Bindable]
        private var canAddInsightToGroup:Boolean;

        [Bindable]
        private var canSubscribeToFeed:Boolean;

        [Bindable]
        private var canAddFeedToGroup:Boolean;

        [Bindable]
        private var wrappers:ArrayCollection;

        private var analysisChanged:Boolean = false;

        [Bindable]
        private var canMultiViewAnalysis:Boolean;

        [Bindable]
        private var dataSourceName:String;

        [Bindable]
        private var dataSourceID:int;

        [Bindable]
        private var _reportID:int;

        [Bindable]
        private var originSolution:int;

        private var _tutorialOnStart:int;

        public function set tutorialOnStart(value:int):void {
            _tutorialOnStart = value;
        }

        private var loading:Boolean = false;

        public function set previewMode(previewMode:Boolean):void {
            this._previewMode = previewMode;
            this.dataService.previewMode = previewMode;
        }

        public function onInvalidFields(event:InvalidFieldsEvent):void {
            transformContainer.invalidateItems(event.invalidAnalysisItemIDs);
            dataView.invalidateItems(event.invalidAnalysisItemIDs);
            availableFields = new ArrayCollection();
            for each (var feedNode:FeedNode in event.feedMetadata.fieldHierarchy) {
                var analysisWrapper:AnalysisItemWrapper = new AnalysisItemWrapper(feedNode);
                availableFields.addItem(analysisWrapper);
            }
            dataView.availableFields = availableFields;
            Alert.show("The underlying data to this data source has been changed, so some fields may have been removed from your filters or report.");
            dataView.retrieveData();
        }

        private function onAnalysisStateChange(event:AnalysisStateChangeEvent):void {
            var controller:IReportController = event.controller;
            loadController(controller);
        }

        private function onDataReturn(event:DataServiceEvent):void {
            this.dataSourceInfo = event.dataSource;
        }

        private function loadController(controller:IReportController, shareDataSourceSettings:Boolean = false):void {
            var dataViewFactory:DataViewFactory = controller.createDataView();
            dataViewFactory.availableFields = wrappers;
            if (dataView != null) {
                dataView.removeEventListener(DataServiceLoadingEvent.LOADING_STARTED, startLoading);
                dataView.removeEventListener(DataServiceLoadingEvent.LOADING_STOPPED, stopLoading);
                dataView.removeEventListener(AnalysisChangedEvent.ANALYSIS_CHANGED, onAnalysisChanged);
                dataView.removeEventListener(DataServiceEvent.DATA_RETURNED, onDataReturn);
                dataControlVBox.removeChild(dataView);
                viewWatcher.unwatch();
            }
            if (analysisDefinition == null) {
                this.analysisDefinition = dataViewFactory.createNewDefinition();
                analysisDefinition.canSaveDirectly = true;
                analysisDefinition.visibleAtFeedLevel = shareDataSourceSettings;
                analysisDefinition.dataFeedID = dataService.dataFeedID;
            } else {
                analysisDefinition = dataViewFactory.fromExistingDefinition(analysisDefinition);
                dataViewFactory.analysisDefinition = analysisDefinition;
            }
            dataView = dataViewFactory;
            dataView.dataSourceID = dataService.dataFeedID;
            dataView.addEventListener(DataServiceLoadingEvent.LOADING_STARTED, startLoading);
            dataView.addEventListener(DataServiceLoadingEvent.LOADING_STOPPED, stopLoading);
            dataView.addEventListener(AnalysisChangedEvent.ANALYSIS_CHANGED, onAnalysisChanged);
            dataView.addEventListener(DataServiceEvent.DATA_RETURNED, onDataReturn);
            viewWatcher = BindingUtils.bindProperty(dataViewFactory, "adHocMode", adHocButton, "adHoc");
            dataControlVBox.addChild(dataViewFactory);
            dataViewFactory.retrieveData();
        }

        private var viewWatcher:ChangeWatcher;

        public function newAnalysis(shareDataSourceSettings:Boolean):void {
            var controller:IReportController = new ListController();
            loadController(controller, shareDataSourceSettings);
        }


        [Bindable(event="analysisDefinitionChanged")]
        public function get analysisDefinition():AnalysisDefinition {
            return _analysisDefinition;
        }

        public function set analysisDefinition(value:AnalysisDefinition):void {
            if (_analysisDefinition == value) return;
            _analysisDefinition = value;
            dispatchEvent(new Event("analysisDefinitionChanged"));
        }

        public function set reportID(val:int):void {
            _reportID = val;
        }

        public function openAnalysis(analysisDefinition:AnalysisDefinition):void {
            BrowserManager.getInstance().setTitle("Easy Insight - " + analysisDefinition.name);
            this.analysisDefinition = analysisDefinition;

            //analysisPolicy = analysisDefinition.policy;
        }

        private function onLogin(event:LoginEvent):void {
            setState();
            User.getEventNotifier().removeEventListener(LoginEvent.LOGIN, onLogin);
        }

        private function setState():void {
            switch (User.getInstance().getAccountType()) {
                case Account.PREMIUM:
                    currentState = "Professional";
                    break;
                case Account.PRO:
                    currentState = "Group";
                    break;
                case Account.BASIC:
                case Account.PLUS:
                    currentState = "Individual";
                    break;
                case Account.PERSONAL:
                    currentState = "Free";
                    break;
            }
        }

        private function goAdmin():void {
            if (analysisChanged) {
                Alert.show("You have unsaved changes. Are you sure you want to go to data source administration?", "Alert",
                        Alert.OK | Alert.CANCEL, null, adminAlertListener, null, Alert.CANCEL);
            } else {
                dispatchEvent(new AnalyzeEvent(new FeedAdminAnalyzeSource(dataService.dataFeedID)));
            }
        }

        private function adminAlertListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                dispatchEvent(new AnalyzeEvent(new FeedAdminAnalyzeSource(dataService.dataFeedID)));
            }
        }

        private function onMetadataReceipt(feedMetadata:FeedMetadata):void {
            try {
                if (User.getInstance() == null) {
                    currentState = "NotLoggedIn";
                    User.getEventNotifier().addEventListener(LoginEvent.LOGIN, onLogin);
                } else {
                    setState();
                }

                dataSourceID = feedMetadata.dataFeedID;
                this.feedMetadata = feedMetadata;
                dataSourceInfo = feedMetadata.dataSourceInfo;
                this.originSolution = feedMetadata.originSolution;
                this.admin = feedMetadata.dataSourceAdmin;
                dataSourceName = this.feedMetadata.dataSourceName;
                availableFields = new ArrayCollection();
                wrappers = new ArrayCollection();
                for each (var feedNode:FeedNode in feedMetadata.fieldHierarchy) {
                    var analysisWrapper:AnalysisItemWrapper = new AnalysisItemWrapper(feedNode);
                    if (!analysisWrapper.hidden) {
                        availableFields.addItem(analysisWrapper);
                    }
                }
                for each (var listItem:AnalysisItem in feedMetadata.fields) {
                    var analysisNode:AnalysisItemNode = new AnalysisItemNode();
                    analysisNode.analysisItem = listItem;
                    var wrapper:AnalysisItemWrapper = new AnalysisItemWrapper(analysisNode);
                    wrappers.addItem(wrapper);
                }

                if (analysisDefinition == null || analysisDefinition.analysisID == 0) {
                    var fragmentObject:Object = new Object();
                    fragmentObject.feedID = String(feedMetadata.urlKey);
                    var fragmentString:String = URLUtil.objectToString(fragmentObject);
                    BrowserManager.getInstance().setFragment(fragmentString);
                } else {
                    var feedFragmentObject:Object = new Object();
                    feedFragmentObject.analysisID = String(analysisDefinition.urlKey);
                    var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
                    BrowserManager.getInstance().setFragment(feedFragmentString);
                }

                if (analysisDefinition == null) {
                    saveAsEnabled = false;
                    newAnalysis(User.getInstance().defaultReportSharing);
                    for each (var filter:FilterDefinition in feedMetadata.intrinsicFilters) {
                        transformContainer.addFilterDefinition(filter);
                    }


                } else {
                    //this.title = analysisDefinition.name;
                    saveAsEnabled = !_previewMode;
                    var controllerClass:Class = ControllerLookup.controllerForType(analysisDefinition.type);
                    var controller:IReportController = new controllerClass();
                    loadController(controller);

                    analysisState.selectedLabel = analysisDefinition.type;


                    if (analysisDefinition.filterDefinitions == null) {
                        analysisDefinition.filterDefinitions = new ArrayCollection();
                    }
                    if (filterOverrides != null) {
                        analysisDefinition.filterDefinitions = filterOverrides;
                    }
                    createFilterBoxes(analysisDefinition.filterDefinitions.toArray());

                    // add the fields which are specifically added in the context of the report, such as
                    // calculations and hierarchies
                    if (analysisDefinition.addedItems != null) {
                        for each (var item:AnalysisItem in analysisDefinition.addedItems) {
                            var analysisItemNode:AnalysisItemNode = new AnalysisItemNode();
                            analysisItemNode.analysisItem = item;
                            var addedWrapper:AnalysisItemWrapper = new AnalysisItemWrapper(analysisItemNode);
                            availableFields.addItem(addedWrapper);
                            wrappers.addItem(addedWrapper);
                        }
                        sortFields();
                    }
                }
                dataView.availableFields = wrappers;
                loading = false;
                stopLoading(null);
                if (_tutorialOnStart > 0) {
                    tutorial();
                }
            } catch(e:Error) {
                var errorWindow:ErrorReportView = new ErrorReportView();
                errorWindow.error = e;
                PopUpManager.addPopUp(errorWindow, this, true);
                PopUpUtil.centerPopUp(errorWindow);
            }
        }

        private function sortFields():void {
            var sort:Sort = new Sort();
            sort.compareFunction = customSort;
            availableFields.sort = sort;
            availableFields.refresh();
            wrappers.sort = sort;
            wrappers.refresh();
        }

        private function customSort(obj1:Object, obj2:Object, fields:Array = null):int {
            var wrapper1:AnalysisItemWrapper = obj1 as AnalysisItemWrapper;
            var wrapper2:AnalysisItemWrapper = obj2 as AnalysisItemWrapper;
            if (wrapper1.isAnalysisItem() && !wrapper2.isAnalysisItem()) {
                return 1;
            } else if (!wrapper1.isAnalysisItem() && wrapper2.isAnalysisItem()) {
                return -1;
            } else {
                return ObjectUtil.stringCompare(wrapper1.displayName, wrapper2.displayName, true);
            }
        }

        public function deleteItem(item:AnalysisItem):void {
            var index:int = 0;
            for each (var wrapper:AnalysisItemWrapper in availableFields) {
                if (wrapper.analysisItem.analysisItemID == item.analysisItemID) {
                    break;
                }
                index++;
            }
            availableFields.removeItemAt(index);
        }

        public function getAnalysisItems():ArrayCollection {
            var analysisItems:ArrayCollection = new ArrayCollection();
            for each (var analysisItemWrapper:AnalysisItemWrapper in wrappers) {
                analysisItems.addItem(analysisItemWrapper.analysisItem);
            }
            return analysisItems;
        }

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }

        private function onAnalysisChanged(event:AnalysisChangedEvent):void {
            this.analysisChanged = true;
        }

        // tutorial ramifications...
        // we need a good tooltip rendering
        // we need to be able to selectively disable the various parts
        // we have to be able to look for key events that will trigger the next stage of the tutorial


        public function initializeForWorksheet():void {
            try {
                loading = true;
                uiConfig();
                rendererFactory = new ClassFactory(AvailableFieldRenderer);
                commandProcessor = new CommandProcessor();
                addEventListener(ReportEditorFieldEvent.ITEM_ADD_TO_REPORT, addFieldToReport);
                addEventListener(ReportEditorFieldEvent.ITEM_COPY, fieldEventHandler.copyField);
                addEventListener(ReportEditorFieldEvent.ITEM_DELETE, fieldEventHandler.deleteField);
                addEventListener(ReportEditorFieldEvent.ITEM_EDIT, fieldEventHandler.editField);
                addEventListener(ReportEditorFieldEvent.ITEM_FILTER, filterField);
                addEventListener(AnalysisChangedEvent.ANALYSIS_CHANGED, onAnalysisChanged);
                addEventListener(AddedItemUpdateEvent.UPDATE, onFieldUpdate);
                addEventListener(AnalysisItemCopyEvent.ITEM_COPY, onCopy);
                addEventListener(AnalysisItemDeleteEvent.ANALYSIS_ITEM_DELETE, onAnalysisItemDelete);
                addEventListener(CommandEvent.COMMAND, onCommand);
                stage.addEventListener(KeyboardEvent.KEY_UP, onKey, false, 0, true);
                addEventListener(HierarchyDrilldownEvent.DRILLDOWN, childFilterCreation);
                addEventListener(HierarchyRollupEvent.HIERARCHY_ROLLUP, onRollup);
                dataService.addEventListener(DataServiceLoadingEvent.LOADING_STARTED, startLoading);
                dataService.addEventListener(DataServiceLoadingEvent.LOADING_STOPPED, stopLoading);
                dataService.addEventListener(InvalidFieldsEvent.INVALID_FIELDS, onInvalidFields);
                transformContainer.addEventListener(TransformsUpdatedEvent.UPDATED_TRANSFORMS, transformsUpdated);
                try {
                    var hints:String = User.getSharedObject().data["reportHints"];
                    if (hints == null || hints == "y") {
                        fieldIndex = 1;
                    } else {
                        fieldIndex = 0;
                    }
                } catch(e:Error) {
                }
                startLoading(null);
                if (_reportID > 0) {
                    ProgressAlert.alert(this, "Retrieving the report...", null, analysisService.openAnalysisDefinition);
                    analysisService.openAnalysisDefinition.send(_reportID);
                } else {
                    initializeState();
                }
            } catch(e:Error) {
                var errorWindow:ErrorReportView = new ErrorReportView();
                errorWindow.error = e;
                PopUpManager.addPopUp(errorWindow, this, true);
                PopUpUtil.centerPopUp(errorWindow);
            }
        }

        private function hideHints():void {
            try {
                User.getSharedObject().data["reportHints"] = "n";
                User.getSharedObject().flush();
            } catch(e:Error) {
            }
            fieldIndex = 0;
        }

        private function restoreHints(event:Event):void {
            try {
                User.getSharedObject().data["reportHints"] = "y";
                User.getSharedObject().flush();
            } catch(e:Error) {
            }
            fieldIndex = 1;
        }

        private function uiConfig():void {
            try {
                if (User.getInstance().uiConfiguration != null) {
                    var uiConfig:UIConfiguration = User.getInstance().uiConfiguration;
                    if (!uiConfig.getConfiguration(UIConfiguration.SHOW_ADMIN_DATA_SOURCES).selected) {
                        controlBar.removeChild(adminButton);
                    }
                    if (uiConfig.getConfiguration(UIConfiguration.SHOW_DATA_TAB).selected) {
                        if (!uiConfig.getConfiguration(UIConfiguration.SHOW_CALCULATION).selected) reportDataTab.removeCalculationButton();
                        if (!uiConfig.getConfiguration(UIConfiguration.SHOW_HIERARCHY).selected) reportDataTab.removeHierarchy();
                        if (!uiConfig.getConfiguration(UIConfiguration.SHOW_REPORT_EDITOR_API).selected) reportDataTab.removeAPI();
                        if (!uiConfig.getConfiguration(UIConfiguration.SHOW_TEXT_REPLACES).selected) reportDataTab.removeScrubs();
                    } else {
                        tabNavigator.removeChild(reportDataTab);
                    }
                    if (!uiConfig.getConfiguration(UIConfiguration.SHOW_FILTER_BUTTONS).selected) {
                        transformContainer.removeChild(filterButton);
                        transformContainer.removeChild(excludeButton);
                    }
                    if (uiConfig.getConfiguration(UIConfiguration.SHOW_EXPORT).selected) {
                        if (!uiConfig.getConfiguration(UIConfiguration.SHOW_DLS).selected) exportTab.removeDLS();
                        if (!uiConfig.getConfiguration(UIConfiguration.SHOW_PNG).selected) exportTab.removePNG();
                        if (!uiConfig.getConfiguration(UIConfiguration.SHOW_EMBED).selected) exportTab.removeEmbed();
                        if (!uiConfig.getConfiguration(UIConfiguration.SHOW_NETVIBES).selected) exportTab.removeNetvibes();
                        if (!uiConfig.getConfiguration(UIConfiguration.SHOW_IGOOGLE).selected) exportTab.removeIGoogle();
                    } else {
                        tabNavigator.removeChild(exportTab);
                    }
                }
            } catch(e:Error) {
            }
        }

        private function addFieldToReport(event:ReportEditorFieldEvent):void {
            dataView.addItem(event.item.analysisItem);
            dispatchEvent(new AnalysisChangedEvent(false));
        }

        private function filterField(event:ReportEditorFieldEvent):void {
            transformContainer.createNewFilter(event.item.analysisItem, event.x, event.y);
            tabNavigator.selectedIndex = 2;
        }

        private function gotReport():void {
            this.analysisDefinition = analysisService.openAnalysisDefinition.lastResult as AnalysisDefinition;
            BrowserManager.getInstance().setTitle("Easy Insight - " + this.analysisDefinition.name);
            //analysisPolicy = this.analysisDefinition.policy;
            initializeState();
        }

        private function initializeState():void {
            if (analysisDefinition != null) {
                ProgressAlert.alert(this, "Retrieving security metadata...", null, analysisService.getUserCapabilitiesForInsight, detailService.getCredentialRequirements);
                analysisService.getUserCapabilitiesForInsight.send(dataService.dataFeedID, analysisDefinition.analysisID);
            } else {
                ProgressAlert.alert(this, "Retrieving security metadata...", null, analysisService.getUserCapabilitiesForFeed, detailService.getCredentialRequirements);
                analysisService.getUserCapabilitiesForFeed.send(dataService.dataFeedID);
            }
            // need to identify credential requirements at this point...

            //dataService.reloadInitialContent(this, onMetadataReceipt);
            detailService.getCredentialRequirements.send(dataService.dataFeedID);
        }

        private function onCredentials():void {
            dataService.reloadInitialContent(this, onMetadataReceipt);
        }

        private function gotCredentialRequirements():void {
            var requirements:ArrayCollection = detailService.getCredentialRequirements.lastResult as ArrayCollection;
            CredentialsCache.getCache().obtainCredentials(this, requirements, onCredentials);
        }

        private function onRollup(event:HierarchyRollupEvent):void {
            transformContainer.clearFilter(event.analysisItem);
        }

        private function childFilterCreation(event:HierarchyDrilldownEvent):void {
            transformContainer.processRawFilterData(event.filterRawData, event.type == HierarchyDrilldownEvent.DRILLDOWN);
        }

        private function onKey(event:KeyboardEvent):void {
            if (event.ctrlKey && event.shiftKey) {
                if (event.keyCode == 90) {
                    redo();
                }
            } else if (event.ctrlKey) {
                if (event.keyCode == 90) {
                    undo();
                }
            } else if (event.keyCode == Keyboard.F1) {
                tabNavigator.selectedIndex = 0;
            } else if (event.keyCode == Keyboard.F2) {
                tabNavigator.selectedIndex = 1;
            } else if (event.keyCode == Keyboard.F3) {
                tabNavigator.selectedIndex = 2;
            } else if (event.keyCode == Keyboard.F4) {
                tabNavigator.selectedIndex = 3;
            } else if (event.keyCode == Keyboard.F5) {
                focusManager.setFocus(analysisState.p2);
                analysisState.openPopup();
            }
        }

        private function createFilterBoxes(filters:Array):void {
            if (filters != null) {
                transformContainer.loadingFromReport = true;
                for (var i:int = 0; i < filters.length; i++) {
                    var filterDefinition:FilterDefinition = filters[i];
                    transformContainer.addFilterDefinition(filterDefinition);
                }
                transformContainer.loadingFromReport = false;
            }
        }

        private function createFilter():void {
            var filterRawData:FilterRawData = dataView.createFilterRawData();
            if (filterRawData.keys == null || filterRawData.keys.length == 0) {
                Alert.show("Select items from the grid, click this button, and the report will filter down to that set of items.");
            }
            dispatchEvent(new AnalysisChangedEvent());
            transformContainer.processRawFilterData(filterRawData, true);
        }

        private function getFilterDefinitions():Array {
            return transformContainer.getFilterDefinitions().toArray();
        }

        private function compositeFeedCreated(event:CompositeFeedCreatedEvent):void {
            dataService.dataFeedID = event.compositeFeedID;
            analysisDefinition.dataFeedID = event.compositeFeedID;
            dataService.reloadInitialContent(this, onMetadataReceipt);
        }

        private function exclude():void {
            var filterRawData:FilterRawData = dataView.createFilterRawData();
            if (filterRawData.keys == null || filterRawData.keys.length == 0) {
                Alert.show("Select items from the grid, click this button, and the report will create an exclusive filter to remove those items.");
            }
            transformContainer.processRawFilterData(filterRawData, false);
        }

        private function transformsUpdated(event:TransformsUpdatedEvent):void {
            analysisDefinition.filterDefinitions = event.filterDefinitions;
            dataView.retrieveData();
        }

        private function closeWindow():void {
            PopUpManager.removePopUp(this);
        }

        private function save():void {
            var user:User = User.getInstance();
            if (analysisDefinition.canSaveDirectly) {
                var results:Array = reportMetadataTab.updateReport();
                reportSharingTab.updateReport();
                var valid:Boolean = results.length == 0;
                if (valid) {
                    if (dataView.isDataValid()) {
                        dataView.updateExportMetadata();
                        ProgressAlert.alert(this, "Saving the report...", "Saved!", analysisService.saveAnalysisDefinition);
                        analysisService.saveAnalysisDefinition(analysisDefinition);
                    } else {
                        Alert.show("You need to configure the fields of this report before you can saving.");
                    }
                } else {
                    tabNavigator.selectedIndex = 0;
                }
            } else {
                Alert.show("You are not allowed to directly modify this report--use Save As instead.");
            }
        }

        private function saved():void {
            var savedDef:AnalysisDefinition = analysisService.saveAnalysisDefinition.lastResult as AnalysisDefinition;
            AnalysisUtil.updateReport(analysisDefinition, savedDef);
            var feedFragmentObject:Object = new Object();
            feedFragmentObject.analysisID = String(savedDef.urlKey);
            var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
            BrowserManager.getInstance().setFragment(feedFragmentString);
            reportSaveable = true;
            this.analysisChanged = false;
            saveAsEnabled = true;
        }

        private function saveAs():void {
            // if we're in admin mode, this should be disabled...
            var saveDialog:SaveDialog = SaveDialog(PopUpManager.createPopUp(this, SaveDialog, true));
            dataView.updateExportMetadata();
            saveDialog.analysisDefinition = analysisDefinition;
            saveDialog.addEventListener(SavedAnalysisEvent.SAVED_ANALYSIS, savedAnalysis);
            PopUpUtil.centerPopUp(saveDialog);
        }

        private function savedAnalysis(event:SavedAnalysisEvent):void {
            //title = event.title;
            reportMetadataTab.updateName(event.report.name);
            var feedFragmentObject:Object = new Object();
            feedFragmentObject.analysisID = String(event.report.urlKey);
            var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
            BrowserManager.getInstance().setFragment(feedFragmentString);
            BrowserManager.getInstance().setTitle("Easy Insight - " + event.report.name);
            this.analysisChanged = false;
        }

        private function startLoading(event:DataServiceLoadingEvent):void {
        }

        private function stopLoading(event:DataServiceLoadingEvent):void {
        }

        protected function geticon(item:Object):Class {
            return item["icon"];
        }


        private function undo():void {
            commandProcessor.undo();
        }

        private function redo():void {
            commandProcessor.redo();
        }

        override public function cleanup():void {
            removeEventListener(CommandEvent.COMMAND, onCommand);
            if (stage != null)
                stage.removeEventListener(KeyboardEvent.KEY_UP, onKey);
            removeEventListener(AnalysisChangedEvent.ANALYSIS_CHANGED, onAnalysisChanged);
            removeEventListener(HierarchyDrilldownEvent.DRILLDOWN, childFilterCreation);
            removeEventListener(HierarchyRollupEvent.HIERARCHY_ROLLUP, onRollup);
            reportMetadataTab.cleanup();
            if (dataService != null) {
                dataService.removeEventListener(DataServiceLoadingEvent.LOADING_STARTED, startLoading);
                dataService.removeEventListener(DataServiceLoadingEvent.LOADING_STOPPED, stopLoading);
                dataService.removeEventListener(InvalidFieldsEvent.INVALID_FIELDS, onInvalidFields);
            }
            if (transformContainer != null) {
                transformContainer.removeEventListener(TransformsUpdatedEvent.UPDATED_TRANSFORMS, transformsUpdated);
            }
            if (dataView != null) {
                dataView.removeEventListener(DataServiceLoadingEvent.LOADING_STARTED, startLoading);
                dataView.removeEventListener(DataServiceLoadingEvent.LOADING_STOPPED, stopLoading);
                dataView.removeEventListener(AnalysisChangedEvent.ANALYSIS_CHANGED, onAnalysisChanged);
                dataView.removeEventListener(DataServiceEvent.DATA_RETURNED, onDataReturn);
                dataView.cleanup();
            }
        }

        private function close():void {
            if (analysisChanged) {
                Alert.show("You have unsaved changes. Are you sure you want to exit?", "Alert",
                        Alert.OK | Alert.CANCEL, null, alertListener, null, Alert.CANCEL);
            } else {
                dispatchEvent(new AnalysisCloseEvent(this));
            }
        }

        private function alertListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                dispatchEvent(new AnalysisCloseEvent(this));
            }
        }


        [Bindable]
        private var reportSaveable:Boolean;

        private function gotUserCapabilitiesForFeed():void {
            var userCapabilities:UserCapabilities = analysisService.getUserCapabilitiesForFeed.lastResult as UserCapabilities;
            canSubscribeToFeed = userCapabilities.feedRole > 3;
            canAddFeedToGroup = userCapabilities.groupMember;
            canMultiViewAnalysis = userCapabilities.reportingAvailable;
        }

        private function onCopy(event:AnalysisItemCopyEvent):void {
            dispatchEvent(new AnalysisChangedEvent());


            var wrapper:AnalysisItemWrapper;
            if (event.wrapper == null) {
                var node:AnalysisItemNode = new AnalysisItemNode();
                node.analysisItem = event.analysisItem;
                wrapper = new AnalysisItemWrapper(node);
            } else {
                wrapper = event.wrapper;
            }

            availableFields.addItem(wrapper);
            wrappers.addItem(wrapper);
            if (analysisDefinition.addedItems == null) {
                analysisDefinition.addedItems = new ArrayCollection();
            }
            analysisDefinition.addedItems.addItem(event.analysisItem);
        }

        private function onFieldUpdate(event:AddedItemUpdateEvent):void {
            availableFields.removeItemAt(availableFields.getItemIndex(event.wrapper));
            availableFields.addItem(event.wrapper);
            analysisDefinition.addedItems.removeItemAt(analysisDefinition.addedItems.getItemIndex(event.previousItem));
            analysisDefinition.addedItems.addItem(event.newItem);
        }

        private function gotUserCapabilitiesForInsight():void {
            var userCapabilities:UserCapabilities = analysisService.getUserCapabilitiesForInsight.lastResult as UserCapabilities;
            reportSaveable = userCapabilities.groupMember;
            canSubscribeToFeed = userCapabilities.feedRole > 3;
            canSubscribeToInsight = userCapabilities.analysisRole > 3;
            canAddFeedToGroup = userCapabilities.groupMember;
            canAddInsightToGroup = userCapabilities.groupMember;
            canMultiViewAnalysis = userCapabilities.reportingAvailable;
        }

        private function subscribedToFeed():void {
            canSubscribeToFeed = false;
            Alert.show("This data source will now show in your My Data page.");
        }


        private function onItemDoubleClick(event:ListEvent):void {
            var field:AnalysisItemWrapper = event.currentTarget.selectedItem as AnalysisItemWrapper;
            if (field.isAnalysisItem()) {
                dataView.addItem(field.analysisItem);
                dispatchEvent(new AnalysisChangedEvent(false));
            }
        }

        private function onDragComplete(event:DragEvent):void {
            event.preventDefault();
            transformContainer.closeDropMessage();
        }

        private function onDragStart():void {
            if (tabNavigator.selectedIndex == 2) {
                transformContainer.showDropMessage();
            }
        }

        private function onDragEnd():void {
            transformContainer.closeDropMessage();
        }

        private function iconFunction(item:Object):Class {
            var wrapper:AnalysisItemWrapper = item as AnalysisItemWrapper;
            return AnalysisItemTypeRenderer.getImageClass(wrapper);
        }

        private function toReports():void {
            if (analysisChanged) {
                Alert.show("You have unsaved changes. Are you sure you want to go to reports?", "Alert",
                        Alert.OK | Alert.CANCEL, null, multiReportAlertListener, null, Alert.CANCEL);
            } else {
                dispatchEvent(new AnalyzeEvent(new MultiReportAnalyzeSource(dataService.dataFeedID)));
            }
        }

        private function multiReportAlertListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                dispatchEvent(new AnalyzeEvent(new MultiReportAnalyzeSource(dataService.dataFeedID)));
            }
        }

        private function goReport():void {
            if (analysisDefinition.analysisID == 0) {
                Alert.show("You need to save this report first.");
            } else if (analysisChanged) {
                Alert.show("You have unsaved changes. Are you sure you want to go to reports?", "Alert",
                        Alert.OK | Alert.CANCEL, null, goReportListener, null, Alert.CANCEL);
            } else {
                var report:InsightDescriptor = new InsightDescriptor();
                report.dataFeedID = dataService.dataFeedID;
                report.id = analysisDefinition.analysisID;
                report.name = analysisDefinition.name;
                report.reportType = analysisDefinition.reportType;
                dispatchEvent(new AnalyzeEvent(new ReportAnalyzeSource(report)));
            }
        }

        private function goReportListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var report:InsightDescriptor = new InsightDescriptor();
                report.dataFeedID = dataService.dataFeedID;
                report.id = analysisDefinition.analysisID;
                report.name = analysisDefinition.name;
                report.reportType = analysisDefinition.reportType;
                dispatchEvent(new AnalyzeEvent(new ReportAnalyzeSource(report)));
            }
        }


        private function newReport():void {
            if (analysisChanged) {
                Alert.show("You have unsaved changes. Are you sure you want to create a new report?", "Alert",
                        Alert.OK | Alert.CANCEL, null, newReportListener, null, Alert.CANCEL);
            } else {
                dispatchEvent(new AnalyzeEvent(new DescriptorAnalyzeSource(dataService.dataFeedID, dataSourceName)));
            }
        }

        private function newReportListener(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                dispatchEvent(new AnalyzeEvent(new DescriptorAnalyzeSource(dataService.dataFeedID, dataSourceName)));
            }
        }

        private function onReportSizing(event:ReportSizingEvent):void {
            if (event.width > 0) {
                dataView.width = event.width;
            } else {
                dataView.width = 0;
                dataView.percentWidth = 100;
            }
        }

        private function onAnalysisItemDelete(event:AnalysisItemDeleteEvent):void {
            var wrapperIndex:int = wrappers.getItemIndex(event.analysisItem);
            if (wrapperIndex != -1) {
                wrappers.removeItemAt(wrapperIndex);
            }
            var availableFieldIndex:int = availableFields.getItemIndex(event.analysisItem);
            if (availableFieldIndex != -1) {
                availableFields.removeItemAt(availableFieldIndex);
            }
            var addedIndex:int = analysisDefinition.addedItems.getItemIndex(event.analysisItem.analysisItem);
            if (addedIndex != -1) {
                analysisDefinition.addedItems.removeItemAt(addedIndex);
            }
        }

        [Bindable]
        private var fieldsIndex:int = 0;

        private function tutorial():void {
            var window:ReportEditorHelp = new ReportEditorHelp();
            window.addEventListener("restoreHints", restoreHints, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function editToggle():void {
            if (fieldsIndex == 0) {
                leftHandBox.width = leftHandBox.width + 150;
                fieldsIndex = 1;
            } else {
                leftHandBox.width = leftHandBox.width - 150;
                fieldsIndex = 0;
            }
        }

        [Bindable]
        private var fieldIndex:int = 0;

        [Bindable]
        private var rendererFactory:IFactory;
        ]]>
    </mx:Script>
    <mx:RemoteObject id="analysisService" destination="analysisDefinition">
        <mx:method name="saveAnalysisDefinition" result="saved()"/>
        <mx:method name="openAnalysisDefinition" result="gotReport()"/>
        <mx:method name="getUserCapabilitiesForFeed" result="gotUserCapabilitiesForFeed()"/>
        <mx:method name="getUserCapabilitiesForInsight" result="gotUserCapabilitiesForInsight()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="detailService" destination="data">
        <mx:method name="getCredentialRequirements" result="gotCredentialRequirements()"/>
    </mx:RemoteObject>
    <analysis:AnalysisItemEventHandler id="fieldEventHandler" dataSourceID="{dataService.dataFeedID}" analysisItems="{wrappers}"/>
    <mx:VBox height="100%" width="100%" id="reportEditor" disabledOverlayAlpha=".275">
        <mx:HBox verticalAlign="middle" id="controlBar">
            <mx:Button id="wrapButton" icon="@Embed(source='../../../assets/document_out.png')" click="close()"
               toolTip="Close"/>
                <!--<mx:VRule strokeColor="#DDDDDD" height="16"/>
                        <mx:Button id="undoButton" icon="@Embed(source='../../../assets/undo.png')" click="undo()" toolTip="Undo"/>
                        <mx:Button id="redoButton" icon="@Embed(source='../../../assets/redo.png')" click="redo()" toolTip="Redo"/>-->
            <mx:VRule strokeColor="#DDDDDD" height="16"/>
            <mx:Button id="saveButton" icon="@Embed(source='../../../assets/floppy_disk.png')" click="save()"
                       toolTip="Save" enabled="{!_previewMode}"/>
            <mx:Button id="saveAsButton" icon="@Embed(source='../../../assets/save_as.png')" click="saveAs()"
                       toolTip="Save As" enabled="{saveAsEnabled}"/>
            <mx:VRule strokeColor="#DDDDDD" height="16"/>
            <mx:Button id="refreshButton" toolTip="Refresh Data"
               icon="@Embed(source='../../../assets/refresh.png')"
               click="dataView.forceRetrieve()"/>
            <analysis:AdHocMode id="adHocButton" modeChange="dataView.forceRetrieve()"/>
            <mx:VRule strokeColor="#DDDDDD" height="16"/>
            <mx:Button id="dataSourceButton" toolTip="Create a New Report from Data Source"
                       icon="@Embed(source='../../../assets/table.png')" click="newReport()"/>
            <mx:Button id="reportsButton" icon="@Embed(source='../../../assets/tables_x16.png')" click="toReports()"
                       toolTip="View All Reports for Data Source" enabled="{!_previewMode &amp;&amp; canMultiViewAnalysis}"/>
            <mx:Button id="reportButton" icon="@Embed(source='../../../assets/media_play_green.png')" click="goReport()"
                       toolTip="View Report"/>
            <mx:Button id="adminButton" icon="@Embed(source='../../../assets/businessman_edit.png')" click="goAdmin()"
                       toolTip="Adminster" visible="{admin}"/>
            <mx:Button icon="@Embed(source='../../../assets/help.png')"
                       click="tutorial()" toolTip="Help!"/>
        </mx:HBox>
        <mx:TabNavigator id="tabNavigator" width="100%" creationPolicy="all" enabled="{!_previewMode}" paddingTop="0"
                         paddingBottom="0"
                         paddingLeft="0" paddingRight="0" resizeToContent="true">
            <analysis:ReportMetadataTab id="reportMetadataTab" analysisDefinition="{analysisDefinition}"  dataSourceInfo="{dataSourceInfo}"
                    dataView="{dataView}"/>
            <analysis:ReportDataTab id="reportDataTab" analysisDefinition="{analysisDefinition}" dataService="{dataService}"
                    wrappers="{wrappers}" availableFields="{availableFields}"
                    dataView="{dataView}" reportSizing="onReportSizing(event)" analysisItemEdit="sortFields()"
                    dataSourceID="{dataService.dataFeedID}"/>
            <filtering:TransformContainer id="transformContainer" paddingLeft="10" paddingTop="10" paddingBottom="10"
                                          paddingRight="10" label="Filters" icon="@Embed(source='../../../assets/funnel.png')"
                                          width="100%" height="100%" backgroundColor="#ffffff" backgroundAlpha=".1"
                                          feedID="{dataService.dataFeedID}"
                                          analysisItems="{wrappers}" minHeight="40">
                <mx:Button id="filterButton" icon="@Embed(source='../../../assets/funnel_new.png')"
                           toolTip="Filter Data" click="createFilter()"/>
                <mx:Button id="excludeButton" icon="@Embed(source='../../../assets/funnel_delete.png')"
                           toolTip="Exclude Data" click="exclude()"/>
            </filtering:TransformContainer>
            <analysis:ExportTab analysisDefinition="{analysisDefinition}" dataView="{dataView}" id="exportTab"/>
            <analysis:ReportSharingTab analysisDefinition="{analysisDefinition}" originSolution="{originSolution}" id="reportSharingTab"
                    reportSaveable="{reportSaveable}" canSubscribeToFeed="{canSubscribeToFeed}" canAddFeedToGroup="{canAddFeedToGroup}"
                    canSaveToMyData="{canSubscribeToInsight}" dataService="{dataService}"/>
            
        </mx:TabNavigator>

        <mx:HDividedBox id="hbox1" height="100%" width="100%">
            <mx:VBox height="100%" width="240" id="leftHandBox">

                <analysis:AnalysisStatePopupButton analysisStateChange="onAnalysisStateChange(event)" id="analysisState"
                                                   mode="all"/>

                <mx:VBox height="100%" width="100%" verticalGap="0" borderThickness="1" borderColor="#DCE2F8"
                         borderStyle="solid" dropShadowEnabled="true">
                    <mx:Canvas width="100%" height="5" backgroundColor="#10319A" left="0" right="0"/>
                    <mx:Box width="100%" backgroundColor="#3B56AF" horizontalAlign="center" verticalAlign="middle" height="28">
                        <mx:Label text="{dataSourceName}" color="0xFFFFFF"/>
                    </mx:Box>
                    <mx:ViewStack selectedIndex="{fieldIndex}" resizeToContent="true" width="100%">
                        <mx:Box/>
                        <mx:VBox width="100%" horizontalAlign="center" backgroundColor="#FFFFFF" verticalGap="0">
                            <mx:TextArea width="100%" editable="false" selectable="false" borderStyle="none" backgroundAlpha="0" height="80"
                                         text="You can drag the fields below into the report areas to the right. You can click on the arrow to the left of folders to see more fields. You can also right click on the fields to add to the report or create new filters."/>
                            <mx:LinkButton label="Hide" textDecoration="underline" fontSize="12" click="hideHints()"/>
                        </mx:VBox>
                    </mx:ViewStack>
                    <mx:AdvancedDataGrid width="100%" height="100%" dragEnabled="true" iconFunction="iconFunction"
                                 id="fieldGrid" backgroundColor="#FFFFFF"
                                 alternatingItemColors="#FFFFFF" fontSize="12" rowHeight="28"
                                 itemDoubleClick="onItemDoubleClick(event)"
                                 dragComplete="onDragComplete(event)" mouseDown="onDragStart()"
                                 mouseUp="onDragEnd()" showHeaders="false" groupItemRenderer="{rendererFactory}">
                        <mx:dataProvider>
                            <mx:HierarchicalData source="{availableFields}"/>
                        </mx:dataProvider>
                        <mx:columns>
                            <mx:AdvancedDataGridColumn headerText="" dataField="displayName"/>                            
                        </mx:columns>
                    </mx:AdvancedDataGrid>
                </mx:VBox>
            </mx:VBox>
            <mx:VBox width="100%" height="100%" id="dataControlVBox"/>
        </mx:HDividedBox>
    </mx:VBox>
</core:FullScreenPage>
