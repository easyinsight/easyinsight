<?xml version="1.0" ?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:yahoo="http://www.yahoo.com/astra/2006/mxml"
         xmlns:util="com.easyinsight.util.*" creationComplete="setupListeners()"
         borderThickness="1" borderColor="0x000000" borderStyle="solid" dropShadowEnabled="true"
         backgroundColor="0xECE9D8" xmlns:viewStackEffects="org.efflex.mx.viewStackEffects.*">
    <mx:Script><![CDATA[
        import mx.collections.ArrayCollection;
        import mx.controls.List;
        import mx.managers.PopUpManager;

        private var _descriptors:ArrayCollection;

        private var error:Boolean = false;

        private var descriptorMap:Object = new Object();

        private var keyRun:Boolean = false;

        [Bindable]
        [Embed(source="../../../../assets/chart_column.png")]
        private var reportIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/data_blue_x16.png")]
        private var dataSourceIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/branchx16.png")]
        private var goalTreeIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/package.png")]
        private var packageIcon:Class;

        [Bindable]
        private var factory:ClassFactory;                     


        [Bindable(event="descriptorsChanged")]
        public function get descriptors():ArrayCollection {
            return _descriptors;
        }

        public function set descriptors(value:ArrayCollection):void {
            if (_descriptors == value) return;
            _descriptors = value;
            dispatchEvent(new Event("descriptorsChanged"));
        }

        private function setupListeners():void {
            factory = new ClassFactory(List);
            factory.properties = { iconField: "icon" };
            focusManager.setFocus(searchInput);
            stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown, false, 0, true);
            searchInput.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
            if (descriptors == null) {
                feedService.getDescriptors.send();
            } else {
                for each (var descriptor:EIDescriptor in descriptors) {
                    descriptorMap[descriptor.name] = descriptor;
                    if (descriptor.getType() == EIDescriptor.DATA_SOURCE) {
                        descriptor.icon = dataSourceIcon;
                    } else if (descriptor.getType() == EIDescriptor.GOAL_TREE) {
                        descriptor.icon = goalTreeIcon;
                    } else if (descriptor.getType() == EIDescriptor.PACKAGE) {
                        descriptor.icon = packageIcon;
                    } else {
                        descriptor.icon = reportIcon;
                    }
                }
                searchInput.enabled = true;
            }
        }

        private function onKeyDown(event:KeyboardEvent):void {
            if (!keyRun && event.keyCode == Keyboard.ESCAPE) {
                keyRun = true;
                stage.removeEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
                dispatchEvent(new QuickSearchEvent(QuickSearchEvent.QUICK_SEARCH_CANCEL));
                PopUpManager.removePopUp(this);
            } else if (event.keyCode == Keyboard.ENTER) {
                var descriptor:EIDescriptor = descriptorMap[searchInput.text];
                if (descriptor == null) {
                    error = true;
                    searchInput.setStyle("color", "red");
                    //noMatchesLabel.setStyle("color", "red");
                } else {
                    if (!keyRun) {
                        keyRun = true;
                        dispatchEvent(new QuickSearchEvent(QuickSearchEvent.QUICK_SEARCH, descriptor));
                        PopUpManager.removePopUp(this);
                    }
                }
            }
        }

        private function onCompletionClose():void {
            
            var descriptor:EIDescriptor = descriptorMap[searchInput.text];
            if (descriptor != null && !keyRun) {
                keyRun = true;
                stage.removeEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
                dispatchEvent(new QuickSearchEvent(QuickSearchEvent.QUICK_SEARCH, descriptor));
                PopUpManager.removePopUp(this);
            }
        }

        private function gotDescriptors():void {
            descriptors = feedService.getDescriptors.lastResult as ArrayCollection;
            for each (var descriptor:EIDescriptor in descriptors) {
                descriptorMap[descriptor.name] = descriptor;
                if (descriptor.getType() == EIDescriptor.DATA_SOURCE) {
                    descriptor.icon = dataSourceIcon;
                } else if (descriptor.getType() == EIDescriptor.GOAL_TREE) {
                    descriptor.icon = goalTreeIcon;
                } else if (descriptor.getType() == EIDescriptor.PACKAGE) {
                    descriptor.icon = packageIcon;
                } else {
                    descriptor.icon = reportIcon;
                }
            }
            searchInput.enabled = true;
            viewStack.selectedIndex = 1;
        }

        private function onChange():void {
            if (error) {
                searchInput.setStyle("color", 0x000000);
                //noMatchesLabel.setStyle("color", 0x000000);
            }
            if (searchInput.text == "") {
                //noMatchesLabel.visible = false;
            } else {
                var descriptor:EIDescriptor = descriptorMap[searchInput.text];
                //noMatchesLabel.visible = descriptor == null;
            }
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="feeds" id="feedService">
        <mx:method name="getDescriptors" result="gotDescriptors()"/>
    </mx:RemoteObject>
    <viewStackEffects:Slide id="slideEffect" direction="down"/>
    <util:AutoCompleteManager id="autoCompleteManager" target="{searchInput}" dataProvider="{descriptors}"
                              labelField="name" minCharsForCompletion="1" close="onCompletionClose()"
                              popUpRenderer="{factory}"/>
    <mx:ViewStack creationPolicy="all" id="viewStack" width="240" height="55">
        <mx:HBox width="225" height="50" verticalAlign="middle" horizontalAlign="center" hideEffect="{slideEffect}">
            <mx:ProgressBar indeterminate="true" label="Retrieving items..."/>
        </mx:HBox>
        <mx:VBox showEffect="{slideEffect}">
            <mx:HBox verticalAlign="middle" width="225">
                <mx:Label text="Enter name:" fontWeight="bold" fontFamily="Tahoma" fontSize="13"/>
                <!--<mx:Label text="(no matches found)" id="noMatchesLabel" visible="false"/>-->
            </mx:HBox>
            <mx:TextInput id="searchInput" width="100%" enabled="false" change="onChange()"/>
        </mx:VBox>
    </mx:ViewStack>
</mx:VBox>