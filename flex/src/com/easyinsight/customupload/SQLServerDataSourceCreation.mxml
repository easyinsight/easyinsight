<?xml version="1.0" ?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" implements="com.easyinsight.customupload.IServerDataSourceCreation">
    <mx:Metadata>
		[Event(name="userConfigComplete", type="com.easyinsight.customupload.UploadConfigEvent")]
		[Event(name="userConfigCancel", type="com.easyinsight.customupload.UploadConfigEvent")]
	</mx:Metadata>
    <mx:Script><![CDATA[
        import com.easyinsight.administration.feed.FeedDefinitionData;
        import com.easyinsight.datasources.DataSourceType;
        import com.easyinsight.datasources.SQLServerDatabaseConnection;
        import com.easyinsight.solutions.DataSourceDescriptor;

        import mx.collections.ArrayCollection;

        import mx.controls.Button;
        import mx.controls.ComboBox;
        import mx.validators.Validator;

        [Bindable]
        private var host:String;
        [Bindable]
        private var port:String;
        [Bindable]
        private var databaseName:String;
        [Bindable]
        private var userName:String;
        [Bindable]
        private var query:String;

        private var sourceExists:Boolean = false;

        override protected function createChildren():void {
            super.createChildren();
            if (sourceExists) {
                vbox.removeChild(nameForm);
                vbox.removeChild(nameRule);
            }
            feedService.searchForSubscribedFeeds.send();
        }

        public function setupButton(button:Button):Function {
            return null;
        }

        public function get dataSourceDefinition():FeedDefinitionData {
            var obj:SQLServerDatabaseConnection = new SQLServerDatabaseConnection();
            obj.host = hostInput.text;
            obj.port = int(portInput.text);
            obj.databaseName = databaseNameInput.text;
            obj.dbUserName = databaseUserNameInput.text;
            obj.dbPassword = databasePasswordInput.text;
            obj.query = queryArea.text;
            obj.feedName = nameInput.text;
            obj.rebuildFields = true;
            obj.timeout = timeoutInput.value;
            obj.copyingFromSource = copyingFrom;
            obj.instanceName = instanceNameInput.text;
            return obj;
        }

        private function gotDataSources():void {
            var sources:ArrayCollection = feedService.searchForSubscribedFeeds.lastResult as ArrayCollection;
            var valids:ArrayCollection = new ArrayCollection();
            for each (var source:DataSourceDescriptor in sources) {
                if (source.dataSourceType == DataSourceType.MYSQL_SERVER) {
                    valids.addItem(source);
                }
            }
            if (valids.length > 0) {
                var existingFormItem:FormItem = new FormItem();
                existingFormItem.setStyle("labelWidth", 200);
                existingFormItem.label = "Existing Sources:";
                var existingComboBox:ComboBox = new ComboBox();
                var ph:Object = { name: "[ Select a Data Source to Copy Configuration ]", id: 0};
                valids.addItemAt(ph, 0);
                existingComboBox.dataProvider = valids;
                existingComboBox.labelField = "name";
                existingComboBox.selectedItem = ph;
                existingFormItem.addChild(existingComboBox);
                existingComboBox.addEventListener(Event.CHANGE, onChange);
                coreForm.addChildAt(existingFormItem, 0);
            }
        }

        private function onChange(event:Event):void {
            var comboBox:ComboBox = event.currentTarget as ComboBox;
            var ds:DataSourceDescriptor = comboBox.selectedItem as DataSourceDescriptor;
            if (ds != null) {
                feedService.getFeedDefinition.send(ds.id);
            }
        }

        private function gotDataSource():void {
            var dataSource:SQLServerDatabaseConnection = feedService.getFeedDefinition.lastResult as SQLServerDatabaseConnection;
            host = dataSource.host;
            port = String(dataSource.port);
            databaseName = dataSource.databaseName;
            userName = dataSource.dbUserName;
            password = "not really";
            copyingFrom = dataSource.dataFeedID;
            instanceName = dataSource.instanceName;
        }

        [Bindable]
        private var password:String;

        [Bindable]
        private var instanceName:String;

        private var copyingFrom:int;

        public function set dataSourceDefinition(feedDefinition:FeedDefinitionData):void {
            var ds:SQLServerDatabaseConnection = feedDefinition as SQLServerDatabaseConnection;
            host = ds.host;
            instanceName = ds.instanceName;
            port = String(ds.port);
            databaseName = ds.databaseName;
            userName = ds.dbUserName;
            query = ds.query;
            connTimeout = ds.timeout;
        }

        public function updateDataSource(feedDefinition:FeedDefinitionData):void {
            var obj:SQLServerDatabaseConnection = feedDefinition as SQLServerDatabaseConnection;
            obj.host = hostInput.text;
            obj.port = int(portInput.text);
            obj.databaseName = databaseNameInput.text;
            obj.instanceName = instanceNameInput.text;
            obj.dbUserName = databaseUserNameInput.text;
            obj.dbPassword = databasePasswordInput.text;
            obj.query = queryArea.text;
            obj.feedName = nameInput.text;
            obj.rebuildFields = true;
            obj.timeout = timeoutInput.value;
            obj.copyingFromSource = copyingFrom;
        }

        public function validate():Boolean {
            return Validator.validateAll([nameValidator, hostValidator, portValidator, databaseNameValidator, queryValidator]).length == 0;
        }

        [Bindable]
        private var connTimeout:int = 5;
        ]]></mx:Script>
    <mx:RemoteObject id="feedService" destination="feeds">
        <mx:method name="searchForSubscribedFeeds" result="gotDataSources()"/>
        <mx:method name="getFeedDefinition" result="gotDataSource()"/>
    </mx:RemoteObject>
    <mx:VBox horizontalAlign="center" paddingTop="5" id="vbox">
        <mx:Form id="nameForm">
            <mx:FormItem label="Data Source Name:" labelWidth="200">
                <mx:TextInput id="nameInput" fontWeight="normal" fontFamily="Lucida Grande"  width="350"/>
            </mx:FormItem>
        </mx:Form>
        <mx:HRule width="100%" id="nameRule"/>
        <mx:Form id="coreForm">
            <mx:FormItem label="Database Host:" labelWidth="200">
                <mx:TextInput id="hostInput" fontWeight="normal" fontFamily="Lucida Grande" text="{host}" width="350"/>
            </mx:FormItem>
            <mx:FormItem label="Database Port:" labelWidth="200">
                <mx:TextInput id="portInput" fontWeight="normal" fontFamily="Lucida Grande" text="{port}" width="350"/>
            </mx:FormItem>
            <mx:FormItem label="Database Name:" labelWidth="200">
                <mx:TextInput id="databaseNameInput" fontWeight="normal" fontFamily="Lucida Grande" text="{databaseName}" width="350"/>
            </mx:FormItem>
            <mx:FormItem label="Database User Name:" labelWidth="200">
                <mx:TextInput id="databaseUserNameInput" fontWeight="normal" fontFamily="Lucida Grande" text="{userName}" width="350"/>
            </mx:FormItem>
            <mx:FormItem label="Database Password:" labelWidth="200">
                <mx:TextInput id="databasePasswordInput" fontWeight="normal" fontFamily="Lucida Grande" width="350" displayAsPassword="true" text="{password}"/>
            </mx:FormItem>
            <mx:FormItem label="Instance Name:" labelWidth="200">
                <mx:TextInput id="instanceNameInput" fontWeight="normal" fontFamily="Lucida Grande" width="350"/>
            </mx:FormItem>
            <mx:FormItem label="Connection Timeout (minutes):" labelWidth="200">
                <mx:NumericStepper id="timeoutInput" fontWeight="normal" fontFamily="Lucida Grande" value="{connTimeout}" maximum="30"/>
            </mx:FormItem>
        </mx:Form>
        <mx:HRule width="100%"/>
        <mx:Form>
            <mx:FormItem label="Query:" labelWidth="200">
                <mx:TextArea id="queryArea" fontWeight="normal" fontFamily="Lucida Grande" width="350" text="{query}" height="110"
                        borderStyle="solid" borderThickness="1"/>
            </mx:FormItem>
        </mx:Form>
    </mx:VBox>
    <mx:VBox horizontalAlign="center">
        <mx:Text width="200" selectable="true" text="For the server side database connection to work, you'll need to open up your firewall to allow access on the database port to db.easy-insight.com (107.21.250.229). If you can't allow access through the firewall, you'll need to download and use the alternate database connection, hosting that behind your firewall. If you're running on the Amazon Web Services cloud, the configuration will be a little different--please contact us at support@easy-insight.com or (720) 285-8652 and we'll work with you to complete setup."/>
        <mx:HRule width="100%"/>
        <mx:Text width="200" selectable="true" text="The query defines what fields and data to pull back into Easy Insight. For example, you might do 'select * from table_name', 'select a, b from table_name' or 'select a as A, b as B from table_name where X = Y'."/>
    </mx:VBox>
    <mx:StringValidator id="nameValidator" minLength="1" source="{nameInput}" property="text"/>
    <mx:StringValidator id="hostValidator" minLength="1" source="{hostInput}" property="text"/>
    <mx:NumberValidator id="portValidator" source="{portInput}" property="text"/>
    <mx:StringValidator id="databaseNameValidator" minLength="1" source="{databaseNameInput}" property="text"/>
    <mx:StringValidator id="queryValidator" minLength="1" source="{queryArea}" property="text"/>
</mx:HBox>