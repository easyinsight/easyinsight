<?xml version="1.0" ?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setupListeners()">
    <mx:Script><![CDATA[
        import com.easyinsight.administration.feed.CredentialsResponse;
        import com.easyinsight.administration.feed.FeedDefinitionData;

        import com.easyinsight.datasources.IServerDataSourceDefinition;
        import com.easyinsight.framework.User;
        import com.easyinsight.listing.DataFeedDescriptor;
        import com.easyinsight.framework.CredentialsCache;

        import mx.controls.Alert;
        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;

        private function updateFault(event:FaultEvent):void {
            Alert.show(event.fault.faultString);
        }

        private function onKey(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.ENTER) {
                validate();
            }
        }

        private function setupListeners():void {
            stage.addEventListener(KeyboardEvent.KEY_UP, onKey);
        }

        private var _dataSourceClass:Class;
        private var dataSourceCreation:IServerDataSourceCreation;
        private var _dataSourceID:int;
        private var _dataSourceDefinition:FeedDefinitionData;

        private var _onlyDataSource:Boolean;

        [Bindable]
        private var ready:Boolean;


        private var _credentialsSaved:Boolean = false;

        [Bindable(event="credentialsSavedChanged")]
        public function get credentialsSaved():Boolean {
            return _credentialsSaved;
        }

        public function set credentialsSaved(value:Boolean):void {
            if (_credentialsSaved == value) return;
            _credentialsSaved = value;
            dispatchEvent(new Event("credentialsSavedChanged"));
        }

        public function set onlyDataSource(value:Boolean):void {
            _onlyDataSource = value;
        }

        override protected function createChildren():void {
            super.createChildren();
            if (_dataSourceDefinition == null) {
                feedService.getFeedDefinition.send(_dataSourceID);
            } else {
                ready = true;
                dataSourceCreation = new _dataSourceClass();
                coreContent.addChild(dataSourceCreation as DisplayObject);
            }
        }

        private function gotDataSource():void {
            dataSourceDefinition = feedService.getFeedDefinition.lastResult as FeedDefinitionData;
            ready = true;
            var configClass:Class = (dataSourceDefinition as IServerDataSourceDefinition).configClass();
            dataSourceCreation = new configClass();
            coreContent.addChild(dataSourceCreation as DisplayObject);
        }

        public function set dataSourceID(value:int):void {
            _dataSourceID = value;
        }

        public function get dataSourceDefinition():FeedDefinitionData {
            return _dataSourceDefinition;
        }

        public function set dataSourceDefinition(value:FeedDefinitionData):void {
            _dataSourceDefinition = value;
        }

        private function validate():void {
            progressBar.visible = true;
            dataSourceCreation.updateDataSource(dataSourceDefinition);
            uploadService.validateCredentials.send(dataSourceDefinition, dataSourceCreation.credentials, saveCredentialsCheckbox.selected);
        }

        private function validated():void {
            var validation:CredentialsResponse = uploadService.validateCredentials.lastResult as CredentialsResponse;
            if (validation.successful) {
                if (validation.encryptedResponse) {
                    User.saveCredentials(dataSourceDefinition.dataFeedID, dataSourceCreation.credentials);
                }
                //dataSourceDefinition.refreshDataInterval = (dailyRefresh.selected ? 1 : 0) * 24 * 1000 * 60 * 60;
                dataSourceCreation.updateDataSource(dataSourceDefinition);
                feedService.updateFeedDefinition.send(dataSourceDefinition, "", null);
            } else {
                progressBar.visible = false;
                Alert.show(validation.failureMessage);
            }
        }

        private function created():void {
            CredentialsCache.getCache().addCredentials(dataSourceDefinition.dataFeedID, dataSourceCreation.credentials);
            uploadService.refreshData.send(dataSourceDefinition.dataFeedID, dataSourceCreation.credentials, credentialsSaved, true);
        }

        private function refreshed():void {
            progressBar.visible = true;
            var response:CredentialsResponse = uploadService.refreshData.lastResult as CredentialsResponse;
            if (response.successful) {
                var descriptor:DataFeedDescriptor = new DataFeedDescriptor();
                descriptor.dataFeedID = dataSourceDefinition.dataFeedID;
                descriptor.name = dataSourceDefinition.feedName;
                dispatchEvent(new DataSourceConfiguredEvent(descriptor));
                stage.removeEventListener(KeyboardEvent.KEY_UP, onKey);
                PopUpManager.removePopUp(this);
            } else {
                Alert.show(response.failureMessage);
            }
        }

        public function set dataSourceClass(value:Class):void {
            _dataSourceClass = value;
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="userUpload" id="uploadService">
        <mx:method name="validateCredentials" result="validated()"/>
        <mx:method name="refreshData" result="refreshed()"/>
    </mx:RemoteObject>
    <mx:RemoteObject destination="feeds" id="feedService">
        <mx:method name="updateFeedDefinition" result="created()" fault="updateFault(event)" />
        <mx:method name="getFeedDefinition" result="gotDataSource()"/>
    </mx:RemoteObject>
    <mx:Form>
        <mx:FormItem label="">
            <mx:Label text="Now that you've installed this solution, you need to configure it:" fontSize="14"/>
        </mx:FormItem>
        <mx:Box id="coreContent"/>
        <mx:FormItem label="" direction="vertical">
            <mx:ProgressBar id="progressBar" indeterminate="true" visible="false"/>
        </mx:FormItem>
        <mx:FormItem label="Save Credentials:" enabled="{ready}" direction="horizontal">
            <mx:HBox verticalAlign="middle">
            <mx:CheckBox id="saveCredentialsCheckbox"/>
            <mx:Label text="Security Note" fontSize="10" textDecoration="underline" toolTip="Your credentials will be saved in an encrypted form on your local system, so do not do this if you're using a public machine."/>
            </mx:HBox>
        </mx:FormItem>
        <!--<mx:FormItem label="Daily Refresh:" enabled="{credentialsSaved}">
            <mx:CheckBox id="dailyRefresh"/>
        </mx:FormItem>-->
        <mx:FormItem label="" direction="horizontal">
            <mx:Button label="Create" click="validate()" enabled="{ready}"/>
            <mx:Button label="Cancel" click="stage.removeEventListener(KeyboardEvent.KEY_UP, onKey); PopUpManager.removePopUp(this)"/>
        </mx:FormItem>
	</mx:Form>
</mx:TitleWindow>