<?xml version="1.0" ?>
<util:EISlimWindow xmlns:util="com.easyinsight.util.*" xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setupListeners()">
    <mx:Script><![CDATA[
        import com.easyinsight.administration.feed.CallData;
        import com.easyinsight.administration.feed.CredentialsResponse;
        import com.easyinsight.administration.feed.FeedDefinitionData;
        import com.easyinsight.analysis.ReportFault;
        import com.easyinsight.datasources.IServerDataSourceDefinition;
        import com.easyinsight.scorecard.DataSourceAsyncEvent;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.util.PopUpUtil;

        import mx.controls.Alert;
        import mx.core.UIComponent;
        import mx.events.FlexEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;

        private function updateFault(event:FaultEvent):void {
            Alert.show(event.fault.faultString);
        }

        private function onKey(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.ENTER) {
                validate(null);
            }
        }

        private function setupListeners():void {
            stage.addEventListener(KeyboardEvent.KEY_UP, onKey, false, 0, true);
        }

        private var _dataSourceClass:Class;
        private var dataSourceCreation:IServerDataSourceCreation;
        private var _dataSourceID:int;
        private var _dataSourceDefinition:FeedDefinitionData;

        [Bindable]
        private var ready:Boolean;

        override protected function createChildren():void {
            super.createChildren();
            ready = true;
            _dataSourceClass = IServerDataSourceDefinition(dataSourceDefinition).configClass();
            _dataSourceID = dataSourceDefinition.dataFeedID;
            dataSourceCreation = new _dataSourceClass();
            dataSourceCreation.dataSourceDefinition = dataSourceDefinition;
            var uicomp:UIComponent = dataSourceCreation as UIComponent;
            uicomp.addEventListener(FlexEvent.CREATION_COMPLETE, onCreation);
            var blah:Function = dataSourceCreation.setupButton(createButton);
            if (blah == null) {
                createButton.label = "Create";
                createButton.addEventListener(MouseEvent.CLICK, validate);
            }
            coreContent.addChild(dataSourceCreation as DisplayObject);
        }

        private var createFunction:Function;

        private function onCreation(event:FlexEvent):void {
            PopUpUtil.centerPopUp(this);
        }

        private function onDataCreation(event:FlexEvent):void {
            PopUpUtil.centerPopUp(this);
        }

        public function set dataSourceID(value:int):void {
            _dataSourceID = value;
        }

        public function get dataSourceDefinition():FeedDefinitionData {
            return _dataSourceDefinition;
        }

        public function set dataSourceDefinition(value:FeedDefinitionData):void {
            _dataSourceDefinition = value;
        }

        private function validate(event:MouseEvent):void {
            if (createFunction == null) {
                if (dataSourceCreation.validate()) {
                    ready = false;
                    progressBar.visible = true;
                    dataSourceCreation.updateDataSource(dataSourceDefinition);
                    uploadService.validateCredentials.send(dataSourceDefinition);
                }
            } else {
                createFunction.apply(dataSourceCreation);
            }
        }

        private function validated():void {
            var validation:CredentialsResponse = uploadService.validateCredentials.lastResult as CredentialsResponse;
            if (validation.successful) {                
                uploadService.completeInstallation.send(dataSourceDefinition);
            } else {
                ready = true;
                progressBar.visible = false;
                Alert.show(validation.failureMessage);
            }
        }

        private var callDataID:String;
        private var timer:Timer;

        private function onTimer(event:TimerEvent):void {
            asyncService.getCallData.send(callDataID);
        }

        private function gotCallData():void {
            var callData:CallData = asyncService.getCallData.lastResult as CallData;
            if (callData.status == CallData.DONE) {
                timer.stop();
                var descriptor:DataSourceDescriptor = new DataSourceDescriptor();
                descriptor.id = dataSourceDefinition.dataFeedID;
                descriptor.name = dataSourceDefinition.feedName;
                dispatchEvent(new DataSourceConfiguredEvent(descriptor));
                stage.removeEventListener(KeyboardEvent.KEY_UP, onKey);
                PopUpManager.removePopUp(this);
            } else if (callData.status == CallData.FAILED) {
                timer.stop();
                progressBar.visible = false;
                asyncLabel = "Retrieving data, this may take a few minutes...";
                ready = true;
                if (callData.result is String) {
                    Alert.show(String(callData.statusMessage));
                } else if (callData.result is ReportFault) {
                    var fault:ReportFault = callData.result as ReportFault;
                    Alert.show(fault.getMessage());
                } else {
                    Alert.show("Something went wrong in trying to retrive data. Please double check your configuration information.");
                }
            } else if (callData.status == CallData.RUNNING) {
                if (callData.result != null) {
                    var scorecardEvent:DataSourceAsyncEvent = callData.result as DataSourceAsyncEvent;
                    asyncLabel = scorecardEvent.dataSourceName;
                } else {
                    asyncLabel = "Retrieving data, this may take a few minutes...";
                }
            }
        }

        private function onCancel(event:Event):void {
            PopUpManager.removePopUp(this);
        }

        private function onProblem(event:ProblemDataEvent):void {
            uploadService.completeInstallation.send(dataSourceDefinition);
        }

        private function refreshed():void {
            var response:CredentialsResponse = uploadService.completeInstallation.lastResult as CredentialsResponse;
            if (response.successful) {
                if (response.callDataID != null) {
                    callDataID = response.callDataID;
                    timer = new Timer(5000, 0);
                    timer.addEventListener(TimerEvent.TIMER, onTimer);
                    timer.start();
                } else {
                    var descriptor:DataSourceDescriptor = new DataSourceDescriptor();
                    descriptor.id = dataSourceDefinition.dataFeedID;
                    descriptor.name = dataSourceDefinition.feedName;
                    dispatchEvent(new DataSourceConfiguredEvent(descriptor));
                    stage.removeEventListener(KeyboardEvent.KEY_UP, onKey);
                    PopUpManager.removePopUp(this);
                }
            } else {
                progressBar.visible = false;
                ready = true;
                Alert.show(response.failureMessage);
            }
        }

        private function closeWindow():void {
            if (timer != null) {
                timer.stop();
            }
            stage.removeEventListener(KeyboardEvent.KEY_UP, onKey);
            PopUpManager.removePopUp(this);
        }

        [Bindable]
        private var showCreate:Boolean = true;



        [Bindable]
        private var asyncLabel:String = "Retrieving data, this may take a few minutes...";
        ]]></mx:Script>
    <mx:RemoteObject destination="userUpload" id="uploadService">
        <mx:method name="validateCredentials" result="validated()"/>
        <mx:method name="completeInstallation" result="refreshed()"/>
    </mx:RemoteObject>
    <mx:RemoteObject destination="asyncService" id="asyncService">
        <mx:method name="getCallData" result="gotCallData()"/>
    </mx:RemoteObject>
    <mx:VBox paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
        <mx:HBox width="100%" horizontalAlign="center">
            <mx:Label text="Let's configure your connection to the external system:" fontSize="16"/>
        </mx:HBox>
        <mx:Box id="coreContent"/>
        <mx:ProgressBar id="progressBar" indeterminate="true" visible="false" label="{asyncLabel}"/>
        <mx:HBox width="100%" horizontalAlign="center">
            <util:SaveButton enabled="{ready}" styleName="grayButton" fontSize="14" visible="{showCreate}" id="createButton"/>
            <util:CancelButton label="Cancel" click="closeWindow()"
                    fontSize="14"/>
        </mx:HBox>
	</mx:VBox>
</util:EISlimWindow>