<?xml version="1.0" ?>
<util:EITitleWindow xmlns:util="com.easyinsight.util.*" xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="setupListeners()">
    <mx:Script><![CDATA[
        import com.easyinsight.administration.feed.CredentialsResponse;
        import com.easyinsight.administration.feed.FeedDefinitionData;
        import com.easyinsight.datasources.IServerDataSourceDefinition;
        import com.easyinsight.util.PopUpUtil;

        import mx.controls.Alert;
        import mx.core.UIComponent;
        import mx.events.FlexEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;

        private function updateFault(event:FaultEvent):void {
            Alert.show(event.fault.faultString);
        }

        private function onKey(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.ENTER) {
                validate();
            }
        }

        private function setupListeners():void {
            stage.addEventListener(KeyboardEvent.KEY_UP, onKey, false, 0, true);
        }

        private var _dataSourceClass:Class;
        private var dataSourceCreation:IServerDataSourceCreation;
        private var _dataSourceID:int;
        private var _dataSourceDefinition:FeedDefinitionData;

        private var _onlyDataSource:Boolean;

        [Bindable]
        private var ready:Boolean;


        private var _credentialsSaved:Boolean = false;

        [Bindable(event="credentialsSavedChanged")]
        public function get credentialsSaved():Boolean {
            return _credentialsSaved;
        }

        public function set credentialsSaved(value:Boolean):void {
            if (_credentialsSaved == value) return;
            _credentialsSaved = value;
            dispatchEvent(new Event("credentialsSavedChanged"));
        }

        public function set onlyDataSource(value:Boolean):void {
            _onlyDataSource = value;
        }

        override protected function createChildren():void {
            super.createChildren();
            if (_dataSourceDefinition == null) {
                feedService.getFeedDefinition.send(_dataSourceID);
            } else {
                ready = true;
                dataSourceCreation = new _dataSourceClass();
                var uicomp:UIComponent = dataSourceCreation as UIComponent;
                uicomp.addEventListener(FlexEvent.CREATION_COMPLETE, onCreation);
                coreContent.addChild(dataSourceCreation as DisplayObject);
            }
        }

        private function onCreation(event:FlexEvent):void {
            PopUpUtil.centerPopUp(this);
        }

        private function gotDataSource():void {
            dataSourceDefinition = feedService.getFeedDefinition.lastResult as FeedDefinitionData;
            ready = true;
            var configClass:Class = (dataSourceDefinition as IServerDataSourceDefinition).configClass();
            dataSourceCreation = new configClass();
            var dispObject:DisplayObject = dataSourceCreation as DisplayObject;
            dispObject.addEventListener(FlexEvent.CREATION_COMPLETE, onDataCreation, false, 0, true);
            coreContent.addChild(dispObject);

        }

        private function onDataCreation(event:FlexEvent):void {
            PopUpUtil.centerPopUp(this);
        }

        public function set dataSourceID(value:int):void {
            _dataSourceID = value;
        }

        public function get dataSourceDefinition():FeedDefinitionData {
            return _dataSourceDefinition;
        }

        public function set dataSourceDefinition(value:FeedDefinitionData):void {
            _dataSourceDefinition = value;
        }

        private function validate():void {
            ready = false;
            progressBar.visible = true;
            dataSourceCreation.updateDataSource(dataSourceDefinition);
            uploadService.validateCredentials.send(dataSourceDefinition);
        }

        private function validated():void {
            var validation:CredentialsResponse = uploadService.validateCredentials.lastResult as CredentialsResponse;
            if (validation.successful) {
                feedService.updateFeedDefinition.send(dataSourceDefinition, "");
            } else {
                ready = true;
                progressBar.visible = false;
                Alert.show(validation.failureMessage);
            }
        }

        private var lastMessage:Date;

        private function created():void {
            var string:String = feedService.updateFeedDefinition.lastResult as String;
            if (string == null) {
                dispatchEvent(new ProblemDataEvent());
                PopUpManager.removePopUp(this);
            } else {
                Alert.show(string);
                ready = true;
                progressBar.visible = false;
            }
        }

        public function set dataSourceClass(value:Class):void {
            _dataSourceClass = value;
        }

        [Bindable]
        private var asyncLabel:String = "Validating changes...";

        private var _problemMessage:String;

        [Bindable(event="problemMessageChanged")]
        public function get problemMessage():String {
            return _problemMessage;
        }

        public function set problemMessage(value:String):void {
            if (_problemMessage == value) return;
            _problemMessage = value;
            dispatchEvent(new Event("problemMessageChanged"));
        }]]></mx:Script>
    <mx:RemoteObject destination="userUpload" id="uploadService">
        <mx:method name="validateCredentials" result="validated()"/>
    </mx:RemoteObject>
    <mx:RemoteObject destination="feeds" id="feedService">
        <mx:method name="updateFeedDefinition" result="created()" fault="updateFault(event)" />
        <mx:method name="getFeedDefinition" result="gotDataSource()"/>
    </mx:RemoteObject>
    <mx:VBox paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
        <mx:HBox width="100%" horizontalAlign="center">
            <mx:TextArea text="{problemMessage}" fontSize="14" width="100%" editable="false" selectable="false" backgroundAlpha="0" borderStyle="none" focusEnabled="false"
                    height="60"/>
        </mx:HBox>
        <mx:Box id="coreContent"/>
        <mx:ProgressBar id="progressBar" indeterminate="false" mode="manual" visible="false" label="{asyncLabel}"/>
        <mx:HBox width="100%" horizontalAlign="center">
            <mx:Button label="Update" click="validate()" enabled="{ready}"/>
            <mx:Button label="Cancel" click="stage.removeEventListener(KeyboardEvent.KEY_UP, onKey); dispatchEvent(new Event(Event.CANCEL)); PopUpManager.removePopUp(this)"/>
        </mx:HBox>
	</mx:VBox>
</util:EITitleWindow>