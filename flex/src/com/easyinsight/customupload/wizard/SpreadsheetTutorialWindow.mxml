<?xml version="1.0" ?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*" implements="com.easyinsight.kpi.ITutorialPanel"
         width="100%" height="100%" horizontalAlign="center"
         paddingTop="20">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AggregationTypes;
        import com.easyinsight.analysis.AnalysisDateDimension;
        import com.easyinsight.analysis.AnalysisDimension;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemTypes;
        import com.easyinsight.analysis.AnalysisLatitude;
        import com.easyinsight.analysis.AnalysisList;
        import com.easyinsight.analysis.AnalysisLongitude;
        import com.easyinsight.analysis.AnalysisMeasure;
        import com.easyinsight.analysis.AnalysisZipCode;
        import com.easyinsight.analysis.formatter.FormattingConfiguration;
        import com.easyinsight.framework.User;
        import com.easyinsight.util.ProgressAlert;

        import mx.formatters.DateFormatter;

        [Bindable]
        private var labeledText:String;

        [Bindable]
        private var displayName:String;

        [Bindable]
        private var sampleValue1:String;
        [Bindable]
        private var sampleValue2:String;
        [Bindable]
        private var sampleValue3:String;

        [Bindable]
        private var resultValue1:String;
        [Bindable]
        private var resultValue2:String;
        [Bindable]
        private var resultValue3:String;

        [Bindable]
        private var initialGuessText:String;

        private var _info:FieldUploadInfo;

        private var _analysisItem:AnalysisItem;

        public function get analysisItem():AnalysisItem {
            return _analysisItem;
        }

        private var originalType:int;

        private function updateResultValues():void {
            if (sampleValue1 != null) {
                resultValue1 = _analysisItem.getFormatter().format(sampleValue1);
            }
            if (sampleValue2 != null) {
                resultValue2 = _analysisItem.getFormatter().format(sampleValue2);
            }
            if (sampleValue3 != null) {
                resultValue3 = _analysisItem.getFormatter().format(sampleValue3);
            }
        }

        protected override function commitProperties():void {
            super.commitProperties();
            var item:AnalysisItem = _info.guessedItem;
            _analysisItem = item;
            displayName = item.display;
            labeledText = "This field was labeled as " + item.display + " in the underlying data.";
            startType = String(item.getType());
            originalType = item.getType();
            if (_info.sampleValues.length > 0) {
                sampleValue1 = _info.sampleValues.getItemAt(0) as String;
            }
            if (_info.sampleValues.length > 1) {
                sampleValue2 = _info.sampleValues.getItemAt(1) as String;
            }
            if (_info.sampleValues.length > 2) {
                sampleValue3 = _info.sampleValues.getItemAt(2) as String;
            }
            var type:String = "";
            if (item.hasType(AnalysisItemTypes.DATE)) {
                type = "date";
                selectedDateLevel = AnalysisDateDimension(item).dateLevel;
                dateFormatEntry = AnalysisDateDimension(item).customDateFormat;
            } else if (item.hasType(AnalysisItemTypes.LATITUDE)) {
                type = "latitude coordinate";
            } else if (item.hasType(AnalysisItemTypes.LONGITUDE)) {
                type = "longitude coordinate";
            } else if (item.hasType(AnalysisItemTypes.LIST)) {
                type = "tag list";
            } else if (item.hasType(AnalysisItemTypes.MEASURE)) {
                type = "measure";
                selectedAggregation = AnalysisMeasure(item).aggregation;
                selectedFormatting = AnalysisMeasure(item).formattingConfiguration.formattingType;
            } else if (item.hasType(AnalysisItemTypes.ZIP_CODE)) {
                type = "zip code";
            } else {
                type = "grouping";
            }
            updateResultValues();
            determineStackIndex();
            initialGuessText = "Our initial guess is that this field is a " + type + ". In case we got that wrong, here are the available types:";
        }

        private function determineStackIndex():void {
            var type:int = int(startType);
            if (type == AnalysisItemTypes.DIMENSION) {
                stackIndex = 0;
            } else if (type == AnalysisItemTypes.MEASURE) {
                stackIndex = 1;
            } else if (type == (AnalysisItemTypes.DATE | AnalysisItemTypes.DIMENSION)) {
                stackIndex = 2;
            } else if (type == (AnalysisItemTypes.LIST | AnalysisItemTypes.DIMENSION)) {
                stackIndex = 3;
            } else if (type == (AnalysisItemTypes.ZIP_CODE | AnalysisItemTypes.DIMENSION)) {
                stackIndex = 4;
            } else if (type == (AnalysisItemTypes.LONGITUDE | AnalysisItemTypes.DIMENSION)) {
                stackIndex = 5;
            } else if (type == (AnalysisItemTypes.LATITUDE | AnalysisItemTypes.DIMENSION)) {
                stackIndex = 6;
            }
        }

        private function onTypeChange():void {
            var type:int = int(typeGroup.selectedValue);
            startType = String(type);
            determineStackIndex();
            saveValues();
            updateResultValues();
        }

        public function saveValues():void {
            var type:int = int(typeGroup.selectedValue);
            var item:AnalysisItem;
            if (type == AnalysisItemTypes.DIMENSION) {
                item = new AnalysisDimension();
            } else if (type == AnalysisItemTypes.MEASURE) {
                item = new AnalysisMeasure();
                AnalysisMeasure(item).aggregation = aggregationBox.selectedItem.data;
                AnalysisMeasure(item).formattingConfiguration.formattingType = formatBox.selectedItem.data;
            } else if (type == (AnalysisItemTypes.DATE | AnalysisItemTypes.DIMENSION)) {
                item = new AnalysisDateDimension();
                if (dateFormat != null) {
                    AnalysisDateDimension(item).customDateFormat = dateFormat.text;
                }
                AnalysisDateDimension(item).dateLevel = dateLevelBox.selectedItem.data;
                AnalysisDateDimension(item).dateOnlyField = true;
            } else if (type == (AnalysisItemTypes.LIST | AnalysisItemTypes.DIMENSION)) {
                item = new AnalysisList();
            } else if (type == (AnalysisItemTypes.ZIP_CODE | AnalysisItemTypes.DIMENSION)) {
                item = new AnalysisZipCode();
            } else if (type == (AnalysisItemTypes.LONGITUDE | AnalysisItemTypes.DIMENSION)) {
                item = new AnalysisLongitude();
            } else if (type == (AnalysisItemTypes.LATITUDE | AnalysisItemTypes.DIMENSION)) {
                item = new AnalysisLatitude();
            }
            item.concrete = _analysisItem.concrete;
            item.key = _analysisItem.key;
            item.displayName = displayNameInput.text;
            _analysisItem = item;
        }

        public function validate():Boolean {
            return true;
        }

        public function gotFocus():void {

        }

        [Bindable]
        private var dateFormatEntry:String = "yyyy-MM-dd";

        [Bindable]
        private var startType:String;

        [Bindable]
        private var selectedAggregation:int;

        [Bindable]
        private var selectedDateLevel:int = AnalysisItemTypes.DAY_LEVEL;

        [Bindable]
        private var selectedFormatting:int;

        [Bindable]
        private var stackIndex:int;

        private function testFormat():void {
            ProgressAlert.alert(this, "Testing format...", null, analysisService.testFormat);
            analysisService.testFormat.send(dateFormat.text, sampleValue1, sampleValue2, sampleValue3);
        }

        private function testedFormat():void {
            var results:ArrayCollection = analysisService.testFormat.lastResult as ArrayCollection;

            if (results.length > 0) {
                var date1:Date = results.getItemAt(0) as Date;
                if (date1 != null) {
                    resultValue1 = analysisItem.getFormatter().format(date1);
                } else {
                    resultValue1 = "";
                }
            }
            if (results.length > 1) {
                var date2:Date = results.getItemAt(1) as Date;
                if (date2 != null) {
                    resultValue2 = analysisItem.getFormatter().format(date2);
                } else {
                    resultValue2 = "";
                }
            }
            if (results.length > 2) {
                var date3:Date = results.getItemAt(2) as Date;
                if (date3 != null) {
                    resultValue3 = analysisItem.getFormatter().format(date3);
                } else {
                    resultValue3 = "";
                }
            }
        }

        public function set info(value:FieldUploadInfo):void {
            _info = value;
            _analysisItem = value.guessedItem;
        }]]></mx:Script>
    <mx:RemoteObject destination="analysisDefinition" id="analysisService">
        <mx:method name="testFormat" result="testedFormat()"/>
    </mx:RemoteObject>
    <mx:Label text="{labeledText}" fontSize="18" maxWidth="750"/>
    <mx:HBox verticalAlign="middle">
        <mx:Label text="What do you want to call this field?" fontSize="16"/>
        <mx:TextInput id="displayNameInput" text="{displayName}" fontSize="16"/>
    </mx:HBox>
    <mx:HRule width="100%"/>
    <mx:HBox verticalAlign="middle">
        <mx:Label text="Here's raw data we found for the field:" fontSize="16"/>
        <mx:VBox>
            <mx:Label text="{sampleValue1}" maxWidth="200"/>
            <mx:Label text="{sampleValue2}" maxWidth="200"/>
            <mx:Label text="{sampleValue3}" maxWidth="200"/>
        </mx:VBox>
        <mx:Label text="Which will look like this:" fontSize="16"/>
        <mx:VBox>
            <mx:Label text="{resultValue1}" maxWidth="200"/>
            <mx:Label text="{resultValue2}" maxWidth="200"/>
            <mx:Label text="{resultValue3}" maxWidth="200"/>
        </mx:VBox>
    </mx:HBox>
    <mx:HRule width="100%"/>
    <mx:TextArea text="{initialGuessText}" fontSize="16" width="700" backgroundAlpha="0" borderStyle="none"
                 editable="false" selectable="false" height="45"/>
    <mx:RadioButtonGroup id="typeGroup" change="onTypeChange()" selectedValue="{startType}"/>
    <mx:Grid>
        <mx:GridRow>
            <mx:GridItem>
                <mx:RadioButton label="Grouping" groupName="typeGroup" value="{String(AnalysisItemTypes.DIMENSION)}"
                                fontSize="16"/>
            </mx:GridItem>
            <mx:GridItem>
                <mx:RadioButton label="Measure" groupName="typeGroup" value="{String(AnalysisItemTypes.MEASURE)}"
                                fontSize="16"/>
            </mx:GridItem>
            <mx:GridItem>
                <mx:RadioButton label="Date" groupName="typeGroup"
                                value="{String(AnalysisItemTypes.DATE | AnalysisItemTypes.DIMENSION)}" fontSize="16"/>
            </mx:GridItem>
            <mx:GridItem>
                <mx:RadioButton label="Tags" groupName="typeGroup"
                                value="{AnalysisItemTypes.LIST | AnalysisItemTypes.DIMENSION}" fontSize="16"/>
            </mx:GridItem>
        </mx:GridRow>
    </mx:Grid>
    <mx:HRule width="100%"/>
    <mx:ViewStack resizeToContent="true" selectedIndex="{stackIndex}" creationPolicy="all">
        <mx:VBox>

        </mx:VBox>
        <mx:VBox>
            <mx:Form paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
                <mx:FormItem label="What do you want as the default aggregation?" fontWeight="normal" fontSize="16" fontFamily="Lucida Grande">
                    <util:SmartComboBox id="aggregationBox" labelField="label" selectedProperty="data" selectedValue="{selectedAggregation}"
                             fontWeight="normal" fontSize="16" fontFamily="Lucida Grande">
                        <util:dataProvider>
                            <mx:Array>
                                <mx:Object data="{AggregationTypes.SUM}" label="Sum"/>
                                <mx:Object data="{AggregationTypes.AVERAGE}" label="Average"/>
                                <mx:Object data="{AggregationTypes.MAX}" label="Max"/>
                                <mx:Object data="{AggregationTypes.MIN}" label="Min"/>
                            </mx:Array>
                        </util:dataProvider>
                    </util:SmartComboBox>
                </mx:FormItem>
                <mx:FormItem label="How do you want to format values?" fontWeight="normal" fontSize="16" fontFamily="Lucida Grande">
                    <util:SmartComboBox id="formatBox" labelField="label" selectedProperty="data" selectedValue="{selectedFormatting}"
                             fontWeight="normal" fontSize="16" fontFamily="Lucida Grande" change="saveValues(); updateResultValues();">
                        <util:dataProvider>
                            <mx:Array>
                                <mx:Object data="{FormattingConfiguration.NUMBER}" label="Number"/>
                                <mx:Object data="{FormattingConfiguration.CURRENCY}" label="Currency"/>
                                <mx:Object data="{FormattingConfiguration.PERCENTAGE}" label="Percentage"/>
                            </mx:Array>
                        </util:dataProvider>
                    </util:SmartComboBox>
                </mx:FormItem>
            </mx:Form>
        </mx:VBox>
        <mx:VBox>
            <mx:Form paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
                <mx:FormItem label="What unit of time should this date default to?" fontWeight="normal" fontSize="16" fontFamily="Lucida Grande">
                    <util:SmartComboBox id="dateLevelBox" labelField="label" selectedProperty="data" selectedValue="{selectedDateLevel}"
                             fontWeight="normal" fontSize="16" fontFamily="Lucida Grande" change="saveValues(); updateResultValues();">
                        <util:dataProvider>
                            <mx:Array>
                                <mx:Object data="{AnalysisItemTypes.YEAR_LEVEL}" label="Year"/>
                                <mx:Object data="{AnalysisItemTypes.MONTH_LEVEL}" label="Month"/>
                                <mx:Object data="{AnalysisItemTypes.WEEK_LEVEL}" label="Week"/>
                                <mx:Object data="{AnalysisItemTypes.DAY_LEVEL}" label="Day"/>
                            </mx:Array>
                        </util:dataProvider>
                    </util:SmartComboBox>
                </mx:FormItem>
            </mx:Form>
            <mx:HBox>
                <mx:TextArea editable="false" borderStyle="none" borderThickness="0" fontSize="10" width="300" height="80"
                                 text="The date format is specified by a pattern string. Within the pattern, letters are interpreted as the components of the date string. For example, yyyy-MM-dd for 2010-10-15. The following pattern letters are supported:"/>

                    <mx:DataGrid fontSize="10" rowCount="5" headerHeight="0">
                        <mx:ArrayCollection>
                            <mx:Array>
                                <mx:Object letter="y" meaning="Year" example="2008; 08"/>
                                <mx:Object letter="M" meaning="Month in Year" example="July; Jul; 07"/>
                                <mx:Object letter="w" meaning="Week in Year" example="27"/>
                                <mx:Object letter="W" meaning="Week in Month" example="2"/>
                                <mx:Object letter="D" meaning="Day in Year" example="189"/>
                                <mx:Object letter="d" meaning="Day in month" example="10"/>
                                <mx:Object letter="F" meaning="Day of week in month" example="2"/>
                                <mx:Object letter="E" meaning="Day in week" example="Tuesday;Tue"/>
                                <mx:Object letter="a" meaning="AM/PM marker" example="PM"/>
                                <mx:Object letter="H" meaning="Hour in day" example="0"/>
                                <mx:Object letter="m" meaning="Minute" example="30"/>
                                <mx:Object letter="'Week'" meaning="Escape the quoted value" example="2011 Week 3"/>
                            </mx:Array>
                        </mx:ArrayCollection>
                        <mx:columns>
                            <mx:DataGridColumn dataField="letter" width="48" headerText="Letter"/>
                            <mx:DataGridColumn dataField="meaning" headerText="Date Component"/>
                            <mx:DataGridColumn dataField="example" headerText="Examples"/>
                        </mx:columns>
                    </mx:DataGrid>
                
            </mx:HBox>
            <mx:Form paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
                <mx:FormItem label="Date Format:" fontSize="16" fontFamily="Lucida Grande" fontWeight="normal" direction="horizontal">
                    <mx:TextInput id="dateFormat" text="{dateFormatEntry}" fontSize="16" fontFamily="Lucida Grande"/>
                    <mx:Button label="Test This Format" click="testFormat()"/>
                </mx:FormItem>
            </mx:Form>

        </mx:VBox>
        <mx:VBox>

        </mx:VBox>
        <mx:VBox>
        </mx:VBox>
        <mx:VBox>
        </mx:VBox>
        <mx:VBox>
        </mx:VBox>
    </mx:ViewStack>
</mx:VBox>