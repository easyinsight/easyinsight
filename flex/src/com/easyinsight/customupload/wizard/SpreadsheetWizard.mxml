<?xml version="1.0" ?>
<util:EITitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
                    xmlns:kpi="com.easyinsight.kpi.*" xmlns:wizard="com.easyinsight.customupload.wizard.*"
                    width="100%" height="100%"
                    xmlns:util="com.easyinsight.util.*">
    <mx:Script><![CDATA[
        import com.easyinsight.customupload.UploadResponse;
        import com.easyinsight.framework.NavigationEvent;
        import com.easyinsight.framework.User;

        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.kpi.KPITutorialEvent;
        import com.easyinsight.kpi.TutorialButtons;
        import com.easyinsight.kpi.TutorialPanel;
        import com.easyinsight.listing.DescriptorAnalyzeSource;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.util.ProgressAlert;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.UIComponent;
        import mx.managers.PopUpManager;

        private var _uploadContext:UploadContext;

        private var _fields:ArrayCollection;

        public function set uploadContext(value:UploadContext):void {
            _uploadContext = value;
        }

        public function set fields(value:ArrayCollection):void {
            _fields = value;
        }

        private var fieldPanels:ArrayCollection;

        private function next(event:KPITutorialEvent):void {
            if ((viewStack.getChildren().length) <= (panelIndex + 1)) {
                createPanel(panelIndex - 1);
            }
            panelIndex++;
        }

        private function back(event:KPITutorialEvent):void {
            panelIndex--;
        }

        private function createPanel(i:int):void {
            viewStack.addChild(fieldPanels.getItemAt(i) as UIComponent);
        }

        [Bindable]
        private var panelIndex:int;

        protected override function commitProperties():void {
            super.commitProperties();
            fieldPanels = new ArrayCollection();
            for (var i:int = 0; i < _fields.length; i++) {
                var field:FieldUploadInfo = _fields.getItemAt(i) as FieldUploadInfo;
                var tutorialPanel:TutorialPanel = new TutorialPanel();
                tutorialPanel.percentHeight = 100;
                tutorialPanel.percentWidth = 100;
                var panel:SpreadsheetTutorialWindow = new SpreadsheetTutorialWindow();
                fieldPanels.addItem(tutorialPanel);
                panel.info = field;
                tutorialPanel.addChild(panel);
                var controls:TutorialButtons = new TutorialButtons();
                controls.backEnabled = true;
                controls.addEventListener(KPITutorialEvent.PREVIOUS, back);
                controls.addEventListener(KPITutorialEvent.NEXT, next);
                controls.nextEnabled = i < (_fields.length - 1);
                controls.finishEnabled = true;
                controls.addEventListener(KPITutorialEvent.FINISH, onFinish);
                controls.addEventListener(KPITutorialEvent.CANCEL, onCancel);
                controls.tutorialPanel = panel;
                tutorialPanel.addChild(controls);
                //viewStack.addChild(tutorialPanel);
            }
        }

        private function onFinish(event:KPITutorialEvent):void {
            var fields:ArrayCollection = new ArrayCollection();
            for each (var panel:TutorialPanel in fieldPanels) {
                fields.addItem(SpreadsheetTutorialWindow(panel.getChildAt(0)).analysisItem);
            }
            ProgressAlert.alert(this, "Creating the data source...", null, uploadService.createDataSource);
            uploadService.createDataSource.send(dataSourceName, _uploadContext, fields, accountVisible);
        }

        private function onChange(event:Event):void {

        }

        private var dataSourceName:String = "Blah";
        private var accountVisible:Boolean = true;

        private function createdDataSource():void {
            //UserAudit.instance().audit(UserAudit.CONNECTED_TO_DATA);
            try {
                var response:UploadResponse = uploadService.createDataSource.lastResult as UploadResponse;
                if (response.successful) {
                    PopUpManager.removePopUp(this);
                    //User.getEventNotifier().dispatchEvent(new AnalyzeEvent(new DescriptorAnalyzeSource(response.feedID)));
                    var dataSourceDescriptor:DataSourceDescriptor = new DataSourceDescriptor();
                    dataSourceDescriptor.id = response.feedID;
                    User.getEventNotifier().dispatchEvent(new NavigationEvent("Home", null, { dataSourceDescriptor: dataSourceDescriptor, freshInstall: true}));
                } else {
                    PopUpManager.removePopUp(this);
                    Alert.show(response.failureMessage);
                }
            } catch(e:Error) {
                Alert.show(e.message);
            }
        }

        private function onCancel(event:Event):void {
            PopUpManager.removePopUp(this);
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="userUpload" id="uploadService">
        <mx:method name="createDataSource" result="createdDataSource()"/>
    </mx:RemoteObject>
    <mx:Box paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" backgroundColor="#333333">
        <mx:ViewStack selectedIndex="{panelIndex}" change="onChange(event)"
                      id="viewStack" resizeToContent="true" width="1000" height="550"
                      backgroundColor="0xFFFFFF">
            <kpi:TutorialPanel width="100%" height="100%">
                <wizard:DataSourceNamePanel id="dsNamePanel"/>
                <kpi:TutorialButtons tutorialPanel="{dsNamePanel}" backEnabled="false" nextEnabled="true"
                                     finishEnabled="false"
                                     kpiTutorialNext="dataSourceName = dsNamePanel.dataSourceName; accountVisible = dsNamePanel.accountVisible; panelIndex++"
                                     kpiTutorialCancel="onCancel(event)"/>
            </kpi:TutorialPanel>
            <kpi:TutorialPanel width="100%" height="100%">
                <wizard:SpreadsheetFieldIntro id="explainPanel"/>
                <kpi:TutorialButtons tutorialPanel="{explainPanel}" backEnabled="true" nextEnabled="true"
                                     finishEnabled="true"
                                     kpiTutorialNext="next(null)"
                                     kpiTutorialPrevious="panelIndex--"
                                     kpiTutorialFinish="onFinish(event)"
                                     kpiTutorialCancel="onCancel(event)"/>
            </kpi:TutorialPanel>
        </mx:ViewStack>
    </mx:Box>
</util:EITitleWindow>