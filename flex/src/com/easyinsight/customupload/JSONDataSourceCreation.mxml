<?xml version="1.0" ?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" implements="com.easyinsight.customupload.IServerDataSourceCreation">
    <mx:Metadata>
		[Event(name="userConfigComplete", type="com.easyinsight.customupload.UploadConfigEvent")]
		[Event(name="userConfigCancel", type="com.easyinsight.customupload.UploadConfigEvent")]
	</mx:Metadata>
    <mx:Script><![CDATA[
        import com.easyinsight.administration.feed.FeedDefinitionData;
        import com.easyinsight.datasources.JSONDataSource;

        import mx.controls.Alert;
        import mx.controls.Button;

        import mx.validators.Validator;

        [Bindable]
        private var url:String;
        [Bindable]
        private var dataSourceName:String;
        [Bindable]
        private var jsonPath:String;
        [Bindable]
        private var jsonUserName:String;
        [Bindable]
        private var jsonPassword:String;
        [Bindable]
        private var httpValue:String = "1";
        [Bindable]
        private var nextPage:String;
        [Bindable]
        private var resultCount:String;

        public function get dataSourceDefinition():FeedDefinitionData {
            var obj:JSONDataSource = new JSONDataSource();
            obj.url = urlInput.text;
            obj.feedName = nameInput.text;
            obj.jsonPath = jsonPathInput.text;
            return obj;
        }

        public function setupButton(button:Button):Function {
            return null;
        }

        public function set dataSourceDefinition(feedDefinition:FeedDefinitionData):void {
            var ds:JSONDataSource = feedDefinition as JSONDataSource;
            url = ds.url;
            dataSourceName = ds.feedName;
            jsonPath = ds.jsonPath;
            jsonUserName = ds.userName;
            jsonPassword = ds.password;
            httpValue = String(ds.httpMethod);
            nextPage = ds.nextPageString;
            resultCount = ds.resultsJSONPath;
        }

        public function updateDataSource(feedDefinition:FeedDefinitionData):void {
            var ds:JSONDataSource = feedDefinition as JSONDataSource;
            ds.url = urlInput.text;
            ds.httpMethod = int(methodGroup.selectedValue);
            ds.userName = userNameInput.text;
            ds.password = passwordInput.text;
            ds.feedName = nameInput.text;
            ds.jsonPath = jsonPathInput.text;
            if (index == 1) {
                ds.paginationMethod = 1;
                ds.nextPageString = nextPageInput.text;
                ds.resultsJSONPath = resultCountInput.text;
            } else if (index == 2) {
                ds.paginationMethod = 2;
                ds.limitField = limitFieldNameInput.text;
                ds.pageField = pageFieldNameInput.text;
                ds.firstPageNumber = int(startPagingOnInput.text);
                ds.perPageLimit = int(maxItemsPerPageInput.text);
            } else {
                ds.paginationMethod = 3;
            }
        }

        public function validate():Boolean {
            nameInput.errorString = null;
            urlInput.errorString = null;
            var results:Array = Validator.validateAll([nameValidator, urlValidator]);
            if (results.length > 0) {
                Alert.show("There were one or more errors that need to be corrected.");
                return false;
            }
            return true;
        }

        [Bindable]
        private var perPageLimit:int;
        [Bindable]
        private var firstPageNumber:int;
        [Bindable]
        private var pageField:String;
        [Bindable]
        private var limitField:String;

        [Bindable]
        private var index:int;

        private function onChange():void {
            if (paginationGroup.selectedValue == "noPaging") {
                index = 0;
            } else if (paginationGroup.selectedValue == "pageByResults") {
                index = 1;
            } else if (paginationGroup.selectedValue == "pageByURL") {
                index = 2;
            }
        }

        [Bindable]
        private var instructions:String = "The JSON data source needs to point at an array of objects. For example, the target might look like [{label1:X,date1:2011-09-05,value1:5},{label1:Y,date1:2012-04-03,value1:5}]. If the array is deeper inside the returned JSON, you can use JSONPath to specify how to find the array. For example, the path of $.results would retrieve the array found under the results property.";
        ]]></mx:Script>
    <mx:TextArea text="{instructions}" borderStyle="none" editable="false" width="650" height="65" fontSize="11"/>
    <mx:StringValidator id="nameValidator" source="{nameInput}" property="text" minLength="1"/>
    <mx:StringValidator id="urlValidator" source="{urlInput}" property="text" minLength="1"/>
    <mx:Form>
        <mx:FormItem label="What do you want to name the data source?" fontFamily="Tahoma" fontWeight="bold">
            <mx:TextInput id="nameInput" fontWeight="normal" fontFamily="Lucida Grande" text="" width="350"/>
        </mx:FormItem>
        <mx:FormItem label="JSON URL:" fontFamily="Tahoma" fontWeight="bold">
            <mx:TextInput id="urlInput" fontWeight="normal" fontFamily="Lucida Grande" text="{url}" width="350"/>
        </mx:FormItem>
        <mx:FormItem label="Basic Auth User Name (optional):" fontFamily="Tahoma" fontWeight="bold">
            <mx:TextInput id="userNameInput" fontWeight="normal" fontFamily="Lucida Grande" text="{jsonUserName}" width="350"/>
        </mx:FormItem>
        <mx:FormItem label="Basic Auth Password (optional):" fontFamily="Tahoma" fontWeight="bold">
            <mx:TextInput id="passwordInput" displayAsPassword="true" fontWeight="normal" fontFamily="Lucida Grande" text="{jsonPassword}" width="350"/>
        </mx:FormItem>
        <mx:FormItem label="HTTP Method:" fontFamily="Tahoma" fontWeight="bold" direction="horizontal">
            <mx:RadioButtonGroup id="methodGroup" selectedValue="{httpValue}"/>
            <mx:RadioButton groupName="methodGroup" label="GET" value="1" id="getOption"/>
            <mx:RadioButton groupName="methodGroup" label="POST" value="2" id="postOption"/>
        </mx:FormItem>
        <mx:FormItem label="JSONPath (optional):" fontFamily="Tahoma" fontWeight="bold">
            <mx:TextInput id="jsonPathInput" fontWeight="normal" fontFamily="Lucida Grande" text="{jsonPath}" width="350"/>
        </mx:FormItem>
    </mx:Form>
    <mx:RadioButtonGroup id="paginationGroup" change="onChange()"/>
    <mx:HBox>
        <mx:RadioButton label="No Paging" value="noPaging" groupName="paginationGroup"/>
        <mx:RadioButton label="Page by # of Results" value="pageByResults" groupName="paginationGroup"/>
        <mx:RadioButton label="Page by Next Page URL" value="pageByURL" groupName="paginationGroup"/>
    </mx:HBox>
    <mx:ViewStack selectedIndex="{index}" creationPolicy="all">
        <mx:VBox>
        </mx:VBox>
        <mx:VBox>
            <mx:Text text="If the target JSON API requires paging, you can specify how to page through the data with these next two settings. First, specify a JSONPath expression for retrieving the total number of results. For example, $.total to retrieve a property called total. Next, add the paging URL. Use \{n\} to represent the page number, for example http://etc/source.json?page=\{n\}." width="650" fontSize="11"/>
            <mx:Form>
                <mx:FormItem label="Result Count JSONPath" fontFamily="Tahoma" fontWeight="bold">
                    <mx:TextInput id="resultCountInput" fontWeight="normal" fontFamily="Lucida Grande" text="{resultCount}" width="350"/>
                </mx:FormItem>
                <mx:FormItem label="Next Page URL:" fontFamily="Tahoma" fontWeight="bold">
                    <mx:TextInput id="nextPageInput" fontWeight="normal" fontFamily="Lucida Grande" text="{nextPage}" width="350"/>
                </mx:FormItem>
            </mx:Form>
        </mx:VBox>
        <mx:VBox>
            <mx:Text text="If the target JSON API requires paging, you can specify how to page through the data with these next two settings. First, specify a JSONPath expression for retrieving the total number of results. For example, $.total to retrieve a property called total. Next, add the paging URL. Use \{n\} to represent the page number, for example http://etc/source.json?page=\{n\}." width="650" fontSize="11"/>
            <mx:Form>
                <mx:FormItem label="Limit Field:" fontFamily="Tahoma" fontWeight="bold">
                    <mx:TextInput id="limitFieldNameInput" fontWeight="normal" fontFamily="Lucida Grande" text="{resultCount}" width="350"/>
                </mx:FormItem>
                <mx:FormItem label="Max Items per Page:" fontFamily="Tahoma" fontWeight="bold">
                    <mx:TextInput id="maxItemsPerPageInput" fontWeight="normal" fontFamily="Lucida Grande" text="{nextPage}" width="350"/>
                </mx:FormItem>
                <mx:FormItem label="Page Field:" fontFamily="Tahoma" fontWeight="bold">
                    <mx:TextInput id="pageFieldNameInput" fontWeight="normal" fontFamily="Lucida Grande" text="{nextPage}" width="350"/>
                </mx:FormItem>
                <mx:FormItem label="Start Paging on Number:" fontFamily="Tahoma" fontWeight="bold">
                    <mx:TextInput id="startPagingOnInput" fontWeight="normal" fontFamily="Lucida Grande" text="{nextPage}" width="350"/>
                </mx:FormItem>
            </mx:Form>
        </mx:VBox>
    </mx:ViewStack>

</mx:VBox>