<?xml version="1.0" encoding="utf-8"?>
<util:EITitleWindow xmlns:util="com.easyinsight.util.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
	creationComplete="doCreationComplete(event)" title="Data Source Creation">
	<mx:Script>
    <![CDATA[
        import com.easyinsight.customupload.wizard.FlatFileUploadContext;
        import com.easyinsight.customupload.wizard.SpreadsheetWizard;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.ProgressAlert;

        import mx.controls.Alert;
        import mx.managers.PopUpManager;
        
        // Reference to the file on disk (selected by user)
        [Bindable]
        public var file:FileReference = new FileReference();

        private var uploadID:Number;

        public var type:int;

        // Called when the "Browse" button is clicked
        public function doBrowse( event:Event ):void
        {
            // Prompt the user to select a file from disk
            file.browse();
        }

        private function next():void {

            nextButton.enabled = false;
            finishingSection.visible = true;
            ProgressAlert.alert(this, "Validating...", null, uploadService.validateUpload);
            uploadService.validateUpload.send(uploadKey);
        }

        private function created():void {
            var uploadResponse:UploadResponse = uploadService.analyzeUpload.lastResult as UploadResponse;
            if (uploadResponse.successful) {
                var context:FlatFileUploadContext = new FlatFileUploadContext();
                context.uploadKey = uploadKey;
                //context.bytes = fileData;
                //dispatchEvent(new AnalyzeEvent(new SpreadsheetSetupSource(context, uploadResponse.infos)));
                var window:SpreadsheetWizard = new SpreadsheetWizard();
                window.uploadContext = context;
                window.fields = uploadResponse.infos;
                PopUpManager.addPopUp(window, this, true);
                PopUpUtil.centerPopUp(window);
                PopUpManager.removePopUp(this);
                //
            } else {
                Alert.show(uploadResponse.failureMessage);
            }
        }

        private var fileData:ByteArray;

        // Called when the upload operation has completed
        // Specifically manages response data
        public function doComplete( event:Event ):void
        {
            if (loadingByHack) {
                ProgressAlert.alert(this, "Analyzing...", null, uploadService.hackyUpload);
                uploadService.hackyUpload.send(uploadKey, file.data);
                loadingByHack = false;
            } else {
                successMessage.visible = true;
                //formatBox.enabled = true;
                nextButton.enabled = true;
            }
        }

        // Called when the application has completed startup
        public function doCreationComplete( event:Event ):void
        {
            // Listen for when the user has selected a file
            // Listen for when the file upload is complete
            file.addEventListener( Event.SELECT, doSelect );
            file.addEventListener( Event.COMPLETE, doComplete );
            file.addEventListener( IOErrorEvent.IO_ERROR, onIOError);
            ProgressAlert.alert(this, "Setting up for upload...", null, uploadService.startUpload);
            uploadService.startUpload.send();
        }

        private function onIOError(event:IOErrorEvent):void {
            Alert.show(event.text);
        }

        // Called when the user selects a file from disk
        public function doSelect( event:Event ):void
        {
            txtPhoto.text = file.name;
            uploadButton.enabled = true;
        }

        // Called when the "Submit" button is clicked
        // Initiates file upload operation
        public function doSubmit( event:Event ):void
        {
            // Specify the endpoint for the upload operation
            // Create an object to hold additional data fields
            var request:URLRequest = new URLRequest("https://localhost/app/fileUpload");
            var vars:URLVariables = new URLVariables();
            vars.uploadKey = uploadKey;
            request.data = vars;
            progressBar.visible = true;
            uploadButton.enabled = false;
            file.upload( request );
        }

        private var loadingByHack:Boolean = false;

        private function validatedUpload():void {
            var validUpload:Boolean = uploadService.validateUpload.lastResult as Boolean;
            if (!validUpload) {
                loadingByHack = true;
                file.load();
            } else {
                ProgressAlert.alert(this, "Analyzing...", null, uploadService.analyzeUpload);
                var context:FlatFileUploadContext = new FlatFileUploadContext();
                context.uploadKey = uploadKey;
                context.type = type;
                uploadService.analyzeUpload.send(context);
            }
        }

        private function hackyUploaded():void {
            ProgressAlert.alert(this, "Analyzing...", null, uploadService.analyzeUpload);
            var context:FlatFileUploadContext = new FlatFileUploadContext();
            context.uploadKey = uploadKey;
            context.type = type;
            uploadService.analyzeUpload.send(context);
        }

        private var uploadKey:String;

        private function gotUploadKey():void {
            uploadKey = uploadService.startUpload.lastResult as String;
        }

        private function cancel():void {
            PopUpManager.removePopUp(this);
        }
    ]]>
	</mx:Script>
	<mx:RemoteObject id="uploadService" destination="userUpload">
		<mx:method name="analyzeUpload" result="created()"/>
        <mx:method name="validateUpload" result="validatedUpload()"/>
        <mx:method name="hackyUpload" result="hackyUploaded()"/>
		<mx:method name="startUpload" result="gotUploadKey()"/>
	</mx:RemoteObject>
	<mx:HBox id="coreVBox" backgroundColor="#FFFFFF" paddingRight="10" paddingBottom="10" paddingLeft="10" paddingTop="10">
        <mx:VBox>
            <mx:Form id="coreForm" paddingRight="0">
                <mx:FormItem label="Select a file to upload:" direction="horizontal" fontFamily="Tahoma" fontWeight="bold">
                    <mx:TextInput id="txtPhoto" editable="false"/>
                    <mx:Button label="Browse..." click="doBrowse( event )" />
                </mx:FormItem>
                <mx:FormItem label="" direction="horizontal">
                    <mx:Button label="Upload" click="doSubmit( event )" id="uploadButton" enabled="false"/>
                </mx:FormItem>
                <mx:FormItem label="" direction="vertical">
                    <mx:HBox horizontalAlign="center">
                        <mx:ProgressBar id="progressBar" visible="false" source="{file}"/>
                    </mx:HBox>
                    <mx:Label text="Upload successful!" visible="false" id="successMessage" fontFamily="Tahoma" fontWeight="bold"/>
                </mx:FormItem>
                <mx:FormItem label="" direction="vertical" visible="false" id="finishingSection">
                    <mx:HBox horizontalAlign="center">
                        <mx:ProgressBar indeterminate="true" label="Processing the data you uploaded..."/>
                    </mx:HBox>
                </mx:FormItem>
            </mx:Form>
            <mx:HBox width="100%" textAlign="center">
                <util:SaveButton label="Finish" click="next()" enabled="false" id="nextButton"/>
                <util:CancelButton label="Cancel" click="cancel()"/>
            </mx:HBox>
        </mx:VBox>
	    <mx:VBox>
            <mx:TextArea text="You can upload Excel (1997-2007) spreadsheets or comma or tab separated text files here. The file should have a header row, with data in the subsequent cells, as shown below:" borderThickness="0"
                    width="260" height="90" backgroundAlpha="0" editable="false"/>
            <mx:Image source="../assets/excelexample.PNG"/>
            <mx:TextArea width="260" height="50" text="You may experience unexpected results if the data does not match that pattern." borderThickness="0" backgroundAlpha="0" editable="false"/>
	    </mx:VBox>
	</mx:HBox>
</util:EITitleWindow>
