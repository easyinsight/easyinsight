<?xml version="1.0" encoding="utf-8"?>
<util:EITitleWindow xmlns:util="com.easyinsight.util.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
	title="Data Source Creation" backgroundColor="#FFFFFF" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
	<mx:Script>
    <![CDATA[
        import com.easyinsight.customupload.wizard.JSONUploadContext;
        import com.easyinsight.datasources.JSONDataSource;
        import com.easyinsight.framework.NavigationEvent;
        import com.easyinsight.framework.User;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.ProgressAlert;

        import mx.collections.ArrayCollection;

        import mx.controls.Alert;
        import mx.managers.PopUpManager;
        import mx.validators.Validator;


        // Reference to the file on disk (selected by user)
        [Bindable]
        private var url:String;
        [Bindable]
        private var dataSourceName:String;
        [Bindable]
        private var jsonPath:String;
        [Bindable]
        private var jsonUserName:String;
        [Bindable]
        private var jsonPassword:String;
        [Bindable]
        private var httpValue:String = "1";
        [Bindable]
        private var nextPage:String;
        [Bindable]
        private var resultCount:String;

        [Bindable]
        private var showFieldList:Boolean;

        [Bindable]
        private var fieldLine:String;

        [Bindable]
        private var pageText:String;

        [Bindable]
        private var fieldNames:ArrayCollection;

        [Bindable]
        private var pageIndex:int = 1;

        [Bindable]
        private var previousPageEnabled:Boolean;

        [Bindable]
        private var nextPageEnabled:Boolean;

        private function testNextPage():void {
            pageIndex++;
            test();
        }

        private function testPreviousPage():void {
            pageIndex--;
            test();
        }

        private function test():void {
            ProgressAlert.alert(this, "Testing...", null, uploadService.describeJSON);
            uploadService.describeJSON.send(userNameInput.text, passwordInput.text, int(methodGroup.selectedValue), urlInput.text, jsonPathInput.text, "",
                    nextPageInput.text, pageIndex);
        }

        private function described():void {
            var jsonSetup:JSONSetup = uploadService.describeJSON.lastResult as JSONSetup;
            if (nextPageInput.text != "" && jsonSetup.fields.length > 0) {
                nextPageEnabled = true;
            }
            previousPageEnabled = pageIndex > 1;
            pageText = "Page " + pageIndex;
            if (jsonSetup.results > 0) {
                pageText += (", total result count = " + jsonSetup.results);
            }
            jsonResult = jsonSetup.result;
            fieldNames = jsonSetup.fields;
            showFieldList = (fieldNames != null && fieldNames.length > 0) || pageIndex > 1;
            fieldLine = jsonSetup.fieldLine;
            currentState = "JSONData";
        }

        private function next():void {
            urlInput.errorString = null;
            var results:Array = Validator.validateAll([urlValidator]);
            if (results.length > 0) {
                Alert.show("There were one or more errors that need to be corrected.");
            } else {
                var ds:JSONUploadContext = new JSONUploadContext();
                ds.url = urlInput.text;
                ds.httpMethod = int(methodGroup.selectedValue);
                ds.userName = userNameInput.text;
                ds.password = passwordInput.text;
                ds.jsonPath = jsonPathInput.text;
                if (index == 1) {
                    ds.paginationMethod = 1;
                    ds.nextPagePath = nextPageInput.text;
                    ds.resultsJSONPath = resultCountInput.text;
                } else if (index == 2) {
                    ds.paginationMethod = 2;
                    ds.limitField = limitFieldNameInput.text;
                    ds.pageField = pageFieldNameInput.text;
                    ds.firstPageNumber = int(startPagingOnInput.text);
                    ds.perPageLimit = int(maxItemsPerPageInput.text);
                } else if (index == 3) {
                    ds.paginationMethod = 3;
                    ds.limitField = limitFieldNameInput2.text;
                    ds.offsetField = offsetFieldNameInput.text;
                    ds.perPageLimit = int(maxItemsPerPageInput2.text);
                } else {
                    ds.paginationMethod = 0;
                }
                ProgressAlert.alert(this, "Validating and testing...", null, uploadService.analyzeUpload);
                uploadService.analyzeUpload.send(ds);
            }
        }

        private function created():void {
            var id:int = uploadService.createJSONSource.lastResult as int;
            var dataSourceDescriptor:DataSourceDescriptor = new DataSourceDescriptor();
            dataSourceDescriptor.id = id;
            User.getEventNotifier().dispatchEvent(new NavigationEvent("Home", null, { dataSourceDescriptor: dataSourceDescriptor, freshInstall: true}));
            PopUpManager.removePopUp(this);
        }

        private function cancel():void {
            PopUpManager.removePopUp(this);
        }

        [Bindable]
        private var perPageLimit:int;
        [Bindable]
        private var firstPageNumber:int;
        [Bindable]
        private var pageField:String;
        [Bindable]
        private var limitField:String;

        [Bindable]
        private var index:int;

        private function onChange():void {
            if (paginationGroup.selectedValue == "noPaging") {
                index = 0;
            } else if (paginationGroup.selectedValue == "pageByURL") {
                index = 1;
            } else if (paginationGroup.selectedValue == "pageByLimitAndNumber") {
                index = 2;
            } else if (paginationGroup.selectedValue == "pageByLimitAndOffset") {
                index = 3;
            }
        }

        [Bindable]
        private var jsonResult:String;

        [Bindable]
        private var wizardIndex:int;

        [Bindable]
        private var instructions:String = "The JSON data source needs to point at an array of objects. For example, the target might look like [{label1:X,date1:2011-09-05,value1:5},{label1:Y,date1:2012-04-03,value1:5}]. If the array is deeper inside the returned JSON, you can use JSONPath to specify how to find the array. For example, the path of $.results would retrieve the array found under the results property.";

        private function testConnection():void {
            // validate basic connectivity

            ProgressAlert.alert(this, "Testing connectivity...", null, uploadService.testJSONConnectivityAndSuggestJSONPath);
            uploadService.testJSONConnectivityAndSuggestJSONPath.send(populateDataSourceObject());
        }

        private function populateDataSourceObject():JSONDataSource {
            var ds:JSONDataSource = new JSONDataSource();
            ds.url = urlInput.text;
            ds.httpMethod = int(methodGroup.selectedValue);
            ds.userName = userNameInput.text;
            ds.password = passwordInput.text;
            if (jsonPathInput != null) {
                ds.jsonPath = jsonPathInput.text;
            }
            if (wizardIndex >= 3) {
                if (index == 1) {
                    ds.paginationMethod = 1;
                    ds.nextPageString = nextPageInput.text;
                    ds.resultsJSONPath = resultCountInput.text;
                } else if (index == 2) {
                    ds.paginationMethod = 2;
                    ds.limitField = limitFieldNameInput.text;
                    ds.pageField = pageFieldNameInput.text;
                    ds.firstPageNumber = int(startPagingOnInput.text);
                    ds.perPageLimit = int(maxItemsPerPageInput.text);
                } else if (index == 3) {
                    ds.paginationMethod = 3;
                    ds.limitField = limitFieldNameInput2.text;
                    ds.offsetField = offsetFieldNameInput.text;
                    ds.perPageLimit = int(maxItemsPerPageInput2.text);
                } else {
                    ds.paginationMethod = 0;
                }
            }

            // https://api.pipedrive.com/v1/deals?api_token=b5e6c6922a331f87e3b45f59acbcad4016b4152a
            return ds;
        }

        private function testJSON():void {
            // test json data
            ProgressAlert.alert(this, "Testing JSON path...", null, uploadService.testJSONPath);
            uploadService.testJSONPath.send(populateDataSourceObject());
        }


        private function setUpPaging():void {
            wizardIndex++;
        }

        private function testPaging():void {
            if (index == 0) {
                wizardIndex++;
            } else {
                ProgressAlert.alert(this, "Testing JSON paging...", null, uploadService.testJSONPaging);
                uploadService.testJSONPaging.send(populateDataSourceObject());
            }
        }

        private function createDataSource():void {
            ProgressAlert.alert(this, "Creating the data source...", null, uploadService.createJSONSource);
            var ds:JSONDataSource = populateDataSourceObject();
            ds.feedName = dataSourceNameInput.text;
            uploadService.createJSONSource.send(ds, generatedFields);
        }

        private function testedPaging():void {
            var jsonSetup:JSONSetup = uploadService.testJSONPaging.lastResult as JSONSetup;
            if (jsonSetup.fieldLine != null && jsonSetup.fieldLine != "") {
                Alert.show(jsonSetup.fieldLine);
            } else {
                wizardIndex++;
            }
        }

        private function testedConnectivity():void {
            var jsonSetup:JSONSetup = uploadService.testJSONConnectivityAndSuggestJSONPath.lastResult as JSONSetup;
            if (jsonSetup.fieldLine != null && jsonSetup.fieldLine != "") {
                Alert.show(jsonSetup.fieldLine);
            } else {
                jsonPath = jsonSetup.suggestedJSONPath;
                wizardIndex++;
            }
        }

        private function testedPath():void {
            var jsonSetup:JSONSetup = uploadService.testJSONPath.lastResult as JSONSetup;
            if (jsonSetup.fieldLine != null && jsonSetup.fieldLine != "") {
                Alert.show(jsonSetup.fieldLine);
            } else {
                generatedFields = jsonSetup.generatedFields;
                jsonResult = jsonSetup.result;
                fieldNames = jsonSetup.fields;
                showFieldList = true;
                wizardIndex++;
            }
        }

        private var generatedFields:ArrayCollection;
        ]]>
	</mx:Script>
	<mx:RemoteObject id="uploadService" destination="userUpload">
		<mx:method name="createJSONSource" result="created()"/>
		<mx:method name="testJSONPath" result="testedPath()"/>
		<mx:method name="testJSONPaging" result="testedPaging()"/>
        <mx:method name="testJSONConnectivityAndSuggestJSONPath" result="testedConnectivity()"/>
	</mx:RemoteObject>
    <mx:StringValidator id="urlValidator" source="{urlInput}" property="text" minLength="1"/>
    <mx:ViewStack selectedIndex="{wizardIndex}" resizeToContent="true">
        <mx:VBox>
            <mx:Form>
                <mx:FormItem label="JSON URL:" fontFamily="Tahoma" fontWeight="bold">
                    <mx:TextInput id="urlInput" fontWeight="normal" fontFamily="Lucida Grande" text="{url}" width="500"/>
                </mx:FormItem>
                <mx:FormItem label="Basic Auth User Name (optional):" fontFamily="Tahoma" fontWeight="bold">
                    <mx:TextInput id="userNameInput" fontWeight="normal" fontFamily="Lucida Grande" text="{jsonUserName}" width="350"/>
                </mx:FormItem>
            </mx:Form>
            <mx:Text text="If the target JSON API requires basic HTTP authentication, you can specify credentials here:" width="650"/>
            <mx:Form>
                <mx:FormItem label="Basic Auth Password (optional):" fontFamily="Tahoma" fontWeight="bold">
                    <mx:TextInput id="passwordInput" displayAsPassword="true" fontWeight="normal" fontFamily="Lucida Grande" text="{jsonPassword}" width="350"/>
                </mx:FormItem>
                <mx:FormItem label="HTTP Method:" fontFamily="Tahoma" fontWeight="bold" direction="horizontal">
                    <mx:RadioButtonGroup id="methodGroup" selectedValue="{httpValue}"/>
                    <mx:RadioButton groupName="methodGroup" label="GET" value="1" id="getOption"/>
                    <mx:RadioButton groupName="methodGroup" label="POST" value="2" id="postOption"/>
                </mx:FormItem>
            </mx:Form>
            <mx:HBox>
                <util:SaveButton label="Test Connection" click="testConnection()"/>
                <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
            </mx:HBox>
        </mx:VBox>
        <mx:VBox>
            <mx:HBox>
                <mx:VBox>
                    <mx:Text text="{instructions}" width="650" fontSize="11"/>
                    <mx:Form>
                        <mx:FormItem label="JSONPath (optional):" fontFamily="Tahoma" fontWeight="bold">
                            <mx:TextInput id="jsonPathInput" fontWeight="normal" fontFamily="Lucida Grande" text="{jsonPath}" width="350"/>
                        </mx:FormItem>
                    </mx:Form>
                </mx:VBox>
                <mx:Box id="jsonPathResult"/>
            </mx:HBox>
            <mx:HBox>
                <util:SaveButton label="Back" click="wizardIndex--"/>
                <util:SaveButton label="Test JSON Path" click="testJSON()"/>
                <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
            </mx:HBox>
        </mx:VBox>
        <mx:VBox horizontalAlign="center" creationComplete="PopUpUtil.centerPopUp(this)">
            <mx:Label text="Results:"/>
            <mx:TextArea width="400" height="200" editable="false" text="{jsonResult}" borderStyle="solid" fontSize="10" borderThickness="1"/>
            <mx:Text text="{fieldLine}" width="400"/>
            <mx:List dataProvider="{fieldNames}" width="400" height="80" visible="{showFieldList}" fontSize="10"/>
            <mx:HBox>
                <util:SaveButton label="Back" click="wizardIndex--"/>
                <util:SaveButton label="Set up Paging" click="setUpPaging()"/>
                <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
            </mx:HBox>
        </mx:VBox>
        <mx:VBox>
            <mx:Text text="If the target JSON API requires paging, you can choose to page over results by limit/offset, limit/page number, or result count/next page:" width="650"/>

            <mx:RadioButtonGroup id="paginationGroup" change="onChange()"/>
            <mx:HBox>
                <mx:RadioButton label="No Paging" value="noPaging" groupName="paginationGroup" selected="true"/>
                <mx:RadioButton label="Use Limit and Offset" value="pageByLimitAndOffset" groupName="paginationGroup"/>
                <mx:RadioButton label="Use Limit and Page Number" value="pageByLimitAndNumber" groupName="paginationGroup"/>
                <mx:RadioButton label="Use Next Page URL" value="pageByURL" groupName="paginationGroup"/>
            </mx:HBox>

            <mx:ViewStack selectedIndex="{index}" creationPolicy="all" resizeToContent="true">
                <mx:VBox>
                </mx:VBox>
                <mx:VBox>
                    <mx:Text text="Specify a JSONPath expression for retrieving the total number of results. For example, $.total to retrieve a property called total. Next, add the paging URL. Use \{n\} to represent the page number, for example http://etc/source.json?page=\{n\}." width="650" fontSize="11"/>
                    <mx:Form>
                        <mx:FormItem label="Result Count JSONPath" fontFamily="Tahoma" fontWeight="bold">
                            <mx:TextInput id="resultCountInput" fontWeight="normal" fontFamily="Lucida Grande" text="{resultCount}" width="350"/>
                        </mx:FormItem>
                        <mx:FormItem label="Next Page URL:" fontFamily="Tahoma" fontWeight="bold">
                            <mx:TextInput id="nextPageInput" fontWeight="normal" fontFamily="Lucida Grande" text="{nextPage}" width="350"/>
                        </mx:FormItem>
                    </mx:Form>
                </mx:VBox>
                <mx:VBox>
                    <mx:Text text="" width="650" fontSize="11"/>
                    <mx:Form>
                        <mx:FormItem label="What's the parameter name for the limit?" fontFamily="Tahoma" fontWeight="bold">
                            <mx:TextInput id="limitFieldNameInput" fontWeight="normal" fontFamily="Lucida Grande" text="{resultCount}" width="350"/>
                        </mx:FormItem>
                        <mx:FormItem label="What's the maximum number of items per page?" fontFamily="Tahoma" fontWeight="bold">
                            <mx:TextInput id="maxItemsPerPageInput" fontWeight="normal" fontFamily="Lucida Grande" text="{nextPage}" width="350"/>
                        </mx:FormItem>
                        <mx:FormItem label="What's the parameter name for the page?" fontFamily="Tahoma" fontWeight="bold">
                            <mx:TextInput id="pageFieldNameInput" fontWeight="normal" fontFamily="Lucida Grande" text="{nextPage}" width="350"/>
                        </mx:FormItem>
                        <mx:FormItem label="What's the first page number?" fontFamily="Tahoma" fontWeight="bold">
                            <mx:TextInput id="startPagingOnInput" fontWeight="normal" fontFamily="Lucida Grande" text="{nextPage}" width="350"/>
                        </mx:FormItem>
                    </mx:Form>
                </mx:VBox>
                <mx:VBox>
                    <mx:Text text="" width="650" fontSize="11"/>
                    <mx:Form>
                        <mx:FormItem label="What's the parameter name for the limit?" fontFamily="Tahoma" fontWeight="bold">
                            <mx:TextInput id="limitFieldNameInput2" fontWeight="normal" fontFamily="Lucida Grande" text="{resultCount}" width="350"/>
                        </mx:FormItem>
                        <mx:FormItem label="What's the maximum number of items per page?" fontFamily="Tahoma" fontWeight="bold">
                            <mx:TextInput id="maxItemsPerPageInput2" fontWeight="normal" fontFamily="Lucida Grande" text="{nextPage}" width="350"/>
                        </mx:FormItem>
                        <mx:FormItem label="What's the parameter name for the offset?" fontFamily="Tahoma" fontWeight="bold">
                            <mx:TextInput id="offsetFieldNameInput" fontWeight="normal" fontFamily="Lucida Grande" text="{nextPage}" width="350"/>
                        </mx:FormItem>
                    </mx:Form>
                </mx:VBox>
            </mx:ViewStack>
            <mx:HBox>
                <util:SaveButton label="Back" click="wizardIndex--"/>
                <util:SaveButton label="Next" click="testPaging()"/>
                <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
            </mx:HBox>
        </mx:VBox>
        <mx:VBox>
            <mx:Text text="Your JSON connection is looking good!"/>
            <mx:Form>
                <mx:FormItem label="What should the data source be called?">
                    <mx:TextInput id="dataSourceNameInput"/>
                </mx:FormItem>
            </mx:Form>
            <mx:HBox>
                <util:SaveButton label="Back to Paging" click="wizardIndex--"/>
                <util:SaveButton label="Create the Data Source" click="createDataSource()"/>
                <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
            </mx:HBox>
        </mx:VBox>
    </mx:ViewStack>
</util:EITitleWindow>
