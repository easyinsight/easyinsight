<?xml version="1.0" encoding="utf-8"?>
<util:EITitleWindow xmlns:util="com.easyinsight.util.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
	title="Data Source Creation">
	<mx:Script>
    <![CDATA[
        import com.easyinsight.customupload.wizard.JSONUploadContext;
        import com.easyinsight.framework.PerspectiveInfo;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.util.ProgressAlert;

        import mx.controls.Alert;
        import mx.managers.PopUpManager;
        import mx.validators.Validator;


        // Reference to the file on disk (selected by user)
        [Bindable]
        private var url:String;
        [Bindable]
        private var dataSourceName:String;
        [Bindable]
        private var jsonPath:String;
        [Bindable]
        private var jsonUserName:String;
        [Bindable]
        private var jsonPassword:String;
        [Bindable]
        private var httpValue:String = "1";
        [Bindable]
        private var nextPage:String;
        [Bindable]
        private var resultCount:String;

        private function next():void {
            urlInput.errorString = null;
            var results:Array = Validator.validateAll([urlValidator]);
            if (results.length > 0) {
                Alert.show("There were one or more errors that need to be corrected.");
            } else {
                var ds:JSONUploadContext = new JSONUploadContext();
                ds.url = urlInput.text;
                ds.httpMethod = int(methodGroup.selectedValue);
                ds.userName = userNameInput.text;
                ds.password = passwordInput.text;
                ds.jsonPath = jsonPathInput.text;
                ds.nextPagePath = nextPageInput.text;
                ds.resultsJSONPath = resultCountInput.text;
                ProgressAlert.alert(this, "Validating and testing...", null, uploadService.analyzeUpload);
                uploadService.analyzeUpload.send(ds);
            }
        }

        private function created():void {
            var uploadResponse:UploadResponse = uploadService.analyzeUpload.lastResult as UploadResponse;
            if (uploadResponse.successful) {
                var ds:JSONUploadContext = new JSONUploadContext();
                ds.url = urlInput.text;
                ds.httpMethod = int(methodGroup.selectedValue);
                ds.userName = userNameInput.text;
                ds.password = passwordInput.text;
                ds.jsonPath = jsonPathInput.text;
                ds.nextPagePath = nextPageInput.text;
                ds.resultsJSONPath = resultCountInput.text;
                dispatchEvent(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.SPREADSHEET_WIZARD, {uploadContext:ds, fields:uploadResponse.infos})));
                PopUpManager.removePopUp(this);
            } else {
                Alert.show(uploadResponse.failureMessage);
            }
        }

        private function cancel():void {
            PopUpManager.removePopUp(this);
        }

        [Bindable]
        private var instructions:String = "The JSON data source needs to point at an array of objects. For example, the target might look like [{label1:X,date1:2011-09-05,value1:5},{label1:Y,date1:2012-04-03,value1:5}]. If the array is deeper inside the returned JSON, you can use JSONPath to specify how to find the array. For example, the path of $.results would retrieve the array found under the results property.";
        ]]>
	</mx:Script>
	<mx:RemoteObject id="uploadService" destination="userUpload">
		<mx:method name="analyzeUpload" result="created()"/>
	</mx:RemoteObject>
    <mx:StringValidator id="urlValidator" source="{urlInput}" property="text" minLength="1"/>
    <mx:VBox backgroundColor="#FFFFFF" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
        <mx:TextArea text="{instructions}" borderStyle="none" editable="false" width="650" height="65" fontSize="11"/>
        <mx:Form>
            <mx:FormItem label="JSON URL:" fontFamily="Tahoma" fontWeight="bold">
                <mx:TextInput id="urlInput" fontWeight="normal" fontFamily="Lucida Grande" text="{url}" width="350"/>
            </mx:FormItem>
            <mx:FormItem label="Basic Auth User Name (optional):" fontFamily="Tahoma" fontWeight="bold">
                <mx:TextInput id="userNameInput" fontWeight="normal" fontFamily="Lucida Grande" text="{jsonUserName}" width="350"/>
            </mx:FormItem>
            <mx:FormItem label="Basic Auth Password (optional):" fontFamily="Tahoma" fontWeight="bold">
                <mx:TextInput id="passwordInput" displayAsPassword="true" fontWeight="normal" fontFamily="Lucida Grande" text="{jsonPassword}" width="350"/>
            </mx:FormItem>
            <mx:FormItem label="HTTP Method:" fontFamily="Tahoma" fontWeight="bold" direction="horizontal">
                <mx:RadioButtonGroup id="methodGroup" selectedValue="{httpValue}"/>
                <mx:RadioButton groupName="methodGroup" label="GET" value="1" id="getOption"/>
                <mx:RadioButton groupName="methodGroup" label="POST" value="2" id="postOption"/>
            </mx:FormItem>
            <mx:FormItem label="JSONPath (optional):" fontFamily="Tahoma" fontWeight="bold">
                <mx:TextInput id="jsonPathInput" fontWeight="normal" fontFamily="Lucida Grande" text="{jsonPath}" width="350"/>
            </mx:FormItem>
        </mx:Form>
        <mx:TextArea text="If the target JSON API requires paging, you can specify how to page through the data with these next two settings. First, specify a JSONPath expression for retrieving the total number of results. For example, $.total to retrieve a property called total. Next, add the paging URL. Use \{n\} to represent the page number, for example http://etc/source.json?page=\{n\}." borderStyle="none" editable="false" width="650" height="65" fontSize="11"/>
        <mx:Form>
            <mx:FormItem label="Result Count JSONPath (optional):" fontFamily="Tahoma" fontWeight="bold">
                <mx:TextInput id="resultCountInput" fontWeight="normal" fontFamily="Lucida Grande" text="{resultCount}" width="350"/>
            </mx:FormItem>
            <mx:FormItem label="Next Page URL (optional):" fontFamily="Tahoma" fontWeight="bold">
                <mx:TextInput id="nextPageInput" fontWeight="normal" fontFamily="Lucida Grande" text="{nextPage}" width="350"/>
            </mx:FormItem>
        </mx:Form>
        <mx:HBox width="100%" horizontalAlign="center">
            <util:SaveButton label="Finish" click="next()" id="nextButton"/>
            <util:CancelButton label="Cancel" click="cancel()"/>
        </mx:HBox>
    </mx:VBox>
</util:EITitleWindow>
