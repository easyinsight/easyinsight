<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%">
	<mx:Style source="../styles/ChartStyles.css" />
	<mx:Script>
		<![CDATA[
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import mx.charts.series.LineSeries;
			import mx.charts.chartClasses.CartesianChart;
			import mx.events.SliderEvent;
			import mx.events.TweenEvent;
			import mx.events.EffectEvent;
			import mx.effects.easing.Cubic;
			import mx.effects.Move;
			import mx.collections.ArrayCollection;
			
			[Bindable] private var MAIN_CHART_HEIGHT:Number = 250;
			[Bindable] private var VOLUME_CHART_HEIGHT:Number = 50;
			[Bindable] private var RANGE_CHART_HEIGHT:Number = 80;
			[Bindable] private var CHART_WIDTH:Number = 600;
			
			[Bindable] private var myData:ArrayCollection 
			
			[Bindable] private var rangeData:ArrayCollection;
			
			[Bindable] private var dimension:String;
			
			private var staticLeftBoundary:Number;
            private var staticRightBoundary:Number;
			private var rangeDataRatio:Number = 1;
			private var allowUpdateComplete:Boolean = false;
			private var updateBoxFromSlider:Boolean = false;
			private var mouseXRef:Number;
            //flags to determine which chart we've clicked on for the drag... set in setMouseDown used it moveChart
            private var rangeDrag:Boolean = false;
            private var mainDrag:Boolean = false;
			[Embed(source="../../../../assets/left_scroll.png")] [Bindable] public var leftScroll:Class;
            [Embed(source="../../../../assets/right_scroll.png")] [Bindable] public var rightScroll:Class;
            
            [Bindable] public function set rangeDataSet(masterDataSet:ArrayCollection):void {
            	rangeData = masterDataSet;
            	rangeData.addEventListener(CollectionEvent.COLLECTION_CHANGE, collectionChanged);
            	var rangeDataArray:Array = rangeData.toArray();
            	myData = new ArrayCollection(rangeData.toArray());
            	myData.sort = rangeData.sort;
            	myData.refresh();
            }
            
            public function get rangeDataSet():ArrayCollection {
            	return rangeData;
        	}
			
			/*public function setData(masterDataSet:ArrayCollection):void {
				rangeData = masterDataSet;
				masterDataSet.addEventListener(CollectionEvent.COLLECTION_CHANGE, collectionChanged);
				if (masterDataSet != null) {
					myData = new ArrayCollection(rangeData.source);
				}
			}*/
			
			private function collectionChanged(event:CollectionEvent):void {				
				myData = new ArrayCollection(rangeData.source);
				leftIndicator.x = rangeData.length - 10;
				rightIndicator.x = rangeData.length;
				rangeDataRatio = ((dividedBox.width - 30) / rangeData.length);
				trace("range data ratio = " + rangeDataRatio);
				updateBoxFromSlider = true;
				updateBox();	
			}
			
			public function setMeasures(properties:ArrayCollection):void {
				mainChart.series = [];
				rangeChart.series = [];
				for (var i:int = 0; i < properties.length; i++) {
					var property:String = properties.getItemAt(i) as String;
					addMeasure(property);	
				}
			}
			
			public function setDimension(dimension:String):void {
				this.dimension = dimension;
			}
			
			public function addMeasure(property:String):void {
				var lineSeries:LineSeries = new LineSeries();
				lineSeries.yField = property;
				lineSeries.displayName = property;
				trace("adding property " + property);
				mainChart.series = mainChart.series.concat(lineSeries);
				var rLineSeries:LineSeries = new LineSeries();
				rLineSeries.yField = property;
				rLineSeries.displayName = property;
				rangeChart.series = rangeChart.series.concat(rLineSeries);
				if (rangeData != null) {
					leftIndicator.x = rangeData.length - 10;
					rightIndicator.x = rangeData.length;
					rangeDataRatio = ((dividedBox.width - 30) / rangeData.length);
					trace("range data ratio = " + rangeDataRatio);
					allowUpdateComplete = true;
					updateBoxFromSlider = true;
					updateBox();
					this.visible = true;
				}							
			}
			
			public function removeMeasure(property:String):void {
				
			}
			
			private function updateMainData():void
            {
                myData.source = rangeData.source.slice(leftIndicator.x, rightIndicator.x);
            }
            
            private function seriesComplete():void
			{
				if(myData.length > 0 && allowUpdateComplete == false)
				{
					leftIndicator.x = rangeData.length - 10;
					rightIndicator.x = rangeData.length;
					rangeDataRatio = ((dividedBox.width - 30) / rangeData.length);
					trace("range data ratio = " + rangeDataRatio);
					allowUpdateComplete = true;
					updateBoxFromSlider = true;
					updateBox();
					this.visible = true;
				}	
			}
			
			private function updateBox():void
			{
				if(updateBoxFromSlider)
				{
					//setting the box width value to the slider value times the ratio (to decrease 
					//it to the equivalent width percentage
					//eg. full divided box width = 500, rangeDataRatio = 1/5 would equal 100 for the 
					//proper left box width equal to range index value
					leftBox.width = slider.values[0] * rangeDataRatio;
					rightBox.width = dividedBox.width - ( slider.values[1] * rangeDataRatio );
					leftIndicator.x = slider.values[0];
					rightIndicator.x = slider.values[1];
					updateMainData();
				}
			}
			
			private function updateIndicatorsQuietly():void
			{
				//these two values are mapped 1:1 as the slider values and indicator values equal the rangeData length exactly
				leftIndicator.x = slider.values[0];
				rightIndicator.x = slider.values[1];
			}
			
			private function updateIndicatorValuesWithEffect():void
			{
				//setting indicator positions to the box width divided by the ratio (to increase 
				//it to the equivalent range value)
				//eg. left box width = 100, rangeDataRation = 1/5 would equal 500 for the range index value
				trace("moving left bar to " + (leftBox.width / rangeDataRatio));
				moveSlider(leftIndicator, (leftBox.width  / rangeDataRatio), false);
				moveSlider(rightIndicator, ((dividedBox.width - rightBox.width) / rangeDataRatio), false);				
			}
			
			private function setMouseDown(theChart:CartesianChart):void
            {
            	//don't capture for drag if we're viewing the entire range of data
            	if(!(leftIndicator.x == 0 && rightIndicator.x == rangeData.length))
            	{
	            	mouseXRef = this.mouseX;
	                staticLeftBoundary = leftIndicator.x;
	                staticRightBoundary = rightIndicator.x;
	                if(theChart == mainChart) mainDrag = true;
	                if(theChart == rangeChart) rangeDrag = true;
	                this.systemManager.addEventListener(MouseEvent.MOUSE_MOVE, moveChart);
	                this.systemManager.addEventListener(MouseEvent.MOUSE_UP, stopDragging);
            	}
            }
			
			private function moveSlider(target:VRule, xTo:Number, update:Boolean, callbackFunc:Function = null, ... rest):void
			{
				var moveIndicator:Move = new Move();
				moveIndicator.end();
				moveIndicator.easingFunction = Cubic.easeOut;
				moveIndicator.duration = 750;
				moveIndicator.target = target;
				moveIndicator.xTo = xTo;
				trace("updating indicator to " + xTo);
				moveIndicator.addEventListener(EffectEvent.EFFECT_START, function():void {updateBoxFromSlider = update});
				moveIndicator.addEventListener(TweenEvent.TWEEN_UPDATE, function():void { myData.source = rangeData.source.slice(leftIndicator.x, rightIndicator.x); 
																						  });
				moveIndicator.addEventListener(EffectEvent.EFFECT_END, function():void {updateBoxFromSlider = true; 
																						if(callbackFunc != null) callbackFunc.call(this, rest)});
				moveIndicator.play();
			}
			
			private function clickUpdate(value:int):void
		 	{
		 		leftIndicator.x += value; rightIndicator.x += value;
		 		slider.dispatchEvent(new SliderEvent('change'));
		 	}
		 	
		 	private function stopDragging(event:MouseEvent):void
            {
                rangeDrag = false;
                mainDrag = false;
                this.systemManager.removeEventListener(MouseEvent.MOUSE_MOVE, moveChart);
                this.systemManager.removeEventListener(MouseEvent.MOUSE_UP, stopDragging);
            }
            
		/**
		 * Determines which chart instance is being dragged, and updates the left and right indicator x values
		 */
            private function moveChart(event:MouseEvent):void
            {
                if(mainDrag)
                {
                    leftIndicator.x = staticLeftBoundary + (mouseXRef - this.mouseX) / 
                    									   (mainChartArea.width / myData.length);
                    rightIndicator.x = staticRightBoundary + (mouseXRef - this.mouseX) / 
                    										 (mainChartArea.width / myData.length);
                }
                else if(rangeDrag)
                {
                    leftIndicator.x = staticLeftBoundary - (mouseXRef - this.mouseX) / rangeDataRatio;
                    rightIndicator.x = staticRightBoundary - (mouseXRef - this.mouseX) / rangeDataRatio;
                }
            }
		]]>
	</mx:Script>
	<mx:Canvas id="mainChartContainer" x="0" y="25" width="{CHART_WIDTH}" height="{MAIN_CHART_HEIGHT}" 
				   horizontalScrollPolicy="off" verticalScrollPolicy="off" borderSides="left right top">
		<mx:LineChart id="mainChart" x="-2" y="0" showDataTips="false" dataProvider="{myData}"
						  width="{CHART_WIDTH}" height="{MAIN_CHART_HEIGHT-20}">
			<mx:horizontalAxis>
				<mx:CategoryAxis dataProvider="{myData}" categoryField="{dimension}"/>	
			</mx:horizontalAxis>
			<mx:annotationElements>
	            <mx:Canvas id="mainChartArea" width="100%" height="100%" buttonMode="true" 
	            		   mouseDown="setMouseDown(mainChart);" />
	        </mx:annotationElements>
		</mx:LineChart>
	</mx:Canvas>
	<mx:Canvas id="rangeChartContainer" 	
				   x="15" y="{mainChartContainer.y + mainChartContainer.height - 2 - 18}" 
				   width="{CHART_WIDTH - 31}" height="{RANGE_CHART_HEIGHT}" 
				   horizontalScrollPolicy="off" verticalScrollPolicy="off" 
				   borderSides="left right" >
				   
			<mx:LineChart x="-2" y="0" id="rangeChart" backgroundElements="[]" 	
						  showDataTips="false" dataProvider="{rangeData}" 
						  width="{CHART_WIDTH}" height="{RANGE_CHART_HEIGHT}">
			
				<mx:horizontalAxis>
					<mx:CategoryAxis id="a1" dataProvider="{rangeData}" categoryField="{dimension}"/>
				</mx:horizontalAxis>
		        
		        <mx:horizontalAxisRenderers>
		        	<mx:AxisRenderer axis="{a1}" styleName="noAxisStyle" />
		        </mx:horizontalAxisRenderers>		        
		        
		        <mx:verticalAxisRenderers>
		        	<mx:AxisRenderer axis="{a1}" styleName="noAxisStyle"  />
		        </mx:verticalAxisRenderers>
		        
				<mx:annotationElements>
					<mx:HDividedBox id="dividedBox" horizontalScrollPolicy="off"
									width="100%" height="100%" 
									liveDragging="true" 
									dividerRelease="updateIndicatorValuesWithEffect();"																	
									borderSides="bottom top">
					
						<mx:Canvas id="leftBox" backgroundColor="#FFFFFF" backgroundAlpha="0.5" width="50%" height="100%" 
								   borderColor="#333333" borderThickness="1" borderStyle="solid" borderSides="top right" />
						<mx:Canvas backgroundColor="#FFFFFF" backgroundAlpha="0" width="50%" height="100%" buttonMode="true" 
								   mouseDown="setMouseDown(rangeChart);" />
						<mx:Canvas id="rightBox" backgroundColor="#FFFFFF" backgroundAlpha="0.5" width="0%" height="100%" 
								   borderColor="#333333" borderThickness="1" borderStyle="solid" borderSides="top left" />
						
					</mx:HDividedBox>
				</mx:annotationElements>
				
			</mx:LineChart>
			
		</mx:Canvas>
		<mx:Canvas id="rangeSelectorContainer" 
					   x="2" y="{rangeChartContainer.y + rangeChartContainer.height - 13}" 
					   width="{dividedBox.width}" height="25" horizontalScrollPolicy="off">
					   <mx:Button cornerRadius="2" width="14" height="12" x="0" y="8" 
					   click="clickUpdate(-20)" icon="{leftScroll}" />					   
					   <mx:HSlider id="slider" x="14" y="0" height="25" width="{rangeSelectorContainer.width - 28}"
						   	showDataTip="false"
						   	showTrackHighlight="true"
						   	allowTrackClick="false" allowThumbOverlap="false"
						   	change="updateBox()"
						   	thumbCount="2"
						   	liveDragging="true"
						   	snapInterval="1"
						   	values="{[leftIndicator.x, rightIndicator.x]}"
						   	minimum="0" maximum="{rangeData.length}"/>
					   	<mx:Button cornerRadius="2" width="14" height="12" x="{slider.width + 13}" y="8" 
					   click="clickUpdate(20)" icon="{rightScroll}" />
	    </mx:Canvas>
		<mx:Canvas x="15" y="{rangeSelectorContainer.y + rangeSelectorContainer.height - 5}" 
	    		   width="100%" height="25" 
	    		   horizontalScrollPolicy="off" visible="true" includeInLayout="true" >
			<mx:VRule id="leftIndicator" width="1" height="15" y="5" strokeColor="#000000" />
			<mx:VRule id="rightIndicator" width="1" height="15" y="5" strokeColor="#000000" />
		</mx:Canvas>
</mx:Canvas>
