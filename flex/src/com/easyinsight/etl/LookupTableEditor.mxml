<?xml version="1.0" ?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
         xmlns:filtering="com.easyinsight.filtering.*" xmlns:easyinsight="com.easyinsight.*"
         implements="com.easyinsight.listing.IPerspective" width="100%" height="100%"
         horizontalAlign="center" styleName="screenBackground" creationComplete="setup()">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisCloseEvent;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemNode;
        import com.easyinsight.analysis.AnalysisItemTypes;
        import com.easyinsight.analysis.AnalysisItemWrapper;
        import com.easyinsight.analysis.FeedMetadata;
        import com.easyinsight.analysis.StringValue;
        import com.easyinsight.analysis.Value;
        import com.easyinsight.commands.CommandEvent;
        import com.easyinsight.commands.CommandProcessor;
        import com.easyinsight.util.ProgressAlert;

        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.managers.BrowserManager;
        import mx.utils.URLUtil;

        private var _lookupTable:LookupTable;
        private var _lookupTableID:int;

        public function set lookupTableID(value:int):void {
            _lookupTableID = value;
        }

        protected override function commitProperties():void {
            super.commitProperties();
            ProgressAlert.alert(this, "Retrieving details...", null, etlService.getLookupTable);
            etlService.getLookupTable.send(_lookupTableID);
        }

        private function setup():void {
            commandProcessor = new CommandProcessor();
            addEventListener(CommandEvent.COMMAND, onCommand);
        }

        private var commandProcessor:CommandProcessor;

        private function onCommand(event:CommandEvent):void {
            commandProcessor.addCommand(event.command);
        }

        private var sourceItem:AnalysisItem;

        private var targetItem:AnalysisItem;

        private var lookupMap:Object;

        private function gotLookupTable():void {
            _lookupTable = etlService.getLookupTable.lastResult as LookupTable;
            feedID = _lookupTable.dataSourceID;
            sourceItem = _lookupTable.sourceField;
            targetItem = _lookupTable.targetField;
            if (_lookupTable.targetField.hasType(AnalysisItemTypes.DATE)) {
                rowType = "date";
            } else if (_lookupTable.targetField.hasType(AnalysisItemTypes.MEASURE)) {
                rowType = "measure";
            } else {
                rowType = "grouping";
            }
            tableName = _lookupTable.name;
            sourceFieldName = sourceItem.display;
            targetFieldName = targetItem.display;
            masterLookupTable = new Object();
            lookupMap = new Object();
            //var valueStrings:ArrayCollection = new ArrayCollection();
            for each (var pair:LookupPair in _lookupTable.lookupPairs) {
                lookupMap[String(pair.sourceValue.getValue())] = pair;
                masterLookupTable[String(pair.sourceValue.getValue())] = pair;
                //valueStrings.addItem(String(pair.sourceValue.getValue()));
            }
            /*valueStrings.sort = new Sort();
             valueStrings.refresh();
             for each (var valueString:String in valueStrings) {
             var lookupPair:LookupPair = masterLookupTable[valueString];
             lookupMap[valueString] = lookupPair;
             var row:LookupTableRow = new LookupTableRow();
             row.pair = lookupPair;
             row.mode = rowType;
             lookupTableBox.addChild(row);
             editors.addItem(row);
             }*/
            var feedFragmentObject:Object = new Object();
            feedFragmentObject.lookupTableID = _lookupTable.urlKey;
            var feedFragmentString:String = URLUtil.objectToString(feedFragmentObject);
            BrowserManager.getInstance().setFragment(feedFragmentString);
            BrowserManager.getInstance().setTitle("Easy Insight - " + _lookupTable.name);
            ProgressAlert.alert(this, "Retrieving possible values for the lookup table...", null, dataService.getFeedMetadata, etlService.getLookupTablePairs);
            //dataService.getAnalysisItemMetadata.send(_lookupTable.dataSourceID, _lookupTable.sourceField, CredentialsCache.getCache().createCredentials(), 0);
            dataService.getFeedMetadata.send(_lookupTable.dataSourceID);
            etlService.getLookupTablePairs.send(_lookupTable.lookupTableID, new ArrayCollection());
        }

        private var rowType:String;

        private var changed:Boolean = false;

        private function updated():void {

        }

        [Bindable]
        private var tableName:String;
        [Bindable]
        private var sourceFieldName:String;
        [Bindable]
        private var targetFieldName:String;

        [Bindable]
        private var feedID:int;
        [Bindable]
        private var availableDimensions:ArrayCollection;
        [Bindable]
        private var allFields:ArrayCollection;

        private var masterLookupTable:Object = new Object();

        private function gotPairs():void {
            for each (var existingRow:LookupTableRow in editors) {
                var existingPair:LookupPair = existingRow.save();
                masterLookupTable[String(existingPair.sourceValue.getValue())] = existingPair;
            }
            lookupTableBox.removeAllChildren();
            lookupMap = new Object();
            pages = new ArrayCollection();
            var values:ArrayCollection = etlService.getLookupTablePairs.lastResult as ArrayCollection;
            var sort:Sort = new Sort();
            var valueStrings:ArrayCollection = new ArrayCollection();
            for each (var val:Value in values) {
                valueStrings.addItem(String(val.getValue()));
            }
            sort.fields = [ new SortField(null, true) ];
            valueStrings.sort = sort;
            valueStrings.refresh();

            var pageCtr:int = 0;
            var itemCtr:int = 0;
            var page:LookupTablePage;

            for each (var valueString:String in valueStrings) {

                if (itemCtr == 0) {
                    page = new LookupTablePage();
                    page.rowType = rowType;
                    pages.addItem(page);
                    pageCtr++;
                }
                var pair:LookupPair = masterLookupTable[valueString];
                if (pair == null) {
                    pair = new LookupPair();
                    var strValue:StringValue = new StringValue();
                    strValue.value = valueString;
                    pair.sourceValue = strValue;
                    if (rowType == "grouping") {
                        var emptyValue:StringValue = new StringValue();
                        emptyValue.value = "";
                        pair.targetValue = emptyValue;
                    }
                    masterLookupTable[valueString] = pair;
                }
                lookupMap[valueString] = pair;
                page.pairs.addItem(pair);
                //editors.addItem(row);
                itemCtr++;
                if (itemCtr == 15) {
                    itemCtr = 0;
                }
            }
            if (pages.length > 0) {
                lookupTableBox.addChild(pages.getItemAt(0) as LookupTablePage);
            }
            this.maxPages = pageCtr;
            pageLabel = maxPages + " pages";
            nextPageEnabled = maxPages > 1;
        }

        private var maxPages:int;

        private var pages:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var prevPageEnabled:Boolean;

        [Bindable]
        private var nextPageEnabled:Boolean;

        private function previousPage():void {
            nextPageEnabled = true;
            var newIndex:int = lookupTableBox.selectedIndex - 1;
            if (newIndex == 0) {
                prevPageEnabled = false;
            }
            lookupTableBox.selectedIndex = newIndex;
        }

        private function nextPage():void {
            prevPageEnabled = true;
            var newIndex:int = lookupTableBox.selectedIndex + 1;
            if (lookupTableBox.getChildren().length <= newIndex) {
                lookupTableBox.addChild(pages.getItemAt(newIndex) as LookupTablePage);
            }
            if (newIndex == (maxPages - 1)) {
                nextPageEnabled = false;
            }
            lookupTableBox.selectedIndex = newIndex;
        }

        private function gotDefinition():void {
            var feedDefinition:FeedMetadata = dataService.getFeedMetadata.lastResult as FeedMetadata;
            // allFields = new ArrayCollection();

            allFields = new ArrayCollection();
            var dimensions:ArrayCollection = new ArrayCollection();
            for each (var analysisItem:AnalysisItem in feedDefinition.fields) {
                if (analysisItem.hasType(AnalysisItemTypes.DIMENSION)) {
                    dimensions.addItem(analysisItem);
                }
                var aNode:AnalysisItemNode = new AnalysisItemNode();
                aNode.analysisItem = analysisItem;
                allFields.addItem(new AnalysisItemWrapper(aNode));
            }
            this.availableDimensions = dimensions;
        }

        private function cancel():void {
            dispatchEvent(new AnalysisCloseEvent());
        }

        [Bindable]
        private var pageLabel:String;

        private var editors:ArrayCollection = new ArrayCollection();

        private function save():void {
            var pairs:ArrayCollection = new ArrayCollection();
            for each (var page:LookupTablePage in lookupTableBox.getChildren()) {
                page.save(masterLookupTable, pairs);
            }
            /*for each (var pair:LookupPair in masterLookupTable) {

             for each (var row:LookupTableRow in editors) {
             var savePair:LookupPair = row.save();
             if (String(savePair.sourceValue.getValue()) == String(pair.sourceValue.getValue())) {
             pair.targetValue = savePair.targetValue;
             }
             }
             pairs.addItem(pair);
             }*/
            _lookupTable.lookupPairs = pairs;
            ProgressAlert.alert(this, "Saving...", null, etlService.updateLookupTable);
            etlService.updateLookupTable.send(_lookupTable);
        }

        private function retrieve():void {

        }

        private function onFilterChange(event:Event):void {
            ProgressAlert.alert(this, "Retrieving updated values...", null, etlService.getLookupTablePairs);
            etlService.getLookupTablePairs.send(_lookupTable.lookupTableID, transformContainer.getFilterDefinitions());
        }

        [Bindable]
        private var stackIndex:int = 0;

        public function gotFocus():void {
        }

        public function cleanup():void {
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="feeds" id="etlService">
        <mx:method name="getLookupTable" result="gotLookupTable()"/>
        <mx:method name="updateLookupTable" result="updated()"/>
        <mx:method name="getLookupTablePairs" result="gotPairs()"/>
    </mx:RemoteObject>
    <mx:RemoteObject destination="data" id="dataService">
        <!--<mx:method name="getAnalysisItemMetadata" result="gotMetadata()"/>-->
        <mx:method name="getFeedMetadata" result="gotDefinition()"/>
    </mx:RemoteObject>
    <mx:HBox width="100%" styleName="topButtonBar">
        <mx:Button id="wrapButton" icon="@Embed(source='../../../../assets/document_out.png')" click="cancel()"
                   toolTip="Close" labelPlacement="right" label="Close Editor" styleName="grayButton"/>
        <mx:Button id="saveButton" icon="@Embed(source='../../../../assets/floppy_disk.png')" click="save()"
                   toolTip="Save" labelPlacement="right" label="Save" styleName="grayButton"/>
        <mx:Spacer width="100%"/>
        <easyinsight:LoggedOnStatus textColor="#FFFFFF"/>
    </mx:HBox>
    <mx:Box width="100%" paddingLeft="10" paddingRight="10" paddingBottom="10" paddingTop="10">
        <mx:VBox width="100%" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10" verticalGap="0"
                 borderStyle="solid"
                 borderThickness="1"
                 cornerRadius="8" dropShadowEnabled="true" backgroundColor="#FFFFFF" backgroundAlpha="1">
            <mx:HBox width="100%" horizontalAlign="center">
                <mx:Label text="Lookup Table Name: " fontFamily="Tahoma" fontWeight="bold"/>
                <mx:Label text="{tableName}"/>
                <mx:Label text="Source Field" fontFamily="Tahoma" fontWeight="bold"/>
                <mx:Label text="{sourceFieldName}"/>
                <mx:Label text="Target Field" fontFamily="Tahoma" fontWeight="bold"/>
                <mx:Label text="{targetFieldName}"/>
            </mx:HBox>
            <filtering:TransformContainer id="transformContainer" width="100%"
                                          borderColor="#aaaaaa"
                                          borderStyle="solid"
                                          borderThickness="1" backgroundColor="#ffffff"
                                          backgroundAlpha=".1" feedID="{feedID}"
                                          analysisItems="{allFields}"
                                          paddingBottom="5" paddingLeft="5" paddingRight="5"
                                          paddingTop="5" updatedTransforms="onFilterChange(event)">
                <mx:Button icon="@Embed(source='../../../../assets/funnel.png')"
                           toolTip="Create a Filter to Restrict Values..." click="transformContainer.addNewFilter()"
                           label="New Filter"/>
           </filtering:TransformContainer>
        </mx:VBox>
    </mx:Box>
    <mx:Box width="100%" height="100%" paddingLeft="10" paddingRight="10" paddingBottom="10" paddingTop="10">
        <mx:VBox width="100%" height="100%" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10"
                 verticalGap="0" borderStyle="solid"
                 borderThickness="1"
                 cornerRadius="8" dropShadowEnabled="true" backgroundColor="#FFFFFF" backgroundAlpha="1" horizontalAlign="center">
            <mx:HBox>
                <mx:Button label="Previous Page" click="previousPage()" enabled="{prevPageEnabled}"/>
                <mx:Label text="{pageLabel}"/>
                <mx:Button label="Next Page" click="nextPage()" enabled="{nextPageEnabled}"/>
            </mx:HBox>
            <mx:ViewStack id="lookupTableBox" width="650" resizeToContent="true"/>
            <mx:HBox>
                <mx:Button label="Previous Page" click="previousPage()" enabled="{prevPageEnabled}"/>
                <mx:Label text="{pageLabel}"/>
                <mx:Button label="Next Page" click="nextPage()" enabled="{nextPageEnabled}"/>
            </mx:HBox>
        </mx:VBox>
    </mx:Box>
</mx:VBox>