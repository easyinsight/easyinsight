<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
	creationComplete="addEventListener(KeyboardEvent.KEY_UP, keyedSignon); focusManager.setFocus(userName)"
	title="Login">
	<mx:Script>
		<![CDATA[
			import mx.messaging.channels.AMFChannel;
			import mx.rpc.AsyncResponder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.AsyncToken;
			import mx.messaging.config.ServerConfig;
			import com.easyinsight.framework.NavigationEvent;
			import mx.controls.Alert;
			import com.easyinsight.framework.UserServiceResponse;
                    import com.easyinsight.framework.User;
                    import com.easyinsight.framework.LoginEvent;
                    import mx.managers.PopUpManager;

                    private function handleAuthentication():void {
                    	
                        var authResult:UserServiceResponse= authService.authenticate.lastResult as UserServiceResponse;
                        var successful:Boolean = authResult.successful;
                        if (successful) {                            
                            User.initializeUser(authResult.name, authResult.email,
                            	authResult.accountType, authResult.spaceAllowed, authResult.accountAdmin,
                            authResult.dataSourceCreator, authResult.insightCreator);
                        	User.getInstance().password = authResult.encryptedPassword;
                        	User.getInstance().userName = authResult.userName;
                            PopUpManager.removePopUp(this);
                            dispatchEvent(new LoginEvent(LoginEvent.LOGIN));
                            User.getEventNotifier().dispatchEvent(new LoginEvent(LoginEvent.LOGIN));
                            //_loginContainer.dispatchEvent(new LoginEvent());
                        } else {
                            var failureMessage:String = authResult.failureMessage;
                            failureMessageLabel.text = failureMessage;
                        }
                    }

                    private function signon():void {
                    	if (authService.channelSet == null) {
                    		authService.channelSet = ServerConfig.getChannelSet(authService.destination);                  		
                    	}
                    	var token:AsyncToken = authService.channelSet.login(userName.text, password.text);
                    	token.addResponder(new AsyncResponder(
                    		function (event:ResultEvent, token:Object = null):void {
                    			switch (event.result) {
                    				case "success":
                    					authService.authenticate.send(userName.text, password.text);
                    					break;
                					default:
                						trace(event.result);					
                    			}
                    		},
                    		function (event:FaultEvent, token:Object = null):void {
                    			switch (event.fault.faultCode) {
                    				case "Client.Authentication":
                    				default:
                    					var failureMessage:String = event.fault.faultString;
                            			failureMessageLabel.text = failureMessage;
                    			}
                    		}
                		));
                        
                    }

                    private function cancel():void {
                        PopUpManager.removePopUp(this);                        
                    }
                    
                    private function keyedSignon(event:KeyboardEvent):void {
                    	if (event.keyCode == Keyboard.ENTER) {
                    		signon();	
                    	}
                    }
                    
                    private function createNewAccount():void {
                    	User.getEventNotifier().dispatchEvent(new NavigationEvent(NavigationEvent.ACCOUNTS));
                    	PopUpManager.removePopUp(this);
                    }
                ]]>
	</mx:Script>
	<mx:VBox styleName="TitleWindowContents">
	<mx:Form>
			<mx:FormItem label="User Name:" direction="horizontal">
				<mx:TextInput id="userName"/>				
			</mx:FormItem>
			<mx:FormItem label="Password:" direction="horizontal">
				<mx:TextInput id="password" displayAsPassword="true"/>				
			</mx:FormItem>
			<mx:FormItem>
				<mx:Button label="Sign In" click="signon()"/>
			</mx:FormItem>
			<mx:FormItem label="Don't have an account yet?">
				<mx:Button label="Create Account" click="createNewAccount()"/>
			</mx:FormItem>
			<mx:FormItem label="">
				<mx:Button label="Cancel" click="cancel()"/>
			</mx:FormItem>
	</mx:Form>
	<mx:Text text="" id="failureMessageLabel"/>
	</mx:VBox>
	<mx:RemoteObject id="authService" destination="login">
		<mx:method name="authenticate" result="handleAuthentication()"/>
	</mx:RemoteObject>
</mx:TitleWindow>
