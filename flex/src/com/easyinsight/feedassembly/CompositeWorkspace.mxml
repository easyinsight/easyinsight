<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*" width="100%" height="100%"
           creationComplete="initializeData()" xmlns:adobe="com.adobe.flex.extras.controls.springgraph.*"
           implements="com.easyinsight.administration.feed.IFeedAdminDetail">
    <mx:Metadata>
        [Event(name="feedChange", type="com.easyinsight.administration.feed.FeedChangeEvent")]
    </mx:Metadata>
    <mx:Script>
		<![CDATA[
        import com.adobe.flex.extras.controls.springgraph.Graph;
        import com.adobe.flex.extras.controls.springgraph.Item;
        import com.easyinsight.administration.feed.FeedChangeEvent;
        import com.easyinsight.administration.feed.FeedDefinitionData;
        import com.easyinsight.analysis.ReportFault;
        import com.easyinsight.customupload.ProblemDataEvent;
        import com.easyinsight.solutions.AddFeedToSolutionWindow;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.solutions.FeedSelectionEvent;
        import com.easyinsight.util.EdgeSelectionEvent;
        import com.easyinsight.util.GraphEvent;
        import com.easyinsight.util.GraphFeedNode;
        import com.easyinsight.util.GraphFeedNodeFactory;
        import com.easyinsight.util.GraphLine;
        import com.easyinsight.util.GraphSelectionState;
        import com.easyinsight.util.NodeSelectionEvent;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.TestEdgeRenderer;

        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.controls.Alert;
        import mx.managers.PopUpManager;

        [Bindable]
        private var allFeeds:ArrayCollection;
        [Bindable]
        private var graph:Graph = new Graph();

        public var compositeFeedID:int;

        private var initialFeedIDs:ArrayCollection;


        [Bindable]
        private var testEdgeRenderer:TestEdgeRenderer;

        [Bindable]
        private var edgeCreationAllowed:Boolean = false;
        [Bindable]
        private var deletionAllowed:Boolean = false;

        private var definedNodes:ArrayCollection;
        private var definedEdges:ArrayCollection;

        public function set feeds(feedList:ArrayCollection):void {
            this.initialFeedIDs = feedList;
        }

        public function addExistingDef(nodes:ArrayCollection, edges:ArrayCollection, dataSourceID:int):void {
            definedNodes = nodes;
            definedEdges = edges;
            compositeFeedID = dataSourceID;
        }

        private function initializeData():void {
            testEdgeRenderer = new TestEdgeRenderer(s);
            feedService.searchForSubscribedFeeds.send();
            if (compositeFeedID > 0) {
                feedService.searchForHiddenChildren.send(compositeFeedID);
            }
            s.addEventListener(NodeSelectionEvent.NODE_SELECTED, nodeSelected);
            s.addEventListener(NodeSelectionEvent.NODE_CTRL_SELECT, nodeCtrlSelect);
            s.addEventListener(NodeSelectionEvent.NODE_DESELECTED, nodeDeselected);
            s.addEventListener(EdgeSelectionEvent.EDGE_SELECTED, edgeSelected);
            s.addEventListener(EdgeSelectionEvent.EDGE_CTRL_SELECT, edgeCtrlSelect);
            s.addEventListener(EdgeSelectionEvent.EDGE_DESELECTED, edgeDeselected);
            s.addEventListener(EdgeEditEvent.EDGE_EDIT, onEdgeEdit);
            s.addEventListener(EdgeEditEvent.EDGE_DELETE, onEdgeDelete);
            s.addEventListener(EdgeEditEvent.EDGE_TEST, onEdgeTest);
            s.addEventListener(GraphEvent.CONNECT, join);
            s.addEventListener(GraphEvent.DELETE, deleteItem);
            addEventListener(ConnectionDeleteEvent.CONNECTION_DELETE, onConnectionDelete);
            addEventListener(FeedSelectionEvent.FEED_DELETED, onDataSourceDelete);
        }

        private function onConnectionDelete(event:ConnectionDeleteEvent):void {
            var firstItem:Item = graph.find(String(event.connection.sourceFeedID));
            var secondItem:Item = graph.find(String(event.connection.targetFeedID));
            graph.unlink(firstItem, secondItem);
            var connLine:GraphLine = null;
            for each (var obj:Object in s.getChildren()) {
                if (obj is GraphLine) {
                    var graphLine:GraphLine = obj as GraphLine;
                    if ((graphLine.fromNodeID == event.connection.sourceFeedID && graphLine.toNodeID == event.connection.targetFeedID) ||
                            (graphLine.fromNodeID == event.connection.targetFeedID && graphLine.toNodeID == event.connection.sourceFeedID)) {
                        connLine = graphLine;
                    }
                }
            }
            s.removeChild(connLine);
            connections.removeItemAt(connections.getItemIndex(event.connection));
            dispatchEvent(new FeedChangeEvent());
        }

        private function onDataSourceDelete(event:FeedSelectionEvent):void {
            var item:Item = graph.find(String(event.feedDescriptor.id));
            for each (var obj:Object in s.getChildren()) {
                if (obj is GraphLine) {
                    var graphLine:GraphLine = obj as GraphLine;
                    if (graphLine.fromNodeID == event.feedDescriptor.id || graphLine.toNodeID == event.feedDescriptor.id) {
                        s.removeChild(graphLine);
                    }
                }
            }
            for each (var conn:CompositeFeedConnection in connections) {
                if (conn.sourceFeedID == event.feedDescriptor.id) {
                    connections.removeItemAt(connections.getItemIndex(conn));
                }
                if (conn.targetFeedID == event.feedDescriptor.id) {
                    connections.removeItemAt(connections.getItemIndex(conn));
                }
            }
            graph.remove(item);
            dataSources.removeItemAt(dataSources.getItemIndex(event.feedDescriptor));

            dispatchEvent(new FeedChangeEvent());
        }

        private function determineCounts():GraphSelectionState {
            var state:GraphSelectionState = new GraphSelectionState();
            for each (var obj:Object in s.getChildren()) {
                if (obj is GraphFeedNode) {
                    var graphFeedNode:GraphFeedNode = obj as GraphFeedNode;
                    if (graphFeedNode.isSelected()) {
                        state.pushNode(graphFeedNode);
                    }
                } else if (obj is GraphLine) {
                    var graphLine:GraphLine = obj as GraphLine;
                    if (graphLine.isSelected()) {
                        state.pushEdge(graphLine);
                    }
                }
            }
            return state;
        }

        private function onEdgeTest(edgeEvent:EdgeEditEvent):void {
            var compositeFeedConnection:CompositeFeedConnection = graph.getLinkData(graph.find(edgeEvent.sourceID), graph.find(edgeEvent.targetID)) as CompositeFeedConnection;
            feedService.testJoin.send(compositeFeedConnection);
        }

        private function tested():void {
            var joinAnalysis:JoinAnalysis = feedService.testJoin.lastResult as JoinAnalysis;
            Alert.show("Analysis showed that " + joinAnalysis.joinedValues.length + " were matched correctly. " + joinAnalysis.sourceDataSourceName + " had " +
                    joinAnalysis.unjoinedSourceValues.length + " values with no match. " + joinAnalysis.targetDataSourceName + " had " +
                    joinAnalysis.unjoinedTargetValues.length + " values with no match.");
        }

        private function onEdgeDelete(edgeEvent:EdgeEditEvent):void {
            var firstItem:Item = graph.find(edgeEvent.sourceID);
            var secondItem:Item = graph.find(edgeEvent.targetID);
            graph.unlink(firstItem, secondItem);
            s.removeChild(edgeEvent.graphLine);
            for each (var conn:CompositeFeedConnection in connections) {
                if (conn.sourceFeedID == int(edgeEvent.sourceID) && conn.targetFeedID == int(edgeEvent.targetID)) {
                    connections.removeItemAt(connections.getItemIndex(conn));
                }
            }
        }

        private function onEdgeEdit(edgeEditEvent:EdgeEditEvent):void {
            var compositeFeedConnection:CompositeFeedConnection = graph.getLinkData(graph.find(edgeEditEvent.sourceID), graph.find(edgeEditEvent.targetID)) as CompositeFeedConnection;
            var joinDetailWindow:JoinDetailWindow = JoinDetailWindow(PopUpManager.createPopUp(this, JoinDetailWindow));
            joinDetailWindow.feedConnection = compositeFeedConnection;
            PopUpUtil.centerPopUp(joinDetailWindow);
        }

        private function join(event:GraphEvent):void {
            var state:GraphSelectionState = determineCounts();
            var firstNode:GraphFeedNode = state.nodeCount[0];
            var secondNode:GraphFeedNode = state.nodeCount[1];
            if (secondNode != null) {
                var manualJoinWindow:ManualJoinWindow = new ManualJoinWindow();
                manualJoinWindow.sourceFeedID = firstNode.feedID;
                manualJoinWindow.targetFeedID = secondNode.feedID;
                manualJoinWindow.addEventListener(JoinSelectionEvent.JOIN_SELECTION, joinsSelected, false, 0, true);
                PopUpManager.addPopUp(manualJoinWindow, this, true);
                PopUpUtil.centerPopUp(manualJoinWindow);
            }
        }

        private function deleteItem(event:GraphEvent):void {

            var node:GraphFeedNode = event.node;
            var item:Item = graph.find(String(node.feedID));
            for each (var obj:Object in s.getChildren()) {
                if (obj is GraphLine) {
                    var graphLine:GraphLine = obj as GraphLine;
                    if (graphLine.fromNodeID == node.feedID || graphLine.toNodeID == node.feedID) {
                        s.removeChild(graphLine);
                    }
                }
            }
            graph.remove(item);
            for each (var source:DataSourceDescriptor in dataSources) {
                if (source.id == node.feedID) {
                    dataSources.removeItemAt(dataSources.getItemIndex(source));
                }
            }

            dispatchEvent(new FeedChangeEvent());
        }

        private function updateState():void {
            var state:GraphSelectionState = determineCounts();
            updateEdgeCreationAllowed(state);
            updateDeletionAllowed(state);
        }

        private function updateEdgeCreationAllowed(state:GraphSelectionState):void {
            var allowed:Boolean = false;
            if (state.nodeCount.length == 2 && state.edgeCount.length == 0) {
                if (!testEdgeRenderer.related(state.nodeCount[0].feedID, state.nodeCount[1].feedID)) {
                    allowed = true;
                }
            }
            edgeCreationAllowed = allowed;
        }

        private function updateDeletionAllowed(state:GraphSelectionState):void {
            deletionAllowed = state.edgeCount.length + state.nodeCount.length > 0;
        }

        private function edgeSelected(event:EdgeSelectionEvent):void {
            onEdgeSelection(event.graphLine);
            updateState();
        }

        private function onSelection(node:GraphFeedNode):void {
            for each (var obj:Object in s.getChildren()) {
                if (obj is GraphFeedNode && obj != node) {
                    var graphFeedNode:GraphFeedNode = obj as GraphFeedNode;
                    graphFeedNode.clearSelection();
                } else if (obj is GraphLine) {
                    var graphLine:GraphLine = obj as GraphLine;
                    graphLine.clearSelection();
                }
            }
        }

        private function onEdgeSelection(line:GraphLine):void {
            for each (var obj:Object in s.getChildren()) {
                if (obj is GraphFeedNode) {
                    var graphFeedNode:GraphFeedNode = obj as GraphFeedNode;
                    graphFeedNode.clearSelection();
                } else if (obj is GraphLine && obj != line) {
                    var graphLine:GraphLine = obj as GraphLine;
                    graphLine.clearSelection();
                }
            }
        }

        private function edgeDeselected(event:EdgeSelectionEvent):void {
            updateState();
        }

        private function edgeCtrlSelect(event:EdgeSelectionEvent):void {
            updateState();
        }

        private function nodeSelected(event:NodeSelectionEvent):void {
            onSelection(event.node);
            updateState();
        }

        private function nodeDeselected(event:NodeSelectionEvent):void {
            updateState();
        }

        private function nodeCtrlSelect(event:NodeSelectionEvent):void {
            updateState();
        }

        private function gotHiddenChildren():void {
            if (compositeFeedID > 0) {
                var children:ArrayCollection = feedService.searchForHiddenChildren.lastResult as ArrayCollection;
                for each (var child:DataSourceDescriptor in children) {
                    allFeeds.addItem(child);
                }
            }
            var sort:Sort = new Sort();
            var sortField:SortField = new SortField("name");
            sort.fields = [ sortField ];
            allFeeds.sort = sort;
            allFeeds.refresh();
            if (initialFeedIDs != null && initialFeedIDs.length > 0) {
                var dsIDs:ArrayCollection = new ArrayCollection();
                for each (var feedDescriptor:DataSourceDescriptor in initialFeedIDs) {
                    //allFeeds.removeItemAt(allFeeds.getItemIndex(feedDescriptor));
                    addDescriptorToGraph(feedDescriptor, 0, 0);
                    dsIDs.addItem(feedDescriptor.id);
                }
            } else {
                for each (var compositeFeedNode:CompositeFeedNode in definedNodes) {
                    var descriptor:DataSourceDescriptor = findDescriptor(compositeFeedNode.dataFeedID);
                    addDescriptorToGraph(descriptor, compositeFeedNode.x, compositeFeedNode.y);
                }
                for each (var compositeFeedConnection:CompositeFeedConnection in definedEdges) {
                    var fromItem:Item = graph.find(String(compositeFeedConnection.sourceFeedID));
                    var toItem:Item = graph.find(String(compositeFeedConnection.targetFeedID));
                    graph.link(fromItem, toItem, compositeFeedConnection);
                    connections.addItem(compositeFeedConnection);
                }
                //s.dataProvider = graph;
            }
        }

        private function gotFeeds():void {
            allFeeds = feedService.searchForSubscribedFeeds.lastResult as ArrayCollection;
            if (compositeFeedID == 0) {
                gotHiddenChildren();
            }
        }

        private function findDescriptor(feedID:int):DataSourceDescriptor {
            for each (var descriptor:DataSourceDescriptor in allFeeds) {
                if (descriptor.id == feedID) {
                    return descriptor;
                }
            }
            return null;
        }

        private function joinsSelected(event:JoinSelectionEvent):void {
            var edges:ArrayCollection = event.addedJoins;
            for each (var compositeFeedConnection:CompositeFeedConnection in edges) {
                var fromItem:Item = graph.find(String(compositeFeedConnection.sourceFeedID));
                var toItem:Item = graph.find(String(compositeFeedConnection.targetFeedID));
                graph.link(fromItem, toItem, compositeFeedConnection);
                connections.addItem(compositeFeedConnection);
            }
            dispatchEvent(new FeedChangeEvent());
            //s.dataProvider = graph;
        }


        private function addDescriptorToGraph(descriptor:DataSourceDescriptor, xPosition:int, yPosition:int):void {
            var item:Item = new Item(String(descriptor.id));
            item.data = new Object();
            if (xPosition > 0) {
                item.initialX = xPosition;
                item.initialY = yPosition;
            }
            item.data["feedID"] = String(descriptor.id);
            item.data["feedName"] = descriptor.name;
            graph.add(item);
            dataSources.addItem(descriptor);
        }

        private var queuedExistings:ArrayCollection;
        private var queuedNews:ArrayCollection;

        private function onProblem(event:ProblemDataEvent):void {
            
        }

        private function gotCredentials():void {
            var fault:ReportFault = feedService.getCredentials.lastResult as ReportFault;
            if (fault != null) {
                fault.popup(this, onProblem);
            }
        }

        public function createNodes():ArrayCollection {
            var compositeFeedNodes:ArrayCollection = new ArrayCollection();
            for each (var item:Item in graph.nodes) {
                var feedID:Number = Number(item.id);
                var node:CompositeFeedNode = new CompositeFeedNode();
                for each (var obj:Object in s.getChildren()) {
                    if (obj is GraphFeedNode) {
                        var graphNode:GraphFeedNode = obj as GraphFeedNode;
                        if (graphNode.data == item) {
                            node.x = graphNode.x;
                            node.y = graphNode.y;
                        }
                    }
                }

                node.dataFeedID = feedID;

                compositeFeedNodes.addItem(node);
            }
            return compositeFeedNodes;
        }

        public function createEdges():ArrayCollection {
            var compositeFeedConnections:ArrayCollection = new ArrayCollection();

            for each (var edgeArray:Array in graph.edges) {
                var connection:CompositeFeedConnection = graph.getLinkData(edgeArray[0], edgeArray[1]) as CompositeFeedConnection;
                compositeFeedConnections.addItem(connection);
            }
            return compositeFeedConnections;
        }

        public function updateDataSource(feedDefinition:FeedDefinitionData):void {
            var compositeFeedDefinition:CompositeFeedDefinition = feedDefinition as CompositeFeedDefinition;
            compositeFeedDefinition.compositeFeedNodes = createNodes();
            compositeFeedDefinition.connections = createEdges();
        }

        public function validate():Boolean {
            var valid:Boolean = true;
            var failureMessage:String;
            if (graph.nodeCount == 0) {
                failureMessage = "You must have at least one data source.";
                valid = false;
            } else if (graph.nodeCount > 1) {
                for each (var item:Item in graph.nodes) {
                    var foundOne:Boolean = graph.neighbors(item.id) != null;
                    if (!foundOne) {
                        failureMessage = "You must connect all data sources.";
                        valid = false;
                    }
                }
            }
            return valid;
        }

        [Bindable]
        private var dataSources:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var connections:ArrayCollection = new ArrayCollection();

        private function addDataSource():void {
            var window:AddFeedToSolutionWindow = new AddFeedToSolutionWindow();
            window.addEventListener(FeedSelectionEvent.FEED_SELECTED, onDataSource, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function onDataSource(event:FeedSelectionEvent):void {
            addDescriptorToGraph(event.feedDescriptor, 0, 0);
        }

        private function addConnection():void {
            var window:DSPickJoinWindow = new DSPickJoinWindow();
            window.dataSources = dataSources;
            window.addEventListener(JoinSelectionEvent.JOIN_SELECTION, joinsSelected, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }
		]]>
	</mx:Script>
    <mx:RemoteObject destination="feeds" id="feedService">
        <mx:method name="searchForSubscribedFeeds" result="gotFeeds()"/>
        <mx:method name="searchForHiddenChildren" result="gotHiddenChildren()"/>
        <mx:method name="testJoin" result="tested()"/>
    </mx:RemoteObject>
    <mx:VBox width="100%" height="100%" backgroundColor="#E0E0E0">
        <mx:HBox width="100%" paddingLeft="10" paddingRight="10">
            <mx:VBox width="40%">
                <mx:HBox width="100%" horizontalAlign="center">
                    <mx:Label text="Data Sources" fontSize="16"/>
                </mx:HBox>
                <mx:Button label="Add Data Source..." click="addDataSource()" styleName="grayButton"/>
                <mx:DataGrid dataProvider="{dataSources}" width="300" rowHeight="28">
                    <mx:columns>
                        <util:EIDataGridColumn dataField="name" headerText="Data Source"/>
                        <util:EIDataGridColumn headerText="" dataField="name" width="50" sortable="false" itemRenderer="com.easyinsight.feedassembly.DataSourceControls"/>
                    </mx:columns>
                </mx:DataGrid>
            </mx:VBox>
            <mx:VBox width="60%">
                <mx:HBox width="100%" horizontalAlign="center">
                    <mx:Label text="Joins" fontSize="16"/>
                </mx:HBox>
                <mx:Button label="Add Join..." click="addConnection()" styleName="grayButton"/>
                <mx:DataGrid dataProvider="{connections}" width="600" rowHeight="28">
                    <mx:columns>
                        <util:EIDataGridColumn dataField="sourceFeedName" headerText="Data Source"/>
                        <util:EIDataGridColumn dataField="sourceDisplay" headerText="Source Field"/>
                        <util:EIDataGridColumn dataField="targetDisplay" headerText="Target Field"/>
                        <util:EIDataGridColumn dataField="targetFeedName" headerText="Data Source"/>
                        <util:EIDataGridColumn headerText="" dataField="name" width="100" sortable="false" itemRenderer="com.easyinsight.feedassembly.ConnectionControls"/>
                    </mx:columns>
                </mx:DataGrid>
            </mx:VBox>
        </mx:HBox>
        <adobe:SpringGraph id="s" backgroundColor="#777777" lineColor="#6666ff"
                           edgeRenderer="{testEdgeRenderer}" itemRenderer="{new GraphFeedNodeFactory()}"
                           width="100%" height="100%" autoFit="true" dataProvider="{graph}"/>
    </mx:VBox>
</mx:Canvas>