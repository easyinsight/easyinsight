<?xml version="1.0"?>
<util:EISlimWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemTypes;

        import com.easyinsight.analysis.DerivedKey;
        import com.easyinsight.util.ProgressAlert;

        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.controls.Alert;
        import mx.managers.PopUpManager;

        [Bindable]
        public var dataSources:ArrayCollection;

        [Bindable]
        private var index:int;

        [Bindable]
        private var sourceFeedName:String;

        [Bindable]
        private var targetFeedName:String;

        [Bindable]
        private var sourceFields:ArrayCollection;

        [Bindable]
        private var targetFields:ArrayCollection;

        private var sourceID:int;

        private var targetID:int;

        public var metadataFields:ArrayCollection;

        private function chooseSources():void {
            if (sourceDataBox.selectedItem.id == targetDataBox.selectedItem.id) {
                Alert.show("You can't connect a data source to itself.");
            } else {
                ProgressAlert.alert(this, "Retrieving metadata...", null, feedService.getMultipleFeeds);
                feedService.getMultipleFeeds.send(sourceDataBox.selectedItem.id, targetDataBox.selectedItem.id);
            }
        }

        private function populateFields1():void {
            sourceFields = new ArrayCollection();
            targetFields = new ArrayCollection();
            for each (var field:AnalysisItem in metadataFields) {
                if (field.key is DerivedKey) {
                    var dKey:DerivedKey = field.key as DerivedKey;
                    if (dKey.feedID == sourceID) {
                        sourceFields.addItem(field);
                    } else if (dKey.feedID == targetID) {
                        targetFields.addItem(field);
                    }
                }
            }

            var sort:Sort = new Sort();
            sort.fields = [ new SortField("display", false) ];

            sourceFields.sort = sort;
            sourceFields.refresh();

            targetFields.sort = sort;
            targetFields.refresh();
        }

        private function populateFields2(response:CompositeResponse):void {
            var sort:Sort = new Sort();
            sort.fields = [ new SortField("display", false) ];

            var groupingSourceFields:ArrayCollection = new ArrayCollection();
            for each (var field:AnalysisItem in response.firstFields) {
                if (field.hasType(AnalysisItemTypes.DIMENSION) && !field.hasType(AnalysisItemTypes.DATE)) {
                    groupingSourceFields.addItem(field);
                }
            }
            sourceFields = groupingSourceFields;
            sourceFields.sort = sort;
            sourceFields.refresh();
            var groupingTargetFields:ArrayCollection = new ArrayCollection();
            for each (var targetField:AnalysisItem in response.secondFields) {
                if (targetField.hasType(AnalysisItemTypes.DIMENSION) && !targetField.hasType(AnalysisItemTypes.DATE)) {
                    groupingTargetFields.addItem(targetField);
                }
            }
            targetFields = groupingTargetFields;
            targetFields.sort = sort;
            targetFields.refresh();
        }

        private function gotFeeds():void {
            var response:CompositeResponse = feedService.getMultipleFeeds.lastResult as CompositeResponse;
            sourceFeedName = response.firstName;
            targetFeedName = response.secondName;
            sourceID = response.firstID;
            targetID = response.secondID;

            if (metadataFields == null) {
                populateFields2(response);
            } else {
                populateFields1();
            }

            /**/
            index = 1;
        }

        private function join():void {
            var connects:ArrayCollection = new ArrayCollection();
            var connect:CompositeFeedConnection = new CompositeFeedConnection();
            connect.sourceFeedID = sourceID;
            connect.targetFeedID = targetID;
            connect.sourceItem = sourceBox.selectedItem as AnalysisItem;
            connect.targetItem = targetBox.selectedItem as AnalysisItem;
            connect.sourceFeedName = sourceFeedName;
            connect.targetFeedName = targetFeedName;
            connects.addItem(connect);
            dispatchEvent(new JoinSelectionEvent(connects));
            PopUpManager.removePopUp(this);
        }


        ]]></mx:Script>
    <mx:RemoteObject destination="feeds" id="feedService">
        <mx:method name="getMultipleFeeds" result="gotFeeds()"/>
    </mx:RemoteObject>
    <mx:ViewStack selectedIndex="{index}">
        <mx:VBox>
            <mx:Label text="Which data sources do you want to join?"/>
            <mx:HBox verticalAlign="middle">
                <mx:Label text="I want to connect "/>
                <mx:ComboBox id="sourceDataBox" dataProvider="{dataSources}" labelField="name"/>
                <mx:Label text="to"/>
                <mx:ComboBox id="targetDataBox" dataProvider="{dataSources}" labelField="name"/>
            </mx:HBox>
            <mx:HBox width="100%" horizontalAlign="center">
                <util:SaveButton label="Join These Data Sources" click="chooseSources()"/>
                <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
            </mx:HBox>
        </mx:VBox>
        <mx:VBox>
            <mx:HBox>
                <mx:VBox>
                    <mx:Label text="{sourceFeedName}"/>
                    <util:SmartComboBox id="sourceBox" dataProvider="{sourceFields}" labelField="display"/>
                </mx:VBox>
                <mx:VBox>
                    <mx:Label text="{targetFeedName}"/>
                    <util:SmartComboBox id="targetBox" dataProvider="{targetFields}" labelField="display"/>
                </mx:VBox>
            </mx:HBox>
            <mx:HBox width="100%" horizontalAlign="center">
                <util:SaveButton label="Use These Fields" click="join()"/>
                <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
            </mx:HBox>
        </mx:VBox>
    </mx:ViewStack>

</util:EISlimWindow>
