<?xml version="1.0"?>
<util:EISlimWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*">
    <mx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemTypes;

        import com.easyinsight.analysis.DerivedKey;
        import com.easyinsight.analysis.FeedMetadata;
        import com.easyinsight.analysis.ReportKey;
        import com.easyinsight.quicksearch.EIDescriptor;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.ProgressAlert;

        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.controls.Alert;
        import mx.managers.PopUpManager;

        [Bindable]
        private var _dataSources:ArrayCollection;

        public function set dataSources(value:ArrayCollection):void {
            if (value != null) {
                _dataSources = new ArrayCollection(value.toArray());
                _dataSources.sort = new Sort();
                _dataSources.sort.fields = [ new SortField("name")];
                _dataSources.refresh();
            }
        }

        [Bindable]
        private var index:int;

        [Bindable]
        private var sourceFeedName:String;

        [Bindable]
        private var targetFeedName:String;

        [Bindable]
        private var sourceFields:ArrayCollection;

        [Bindable]
        private var targetFields:ArrayCollection;

        private var sourceID:int;

        private var sourceIDType:int = EIDescriptor.DATA_SOURCE;

        private var targetID:int;

        private var targetIDType:int = EIDescriptor.DATA_SOURCE;

        public var metadataFields:ArrayCollection;

        public static const USE_SPECIFIED_FIELDS:int = 1;
        public static const MULTIPLE_FEEDS:int = 2;
        public static const SINGLE_FEED:int = 3;

        public var dataSourceID:int;

        private var _mode:int = MULTIPLE_FEEDS;

        public function set mode(value:int):void {
            _mode = value;
        }

        private function chooseSources():void {
            if (sourceDataBox.selectedItem.id == targetDataBox.selectedItem.id) {
                Alert.show("You can't connect a data source to itself.");
            } else {
                if (_mode == MULTIPLE_FEEDS) {
                    ProgressAlert.alert(this, "Retrieving metadata...", null, feedService.getMultipleFeeds);
                    if (sourceDataBox.selectedItem is InsightDescriptor) {
                        sourceIDType = EIDescriptor.REPORT;
                    } else {
                        sourceIDType = EIDescriptor.DATA_SOURCE;
                    }
                    if (targetDataBox.selectedItem is InsightDescriptor) {
                        targetIDType = EIDescriptor.REPORT;
                    } else {
                        targetIDType = EIDescriptor.DATA_SOURCE;
                    }
                    feedService.getMultipleFeeds.send(sourceDataBox.selectedItem, targetDataBox.selectedItem);
                } else {
                    sourceFeedName = sourceDataBox.selectedItem.name;
                    targetFeedName = targetDataBox.selectedItem.name;
                    sourceID = sourceDataBox.selectedItem.id;
                    if (sourceDataBox.selectedItem is InsightDescriptor) {
                        sourceIDType = EIDescriptor.REPORT;
                    } else {
                        sourceIDType = EIDescriptor.DATA_SOURCE;
                    }
                    targetID = targetDataBox.selectedItem.id;
                    if (targetDataBox.selectedItem is InsightDescriptor) {
                        targetIDType = EIDescriptor.REPORT;
                    } else {
                        targetIDType = EIDescriptor.DATA_SOURCE;
                    }
                    if (_mode == USE_SPECIFIED_FIELDS) {
                        populateFields1();
                        index = 1;
                    } else {
                        ProgressAlert.alert(this, "Retrieving metadata...", null, dataService.getFeedMetadata);
                        dataService.getFeedMetadata.send(dataSourceID);
                    }
                }
            }
        }

        private function gotFeed():void {
            var feed:FeedMetadata = dataService.getFeedMetadata.lastResult as FeedMetadata;
            sourceFields = new ArrayCollection();
            targetFields = new ArrayCollection();
            for each (var field:AnalysisItem in feed.fields) {
                if (field.key is DerivedKey) {
                    var dKey:DerivedKey = field.key as DerivedKey;
                    if (dKey.feedID == sourceID) {
                        sourceFields.addItem(field);
                    } else if (dKey.feedID == targetID) {
                        targetFields.addItem(field);
                    }
                }
            }

            var sort:Sort = new Sort();
            sort.fields = [ new SortField("display", true) ];

            sourceFields.sort = sort;
            sourceFields.refresh();

            targetFields.sort = sort;
            targetFields.refresh();
            index = 1;
        }

        private function populateFields1():void {
            sourceFields = new ArrayCollection();
            targetFields = new ArrayCollection();
            for each (var field:AnalysisItem in metadataFields) {
                if (field.key is DerivedKey) {
                    var dKey:DerivedKey = field.key as DerivedKey;
                    if (dKey.feedID == sourceID) {
                        sourceFields.addItem(field);
                    } else if (dKey.feedID == targetID) {
                        targetFields.addItem(field);
                    }
                } else if (field.key is ReportKey) {
                    var rKey:ReportKey = field.key as ReportKey;
                    if (rKey.reportID == sourceID) {
                        sourceFields.addItem(field);
                    } else if (rKey.reportID == targetID) {
                        targetFields.addItem(field);
                    }
                }
            }

            var sort:Sort = new Sort();
            sort.fields = [ new SortField("display", true) ];

            sourceFields.sort = sort;
            sourceFields.refresh();

            targetFields.sort = sort;
            targetFields.refresh();
        }

        private function populateFields2(response:CompositeResponse):void {
            var sort:Sort = new Sort();
            sort.fields = [ new SortField("display", true) ];

            var groupingSourceFields:ArrayCollection = new ArrayCollection();
            for each (var field:AnalysisItem in response.firstFields) {
                if (field.hasType(AnalysisItemTypes.DIMENSION)) {
                    groupingSourceFields.addItem(field);
                }
            }
            sourceFields = groupingSourceFields;
            sourceFields.sort = sort;
            sourceFields.refresh();
            var groupingTargetFields:ArrayCollection = new ArrayCollection();
            for each (var targetField:AnalysisItem in response.secondFields) {
                if (targetField.hasType(AnalysisItemTypes.DIMENSION)) {
                    groupingTargetFields.addItem(targetField);
                }
            }
            targetFields = groupingTargetFields;
            targetFields.sort = sort;
            targetFields.refresh();
        }

        private function gotFeeds():void {
            var response:CompositeResponse = feedService.getMultipleFeeds.lastResult as CompositeResponse;
            sourceFeedName = response.firstName;
            targetFeedName = response.secondName;
            sourceID = response.firstID;
            targetID = response.secondID;

            if (metadataFields == null) {
                populateFields2(response);
            } else {
                populateFields1();
            }

            /**/
            index = 1;
        }

        private function join():void {
            var connects:ArrayCollection = new ArrayCollection();
            var connect:CompositeFeedConnection = new CompositeFeedConnection();
            if (sourceIDType == EIDescriptor.DATA_SOURCE) {
                connect.sourceFeedID = sourceID;
            } else if (sourceIDType == EIDescriptor.REPORT) {
                connect.sourceReportID = sourceID;
            }
            if (targetIDType == EIDescriptor.DATA_SOURCE) {
                connect.targetFeedID = targetID;
            } else if (targetIDType == EIDescriptor.REPORT) {
                connect.targetReportID = targetID;
            }
            connect.sourceItem = sourceBox.selectedItem as AnalysisItem;
            connect.targetItem = targetBox.selectedItem as AnalysisItem;
            connect.sourceFeedName = sourceFeedName;
            connect.targetFeedName = targetFeedName;
            connect.sourceOuterJoin = leftJoinCheckbox.selected;
            connect.targetOuterJoin = rightJoinCheckbox.selected;
            connect.sourceJoinOnOriginal = leftMatchCheckbox.selected;
            connect.targetJoinOnOriginal = rightMatchCheckbox.selected;
            connects.addItem(connect);
            dispatchEvent(new JoinSelectionEvent(connects));
            PopUpManager.removePopUp(this);
        }

        [Bindable]
        private var advancedIndex:int = 0;

        private function toggleAdvanced():void {
            if (advancedIndex == 1) {
                advancedIndex = 0;
            } else {
                advancedIndex = 1;
            }
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="feeds" id="feedService">
        <mx:method name="getMultipleFeeds" result="gotFeeds()"/>
    </mx:RemoteObject>
    <mx:RemoteObject destination="data" id="dataService">
        <mx:method name="getFeedMetadata" result="gotFeed()"/>
    </mx:RemoteObject>
    <mx:ViewStack selectedIndex="{index}" resizeToContent="true">
        <mx:VBox>
            <mx:Label text="Which data sources do you want to join?"/>
            <mx:HBox verticalAlign="middle">
                <mx:Label text="I want to connect "/>
                <mx:ComboBox id="sourceDataBox" dataProvider="{_dataSources}" labelField="name" selectedIndex="0"/>
                <mx:Label text="to"/>
                <mx:ComboBox id="targetDataBox" dataProvider="{_dataSources}" labelField="name" selectedIndex="1"/>
            </mx:HBox>
            <mx:HBox width="100%" horizontalAlign="center">
                <util:SaveButton label="Join These Data Sources" click="chooseSources()"/>
                <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
            </mx:HBox>
        </mx:VBox>
        <mx:VBox horizontalAlign="center">
            <mx:HBox>
                <mx:VBox>
                    <mx:Label text="{sourceFeedName}"/>
                    <util:SmartComboBox id="sourceBox" dataProvider="{sourceFields}" labelField="display"/>
                </mx:VBox>
                <mx:VBox>
                    <mx:Label text="{targetFeedName}"/>
                    <util:SmartComboBox id="targetBox" dataProvider="{targetFields}" labelField="display"/>
                </mx:VBox>
            </mx:HBox>
            <mx:LinkButton label="Advanced Options" textDecoration="underline" click="toggleAdvanced()"/>
            <mx:ViewStack selectedIndex="{advancedIndex}" resizeToContent="true" creationPolicy="all">
                <mx:Box/>
                <mx:VBox>
                    <mx:CheckBox label="Only Keep Matching Rows From Source" id="leftJoinCheckbox"/>
                    <mx:CheckBox label="Only Keep Matching Rows From Target" id="rightJoinCheckbox"/>
                    <mx:CheckBox label="Match Source Against Original Data" id="leftMatchCheckbox"/>
                    <mx:CheckBox label="Match Target Against Original Data" id="rightMatchCheckbox"/>
                </mx:VBox>
            </mx:ViewStack>
            <mx:HBox width="100%" horizontalAlign="center">
                <util:SaveButton label="Use These Fields" click="join()"/>
                <util:CancelButton label="Cancel" click="PopUpManager.removePopUp(this)"/>
            </mx:HBox>
        </mx:VBox>
    </mx:ViewStack>

</util:EISlimWindow>
