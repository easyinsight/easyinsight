<?xml version="1.0" ?>
<util:EITitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*"
                    xmlns:schedule="com.easyinsight.schedule.*"
                    creationComplete="setup()">
    <mx:Script><![CDATA[
        import com.easyinsight.administration.feed.AddUserToFeedWindow;
        import com.easyinsight.administration.feed.UserLinkEvent;
        import com.easyinsight.util.PopUpUtil;

        import mx.collections.ArrayCollection;
        import mx.managers.PopUpManager;

        [Bindable]
        private var reports:ArrayCollection;

        private var _activity:ReportDelivery;

        [Bindable]
        private var reportID:int;

        private function setup():void {
            addEventListener(RecipientEvent.DELETE_RECIPIENT, deleteRecipient);
            analysisService.getInsightDescriptors.send();
        }

        private function deleteRecipient(event:RecipientEvent):void {
            recipients.removeItemAt(recipients.getItemIndex(event.user));
        }


        [Bindable(event="activityChanged")]
        public function get activity():ScheduledActivity {
            return _activity;
        }

        public function set activity(value:ScheduledActivity):void {
            if (_activity == value) return;
            _activity = value as ReportDelivery;
            dispatchEvent(new Event("activityChanged"));
        }

        protected override function commitProperties():void {
            super.commitProperties();
            if (_activity != null) {
                htmlEmail = _activity.htmlEmail;
                recipients = _activity.users;
                reportID = _activity.reportID;
                body = _activity.body;
                subjectLine = _activity.subject;
            }
        }

        private var newActivity:Boolean;

        private function save():void {
            newActivity = _activity == null;
            if (activity == null) {
                activity = new ReportDelivery();
            }
            if (scheduleConfiguration.save()) {
                _activity.users = recipients;
                _activity.htmlEmail = htmlEmailCheckbox.selected;
                _activity.reportName = reportComboBox.selectedItem.name;
                _activity.reportID = reportComboBox.selectedItem.id;
                _activity.body = bodyTextInput.text;
                _activity.subject = subjectInput.text;
                var utcOffset:int = new Date().getTimezoneOffset();
                exportService.addOrUpdateSchedule.send(_activity, utcOffset);
            }
        }

        private function saved():void {
            if (newActivity) {
                dispatchEvent(new ScheduleActivityEvent(ScheduleActivityEvent.NEW_ACTIVITY, _activity));
            } else {
                dispatchEvent(new ScheduleActivityEvent(ScheduleActivityEvent.EDIT_ACTIVITY, _activity));
            }
            PopUpManager.removePopUp(this);
        }

        [Bindable]
        private var htmlEmail:Boolean = true;

        private function insertReportLink():void {
            var url:String = "<a href=\"https://www.easy-insight.com/app/#reportID=" + reportComboBox.selectedItem.urlKey + "\">View the Report in Easy Insight</a>";
            bodyTextInput.insertTextAtCursor(url);
        }

        [Bindable]
        private var recipients:ArrayCollection = new ArrayCollection();

        private function gotReports():void {
            reports = analysisService.getInsightDescriptors.lastResult as ArrayCollection;
        }

        private function addRecipient():void {
            var window:AddUserToFeedWindow = new AddUserToFeedWindow();
            window.addEventListener(UserLinkEvent.ADD_USER_LINK, onAddUser, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function onAddUser(event:UserLinkEvent):void {
            recipients.addItem(event.userStub);
        }

        [Bindable]
        private var body:String;

        [Bindable]
        private var subjectLine:String;

        [Bindable]
        private var formatValue:int;
        ]]></mx:Script>
    <mx:RemoteObject destination="exportService" id="exportService">
        <mx:method name="addOrUpdateSchedule" result="saved()"/>
    </mx:RemoteObject>
    <mx:RemoteObject destination="analysisDefinition" id="analysisService">
        <mx:method name="getInsightDescriptors" result="gotReports()"/>
    </mx:RemoteObject>
    <mx:VBox paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
        <mx:HBox>
            <mx:VBox>
                <mx:Form paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
                    <mx:FormItem label="Report:">
                        <util:SmartComboBox dataProvider="{reports}" selectedValue="{reportID}" selectedProperty="id"
                                            id="reportComboBox" labelField="name"/>
                    </mx:FormItem>
                    <mx:FormItem label="Output Format:">
                        <util:SmartComboBox id="outputFormatBox" selectedValue="{formatValue}" selectedProperty="data"
                                            labelField="label">
                            <util:dataProvider>
                                <mx:ArrayCollection>
                                    <mx:Array>
                                        <mx:Object label="Excel" data="1"/>
                                    </mx:Array>
                                </mx:ArrayCollection>
                            </util:dataProvider>
                        </util:SmartComboBox>
                    </mx:FormItem>

                </mx:Form>
                <schedule:ScheduleConfiguration activity="{activity}" id="scheduleConfiguration"/>
                <mx:Form paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
                    <mx:FormItem label="Recipients:">
                        <mx:VBox>
                            <mx:Button label="Add Recipient..." click="addRecipient()"/>
                            <mx:DataGrid dataProvider="{recipients}" rowHeight="28">
                                <mx:columns>
                                    <util:EIDataGridColumn headerText="User" dataField="displayName" width="300"/>
                                    <util:EIDataGridColumn headerText="" dataField="displayName"
                                                           itemRenderer="com.easyinsight.schedule.RecipientControls"
                                                           width="50"
                                                           sortable="false"/>
                                </mx:columns>
                            </mx:DataGrid>
                        </mx:VBox>
                    </mx:FormItem>
                </mx:Form>
            </mx:VBox>
            <mx:VBox horizontalAlign="center">
                <mx:Label text="How do you want to set up the report email?"/>
                <mx:HBox>
                    <mx:CheckBox label="HTML Email" selected="{htmlEmail}" id="htmlEmailCheckbox"/>
                    <mx:Button toolTip="Insert Report Link" click="insertReportLink()"
                               icon="@Embed(source='../../../../assets/link.png')"/>
                </mx:HBox>
                <mx:Form>
                    <mx:FormItem label="Subject Line:">
                        <mx:TextInput width="400" id="subjectInput" text="{subjectLine}"/>
                    </mx:FormItem>
                    <mx:FormItem label="Email Body:">
                        <schedule:CursorTextArea id="bodyTextInput" text="{body}" width="400" height="300"
                                                 borderStyle="inset" borderThickness="1"/>
                    </mx:FormItem>
                </mx:Form>
            </mx:VBox>
        </mx:HBox>
        <mx:HBox width="100%" horizontalAlign="center">
            <mx:Button label="Save" click="save()"/>
            <mx:Button label="Cancel" click="PopUpManager.removePopUp(this)"/>
        </mx:HBox>
    </mx:VBox>
</util:EITitleWindow>