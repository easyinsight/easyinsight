<?xml version="1.0" ?>
<skin:BackgroundImage xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*"
                      creationComplete="setup()"
                      xmlns:skin="com.easyinsight.skin.*" implements="com.easyinsight.listing.IPerspective">
    <mx:Script><![CDATA[
        import com.easyinsight.administration.ArchiveWindow;
        import com.easyinsight.framework.User;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.ProgressAlert;
        import com.easyinsight.util.RolloverLabelEvent;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.UIComponent;
        import mx.events.CloseEvent;
        import mx.managers.BrowserManager;
        import mx.managers.PopUpManager;
        import mx.utils.URLUtil;

        public var embedded:Boolean = false;

        private function setup():void {
            addEventListener(ScheduleActivityEvent.DELETE_ACTIVITY, deleteActivity);
            addEventListener(ScheduleActivityEvent.EDIT_ACTIVITY, editActivity);
            addEventListener(ScheduleActivityEvent.NEW_ACTIVITY, newActivity);
            addEventListener(RolloverLabelEvent.ROLLOVER_LABEL, onEdit);
            if (embedded) {
                gotFocus();
            }
        }

        private function onEdit(event:RolloverLabelEvent):void {
            var activity:ScheduledActivity = ScheduledActivity(event.data);
            if (activity is DataSourceRefreshActivity) {
                var dsWindow:DataSourceScheduleWindow = new DataSourceScheduleWindow();
                dsWindow.activity = activity;
                PopUpManager.addPopUp(dsWindow, this, true);
                PopUpUtil.centerPopUp(dsWindow);
            } else {
                var window:ActivityWindow = new ActivityWindow();
                window.activity = activity as ScheduledDelivery;
                PopUpManager.addPopUp(window, this, true);
                PopUpUtil.centerPopUp(window);
            }
        }

        private function editActivity(event:ScheduleActivityEvent):void {
            var index:int = activities.getItemIndex(event.activity);
            this.activities.removeItemAt(index);
            this.activities.addItemAt(event.activity, index);
        }

        private function deleteActivity(scheduleEvent:ScheduleActivityEvent):void {
            var ref:ScheduleManagement = this;
            Alert.show("Are you sure you want to delete this scheduled activity? You will not be able to undo this operation.", "Alert",
                    Alert.OK | Alert.CANCEL, this, function(event:CloseEvent):void {
                        if (event.detail == Alert.OK) {
                            ProgressAlert.alert(ref, "Deleting...", null, exportService.deleteSchedule);
                            exportService.deleteSchedule.send(scheduleEvent.activity.scheduledActivityID);
                        }
                    }, null, Alert.CANCEL);
        }

        private function newActivity(event:ScheduleActivityEvent):void {
            index = 0;
            var utcOffset:int = new Date().getTimezoneOffset();
            exportService.getScheduledActivities.send(utcOffset);
            exportService.getRefreshableDataSources.send(null);
            invalidateSize();
        }

        private function gotDataSources():void {
            index = 1;
            dataSourceWarnings.removeAllChildren();
            var dataSources:ArrayCollection = exportService.getRefreshableDataSources.lastResult as ArrayCollection;
            if (dataSources.length != 0) {
                for each (var ds:DataSourceDescriptor in dataSources) {
                    var line:ReportDeliverySetupLine = new ReportDeliverySetupLine();
                    line.addEventListener(ScheduleActivityEvent.NEW_ACTIVITY, newActivity, false, 0, true);
                    line.dataSource = ds;
                    dataSourceWarnings.addChild(line);
                }
            }
        }

        [Bindable]
        private var activities:ArrayCollection;

        private function newDataSource():void {
            ProgressAlert.alert(this, "Retrieving information...", null, exportService.getRefreshableDataSources);
            exportService.getRefreshableDataSources.send(null);
        }

        private function newReportDelivery():void {
            var window:ReportDeliveryScheduleWindow = new ReportDeliveryScheduleWindow();
            window.addEventListener(ScheduleActivityEvent.NEW_ACTIVITY, newActivity, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function newScorecard():void {
            var window:ScorecardDeliveryScheduleWindow = new ScorecardDeliveryScheduleWindow();
            window.addEventListener(ScheduleActivityEvent.NEW_ACTIVITY, newActivity, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function newGeneral():void {
            var window:GeneralDeliveryScheduleWindow = new GeneralDeliveryScheduleWindow();
            window.addEventListener(ScheduleActivityEvent.NEW_ACTIVITY, newActivity, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function gotActivities():void {
            this.activities = exportService.getScheduledActivities.lastResult as ArrayCollection;
            invalidateSize();
        }

        private function deleted():void {
            var utcOffset:int = new Date().getTimezoneOffset();
            ProgressAlert.alert(this, "Refreshing...", null, exportService.getScheduledActivities, exportService.getRefreshableDataSources);
            exportService.getScheduledActivities.send(utcOffset);
            exportService.getRefreshableDataSources.send(null);
        }

        protected override function measure():void {
            super.measure();
            if (activities != null) {
                activityGrid.verticalScrollPolicy = "off";
                activityGrid.height = activityGrid.measureHeightOfItems(0, activities.length) + activityGrid.headerHeight + 4;
            }
        }

        [Bindable]
        private var index:int;

        public function gotFocus():void {
            if (User.getInstance().notifyProp) {
                notifyText = "We've automatically set up <b>"+User.getInstance().notifyProp+"</b> to email you at <b>6:00</b> every <b>Monday</b> morning and sent you a test of that email now so that you can see what it looks like. You can customize that scheduling below.";
                User.getInstance().notifyProp = null;
            }
            if (!embedded) {
                var fragmentObject:Object = new Object();
                fragmentObject.page = "scheduling";
                BrowserManager.getInstance().setTitle("Easy Insight - Schedule Management");
                var fragmentString:String = URLUtil.objectToString(fragmentObject);
                BrowserManager.getInstance().setFragment(fragmentString);
            }
            index = 0;
            var utcOffset:int = new Date().getTimezoneOffset();
            exportService.getScheduledActivities.send(utcOffset);
            exportService.getRefreshableDataSources.send(null);
        }

        private function deleteSelected():void {
            var activityList:ArrayCollection = new ArrayCollection();
            for each (var activity:ScheduledActivity in activities) {
                if (activity.selected) {
                    activityList.addItem(activity.scheduledActivityID);
                }
            }
            if (activityList.length == 0) {
                Alert.show("You must select at least one activity to delete.");
            } else {
                var str:String = "Are you sure you want to delete the selected scheduled activites?";
                var thisObj:UIComponent = this;
                Alert.show(str, "Alert", Alert.OK | Alert.CANCEL, this,
                        function(closeEvent:CloseEvent):void {
                            if (closeEvent.detail == Alert.OK) {
                                ProgressAlert.alert(thisObj, "Deleting activities...", null, exportService.deleteSchedules);
                                exportService.deleteSchedules.send(activityList);
                            }
                        });

            }
        }

        public function cleanup():void {
        }

        private function archive():void {
            var window:ArchiveWindow = new ArchiveWindow();
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        [Bindable]
        private var notifyText:String;
        ]]></mx:Script>
    <mx:RemoteObject destination="exportService" id="exportService">
        <mx:method name="getScheduledActivities" result="gotActivities()"/>
        <mx:method name="deleteSchedules" result="deleted()"/>
        <mx:method name="getRefreshableDataSources" result="gotDataSources()"/>
    </mx:RemoteObject>
    <mx:VBox backgroundColor="#FFFFFF" paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10" cornerRadius="5" borderStyle="solid" borderThickness="1" verticalGap="10"
            height="100%" backgroundAlpha="1" horizontalAlign="center" top="10">
        <mx:Box visible="{notifyText != null}" includeInLayout="{notifyText != null}" backgroundColor="#dff0d8" borderColor="#d6e9c6" borderThickness="1" cornerRadius="4"
                borderStyle="solid" paddingBottom="10" paddingLeft="10" paddingTop="10" paddingRight="10">
            <mx:Text htmlText="{notifyText}" maxWidth="600" fontSize="14" color="#3c763d" styleName="fallThroughFonts"/>
        </mx:Box>
        <mx:Canvas width="100%" maxHeight="200">
            <mx:VBox id="dataSourceWarnings"/>
        </mx:Canvas>
        <mx:HBox width="1000">
            <mx:HBox>
                <mx:Button label="Add Report Delivery..." click="newReportDelivery()" styleName="flatSaveButton"/>
                <mx:Button label="Add Multi Report/Dashboard Delivery..." click="newGeneral()" styleName="flatSaveButton"/>
                <mx:Button label="Delete Selected" click="deleteSelected()" styleName="flatRedButton"/>
            </mx:HBox>
        </mx:HBox>
        <mx:ViewStack selectedIndex="{index}" creationPolicy="all" width="100%" height="100%">
            <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                <mx:ProgressBar label="Loading schedule configuration..." indeterminate="{index == 0}"/>
            </mx:Box>
            <mx:Box width="100%" height="100%" horizontalAlign="center">
                <mx:DataGrid dataProvider="{activities}" width="1000" rowHeight="28" fontSize="16" id="activityGrid" selectable="false">
                    <mx:columns>
                        <mx:DataGridColumn dataField="" headerText=""
                                           itemRenderer="com.easyinsight.schedule.ScheduleCheckbox" width="30" sortable="false"/>
                        <util:EIDataGridColumn itemRenderer="com.easyinsight.schedule.ActivityStatusRenderer" width="50" sortable="false"/>
                        <util:EIDataGridColumn dataField="activityDisplay" headerText="Activity"
                                itemRenderer="com.easyinsight.util.RolloverLabelGridColumn"/>
                        <util:EIDataGridColumn dataField="interval" headerText="When" width="250"
                                               itemRenderer="com.easyinsight.util.RolloverLabelGridColumn"/>
                    </mx:columns>
                </mx:DataGrid>
            </mx:Box>
        </mx:ViewStack>
    </mx:VBox>
</skin:BackgroundImage>