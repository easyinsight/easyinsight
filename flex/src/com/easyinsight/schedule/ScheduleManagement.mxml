<?xml version="1.0" ?>
<skin:BackgroundImage xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*"
                      xmlns:scorecard="com.easyinsight.scorecard.*"
                      creationComplete="setup()"
                      xmlns:skin="com.easyinsight.skin.*" implements="com.easyinsight.listing.IPerspective">
    <mx:Script><![CDATA[
        import com.easyinsight.listing.DataFeedDescriptor;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.ProgressAlert;

        import mx.collections.ArrayCollection;
        import mx.managers.BrowserManager;
        import mx.managers.PopUpManager;
        import mx.utils.URLUtil;

        private function setup():void {
            addEventListener(ScheduleActivityEvent.DELETE_ACTIVITY, deleteActivity);
            addEventListener(ScheduleActivityEvent.EDIT_ACTIVITY, editActivity);
            addEventListener(ScheduleActivityEvent.NEW_ACTIVITY, newActivity);
        }

        private function editActivity(event:ScheduleActivityEvent):void {
            var index:int = activities.getItemIndex(event.activity);
            this.activities.removeItemAt(index);
            this.activities.addItemAt(event.activity, index);
        }

        private function deleteActivity(event:ScheduleActivityEvent):void {
            //this.activities.removeItemAt(activities.getItemIndex(event.activity));

            exportService.deleteSchedule.send(event.activity.scheduledActivityID);
        }

        private function newActivity(event:ScheduleActivityEvent):void {
            index = 0;
            var utcOffset:int = new Date().getTimezoneOffset();
            exportService.getScheduledActivities.send(utcOffset);
            exportService.getRefreshableDataSources.send(null);
            invalidateSize();
        }

        private function gotDataSources():void {
            index = 1;
            dataSourceWarnings.removeAllChildren();
            var dataSources:ArrayCollection = exportService.getRefreshableDataSources.lastResult as ArrayCollection;
            if (dataSources.length != 0) {
                for each (var ds:DataFeedDescriptor in dataSources) {
                    var line:ReportDeliverySetupLine = new ReportDeliverySetupLine();
                    line.addEventListener(ScheduleActivityEvent.NEW_ACTIVITY, newActivity, false, 0, true);
                    line.dataSource = ds;
                    dataSourceWarnings.addChild(line);
                }
            }
        }

        [Bindable]
        private var activities:ArrayCollection;

        private function newDataSource():void {
            ProgressAlert.alert(this, "Retrieving information...", null, exportService.getRefreshableDataSources);
            exportService.getRefreshableDataSources.send(null);
        }

        private function newReportDelivery():void {
            var window:ReportDeliveryScheduleWindow = new ReportDeliveryScheduleWindow();
            window.addEventListener(ScheduleActivityEvent.NEW_ACTIVITY, newActivity, false, 0, true);
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function gotActivities():void {
            this.activities = exportService.getScheduledActivities.lastResult as ArrayCollection;
            invalidateSize();
        }

        private function deleted():void {
            var utcOffset:int = new Date().getTimezoneOffset();
            exportService.getScheduledActivities.send(utcOffset);
            exportService.getRefreshableDataSources.send(null);
        }

        protected override function measure():void {
            super.measure();
            if (activities != null) {
                activityGrid.verticalScrollPolicy = "off";
                activityGrid.height = activityGrid.measureHeightOfItems(0, activities.length) + activityGrid.headerHeight + 4;
            }
        }

        [Bindable]
        private var index:int;

        public function gotFocus():void {
            var fragmentObject:Object = new Object();
            fragmentObject.page = "scheduling";
            BrowserManager.getInstance().setTitle("Easy Insight - Schedule Management");
            var fragmentString:String = URLUtil.objectToString(fragmentObject);
            BrowserManager.getInstance().setFragment(fragmentString);
            index = 0;
            var utcOffset:int = new Date().getTimezoneOffset();
            exportService.getScheduledActivities.send(utcOffset);
            exportService.getRefreshableDataSources.send(null);
        }

        public function cleanup():void {
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="exportService" id="exportService">
        <mx:method name="getScheduledActivities" result="gotActivities()"/>
        <mx:method name="deleteSchedule" result="deleted()"/>
        <mx:method name="getRefreshableDataSources" result="gotDataSources()"/>
    </mx:RemoteObject>
    <mx:VBox paddingLeft="20" paddingRight="20" paddingTop="20" horizontalAlign="center" verticalGap="30">
        <mx:HBox width="100%">            
            <mx:Button label="Add Report Delivery..." click="newReportDelivery()" styleName="grayButton" fontSize="16"/>
        </mx:HBox>
        <mx:VBox id="dataSourceWarnings"/>
        <mx:ViewStack selectedIndex="{index}" creationPolicy="all" width="100%" height="100%">
            <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                <mx:ProgressBar label="Loading schedule configuration..." indeterminate="{index == 0}"/>
            </mx:Box>
            <mx:Box width="100%" height="100%" horizontalAlign="center">
                <scorecard:HackDataGrid dataProvider="{activities}" width="800" rowHeight="28" fontSize="16" id="activityGrid">
                    <scorecard:columns>
                        <util:EIDataGridColumn dataField="activityDisplay" headerText="" sortable="false"
                                               itemRenderer="com.easyinsight.schedule.DataSourceHealthIndicator" width="50"/>
                        <util:EIDataGridColumn dataField="activityDisplay" headerText="Activity"/>
                        <util:EIDataGridColumn dataField="interval" headerText="When" width="250"/>
                        <util:EIDataGridColumn dataField="activityDisplay" headerText="" sortable="false"
                                               itemRenderer="com.easyinsight.schedule.ActivityControls" width="100"/>
                    </scorecard:columns>
                </scorecard:HackDataGrid>
            </mx:Box>
        </mx:ViewStack>
    </mx:VBox>
</skin:BackgroundImage>