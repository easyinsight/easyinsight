<?xml version="1.0" ?>
<util:EISlimWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*"
        creationComplete="setupListeners()">
    <mx:Script><![CDATA[
        import com.easyinsight.administration.feed.CallData;
        import com.easyinsight.administration.feed.CredentialsResponse;
        import com.easyinsight.analysis.ReportFault;
        import com.easyinsight.customupload.ProblemDataEvent;
        import com.easyinsight.scorecard.DataSourceAsyncEvent;

        import com.easyinsight.util.PopUpUtil;

        import mx.controls.Alert;
        import mx.core.UIComponent;
        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        private var lastMessage:Date;
        private var _dataSourceID:int;

        [Bindable]
        private var asyncLabel:String = "Synchronizing with the data source...";

        private function setupListeners():void {
            uploadService.refreshData.send(_dataSourceID);
        }

        public function set dataSourceID(value:int):void {
            _dataSourceID = value;
        }

        [Bindable]
        private var index:int;

        [Bindable]
        private var errorText:String;

        private function onResult(event:ResultEvent):void {
            var response:CredentialsResponse = uploadService.refreshData.lastResult as CredentialsResponse;
            if (!response.successful) {
                if (response.reportFault != null) {
                    var window:UIComponent = response.reportFault.createFaultWindow();
                    window.addEventListener(ProblemDataEvent.PROBLEM_RESOLVED, onProblem, false, 0, true);
                    window.addEventListener(Event.CANCEL, onCancel, false, 0, true);
                    PopUpManager.addPopUp(window, this, true);
                    PopUpUtil.centerPopUp(window);
                } else {
                    Alert.show(response.failureMessage);
                    PopUpManager.removePopUp(this);
                }
            } else {
                if (response.callDataID != null) {
                    callDataID = response.callDataID;
                    timer = new Timer(5000, 0);
                    timer.addEventListener(TimerEvent.TIMER, onTimer);
                    timer.start();
                } else {
                    PopUpManager.removePopUp(this);
                }
            }

        }

        private var callDataID:String;

        private function onTimer(event:TimerEvent):void {
            asyncService.getCallData.send(callDataID);
        }

        private function gotCallData():void {
            var callData:CallData = asyncService.getCallData.lastResult as CallData;
            if (callData.status == CallData.DONE) {
                timer.stop();
                PopUpManager.removePopUp(this);
            } else if (callData.status == CallData.FAILED) {
                timer.stop();
                if (callData.result is String) {
                    Alert.show(String(callData.statusMessage));
                    PopUpManager.removePopUp(this);
                } else {
                    var window:UIComponent = ReportFault(callData.result).createFaultWindow();
                    window.addEventListener(ProblemDataEvent.PROBLEM_RESOLVED, onProblem, false, 0, true);
                    window.addEventListener(Event.CANCEL, onCancel, false, 0, true);
                    PopUpManager.addPopUp(window, this, true);
                    PopUpUtil.centerPopUp(window);
                }
            } else if (callData.status == CallData.RUNNING) {
                if (callData.result != null) {
                    var scorecardEvent:DataSourceAsyncEvent = callData.result as DataSourceAsyncEvent;
                    asyncLabel = scorecardEvent.dataSourceName;
                }
            }
        }

        private var timer:Timer;

        private function onCancel(event:Event):void {
            PopUpManager.removePopUp(this);
        }

        private function closeWindow():void {
            if (timer != null) { timer.stop() }
            PopUpManager.removePopUp(this);
        }

        private function onProblem(event:ProblemDataEvent):void {
            uploadService.refreshData.send(_dataSourceID);
        }

        private function onFault(event:FaultEvent):void {
            errorText = event.fault.faultString;
            index = 1;
        }
        ]]></mx:Script>
    <mx:RemoteObject destination="userUpload" id="uploadService">
        <mx:method name="refreshData" result="onResult(event)" fault="onFault(event)"/>
    </mx:RemoteObject>
    <mx:RemoteObject destination="asyncService" id="asyncService">
        <mx:method name="getCallData" result="gotCallData()" fault="onFault(event)"/>
    </mx:RemoteObject>
    <mx:Canvas width="500">
        <mx:ViewStack selectedIndex="{index}" resizeToContent="true" width="100%">
            <mx:VBox horizontalAlign="center" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="30" width="100%">
                <mx:ProgressBar indeterminate="true" id="progressBar" label="" labelPlacement="right"/>
                <mx:Label selectable="false" maxWidth="400" text="{asyncLabel}" fontSize="14"/>
                <mx:Button label="Cancel" click="closeWindow()"/>
            </mx:VBox>
            <mx:VBox horizontalAlign="center" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="5" width="100%">
                <mx:Label text="{errorText}"/>
                <mx:Button label="Close" click="PopUpManager.removePopUp(this)"/>
            </mx:VBox>
        </mx:ViewStack>
    </mx:Canvas>
</util:EISlimWindow>