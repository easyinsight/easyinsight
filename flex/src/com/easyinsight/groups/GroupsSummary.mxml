<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:util="com.easyinsight.util.*"
           implements="com.easyinsight.listing.IPerspective"
           creationComplete="initListeners()" width="100%" height="100%" horizontalAlign="center" paddingTop="20">
    <mx:Script>
		<![CDATA[
        import com.easyinsight.account.Account;
        import com.easyinsight.account.AccountInfo;
        import com.easyinsight.util.PopUpUtil;

        import com.easyinsight.framework.User;

        import com.easyinsight.util.ProgressAlert;
        import com.easyinsight.util.RolloverLabelEvent;

        import mx.controls.Alert;
        import mx.core.UIComponent;
        import mx.events.CloseEvent;

        import mx.managers.PopUpManager;
        import mx.collections.ArrayCollection;

        [Bindable]
        private var myGroups:ArrayCollection;

        [Bindable]
        private var showMyGroups:Boolean = false;

        private function initListeners():void {
            addEventListener(GroupSelectedEvent.GROUP_SELECTED, groupSelected);
            addEventListener(GroupSelectedEvent.GROUP_DELETE, groupDelete);
            addEventListener(RolloverLabelEvent.ROLLOVER_LABEL, editGroup);
        }

        private function groupDelete(event:GroupSelectedEvent):void {
            ProgressAlert.alert(this, "Deleting group...", null, groupService.deleteGroup);
            groupService.deleteGroup.send(event.groupID);
        }

        private function deletedGroup():void {
            groupService.getAccountGroups.send();
        }

        private function gotCreate():void {
            var canCreateGroup:Boolean = groupService.canCreateGroup.lastResult as Boolean;

            if (canCreateGroup) {
                groupAddIndex = 3;
            } else {
                groupAddIndex = 2;
            }
        }

        public function gotFocus():void {
            groupService.canCreateGroup.send();
            stackIndex = 0;
            groupService.getAccountGroups.send();
            //groupService.getPublicGroups.send();
        }

        private function groupSelected(event:GroupSelectedEvent):void {

        }

        private function gotAccountGroups():void {
            stackIndex = 1;
            this.myGroups = groupService.getAccountGroups.lastResult as ArrayCollection;
            showMyGroups = (myGroups.length > 0);
        }

        private function createNewGroup():void {
            var groupWindow:NewGroupWindow = NewGroupWindow(PopUpManager.createPopUp(this, NewGroupWindow, true));
            groupWindow.addEventListener(GroupSelectedEvent.GROUP_SELECTED, onNewGroup, false, 0, true);
            PopUpUtil.centerPopUp(groupWindow);
        }

        private function onNewGroup(event:GroupSelectedEvent):void {
            groupService.getAccountGroups.send();
            groupSelected(event);
        }

        [Bindable]
        public var accountInfo:AccountInfo;

        private function deleteSelected():void {
            var activityList:ArrayCollection = new ArrayCollection();
            for each (var group:GroupDescriptor in myGroups) {
                if (group.selected) {
                    activityList.addItem(group.groupID);
                }
            }
            if (activityList.length == 0) {
                Alert.show("You must select at least one group to delete.");
            } else {
                var str:String = "Are you sure you want to delete the selected groups?";
                var thisObj:UIComponent = this;
                Alert.show(str, "Alert", Alert.OK | Alert.CANCEL, this,
                        function (closeEvent:CloseEvent):void {
                            if (closeEvent.detail == Alert.OK) {
                                ProgressAlert.alert(thisObj, "Deleting groups...", null, groupService.deleteGroups);
                                groupService.deleteGroups.send(activityList);
                            }
                        });

            }
        }

        public function cleanup():void {
        }

        private function editGroup(event:RolloverLabelEvent):void {
            var window:GroupDetail = new GroupDetail();
            window.groupID = GroupDescriptor(event.data).groupID;
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        [Bindable]
        private var stackIndex:int;

        [Bindable]
        private var groupAddIndex:int = 0;
        ]]>
    </mx:Script>
    <mx:RemoteObject destination="groupService" id="groupService">
        <mx:method name="getAccountGroups" result="gotAccountGroups()"/>
        <mx:method name="canCreateGroup" result="gotCreate()"/>
        <mx:method name="deleteGroups" result="gotFocus()"/>
    </mx:RemoteObject>
    <mx:Box backgroundColor="#FFFFFF" paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10" cornerRadius="5" borderStyle="solid" borderThickness="1" verticalGap="10">
        <mx:HBox width="1000">
            <mx:HBox verticalAlign="bottom" height="100%">
                <mx:Button label="Create a New Group..."
                           click="createNewGroup()" labelPlacement="bottom" styleName="grayButton"/>
                <mx:Button label="Delete Selected" styleName="grayButton" click="deleteSelected()"/>
            </mx:HBox>
            <mx:Spacer width="100%"/>
            <mx:Box borderStyle="solid" borderThickness="1" cornerRadius="5" dropShadowEnabled="true" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" backgroundColor="#FFFFFF">
                <mx:TextArea selectable="false" editable="false" width="375" height="35" text="Groups enable you to schedule emails to multiple users, as well as controlling data source and report level access."/>
            </mx:Box>
        </mx:HBox>
        <mx:DataGrid dataProvider="{myGroups}" rowHeight="28" width="1000">
            <mx:columns>
                <util:EIDataGridColumn dataField="" headerText=""
                                       itemRenderer="com.easyinsight.account.UserCheckbox" width="30" sortable="false"/>
                <util:EIDataGridColumn dataField="name" headerText="Group Name"
                                       itemRenderer="com.easyinsight.util.RolloverLabelGridColumn"/>
            </mx:columns>
        </mx:DataGrid>
    </mx:Box>
</mx:VBox>
