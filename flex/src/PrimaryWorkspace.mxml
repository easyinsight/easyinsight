<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:framework="com.easyinsight.framework.*"
                xmlns:util="com.easyinsight.util.*"
                creationComplete="startWorkspace()" xmlns:local="*" applicationComplete="applicationListeners()"
                xmlns:listing="com.easyinsight.listing.*" xmlns:intro1="com.easyinsight.intro.*"
                xmlns:notification="com.easyinsight.outboundnotifications.*"
                xmlns:ga4flash="com.google.analytics.components.*"
                paddingTop="0" top="0" borderThickness="0" left="0" paddingLeft="0"
                right="0" paddingRight="0"
                bottom="0" paddingBottom="0" preloader="com.easyinsight.preloader.EIPreloader"
        implements="com.easyinsight.framework.ITutorialRegistrar" frameRate="60">
    <mx:Script>
		<![CDATA[        
        import com.easyinsight.account.Account;
        import com.easyinsight.analysis.DefaultMenuFactory;
        import com.easyinsight.analysis.PopupMenuFactory;
        import com.easyinsight.framework.ConnectionGoEvent;
        import com.easyinsight.framework.EIMessageListener;
        import com.easyinsight.framework.FragmentParser;
        import com.easyinsight.framework.InitialLoginWindow;
        import com.easyinsight.framework.LoginPage;
        import com.easyinsight.framework.ModulePerspective;
        import com.easyinsight.framework.PasswordReset;
        import com.easyinsight.framework.PerspectiveFactory;
        import com.easyinsight.framework.PerspectiveFactoryHolder;
        import com.easyinsight.framework.PerspectiveInfo;
        import com.easyinsight.framework.Constants;
        import com.easyinsight.listing.HeaderBar;
        import com.easyinsight.listing.IModulePerspective;
        import com.easyinsight.listing.LaunchQuickSearchEvent;
        import com.easyinsight.quicksearch.EIDescriptor;
        import com.easyinsight.quicksearch.QuickSearchEvent;
        import com.easyinsight.quicksearch.QuickSearchWindow;
        import com.easyinsight.report.ReportPerspectiveInfo;
        import com.easyinsight.skin.ApplicationSkin;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.tour.TutorialFramework;
        import com.easyinsight.util.CookieUtil;
        import com.easyinsight.util.ErrorReportView;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.UserAudit;

        import mx.binding.utils.BindingUtils;
        import mx.containers.Box;
        import mx.containers.Canvas;
        import mx.containers.HBox;
        import mx.messaging.config.ServerConfig;
        import mx.modules.IModuleInfo;
        import mx.rpc.AsyncResponder;
        import mx.rpc.AsyncToken;
        import mx.rpc.events.FaultEvent;

        import com.easyinsight.framework.UserServiceResponse;
        import com.easyinsight.analysis.AnalysisCloseEvent;
        import com.easyinsight.framework.NavigationEvent;

        import mx.controls.Alert;
        import mx.rpc.events.ResultEvent;
        import mx.utils.URLUtil;
        import mx.managers.IBrowserManager;
        import mx.events.BrowserChangeEvent;
        import mx.managers.BrowserManager;

        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.listing.IPerspective;
        import com.easyinsight.listing.ListingChangeEvent;
        import com.easyinsight.commands.CommandProcessor;
        import com.easyinsight.framework.User;
        import com.easyinsight.framework.LoginEvent;

        import mx.managers.PopUpManager;


        [Bindable]
        private var messageListener:EIMessageListener;


        private var perspective:IPerspective;

        [Bindable]
        private var loggedIn:Boolean;


        [Bindable]
        private var dataAnalysis:DisplayObject;

        private var fullScreenPage:IPerspective;

        private var allowNavigation:Boolean;

        public var browserManager:IBrowserManager;


        private function startWorkspace():void {
            Security.allowInsecureDomain("maps.googleapis.com");
            PerspectiveFactoryHolder.factory = new PerspectiveFactory();
            Constants.setup();
            UserAudit.initialize();
            ApplicationSkin.initialize();
            PopupMenuFactory.menuFactory = new DefaultMenuFactory();
            new CommandProcessor();
            addEventListener(FaultEvent.FAULT, onFault, true);
            User.getEventNotifier().addEventListener(NavigationEvent.NAVIGATION, navigation);
            User.getEventNotifier().addEventListener("firstLogin", onFirstLogin);
            EIMessageListener.initialize();
            messageListener = EIMessageListener.instance();
            //GAHelper.initialize(tracker);
            userService.getBuildPath.send();
        }

        private function gotBuildPath():void {
            Constants.instance().buildPath = userService.getBuildPath.lastResult as String;
            userService.isSessionLoggedIn.send();
        }

        private function onFirstLogin(event:Event):void {
            var window:InitialLoginWindow = new InitialLoginWindow();
            PopUpManager.addPopUp(window, this, true);
            PopUpUtil.centerPopUp(window);
        }

        private function applicationListeners():void {
            stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
            addUncaughtErrorListener(stage.loaderInfo);
            addUncaughtErrorListener(this.loaderInfo);

            for (var o:Object in systemManager.preloadedRSLs) {
                addUncaughtErrorListener(LoaderInfo(o));
            }
        }

        private function addUncaughtErrorListener(loaderInfo:LoaderInfo):void {
            if (loaderInfo.hasOwnProperty("uncaughtErrorEvents")) {
                IEventDispatcher(loaderInfo["uncaughtErrorEvents"]).addEventListener("uncaughtError", handlerFunction);
            }
        }

        private function handlerFunction(event:Event):void {
            if (event["error"] is Error) {
                var error:Error = event["error"] as Error;
                var errorWindow:ErrorReportView = new ErrorReportView();
                errorWindow.error = error;
                PopUpManager.addPopUp(errorWindow, this, true);
                PopUpUtil.centerPopUp(errorWindow);
                // do something with the error
            }
            else if (event["error"] is ErrorEvent) {
                var errorEvent:ErrorEvent = event["error"] as ErrorEvent;
                Alert.show("error " + errorEvent.text);
                // do something with the error
            }
            else {
                // a non-Error, non-ErrorEvent type was thrown and uncaught
            }

        }

        private function onKeyDown(event:KeyboardEvent):void {
            if (event.ctrlKey && event.keyCode == 190 && User.getInstance() != null) {
                launchQuickSearchWindow(null);
            }
            /*else if (event.keyCode == 192) {
             DisplayListAnalysis.traverse(this);
             }*/
        }

        private function launchQuickSearchWindow(event:LaunchQuickSearchEvent):void {
            var window:QuickSearchWindow = new QuickSearchWindow();
            window.addEventListener(QuickSearchEvent.QUICK_SEARCH, onQuickSearch, false, 0, true);
            window.addEventListener(QuickSearchEvent.QUICK_SEARCH_CANCEL, onQuickSearch, false, 0, true);
            PopUpManager.addPopUp(window, this, false);
            PopUpUtil.centerPopUp(window);
        }


        private function onQuickSearch(event:QuickSearchEvent):void {
            event.currentTarget.removeEventListener(QuickSearchEvent.QUICK_SEARCH, onQuickSearch);
            event.currentTarget.removeEventListener(QuickSearchEvent.QUICK_SEARCH_CANCEL, onQuickSearch);
            if (event.type == QuickSearchEvent.QUICK_SEARCH) {
                if (event.eiDescriptor.getType() == EIDescriptor.DATA_SOURCE) {
                    var eiDescriptor:DataSourceDescriptor = event.eiDescriptor as DataSourceDescriptor;
                    internalAnalyze(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.REPORT_EDITOR, {dataSourceID: eiDescriptor.id})));
                    //internalAnalyze(new AnalyzeEvent(new DescriptorAnalyzeSource(eiDescriptor.id, eiDescriptor.name)));
                } else if (event.eiDescriptor.getType() == EIDescriptor.REPORT) {
                    internalAnalyze(new AnalyzeEvent(new ReportPerspectiveInfo(event.eiDescriptor as InsightDescriptor)));
                } else if (event.eiDescriptor.getType() == EIDescriptor.GOAL_TREE) {
                    internalAnalyze(new AnalyzeEvent(new PerspectiveInfo(PerspectiveInfo.KPI_TREE_VIEW, {goalTreeID: event.eiDescriptor.id})));
                }
            }
        }

        private function onFault(event:FaultEvent):void {
            Alert.show(event.fault.name, "Sorry, but we encountered a server error in trying to complete the operation.");
        }

        public function navigation(event:NavigationEvent):void {
            if (event.targetPerspective == null) {
                headerBar.explicitChange(event.targetPage, event.properties);
            } else {
                changePerspective(new ListingChangeEvent(new ModulePerspective(event.targetPerspective), event.properties));
            }
        }

        public static function registerTutorial(tutorial:TutorialFramework):void {
            var workspace:PrimaryWorkspace = PrimaryWorkspace(Application.application);
            workspace.registerTutorialForApp(tutorial);
        }

        public function registerTutorialForApp(tutorial:TutorialFramework):void {
            addListeners(tutorial);
        }

        private function parseURL(event:Event):void {
            var o:Object = URLUtil.stringToObject(browserManager.fragment, "&");
            if (currentFragment != browserManager.fragment) {
                currentFragment = browserManager.fragment;
                if (User.getInstance() != null && User.getInstance().accountState != Account.REACTIVATION_POSSIBLE &&
                        !User.getInstance().firstLogin) {
                    parseFragmentObject(o, currentFragment);
                } else {
                    if (o.resetPassword != null && o.resetPassword != "") {
                        new PasswordReset(o.resetPassword, this).reset();
                    }
                }
            }
        }

        private var passwordResetValue:String;

        private var currentFragment:String;

        private function parseFragmentObject(o:Object, fragment:String):void {
            var parser:FragmentParser = new FragmentParser();
            var matched:Boolean = parser.parseFragmentObject(o, this);
            if (!matched) {
                var page:String = o.page;
                if (page == null || page == "") {
                    page = fragment;
                }
                if (page != null) {
                    /*if (currentState == "Analysis") {
                     dataAnalysis.removeEventListener(AnalysisCloseEvent.ANALYSIS_CLOSE, analysisClosed);
                     dataAnalysis = null;
                     }*/
                    switch (page) {
                        case "myData":
                            navigation(new NavigationEvent("My Data"));
                            break;
                        case "kpis":
                            navigation(new NavigationEvent("Scorecards"));
                            break;
                        case "exchange":
                            //var view:int = int(o.view);
                            //var display:int = int(o.display);
                            //var subTopic:int = int(o.subTopicID);
                            navigation(new NavigationEvent("Exchange"));
                            break;
                        case "groups":
                            navigation(new NavigationEvent("Groups"));
                            break;
                        case "help":
                            navigation(new NavigationEvent("Help"));
                            break;
                        case "apis":
                            navigation(new NavigationEvent("Developers"));
                            break;
                        case "home":
                        case "intro":
                            navigation(new NavigationEvent("Home"));
                            break;
                        case "connections":
                            if (o.type != null && o.type == "business")
                                navigation(new NavigationEvent("Connections", null, { biz: true, client:false, saas: false, learning: false }));
                            else if (o.type != null && o.type == "application")
                                navigation(new NavigationEvent("Connections", null, { saas: true, client:true, biz: false, learning: false }));
                            else
                                navigation(new NavigationEvent("Connections"));
                            break;
                        case "account":
                            navigation(new NavigationEvent("Accounts"));
                            break;
                    }
                } else {
                    navigation(new NavigationEvent("Home"));
                }
            }
        }

        private function removeListeners(eventDispatcher:EventDispatcher):void {
            eventDispatcher.removeEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
            eventDispatcher.removeEventListener(AnalysisCloseEvent.ANALYSIS_CLOSE, analysisClosed);
            eventDispatcher.removeEventListener(NavigationEvent.NAVIGATION, navigation);
            eventDispatcher.removeEventListener(ListingChangeEvent.LISTING_CHANGE, changePerspective);
        }

        private function addListeners(eventDispatcher:EventDispatcher):void {
            eventDispatcher.addEventListener(AnalyzeEvent.ANALYZE, internalAnalyze, false, 0, true);
            eventDispatcher.addEventListener(AnalysisCloseEvent.ANALYSIS_CLOSE, analysisClosed, false, 0, true);
            eventDispatcher.addEventListener(NavigationEvent.NAVIGATION, navigation, false, 0, true);
            eventDispatcher.addEventListener(ListingChangeEvent.LISTING_CHANGE, changePerspective, false, 0, true);
        }

        private function doAnalyze(perspectiveInfo:PerspectiveInfo):void {
            try {
                if (dataAnalysis != null) {
                    fullScreenPage.cleanup();
                    removeListeners(dataAnalysis);
                    coreVBox.removeChild(dataAnalysis);
                } else {
                    coreVBox.removeChild(headerBar);
                    coreVBox.removeChild(highBar);
                    coreVBox.removeChild(coreSpace);
                }
                if (perspectiveInfo != null) {
                    var perspective:ModulePerspective = new ModulePerspective(perspectiveInfo);
                    addListeners(EventDispatcher(perspective));
                    dataAnalysis = perspective;
                    fullScreenPage = perspective;
                    coreVBox.addChild(dataAnalysis);
                }
            } catch(e:Error) {
                Alert.show(e.message);
            }
        }

        private function analysisClosed(event:AnalysisCloseEvent):void {
            try {
                removeListeners(dataAnalysis);
                fullScreenPage.cleanup();
                coreVBox.removeChild(dataAnalysis);
                fullScreenPage = null;
                dataAnalysis = null;
                coreVBox.addChild(headerBar);
                coreVBox.addChild(highBar);
                coreVBox.addChild(coreSpace);
                if (event.targetPerspective != null) {
                    headerBar.explicitChange(event.targetPerspective, event.properties);
                } else {
                    if (this.perspective == null) {
                        navigation(new NavigationEvent("Home"));
                    } else {
                        this.perspective.gotFocus();
                    }
                }
            } catch(e:Error) {
                Alert.show(e.message);
            }
        }

        private var moduleInfo:IModuleInfo;

        public function changePerspective(event:ListingChangeEvent):void {
            try {
                if (event.perspective != null) {
                    if (this.perspective != null) {
                        var existingDispatcher:EventDispatcher = this.perspective as EventDispatcher;
                        removeListeners(existingDispatcher);
                    }
                    if (dataAnalysis != null) {
                        fullScreenPage.cleanup();
                        coreVBox.removeChild(dataAnalysis);
                        dataAnalysis = null;
                        fullScreenPage = null;
                        coreVBox.addChild(headerBar);
                        coreVBox.addChild(highBar);
                        coreVBox.addChild(coreSpace);
                    }
                    if (coreSpace.getChildren().length > 0) {
                        coreSpace.removeChildAt(0);
                    }
                    if (event.perspective is IModulePerspective) {

                    }
                    this.perspective = event.perspective;
                    if (event.properties != null) {
                        for (var propKey:String in event.properties) {
                            perspective[propKey] = event.properties[propKey];
                        }
                    }
                    coreSpace.addChildAt(perspective as DisplayObject, 0);
                    perspective.gotFocus();
                    var dispatcher:EventDispatcher = perspective as EventDispatcher;
                    addListeners(dispatcher);
                }
            } catch(e:Error) {
                Alert.show(e.message);
            }
        }

        private function getCurrentPerspective():IPerspective {
            return this.perspective;
        }

        public function internalAnalyze(event:AnalyzeEvent):void {
            doAnalyze(event.perspectiveInfo);
        }

        private function sessionCheck():void {
            var authResult:UserServiceResponse = userService.isSessionLoggedIn.lastResult as UserServiceResponse;
            var browserSetup:Boolean = false;
            if (authResult != null) {
                if (authResult.accountState == Account.DELINQUENT) {
                    toLogin(1);
                } else if (authResult.accountState == Account.REACTIVATION_POSSIBLE) {
                    quietLogin(authResult, false);
                    toLogin(2);
                } else if (authResult.accountState == Account.INACTIVE) {
                    toLogin(3);
                } else if (authResult.firstLogin && authResult.accountAdmin) {
                    quietLogin(authResult, false);
                    toLogin(4);
                } else {
                    quietLogin(authResult, false);
                    toMain();
                }
                browserSetup = true;
            } else {
                var sessionToken:String = CookieUtil.getCookie("eisession") as String;
                if (sessionToken == null) {
                    browserSetup = true;
                    toLogin(0);
                } else {
                    var parts:Array = sessionToken.split("-");
                    var userName:String = parts[0];
                    var token:String = parts[1];
                    userService.sessionCookieCheck.send(token, userName, false);
                }
            }
            if (browserSetup) browserInit();
        }

        private function sessionCookieCheck():void {
            var authResult:UserServiceResponse = userService.sessionCookieCheck.lastResult as UserServiceResponse;
            if (authResult != null) {
                if (userService.channelSet == null) {
                    userService.channelSet = ServerConfig.getChannelSet(userService.destination);
                }
                var sessionToken:String = CookieUtil.getCookie("eisession") as String;
                var parts:Array = sessionToken.split("-");
                var userName:String = parts[0];
                var cookie:String = parts[1];
                CookieUtil.deleteCookie("eisession");
                CookieUtil.setCookie("eisession", authResult.userName + "-" + authResult.sessionCookie, 90);
                var token:AsyncToken = userService.channelSet.login(userName, cookie);
                token.addResponder(new AsyncResponder(
                        function (event:ResultEvent, token:Object = null):void {
                            switch (event.result) {
                                case "success":
                                    dispatchEvent(new LoginEvent(LoginEvent.LOGIN, authResult));
                                    if (authResult.accountState == Account.DELINQUENT) {
                                        toLogin(1);
                                    } else if (authResult.accountState == Account.REACTIVATION_POSSIBLE) {
                                        quietLogin(authResult, false);
                                        toLogin(2);
                                    } else {
                                        quietLogin(authResult, false);
                                        toMain();
                                    }
                                    browserInit();
                                    break;
                                default:
                                    trace(event.result);
                            }
                        },
                        function (event:FaultEvent, token:Object = null):void {
                            toLogin(0);
                        }
                        ));

            } else {
                toLogin(0);
            }
        }

        private function browserInit():void {
            browserManager = BrowserManager.getInstance();
            browserManager.addEventListener(BrowserChangeEvent.BROWSER_URL_CHANGE, parseURL);
            browserManager.init("home", "Home");
            parseURL(null);
        }

        private function login(event:LoginEvent):void {
            toMain();
            quietLogin(event.authResponse, true);
        }

        private function quietLogin(authResponse:UserServiceResponse, navigate:Boolean):void {
            User.initializeUser(authResponse);
            User.getInstance().userName = authResponse.userName;
            if (User.getInstance().applicationSkin != null) {
                ApplicationSkin.instance().applyUserSettings(User.getInstance().applicationSkin);
            }
            Constants.instance().userName = authResponse.userName;
            /*if (User.getInstance().guestUser) {
                FloatingGuestWindow.newWindow(this);
            }*/
            loggedIn = true;
            User.getEventNotifier().dispatchEvent(new LoginEvent(LoginEvent.LOGIN));
            User.getEventNotifier().addEventListener(LoginEvent.LOGOUT, loginEvent);
            if (navigate && currentFragment != null) {
                var o:Object = URLUtil.stringToObject(currentFragment, "&");
                parseFragmentObject(o, currentFragment);
            }
        }

        private function setup():void {
            User.getEventNotifier().addEventListener(LoginEvent.LOGIN, loginEvent);
            User.getEventNotifier().addEventListener(LoginEvent.LOGOUT, loginEvent);
        }

        private function loginEvent(event:LoginEvent):void {
            loggedIn = event.type == LoginEvent.LOGIN;
            if (event.type == LoginEvent.LOGOUT) {
                toLogin(0);
            }
        }

        private function onConnect(event:ConnectionGoEvent):void {
            toMain();
            doAnalyze(event.perspectiveInfo);
        }

        private function toLogin(initState:int):void {
            masterCanvas.removeAllChildren();
            var loginPage:LoginPage = new LoginPage();
            loginPage.initState = initState;
            loginPage.percentWidth = 100;
            loginPage.percentHeight = 100;
            loginPage.addEventListener(LoginEvent.LOGIN, login);
            loginPage.addEventListener("allDone", allDone);
            loginPage.addEventListener(LoginEvent.QUIET_LOGIN, pageLoginHandler);
            loginPage.addEventListener(ConnectionGoEvent.CONNECTION_GO, onConnect);
            masterCanvas.addChildAt(loginPage, 0);
        }

        private function allDone(event:Event):void {
            toMain();
            var o:Object = URLUtil.stringToObject(currentFragment, "&");
            parseFragmentObject(o, currentFragment);
        }

        public function set dividerColor(value:uint):void {
            highBar.setStyle("backgroundColor", value);
        }

        private function toMain():void {
            masterCanvas.removeAllChildren();
            /*var canvas:Canvas = new Canvas();
             canvas.percentHeight = 100;
             canvas.percentWidth = 100;*/
            /*canvas.setStyle("paddingLeft", 0);
             canvas.setStyle("paddingRight", 0);*/
            var headerBar:HeaderBar = new HeaderBar();
            headerBar.percentWidth = 100;
            headerBar.setStyle("paddingTop", 5);
            headerBar.setStyle("paddingBottom", 5);
            headerBar.setStyle("paddingLeft", 10);
            headerBar.setStyle("paddingRight", 10);
            headerBar.addEventListener(ListingChangeEvent.LISTING_CHANGE, changePerspective);
            headerBar.addEventListener(LaunchQuickSearchEvent.LAUNCH_QUICK_SEARCH, launchQuickSearchWindow);
            masterCanvas.addChild(headerBar);
            var box:Box = new Box();
            box.percentWidth = 100;
            box.height = 5;
            box.y = 68;            
            masterCanvas.addChild(box);
            var hbox:HBox = new HBox();
            hbox.y = 73;
            hbox.percentWidth = 100;
            hbox.percentHeight = 100;
            hbox.setStyle("paddingLeft", 0);
            hbox.setStyle("paddingTop", 0);
            hbox.setStyle("paddingRight", 0);
            masterCanvas.addChild(hbox);
            coreVBox = masterCanvas;
            this.headerBar = headerBar;
            this.highBar = box;
            this.coreSpace = hbox;
            BindingUtils.bindProperty(this, "dividerColor", ApplicationSkin.instance(), "headerBarDividerColor");
        }

        private var coreVBox:Canvas;
        private var headerBar:HeaderBar;
        private var coreSpace:HBox;
        private var highBar:Box;

        private function pageLoginHandler(event:LoginEvent):void {
            quietLogin(event.authResponse, false);
        }

        ]]>
    </mx:Script>
    <mx:Style source="com/easyinsight/skin/osx/OSX.css"/>
    <mx:RemoteObject id="userService" destination="login">
        <mx:method name="isSessionLoggedIn" result="sessionCheck()"/>
        <mx:method name="sessionCookieCheck" result="sessionCookieCheck()"/>
        <mx:method name="getBuildPath" result="gotBuildPath()"/>
    </mx:RemoteObject>

    <util:AntiScrollCanvas width="100%" height="100%" id="masterCanvas" disabledOverlayAlpha=".275">
     </util:AntiScrollCanvas>
</mx:Application>
