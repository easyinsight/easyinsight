<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:framework="com.easyinsight.framework.*"
                xmlns:util="com.easyinsight.util.*"
                creationComplete="startWorkspace()" xmlns:local="*" applicationComplete="applicationListeners()"
                xmlns:listing="com.easyinsight.listing.*" xmlns:intro1="com.easyinsight.intro.*"
                xmlns:notification="com.easyinsight.notifications.*"
                paddingTop="0" top="0" borderThickness="0" left="0" paddingLeft="0"
                right="0" paddingRight="0"
                bottom="0" paddingBottom="0" preloader="com.easyinsight.preloader.EIProgressBar">
    <mx:states>
        <mx:State name="Analysis">
            <mx:RemoveChild target="{headerBar}"/>
            <mx:RemoveChild target="{primarySpace}"/>
            <mx:RemoveChild target="{highBar}"/>
            <mx:AddChild relativeTo="{coreVBox}" target="{dataAnalysis}"/>
        </mx:State>
        <mx:State name="LoggedIn">
            <mx:AddChild relativeTo="{primarySpace}" position="firstChild">
                <mx:Canvas height="100%" width="29" backgroundColor="0xF0F0F0">
                    <notification:TodoButton rotation="-90" x="3" y="70" image="{noteIcon}" text="TODO"
                                             messageListener="{messageListener}"
                            />
                    <notification:BackgroundTaskButton rotation="-90" x="3" y="155" image="{clockIcon}" text="Tasks"
                                                       messageListener="{messageListener}"
                            />
                </mx:Canvas>
            </mx:AddChild>
            <mx:AddChild relativeTo="{primarySpace}" position="lastChild">
                <mx:Canvas height="100%" width="29" backgroundColor="0xF0F0F0">
                    <notification:NotificationsButton rotation="90" x="26" y="3" image="{clockIcon}" text="Messages"
                                                      messageListener="{messageListener}"/>
                </mx:Canvas>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.DefaultMenuFactory;
        import com.easyinsight.analysis.DelayedAPIKeyLink;
        import com.easyinsight.analysis.DelayedReportLink;
        import com.easyinsight.analysis.PopupMenuFactory;
        import com.easyinsight.bugreports.BugReportWindow;
        import com.easyinsight.framework.ActivationEvent;
        import com.easyinsight.framework.CredentialsCache;
        import com.easyinsight.framework.EIMessageListener;
        import com.easyinsight.framework.FullScreenModuleEvent;
        import com.easyinsight.framework.IFullScreenPage;
        import com.easyinsight.framework.ModuleAnalyzeSource;
        import com.easyinsight.framework.TokenRedirector;
        import com.easyinsight.framework.WebCredentialsCache;
        import com.easyinsight.genredata.ModuleAnalyzeEvent;
        import com.easyinsight.goals.DelayedGoalAdminLink;
        import com.easyinsight.goals.DelayedGoalLink;
        import com.easyinsight.goals.GoalDataAnalyzeSource;
        import com.easyinsight.groups.DelayedGroupLink;
        import com.easyinsight.intro.WelcomeScreen;
        import com.easyinsight.FullScreenPage;
        import com.easyinsight.analysis.DelayedFeedLink;
        import com.easyinsight.analysis.DelayedDeepLink;
        import com.easyinsight.listing.DescriptorAnalyzeSource;
        import com.easyinsight.listing.PasswordResetWindow;
        import com.easyinsight.quicksearch.EIDescriptor;
        import com.easyinsight.quicksearch.QuickSearchEvent;
        import com.easyinsight.quicksearch.QuickSearchWindow;
        import com.easyinsight.report.DelayedMultiReportLink;
        import com.easyinsight.report.ReportAnalyzeSource;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.solutions.DelayedSolutionLink;
        import com.easyinsight.solutions.InsightDescriptor;

        import com.easyinsight.util.EITitleWindow;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.ProgressAlert;

        import mx.rpc.events.FaultEvent;

        import com.easyinsight.LoginDialog;
        import com.easyinsight.framework.SessionExpirationEvent;
        import com.easyinsight.framework.UserServiceResponse;
        import com.easyinsight.analysis.AnalysisCloseEvent;
        import com.easyinsight.framework.NavigationEvent;

        import mx.controls.Alert;
        import mx.utils.URLUtil;
        import mx.managers.IBrowserManager;
        import mx.events.BrowserChangeEvent;
        import mx.managers.BrowserManager;

        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.listing.AnalyzeSource;
        import com.easyinsight.listing.IPerspective;
        import com.easyinsight.listing.ListingChangeEvent;
        import com.easyinsight.commands.CommandProcessor;
        import com.easyinsight.framework.User;
        import com.easyinsight.framework.LoginEvent;

        import mx.managers.PopUpManager;

        private function passwordResetCheck():void {
            var result:Boolean = userService.verifyPasswordReset.lastResult as Boolean;
            if (result) {
                var window:PasswordResetWindow = new PasswordResetWindow();
                window.passwordValidation = passwordResetValue;
                PopUpManager.addPopUp(window, this, true);
                PopUpUtil.centerPopUp(window);
            }
        }

        [Bindable]
        private var messageListener:EIMessageListener;

        private var perspective:IPerspective;

        [Bindable]
        private var loggedIn:Boolean;

        [Bindable]
        [Embed(source="../assets/find.png")]
        private var findIcon:Class;

        [Bindable]
        [Embed(source="../assets/messagex16.png")]
        private var chatIcon:Class;

        [Bindable]
        [Embed(source="../assets/note.png")]
        private var noteIcon:Class;

        [Bindable]
        [Embed(source="../assets/clock.png")]
        private var clockIcon:Class;

        [Bindable]
        private var dataAnalysis:DisplayObject;

        private var fullScreenPage:IFullScreenPage;

        public var browserManager:IBrowserManager;


        private function startWorkspace():void {
            PopupMenuFactory.menuFactory = new DefaultMenuFactory();
            CredentialsCache.initialize(new WebCredentialsCache());
            new CommandProcessor();
            addEventListener(FaultEvent.FAULT, onFault, true);
            User.getEventNotifier().addEventListener(NavigationEvent.NAVIGATION, navigation);
            //ProgressAlert.alert(this, "Taking care of initial setup...", null, userService.isSessionLoggedIn);
            userService.isSessionLoggedIn.send();
            EIMessageListener.initialize();
            messageListener = EIMessageListener.instance();
        }

        private function applicationListeners():void {
            stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
        }

        private function onKeyDown(event:KeyboardEvent):void {
            if (EITitleWindow.windowCount == 0 && currentState != "Analysis" && event.keyCode == 78) {
                launchQuickSearchWindow();
            }
        }

        private function launchQuickSearchWindow():void {
            var window:QuickSearchWindow = new QuickSearchWindow();
            window.addEventListener(QuickSearchEvent.QUICK_SEARCH, onQuickSearch);
            window.addEventListener(QuickSearchEvent.QUICK_SEARCH_CANCEL, onQuickSearch);
            PopUpManager.addPopUp(window, this, false);
            PopUpUtil.centerPopUp(window);
        }

        private function launchBugReportWindow():void {
            var window:BugReportWindow = new BugReportWindow();
            PopUpManager.addPopUp(window, this, false);
            PopUpUtil.centerPopUp(window);
        }


        private function onQuickSearch(event:QuickSearchEvent):void {
            event.currentTarget.removeEventListener(QuickSearchEvent.QUICK_SEARCH, onQuickSearch);
            event.currentTarget.removeEventListener(QuickSearchEvent.QUICK_SEARCH_CANCEL, onQuickSearch);
            if (event.type == QuickSearchEvent.QUICK_SEARCH) {
                if (event.eiDescriptor.getType() == EIDescriptor.DATA_SOURCE) {
                    var eiDescriptor:DataSourceDescriptor = event.eiDescriptor as DataSourceDescriptor;
                    internalModuleAnalyze(new ModuleAnalyzeEvent(new DescriptorAnalyzeSource(eiDescriptor.id, eiDescriptor.name)));
                } else if (event.eiDescriptor.getType() == EIDescriptor.REPORT) {
                    internalModuleAnalyze(new ModuleAnalyzeEvent(new ReportAnalyzeSource(event.eiDescriptor as InsightDescriptor)));
                } else if (event.eiDescriptor.getType() == EIDescriptor.GOAL_TREE) {
                    internalAnalyze(new AnalyzeEvent(new GoalDataAnalyzeSource(event.eiDescriptor.id)));
                }
            }
        }

        private function onFault(event:FaultEvent):void {
            Alert.show(event.fault.name, "Sorry, but we encountered a server error in trying to complete the operation.");
        }

        private function sessionExpired(event:SessionExpirationEvent):void {
            var loginDialog:LoginDialog = LoginDialog(PopUpManager.createPopUp(this, LoginDialog, true));
            PopUpUtil.centerPopUp(loginDialog);
        }

        private function navigation(event:NavigationEvent):void {
            if (event.targetPerspective == null) {
                headerBar.explicitChange(event.targetPage, event.properties);
            } else {
                changePerspective(new ListingChangeEvent(event.targetPerspective, event.properties));
            }
        }

        private function activated():void {
            var targetURL:String = accountService.activateAccount.lastResult as String;
            var loginDialog:LoginDialog = new LoginDialog();
            loginDialog.targetURL = targetURL;
            loginDialog.showActivation = true;
            PopUpManager.addPopUp(loginDialog, this, true);
            PopUpUtil.centerPopUp(loginDialog);
            //loginDialog.addEventListener(ActivationEvent.URL_ACTIVATION, postActivatePath);
            User.getEventNotifier().addEventListener(LoginEvent.LOGIN, onLogin);
            //navigation(new NavigationEvent(null, new WelcomeScreen()));
        }

        private function onLogin(event:LoginEvent):void {
            User.getEventNotifier().removeEventListener(LoginEvent.LOGIN, onLogin);
            loggedIn = true;
            currentState = "LoggedIn";
            if (event.targetURL == null)
                navigation(new NavigationEvent("Intro"));
            else {
                var o:Object = URLUtil.stringToObject(event.targetURL, "&");
                parseFragmentObject(o, event.targetURL);
            }
        }

        private function parseURL(event:Event):void {            
            var o:Object = URLUtil.stringToObject(browserManager.fragment, "&");
            parseFragmentObject(o, browserManager.fragment);
        }

        private function postActivatePath(event:ActivationEvent):void {
            var url:String = event.url;
            var o:Object = URLUtil.stringToObject(url, "&");
            parseFragmentObject(o, url);
        }

        private var passwordResetValue:String;

        private function parseFragmentObject(o:Object, url:String):void {
            var analysisID:String = o.analysisID;
            if (analysisID != null) {
                //createAnalysisSource(Number(analysisID));
                var deepAnalysisLink:DelayedDeepLink = new DelayedDeepLink(Number(analysisID));
                deepAnalysisLink.addEventListener(ModuleAnalyzeEvent.MODULE_ANALYZE, internalModuleAnalyze);
                deepAnalysisLink.execute();
            } else {
                var feedID:String = o.feedID;
                if (feedID != null) {
                    var deepFeedLink:DelayedFeedLink = new DelayedFeedLink(Number(feedID));
                    deepFeedLink.addEventListener(ModuleAnalyzeEvent.MODULE_ANALYZE, internalModuleAnalyze);
                    deepFeedLink.execute();
                } else {
                    var feedKey:String = o.feedKey;
                    if (feedKey != null) {
                        var deepAPILink:DelayedAPIKeyLink = new DelayedAPIKeyLink(feedKey);
                        deepAPILink.addEventListener(ModuleAnalyzeEvent.MODULE_ANALYZE, internalModuleAnalyze);
                        deepAPILink.execute();
                    } else {
                        var groupID:String = o.groupID;
                        if (groupID != null) {
                            var groupLink:DelayedGroupLink = new DelayedGroupLink(Number(groupID));
                            groupLink.addEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
                            groupLink.execute();
                        } else {
                            var goalTreeID:String = o.goalTreeID;
                            if (goalTreeID != null) {
                                var goalLink:DelayedGoalLink = new DelayedGoalLink(Number(goalTreeID));
                                goalLink.addEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
                                goalLink.execute();
                            } else {
                                var activationString:String = o.activationID;
                                if (activationString != null) {
                                    ProgressAlert.alert(this, "Activating account", null, accountService.activateAccount);
                                    accountService.activateAccount.send(activationString);
                                } else {
                                    var solution:String = o.solutionID;
                                    if (solution != null) {
                                        var solutionLink:DelayedSolutionLink = new DelayedSolutionLink(Number(solution));
                                        solutionLink.addEventListener(ListingChangeEvent.LISTING_CHANGE, changePerspective);
                                        solutionLink.execute();
                                    } else {
                                        var reportID:String = o.reportID;
                                        if (reportID != null) {
                                            var deepReportLink:DelayedReportLink = new DelayedReportLink(Number(reportID));
                                            deepReportLink.addEventListener(ModuleAnalyzeEvent.MODULE_ANALYZE, internalModuleAnalyze);
                                            deepReportLink.execute();
                                        } else {
                                            var multiReportID:String = o.multiReportID;
                                            if (multiReportID != null) {
                                                var multiReportLink:DelayedMultiReportLink = new DelayedMultiReportLink(Number(multiReportID));
                                                multiReportLink.addEventListener(ModuleAnalyzeEvent.MODULE_ANALYZE, internalModuleAnalyze);
                                                multiReportLink.execute();
                                            } else {
                                                var goalAdminID:String = o.goalTreeAdminID;
                                                if (goalAdminID != null) {
                                                    var delayedGoalAdminLink:DelayedGoalAdminLink = new DelayedGoalAdminLink(Number(goalAdminID));
                                                    delayedGoalAdminLink.addEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
                                                    delayedGoalAdminLink.execute();
                                                } else {
                                                    var redirectID:String = o.redirectID;
                                                    if (redirectID != null) {
                                                        var redirectType:int = int(redirectID);
                                                        var redirector:TokenRedirector = new TokenRedirector();
                                                        redirector.type = redirectType;
                                                        redirector.onURL(url);
                                                    } else {
                                                        var page:String = o.page;
                                                        if (page != null) {
                                                            if (currentState == "Analysis") {
                                                                if (loggedIn) {
                                                                    currentState = "LoggedIn";
                                                                } else {
                                                                    currentState = "";
                                                                }
                                                                dataAnalysis.removeEventListener(AnalysisCloseEvent.ANALYSIS_CLOSE, analysisClosed);
                                                                dataAnalysis = null;
                                                            }
                                                            switch (page) {
                                                                case "gdocs":

                                                                    break;
                                                                case "myData":
                                                                    navigation(new NavigationEvent("My Data"));
                                                                    break;
                                                                case "myGoals":
                                                                    navigation(new NavigationEvent("Goals"));
                                                                    break;
                                                                case "marketplace":
                                                                    navigation(new NavigationEvent("Marketplace"));
                                                                    break;
                                                                case "groups":
                                                                    navigation(new NavigationEvent("Groups"));
                                                                    break;
                                                                case "groupDetail":
                                                                    break;
                                                                case "intro":
                                                                        if(o.type != null && o.type == "tour")
                                                                            navigation(new NavigationEvent("Intro", null, { tour: true }));
                                                                        else
                                                                            navigation(new NavigationEvent("Intro"));
                                                                    break;
                                                                case "solutions":
                                                                    if(o.type != null && o.type == "business")
                                                                        navigation(new NavigationEvent("Solutions", null, { biz: true, client:false, saas: false, learning: false }));
                                                                    else if(o.type != null && o.type == "application")
                                                                        navigation(new NavigationEvent("Solutions", null, { saas: true, client:true, biz: false, learning: false }));
                                                                    else
                                                                        navigation(new NavigationEvent("Solutions"));
                                                                    break;
                                                                case "account":
                                                                    navigation(new NavigationEvent("Accounts"));
                                                                    break;
                                                                case "welcome":
                                                                    navigation(new NavigationEvent(null, new WelcomeScreen()));
                                                            }
                                                        }
                                                        else if (o.resetPassword != null) {
                                                            passwordResetValue = o.resetPassword;
                                                            userService.verifyPasswordReset.send(o.resetPassword);
                                                        }
                                                        else {
                                                            navigation(new NavigationEvent("Intro"));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        private function doAnalyze(analyzeSource:AnalyzeSource):void {
            if (currentState == "Analysis") {
                fullScreenPage.cleanup();
                dataAnalysis.removeEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
                dataAnalysis.removeEventListener(ModuleAnalyzeEvent.MODULE_ANALYZE, internalModuleAnalyze);
                dataAnalysis.removeEventListener(AnalysisCloseEvent.ANALYSIS_CLOSE, analysisClosed);
                if (loggedIn) {
                    currentState = "LoggedIn";
                } else {
                    currentState = "";
                }
                validateNow();
            }
            if (analyzeSource != null) {
                var analysisWindow:FullScreenPage = analyzeSource.createAnalysisPopup();
                analysisWindow.addEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
                analysisWindow.addEventListener(ModuleAnalyzeEvent.MODULE_ANALYZE, internalModuleAnalyze);
                analysisWindow.addEventListener(AnalysisCloseEvent.ANALYSIS_CLOSE, analysisClosed);
                analysisWindow.addEventListener(NavigationEvent.NAVIGATION, navigation);
                dataAnalysis = analysisWindow;
                fullScreenPage = analysisWindow as IFullScreenPage;
                currentState = "Analysis";
            }
        }

        private function analysisClosed(event:AnalysisCloseEvent):void {
            if (loggedIn) {
                currentState = "LoggedIn";
            } else {
                currentState = "";
            }
            event.dataAnalysisContainer.removeEventListener(AnalysisCloseEvent.ANALYSIS_CLOSE, analysisClosed);
            event.dataAnalysisContainer.removeEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
            event.dataAnalysisContainer.removeEventListener(ModuleAnalyzeEvent.MODULE_ANALYZE, internalModuleAnalyze);
            event.dataAnalysisContainer.removeEventListener(NavigationEvent.NAVIGATION, navigation);
            fullScreenPage.cleanup();
            dataAnalysis = null;
            if (this.perspective == null) {
                navigation(new NavigationEvent("Intro"));
            } else {
                this.perspective.gotFocus();
            }
        }

        private function changePerspective(event:ListingChangeEvent):void {
            if (event.perspective != null) {
                if (this.perspective != null) {
                    var existingDispatcher:EventDispatcher = this.perspective as EventDispatcher;
                    existingDispatcher.removeEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
                    existingDispatcher.removeEventListener(ModuleAnalyzeEvent.MODULE_ANALYZE, internalModuleAnalyze);
                    existingDispatcher.removeEventListener(ListingChangeEvent.LISTING_CHANGE, changePerspective);
                    existingDispatcher.removeEventListener(NavigationEvent.NAVIGATION, navigation);
                }
                if (coreSpace.getChildren().length > 0) {
                    coreSpace.removeChildAt(0);
                }
                this.perspective = event.perspective;
                if (event.properties != null) {
                    for (var propKey:String in event.properties) {
                        perspective[propKey] = event.properties[propKey];
                    }
                }
                coreSpace.addChildAt(perspective as DisplayObject, 0);
                perspective.gotFocus();
                var dispatcher:EventDispatcher = perspective as EventDispatcher;
                dispatcher.addEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
                dispatcher.addEventListener(ModuleAnalyzeEvent.MODULE_ANALYZE, internalModuleAnalyze);
                dispatcher.addEventListener(ListingChangeEvent.LISTING_CHANGE, changePerspective);
                dispatcher.addEventListener(NavigationEvent.NAVIGATION, navigation);
            }
        }

        private function getCurrentPerspective():IPerspective {
            return this.perspective;
        }

        private function internalAnalyze(event:AnalyzeEvent):void {
            var analyzeSource:AnalyzeSource = event.analyzeSource;
            doAnalyze(analyzeSource);
        }

        private function internalModuleAnalyze(event:ModuleAnalyzeEvent):void {
            // add a core container, nest everything else
            //
            if (currentState == "Analysis") {
                fullScreenPage.cleanup();
                dataAnalysis.removeEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
                dataAnalysis.removeEventListener(ModuleAnalyzeEvent.MODULE_ANALYZE, internalModuleAnalyze);
                dataAnalysis.removeEventListener(AnalysisCloseEvent.ANALYSIS_CLOSE, analysisClosed);
                dataAnalysis.removeEventListener(NavigationEvent.NAVIGATION, navigation);
                if (loggedIn) {
                    currentState = "LoggedIn";
                } else {
                    currentState = "";
                }
                validateNow();
            }
            var moduleAnalyzeSource:ModuleAnalyzeSource = event.analyzeSource;
            var analysisWindow:DisplayObject = moduleAnalyzeSource.createDirect();
            analysisWindow.addEventListener(AnalysisCloseEvent.ANALYSIS_CLOSE, analysisClosed);
            analysisWindow.addEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
            analysisWindow.addEventListener(ModuleAnalyzeEvent.MODULE_ANALYZE, internalModuleAnalyze);
            analysisWindow.addEventListener(NavigationEvent.NAVIGATION, navigation);
            dataAnalysis = analysisWindow;
            fullScreenPage = analysisWindow as IFullScreenPage;
            currentState = "Analysis";
        }

        private function moduleLoaded(event:FullScreenModuleEvent):void {
            dataAnalysis = event.val;
            dataAnalysis.addEventListener(AnalysisCloseEvent.ANALYSIS_CLOSE, analysisClosed);
            currentState = "Analysis";
        }

        private function sessionCheck():void {
            var authResult:UserServiceResponse = userService.isSessionLoggedIn.lastResult as UserServiceResponse;
            if (authResult != null) {
                User.initializeUser(authResult.name, authResult.email,
                        authResult.accountType, authResult.spaceAllowed, authResult.accountAdmin,
                        authResult.dataSourceCreator, authResult.insightCreator, authResult.userID, authResult.activated);
                User.getInstance().password = authResult.encryptedPassword;
                User.getInstance().userName = authResult.userName;
                loggedIn = true;
                if (currentState == "" || currentState == null) {
                    currentState = "LoggedIn";
                }
                User.getEventNotifier().dispatchEvent(new LoginEvent(LoginEvent.LOGIN));
            } else {
                User.getEventNotifier().addEventListener(LoginEvent.LOGIN, onLogin);
            }
            browserManager = BrowserManager.getInstance();
            browserManager.addEventListener(BrowserChangeEvent.BROWSER_URL_CHANGE, parseURL);           
            browserManager.init("", "Intro");
        }

        private function setup():void {
            User.getEventNotifier().addEventListener(LoginEvent.LOGIN, loginEvent);
            User.getEventNotifier().addEventListener(LoginEvent.LOGOUT, loginEvent);
        }

        private function loginEvent(event:LoginEvent):void {
            loggedIn = event.type == LoginEvent.LOGIN;
        }


        ]]>
    </mx:Script>
    <mx:Style source="com/easyinsight/skin/osx/OSX.css"/>

    <mx:RemoteObject id="userService" destination="login">
        <mx:method name="isSessionLoggedIn" result="sessionCheck()"/>
        <mx:method name="verifyPasswordReset" result="passwordResetCheck()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="accountService" destination="accountAdmin">
        <mx:method name="activateAccount" result="activated()"/>
    </mx:RemoteObject>
    <util:AntiScrollCanvas width="100%" height="100%">
        <mx:VBox width="100%" height="100%" id="coreVBox" paddingLeft="0" verticalGap="0" paddingRight="0">
            <listing:HeaderBar width="100%" id="headerBar"
                               paddingTop="5" paddingBottom="5" paddingLeft="10" paddingRight="10" bottom="0" top="0"
                               listingChange="changePerspective(event)" launchQuickSearch="launchQuickSearchWindow()"
                               reportBug="launchBugReportWindow()"/>
            <mx:Box width="100%" height="5" backgroundColor="#D42525" left="0" right="0" id="highBar"/>
            <mx:HBox width="100%" height="100%" horizontalGap="0" id="primarySpace">


                <mx:HBox width="100%" height="100%" id="coreSpace" paddingLeft="0" paddingTop="0" top="0"
                         paddingRight="0">
                    <intro1:IntroPanel id="introPanel" width="100%" height="100%" paddingTop="0"
                                       navigation="navigation(event)"/>
                </mx:HBox>


            </mx:HBox>
        </mx:VBox>
     </util:AntiScrollCanvas>
</mx:Application>
