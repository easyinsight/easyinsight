<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:framework="com.easyinsight.framework.*"
                xmlns:util="com.easyinsight.util.*"
                creationComplete="startWorkspace()" xmlns:local="*" applicationComplete="applicationListeners()"
                xmlns:listing="com.easyinsight.listing.*" xmlns:intro1="com.easyinsight.intro.*"
                xmlns:notification="com.easyinsight.outboundnotifications.*"
                paddingTop="0" top="0" borderThickness="0" left="0" paddingLeft="0"
                right="0" paddingRight="0"
                bottom="0" paddingBottom="0" preloader="com.easyinsight.preloader.EIProgressBar">
    <mx:states>
        <mx:State name="Analysis">
            <mx:RemoveChild target="{headerBar}"/>
            <mx:RemoveChild target="{primarySpace}"/>
            <mx:RemoveChild target="{highBar}"/>
            <mx:AddChild relativeTo="{coreVBox}" target="{dataAnalysis}"/>
        </mx:State>        
    </mx:states>
    <mx:Script>
		<![CDATA[        
        import com.easyinsight.analysis.DefaultMenuFactory;
        import com.easyinsight.analysis.DelayedAPIKeyLink;
        import com.easyinsight.analysis.DelayedReportLink;
        import com.easyinsight.analysis.PopupMenuFactory;
        import com.easyinsight.bugreports.BugReportWindow;
        import com.easyinsight.framework.ActivationEvent;
        import com.easyinsight.framework.CredentialsCache;
        import com.easyinsight.framework.EIMessageListener;
        import com.easyinsight.framework.FullScreenModuleEvent;
        import com.easyinsight.framework.IFullScreenPage;        
        import com.easyinsight.framework.TokenRedirector;
        import com.easyinsight.framework.WebCredentialsCache;
        import com.easyinsight.goals.DelayedGoalAdminLink;
        import com.easyinsight.goals.DelayedGoalLink;
        import com.easyinsight.goals.GoalDataAnalyzeSource;
        import com.easyinsight.groups.DelayedGroupLink;
        import com.easyinsight.intro.WelcomeScreen;
        import com.easyinsight.FullScreenPage;
        import com.easyinsight.analysis.DelayedFeedLink;
        import com.easyinsight.analysis.DelayedDeepLink;
        import com.easyinsight.listing.DescriptorAnalyzeSource;
        import com.easyinsight.listing.PasswordResetWindow;
        import com.easyinsight.quicksearch.EIDescriptor;
        import com.easyinsight.quicksearch.QuickSearchEvent;
        import com.easyinsight.quicksearch.QuickSearchWindow;
        import com.easyinsight.report.DelayedMultiReportLink;
        import com.easyinsight.report.DelayedPackageLink;
        import com.easyinsight.report.PackageAnalyzeSource;
        import com.easyinsight.report.ReportAnalyzeSource;
        import com.easyinsight.report.StaticReportSource;
        import com.easyinsight.reportpackage.ReportPackageDescriptor;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.solutions.DelayedSolutionLink;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.tour.TutorialFramework;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.ProgressAlert;

        import mx.rpc.events.FaultEvent;

        import com.easyinsight.LoginDialog;
        import com.easyinsight.framework.SessionExpirationEvent;
        import com.easyinsight.framework.UserServiceResponse;
        import com.easyinsight.analysis.AnalysisCloseEvent;
        import com.easyinsight.framework.NavigationEvent;

        import mx.controls.Alert;
        import mx.utils.URLUtil;
        import mx.managers.IBrowserManager;
        import mx.events.BrowserChangeEvent;
        import mx.managers.BrowserManager;

        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.listing.AnalyzeSource;
        import com.easyinsight.listing.IPerspective;
        import com.easyinsight.listing.ListingChangeEvent;
        import com.easyinsight.commands.CommandProcessor;
        import com.easyinsight.framework.User;
        import com.easyinsight.framework.LoginEvent;

        import mx.managers.PopUpManager;

        private function passwordResetCheck():void {
            var result:Boolean = userService.verifyPasswordReset.lastResult as Boolean;
            if (result) {
                var window:PasswordResetWindow = new PasswordResetWindow();
                window.passwordValidation = passwordResetValue;
                PopUpManager.addPopUp(window, this, true);
                PopUpUtil.centerPopUp(window);
            }
        }

        [Bindable]
        private var messageListener:EIMessageListener;


        private var perspective:IPerspective;

        [Bindable]
        private var loggedIn:Boolean;


        [Bindable]
        private var dataAnalysis:DisplayObject;

        private var fullScreenPage:IFullScreenPage;

        public var browserManager:IBrowserManager;


        private function startWorkspace():void {
            PopupMenuFactory.menuFactory = new DefaultMenuFactory();
            CredentialsCache.initialize(new WebCredentialsCache());
            new CommandProcessor();
            addEventListener(FaultEvent.FAULT, onFault, true);
            User.getEventNotifier().addEventListener(NavigationEvent.NAVIGATION, navigation);
            //ProgressAlert.alert(this, "Taking care of initial setup...", null, userService.isSessionLoggedIn);
            EIMessageListener.initialize();
            messageListener = EIMessageListener.instance();
            userService.isSessionLoggedIn.send();
        }

        private function applicationListeners():void {
            stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
        }

        private function onKeyDown(event:KeyboardEvent):void {
            if (event.ctrlKey && event.keyCode == 190 && User.getInstance() != null) {
                launchQuickSearchWindow();
            }
        }

        private function launchQuickSearchWindow():void {
            var window:QuickSearchWindow = new QuickSearchWindow();
            window.addEventListener(QuickSearchEvent.QUICK_SEARCH, onQuickSearch);
            window.addEventListener(QuickSearchEvent.QUICK_SEARCH_CANCEL, onQuickSearch);
            PopUpManager.addPopUp(window, this, false);
            PopUpUtil.centerPopUp(window);
        }

        private function launchBugReportWindow():void {
            var window:BugReportWindow = new BugReportWindow();
            PopUpManager.addPopUp(window, this, false);
            PopUpUtil.centerPopUp(window);
        }


        private function onQuickSearch(event:QuickSearchEvent):void {
            event.currentTarget.removeEventListener(QuickSearchEvent.QUICK_SEARCH, onQuickSearch);
            event.currentTarget.removeEventListener(QuickSearchEvent.QUICK_SEARCH_CANCEL, onQuickSearch);
            if (event.type == QuickSearchEvent.QUICK_SEARCH) {
                if (event.eiDescriptor.getType() == EIDescriptor.DATA_SOURCE) {
                    var eiDescriptor:DataSourceDescriptor = event.eiDescriptor as DataSourceDescriptor;
                    internalAnalyze(new AnalyzeEvent(new DescriptorAnalyzeSource(eiDescriptor.id, eiDescriptor.name)));
                } else if (event.eiDescriptor.getType() == EIDescriptor.REPORT) {
                    internalAnalyze(new AnalyzeEvent(new ReportAnalyzeSource(event.eiDescriptor as InsightDescriptor)));
                } else if (event.eiDescriptor.getType() == EIDescriptor.GOAL_TREE) {
                    internalAnalyze(new AnalyzeEvent(new GoalDataAnalyzeSource(event.eiDescriptor.id)));
                } else if (event.eiDescriptor.getType() == EIDescriptor.PACKAGE) {
                    internalAnalyze(new AnalyzeEvent(new PackageAnalyzeSource(event.eiDescriptor as ReportPackageDescriptor)));
                }
            }
        }

        private function onFault(event:FaultEvent):void {
            Alert.show(event.fault.name, "Sorry, but we encountered a server error in trying to complete the operation.");
        }

        private function sessionExpired(event:SessionExpirationEvent):void {
            var loginDialog:LoginDialog = LoginDialog(PopUpManager.createPopUp(this, LoginDialog, true));
            PopUpUtil.centerPopUp(loginDialog);
        }

        private function navigation(event:NavigationEvent):void {
            if (event.targetPerspective == null) {
                headerBar.explicitChange(event.targetPage, event.properties);
            } else {
                changePerspective(new ListingChangeEvent(event.targetPerspective, event.properties));
            }
        }

        private function activated():void {
            var targetURL:String = accountService.activateAccount.lastResult as String;
            var loginDialog:LoginDialog = new LoginDialog();
            loginDialog.targetURL = targetURL;
            loginDialog.showActivation = true;
            PopUpManager.addPopUp(loginDialog, this, true);
            PopUpUtil.centerPopUp(loginDialog);
            //loginDialog.addEventListener(ActivationEvent.URL_ACTIVATION, postActivatePath);
            User.getEventNotifier().addEventListener(LoginEvent.LOGIN, onLogin);
            //navigation(new NavigationEvent(null, new WelcomeScreen()));
        }

        public static function registerTutorial(tutorial:TutorialFramework):void {
            var workspace:PrimaryWorkspace = PrimaryWorkspace(Application.application);
            workspace.registerTutorialForApp(tutorial);
        }

        private function registerTutorialForApp(tutorial:TutorialFramework):void {
            addListeners(tutorial);
        }

        private function onLogin(event:LoginEvent):void {
            User.getEventNotifier().removeEventListener(LoginEvent.LOGIN, onLogin);
            loggedIn = true;
            if (event.targetURL == null) {                
                if (event.newAccount)
                    navigation(new NavigationEvent("Help"));
                else
                    navigation(new NavigationEvent("Home"));
            }
            else {
                var o:Object = URLUtil.stringToObject(event.targetURL, "&");
                parseFragmentObject(o, event.targetURL);
            }
        }

        private function parseURL(event:Event):void {            
            var o:Object = URLUtil.stringToObject(browserManager.fragment, "&");
            if (currentFragment != browserManager.fragment) {
                currentFragment = browserManager.fragment;
                parseFragmentObject(o, browserManager.fragment);
            }
        }

        private function postActivatePath(event:ActivationEvent):void {
            var url:String = event.url;
            var o:Object = URLUtil.stringToObject(url, "&");
            parseFragmentObject(o, url);
        }

        private var passwordResetValue:String;

        private var currentFragment:String;

        private function parseFragmentObject(o:Object, url:String):void {
            var analysisID:String = o.analysisID;
            if (analysisID != null) {
                //createAnalysisSource(Number(analysisID));
                var deepAnalysisLink:DelayedDeepLink = new DelayedDeepLink(Number(analysisID));
                deepAnalysisLink.addEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
                deepAnalysisLink.execute();
            } else {
                var feedID:String = o.feedID;
                if (feedID != null) {
                    var deepFeedLink:DelayedFeedLink = new DelayedFeedLink(Number(feedID));
                    deepFeedLink.addEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
                    deepFeedLink.execute();
                } else {
                    var feedKey:String = o.feedKey;
                    if (feedKey != null) {
                        var deepAPILink:DelayedAPIKeyLink = new DelayedAPIKeyLink(feedKey);
                        deepAPILink.addEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
                        deepAPILink.execute();
                    } else {
                        var groupID:String = o.groupID;
                        if (groupID != null) {
                            var groupLink:DelayedGroupLink = new DelayedGroupLink(Number(groupID));
                            groupLink.addEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
                            groupLink.execute();
                        } else {
                            var staticReportID:String = o.staticReportID;
                            if (staticReportID != null) {
                                internalAnalyze(new AnalyzeEvent(new StaticReportSource(Number(staticReportID))));
                            } else {
                                var goalTreeID:String = o.goalTreeID;
                                if (goalTreeID != null) {
                                    var goalLink:DelayedGoalLink = new DelayedGoalLink(Number(goalTreeID));
                                    goalLink.addEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
                                    goalLink.execute();
                                } else {
                                    var activationString:String = o.activationID;
                                    if (activationString != null) {
                                        ProgressAlert.alert(this, "Activating account", null, accountService.activateAccount);
                                        accountService.activateAccount.send(activationString);
                                    } else {
                                        var solution:String = o.solutionID;
                                        if (solution != null) {
                                            var solutionLink:DelayedSolutionLink = new DelayedSolutionLink(Number(solution));
                                            solutionLink.addEventListener(ListingChangeEvent.LISTING_CHANGE, changePerspective);
                                            solutionLink.execute();
                                        } else {
                                            var reportID:String = o.reportID;
                                            if (reportID != null) {
                                                var deepReportLink:DelayedReportLink = new DelayedReportLink(Number(reportID));
                                                deepReportLink.addEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
                                                deepReportLink.execute();
                                            } else {
                                                var multiReportID:String = o.multiReportID;
                                                if (multiReportID != null) {
                                                    var multiReportLink:DelayedMultiReportLink = new DelayedMultiReportLink(Number(multiReportID));
                                                    multiReportLink.addEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
                                                    multiReportLink.execute();
                                                } else {
                                                    var packageID:String = o.packageID;
                                                    if (packageID != null) {
                                                        var delayedPackageLink:DelayedPackageLink = new DelayedPackageLink(Number(packageID));
                                                        delayedPackageLink.addEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
                                                        delayedPackageLink.execute();
                                                    } else {

                                                    var goalAdminID:String = o.goalTreeAdminID;
                                                    if (goalAdminID != null) {
                                                        var delayedGoalAdminLink:DelayedGoalAdminLink = new DelayedGoalAdminLink(Number(goalAdminID));
                                                        delayedGoalAdminLink.addEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
                                                        delayedGoalAdminLink.execute();
                                                    } else {
                                                        var redirectID:String = o.redirectID;
                                                        if (redirectID != null) {
                                                            var redirectType:int = int(redirectID);
                                                            var sessionToken:String = String(o.token);
                                                            var redirector:TokenRedirector = new TokenRedirector();
                                                            redirector.solutionID = int(o.refSolutionID);
                                                            redirector.type = redirectType;
                                                            redirector.onURL(sessionToken);
                                                            redirector.addEventListener(ListingChangeEvent.LISTING_CHANGE, changePerspective);
                                                        } else {
                                                                var page:String = o.page;
                                                                if (page != null) {
                                                                    if (currentState == "Analysis") {
                                                                        dataAnalysis.removeEventListener(AnalysisCloseEvent.ANALYSIS_CLOSE, analysisClosed);
                                                                        dataAnalysis = null;
                                                                    }
                                                                    switch (page) {
                                                                        case "myData":
                                                                            navigation(new NavigationEvent("My Data"));
                                                                            break;
                                                                        case "myGoals":
                                                                            navigation(new NavigationEvent("Goals"));
                                                                            break;
                                                                        case "exchange":
                                                                            var view:int = int(o.view);
                                                                            var display:int = int(o.display);
                                                                            var subTopic:int = int(o.subTopicID);
                                                                            navigation(new NavigationEvent("Exchange", null, {viewMode: view, displayMode: display, subTopicID: subTopic}));
                                                                            break;
                                                                        case "groups":
                                                                            navigation(new NavigationEvent("Groups"));
                                                                            break;
                                                                        case "help":
                                                                            navigation(new NavigationEvent("Help"));
                                                                            break;
                                                                        case "home":
                                                                        case "intro":
                                                                                if(o.type != null && o.type == "tour")
                                                                                    navigation(new NavigationEvent("Home", null, { tour: true }));
                                                                                else
                                                                                    navigation(new NavigationEvent("Home"));
                                                                            break;
                                                                        case "connections":
                                                                            if(o.type != null && o.type == "business")
                                                                                navigation(new NavigationEvent("Connections", null, { biz: true, client:false, saas: false, learning: false }));
                                                                            else if(o.type != null && o.type == "application")
                                                                                navigation(new NavigationEvent("Connections", null, { saas: true, client:true, biz: false, learning: false }));
                                                                            else
                                                                                navigation(new NavigationEvent("Connections"));
                                                                            break;
                                                                        case "account":
                                                                            navigation(new NavigationEvent("Accounts"));
                                                                            break;
                                                                        case "welcome":
                                                                            navigation(new NavigationEvent(null, new WelcomeScreen()));
                                                                    }
                                                                }
                                                                else if (o.resetPassword != null) {
                                                                    passwordResetValue = o.resetPassword;
                                                                    userService.verifyPasswordReset.send(o.resetPassword);
                                                                }
                                                                else {
                                                                    navigation(new NavigationEvent("Home"));
                                                                }
                                                        }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        private function removeListeners(eventDispatcher:EventDispatcher):void {
            eventDispatcher.removeEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);
            eventDispatcher.removeEventListener(AnalysisCloseEvent.ANALYSIS_CLOSE, analysisClosed);
            eventDispatcher.removeEventListener(NavigationEvent.NAVIGATION, navigation);
            eventDispatcher.removeEventListener(ListingChangeEvent.LISTING_CHANGE, changePerspective);
        }

        private function addListeners(eventDispatcher:EventDispatcher):void {
            eventDispatcher.addEventListener(AnalyzeEvent.ANALYZE, internalAnalyze);            
            eventDispatcher.addEventListener(AnalysisCloseEvent.ANALYSIS_CLOSE, analysisClosed);
            eventDispatcher.addEventListener(NavigationEvent.NAVIGATION, navigation);
            eventDispatcher.addEventListener(ListingChangeEvent.LISTING_CHANGE, changePerspective);
        }

        private function doAnalyze(analyzeSource:AnalyzeSource):void {
            if (currentState == "Analysis") {
                fullScreenPage.cleanup();
                removeListeners(dataAnalysis);
                currentState = "";
                validateNow();
            }
            if (analyzeSource != null) {
                var analysisWindow:FullScreenPage = analyzeSource.createAnalysisPopup();
                addListeners(analysisWindow);
                dataAnalysis = analysisWindow;
                fullScreenPage = analysisWindow as IFullScreenPage;
                currentState = "Analysis";
            }
        }

        private function analysisClosed(event:AnalysisCloseEvent):void {
            removeListeners(dataAnalysis);
            fullScreenPage.cleanup();
            currentState = "";
            dataAnalysis = null;
            if (event.targetPerspective != null) {
                headerBar.explicitChange(event.targetPerspective, event.properties);
            } else {
                if (this.perspective == null) {
                    navigation(new NavigationEvent("Home"));
                } else {
                    this.perspective.gotFocus();
                }
            }
        }

        private function changePerspective(event:ListingChangeEvent):void {
            if (event.perspective != null) {
                if (this.perspective != null) {
                    var existingDispatcher:EventDispatcher = this.perspective as EventDispatcher;
                    removeListeners(existingDispatcher);
                }
                if (currentState == "Analysis") {
                    fullScreenPage.cleanup();
                    currentState = "";
                    dataAnalysis = null;
                    fullScreenPage = null;
                }
                if (coreSpace.getChildren().length > 0) {
                    coreSpace.removeChildAt(0);
                }
                this.perspective = event.perspective;
                if (event.properties != null) {
                    for (var propKey:String in event.properties) {
                        perspective[propKey] = event.properties[propKey];
                    }
                }
                coreSpace.addChildAt(perspective as DisplayObject, 0);
                perspective.gotFocus();
                var dispatcher:EventDispatcher = perspective as EventDispatcher;
                addListeners(dispatcher);
            }
        }

        private function getCurrentPerspective():IPerspective {
            return this.perspective;
        }

        private function internalAnalyze(event:AnalyzeEvent):void {
            var analyzeSource:AnalyzeSource = event.analyzeSource;
            doAnalyze(analyzeSource);
        }

        private function moduleLoaded(event:FullScreenModuleEvent):void {
            dataAnalysis = event.val;
            dataAnalysis.addEventListener(AnalysisCloseEvent.ANALYSIS_CLOSE, analysisClosed);
            currentState = "Analysis";
        }

        private function sessionCheck():void {
            var authResult:UserServiceResponse = userService.isSessionLoggedIn.lastResult as UserServiceResponse;
            if (authResult != null) {
                User.initializeUser(authResult.name, authResult.email,
                        authResult.accountType, authResult.spaceAllowed, authResult.accountAdmin,
                        authResult.dataSourceCreator, authResult.insightCreator, authResult.userID, authResult.activated, authResult.billingInformationGiven, authResult.accountState);
                User.getInstance().password = authResult.encryptedPassword;
                User.getInstance().userName = authResult.userName;
                loggedIn = true;
                User.getEventNotifier().dispatchEvent(new LoginEvent(LoginEvent.LOGIN));
            } else {
                User.getEventNotifier().addEventListener(LoginEvent.LOGIN, onLogin);
            }
            browserManager = BrowserManager.getInstance();
            browserManager.addEventListener(BrowserChangeEvent.BROWSER_URL_CHANGE, parseURL);           
            browserManager.init("home", "Home");
            parseURL(null);
        }

        private function setup():void {
            User.getEventNotifier().addEventListener(LoginEvent.LOGIN, loginEvent);
            User.getEventNotifier().addEventListener(LoginEvent.LOGOUT, loginEvent);
        }

        private function loginEvent(event:LoginEvent):void {
            loggedIn = event.type == LoginEvent.LOGIN;
        }


        ]]>
    </mx:Script>
    <mx:Style source="com/easyinsight/skin/osx/OSX.css"/>

    <mx:RemoteObject id="userService" destination="login">
        <mx:method name="isSessionLoggedIn" result="sessionCheck()"/>
        <mx:method name="verifyPasswordReset" result="passwordResetCheck()"/>
    </mx:RemoteObject>
    <mx:RemoteObject id="accountService" destination="accountAdmin">
        <mx:method name="activateAccount" result="activated()"/>
    </mx:RemoteObject>

    <util:AntiScrollCanvas width="100%" height="100%">
        <mx:VBox width="100%" height="100%" id="coreVBox" paddingLeft="0" verticalGap="0" paddingRight="0"  disabledOverlayAlpha=".275">
            <listing:HeaderBar width="100%" id="headerBar"
                               paddingTop="5" paddingBottom="5" paddingLeft="10" paddingRight="10" bottom="0" top="0"
                               listingChange="changePerspective(event)" launchQuickSearch="launchQuickSearchWindow()"
                               reportBug="launchBugReportWindow()"/>
            <mx:Box width="100%" height="5" backgroundColor="#D42525" left="0" right="0" id="highBar"/>
            <mx:HBox width="100%" height="100%" horizontalGap="0" id="primarySpace">
                <framework:LeftApplicationDock height="100%" backgroundColor="0xF0F0F0" analyze="internalAnalyze(event)" messageListener="{messageListener}"/>
                <mx:HBox width="100%" height="100%" id="coreSpace" paddingLeft="0" paddingTop="0" top="0"
                         paddingRight="0">
                    <!--<intro1:IntroPanel id="introPanel" width="100%" height="100%" paddingTop="0"
                                       navigation="navigation(event)"/>-->
                </mx:HBox>
                <framework:RightApplicationDock height="100%" backgroundColor="0xF0F0F0" analyze="internalAnalyze(event)" messageListener="{messageListener}"/>
            </mx:HBox>
        </mx:VBox>
     </util:AntiScrollCanvas>
</mx:Application>
