<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:dashboard="com.easyinsight.dashboard.*" width="100%" height="100%"
	creationComplete="onCreationComplete()" backgroundAlpha=".2" backgroundSize="100%" backgroundImage="{desktop}"
	paddingTop="0" top="0" borderThickness="0" left="0" paddingLeft="0" right="0" paddingRight="0"
	bottom="0" paddingBottom="0">
	<mx:states>
		<mx:State name="GettingInsight">
			<mx:RemoveChild target="{loginForm}"/>
			<mx:AddChild relativeTo="{coreBox}">
				<mx:Form>
					<mx:FormItem label="Insight: ">
						<mx:ComboBox id="insightChooser" dataProvider="{stubs}" close="insightChosen()" labelField="name"/>
					</mx:FormItem>
					<mx:FormItem label="">
						<mx:Button label="View This Insight" click="viewInsight()"/>
					</mx:FormItem>
				</mx:Form>
			</mx:AddChild>
		</mx:State>
		<mx:State name="Insight">
			<mx:RemoveChild target="{loginForm}"/>
			<mx:AddChild relativeTo="{coreBox}">
				<dashboard:WidgetViewPanel analysisDefinition="{analysisDefinition}" returnToList="returnToList()"/>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<mx:Script>
		<![CDATA[
			import com.easyinsight.analysis.YahooMapDefinition;
			import com.easyinsight.analysis.MapDefinition;
			import com.easyinsight.analysis.CrosstabDefinition;
			import com.easyinsight.analysis.ChartDefinition;
			import com.easyinsight.analysis.ListDefinition;			
			import mx.rpc.events.ResultEvent;
			import mx.messaging.config.ServerConfig;
			import mx.rpc.AsyncToken;
			import mx.rpc.AsyncResponder;
			import mx.rpc.events.FaultEvent;
			import mx.collections.ArrayCollection;
			
			import com.easyinsight.analysis.NamedKey;			
			
			import com.easyinsight.analysis.AnalysisDefinition;
			import com.easyinsight.account.FreeAccountType;
			import com.easyinsight.account.CommercialAccountType;
			import com.easyinsight.account.IndividualAccountType;
			import com.easyinsight.account.AccountType;
			//import com.easyinsight.genredata.AnalyzeEvent;
			import com.easyinsight.dashboard.WidgetAnalysisStub;
			import com.easyinsight.framework.User;
			import com.easyinsight.framework.UserServiceResponse;
			
			
			[Bindable]
			private var analysisID:Number;
			[Bindable]
			private var phase1:String;
			[Bindable]
			private var phase2:String;
			[Bindable]
			private var phase3:String;
			
			[Bindable]
			private var stubs:ArrayCollection;
			
			[Bindable]
			private var analysisDefinition:AnalysisDefinition;
			
			private var selectedAnalysisID:Number;
			
			[Bindable]
            [Embed(source="com/easyinsight/skin/osx/appleDesktop.jpg")]
            public var desktop:Class;
            
            /*private function onAnalyze(event:AnalyzeEvent):void {
				var urlString:String = "http://localhost:8080/DMS/#?analysisID=" + selectedAnalysisID;             	            
            	ExternalInterface.call("widget.openURL", urlString);
            }*/
			
			private function onKeyUp(event:KeyboardEvent):void {
				if (event.keyCode == Keyboard.ENTER) {
					if (currentState == null || currentState == "") {
						login();
					}
				}
			}
			
			private function onCreationComplete():void {
				
				focusManager.setFocus(userName);
				addEventListener(KeyboardEvent.KEY_UP, onKeyUp);
				
				var userNameJS:String = ExternalInterface.call("widget.getValue", "userName");
				phase1 = userNameJS;
				var passwordJS:String = ExternalInterface.call("widget.getValue", "password");
				phase2 = passwordJS;				
				var analysisID:String = ExternalInterface.call("widget.getValue", "insightCombo");
				phase3 = analysisID;
				
				// are user credentials already set in preferences?
				if (userNameJS != null && "" != userNameJS && passwordJS != null && "" != passwordJS) {
					// is an insight already chosen?
					if (analysisID != null && "" != analysisID) {
						selectedAnalysisID = Number(analysisID);						
					}
					userName.text = userNameJS;
					password.text = passwordJS;
					login();
				} else {
					if (authService.channelSet == null) {
	            		authService.channelSet = ServerConfig.getChannelSet(authService.destination);
	            	}
	            	if (authService.channelSet.connected) {
	            		
	            	}
				} 				
			}	
			
			private function blah():void {
            	var listDefinition:ListDefinition;
            	var chartDefinition:ChartDefinition;
            	var crosstabDefinition:CrosstabDefinition;
            	var mapDefinition:MapDefinition;
            	var yahooMapDefinition:YahooMapDefinition;
            }				
			
			private function handleAuthentication():void {
                    	
                var authResult:UserServiceResponse= authService.authenticate.lastResult as UserServiceResponse;
                var successful:Boolean = authResult.successful;
                if (successful) {                            
                    User.initializeUser(authResult.name, authResult.email,
                    	authResult.accountType, authResult.spaceAllowed, authResult.accountAdmin,
                            authResult.dataSourceCreator, authResult.insightCreator, authResult.userID);
                	User.getInstance().password = authResult.encryptedPassword;
                	User.getInstance().userName = authResult.userName;
                	ExternalInterface.call("widget.setValue", "userName", userName.text);
                	ExternalInterface.call("widget.setValue", "password", password.text);
                	if (selectedAnalysisID > 0) {
		            	ExternalInterface.call("widget.setValue", "insightCombo", selectedAnalysisID);
		            	analysisService.openAnalysisDefinition.send(selectedAnalysisID);	
                	} else {
                		analysisService.getWidgetAnalyses.send();
                	}
                    //_loginContainer.dispatchEvent(new LoginEvent());
                } else {
                    var failureMessage:String = authResult.failureMessage;
                    failureMessageLabel.text = failureMessage;
                }
            }
            
            private function returnToList():void {
            	analysisService.getWidgetAnalyses.send();
            }

            private function login():void {
            	if (authService.channelSet == null) {
            		authService.channelSet = ServerConfig.getChannelSet(authService.destination);
            	}
            	var token:AsyncToken = authService.channelSet.login(userName.text, password.text);
            	token.addResponder(new AsyncResponder(
            		function (event:ResultEvent, token:Object = null):void {
            			switch (event.result) {
            				case "success":
            					authService.authenticate.send(userName.text, password.text);
            					break;
        					default:
        						trace(event.result);					
            			}
            		},
            		function (event:FaultEvent, token:Object = null):void {
            			switch (event.fault.faultCode) {
            				case "Client.Authentication":
            				default:
            					var failureMessage:String = event.fault.faultString;
                    			failureMessageLabel.text = failureMessage;
            			}
            		}
        		));
                
            }
            
            private function gotAnalyses():void {
            	this.stubs = analysisService.getWidgetAnalyses.lastResult as ArrayCollection;
				currentState = "GettingInsight";            	
            }
            
            private function insightChosen():void {
            	
            }
            
            private function viewInsight():void {            	
            	var insight:WidgetAnalysisStub = insightChooser.selectedItem as WidgetAnalysisStub;
            	ExternalInterface.call("widget.setValue", "insightCombo", insight.analysisID);
            	analysisService.openAnalysisDefinition.send(insight.analysisID);
            }
            
            private function gotAnalysisDefinition():void {
            	var analysisDefinition:AnalysisDefinition = analysisService.openAnalysisDefinition.lastResult as AnalysisDefinition;
            	if (analysisDefinition == null) {
            		analysisService.getWidgetAnalyses.send();
            	} else {
	            	this.analysisDefinition = analysisDefinition;
	            	currentState = "Insight";
	            }
            }
		]]>
	</mx:Script>
	<mx:RemoteObject id="authService" destination="login">
		<mx:method name="authenticate" result="handleAuthentication()"/>
	</mx:RemoteObject>
	<mx:RemoteObject id="analysisService" destination="analysisDefinition">
		<mx:method name="getWidgetAnalyses" result="gotAnalyses()"/>
		<mx:method name="openAnalysisDefinition" result="gotAnalysisDefinition()"/>
	</mx:RemoteObject>
	<!--
	<mx:WebService id="insightService" wsdl="http://ec2-72-44-53-122.compute-1.amazonaws.com:8080/DMS/services/InsightAPIService?wsdl">
		<mx:operation name="list" result="gotList()"/>
	</mx:WebService>
	-->
	<mx:Style source="com/easyinsight/skin/osx/OSX.css"/>
	<mx:VBox id="coreBox" width="100%" height="100%">
		<mx:Form id="loginForm">
			<mx:FormItem label="User Name: ">
				<mx:TextInput id="userName"/>
			</mx:FormItem>
			<mx:FormItem label="Password: ">
				<mx:TextInput id="password" displayAsPassword="true"/>
			</mx:FormItem>
			<mx:FormItem label="">
				<mx:Label id="failureMessageLabel"/>
			</mx:FormItem>
			<mx:FormItem label="">
				<mx:Button label="Log In" click="login()"/>				
			</mx:FormItem>			
		</mx:Form>
		<!--
		<dashboard:WidgetViewPanel id="widgetView"/>
	
		<mx:Label text="{phase1}"/>
		<mx:Label text="{phase2}"/>
		<mx:Label text="{phase3}"/>
	-->	
	</mx:VBox>
	
</mx:Application>
