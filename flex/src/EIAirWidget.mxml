<?xml version="1.0" ?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:dashboard="com.easyinsight.dashboard.*" width="100%"
                height="100%"
                creationComplete="onCreationComplete()"
                paddingTop="0" top="0" borderThickness="0" left="0" paddingLeft="0" right="0" paddingRight="0"
                bottom="0" paddingBottom="0" backgroundImage="{background2}" backgroundSize="100%">
    <mx:states>
        <mx:State name="Offline">
            <mx:AddChild relativeTo="{coreBox}">
                <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                    <mx:VBox horizontalAlign="center">
                        <mx:Label text="Connecting to Easy Insight..."/>
                        <mx:ProgressBar indeterminate="true"/>
                    </mx:VBox>
                </mx:Box>
            </mx:AddChild>
        </mx:State>
        <mx:State name="LoggingIn">
            <mx:AddChild relativeTo="{coreBox}">
                <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                    <mx:VBox horizontalAlign="center">
                        <mx:Label text="Logging in to Easy Insight..."/>
                        <mx:ProgressBar indeterminate="true"/>
                    </mx:VBox>
                </mx:Box>
            </mx:AddChild>
        </mx:State>
        <mx:State name="LoginState">
            <mx:AddChild relativeTo="{coreBox}">
                <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
                <mx:Form enterState="onEnterLoginState()">
                    <mx:FormItem label="User Name: ">
                        <mx:TextInput id="userName"/>
                    </mx:FormItem>
                    <mx:FormItem label="Password: ">
                        <mx:TextInput id="password" displayAsPassword="true"/>
                    </mx:FormItem>
                    <mx:FormItem label="">
                        <mx:Label id="failureMessageLabel" text="{failureMessageText}"/>
                    </mx:FormItem>
                    <mx:FormItem label="">
                        <mx:Button label="Log In" click="login(userName.text, password.text)" enabled="{!loggingIn}"/>
                    </mx:FormItem>
                    <mx:FormItem label="Logging in..." visible="{loggingIn}">
                        <mx:ProgressBar id="progressBar" indeterminate="true"/>
                    </mx:FormItem>
                </mx:Form>
                </mx:Box>
            </mx:AddChild>
        </mx:State>
        <mx:State name="GettingReport">
            <mx:AddChild relativeTo="{coreBox}">
                <dashboard:AirReportView airLogout="onLogout()" eiUpdate="updater.checkNow()" app="{windowedApp}"/>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Script>
		<![CDATA[
        import air.net.URLMonitor;
        import air.update.ApplicationUpdaterUI;

        import com.easyinsight.analysis.AirMenuFactory;
        import com.easyinsight.analysis.AnalysisCalculation;
        import com.easyinsight.analysis.AnalysisDateDimension;
        import com.easyinsight.analysis.AnalysisDimension;
        import com.easyinsight.analysis.AnalysisHierarchyItem;
        import com.easyinsight.analysis.AnalysisList;
        import com.easyinsight.analysis.AnalysisMeasure;
        import com.easyinsight.analysis.AnalysisRangeDimension;
        import com.easyinsight.analysis.AnalysisStep;
        import com.easyinsight.analysis.ComplexAnalysisMeasure;
        import com.easyinsight.analysis.PopupMenuFactory;
        import com.easyinsight.analysis.SixSigmaMeasure;
        import com.easyinsight.analysis.TemporalAnalysisMeasure;
        import com.easyinsight.dashboard.AirCredentialsCache;
        import com.easyinsight.framework.CredentialsCache;
        import com.easyinsight.util.PrefixManager;
        import flash.data.EncryptedLocalStore;

        import air.update.events.UpdateEvent;

        import mx.core.BitmapAsset;
        import mx.events.FlexNativeWindowBoundsEvent;
        import mx.rpc.events.ResultEvent;
        import mx.messaging.config.ServerConfig;
        import mx.rpc.AsyncToken;
        import mx.rpc.AsyncResponder;
        import mx.rpc.events.FaultEvent;

        import com.easyinsight.framework.User;
        import com.easyinsight.framework.UserServiceResponse;

        import mx.controls.Alert;

        import flash.desktop.NativeApplication;

        private var monitor:URLMonitor;
        private var connected:Boolean;

        [Bindable]
        private var windowedApp:WindowedApplication;

        [Bindable]
        [Embed(source="../assets/background2.JPG")]
        private var background2:Class;

        [Bindable]
        private var failureMessageText:String;

        [Bindable]
        private var loggingIn:Boolean;

        [Bindable]
        [Embed(source="../assets/favicon4.PNG")]
        private var iconClass:Class;

        private function onEnterLoginState(): void {
            focusManager.setFocus(userName);
        }

        private function onKeyUp(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.ENTER) {
                if (currentState == "LoginState") {
                    login(userName.text, password.text);
                }
            }
        }

        /**
         * If the user logs out, clear the local store.
        */
        private function onLogout():void {
            EncryptedLocalStore.reset();
            ServerConfig.getChannelSet(authService.destination).logout();
            currentState = "LoginState";
            addEventListener(KeyboardEvent.KEY_UP, onKeyUp);
        }

        private function postUpdates():void {
            
        }

        private var updater:ApplicationUpdaterUI = new ApplicationUpdaterUI();

        private function onStatusEvent(event:StatusEvent):void {
            var available:Boolean = monitor.available;
            if (available && !connected) {
                if (authService.channelSet == null) {
                    connected = true;
                    /**
                     * Retrieve the user from the local store in AIR, if it exists.
                     */
                    var userBytes:ByteArray = EncryptedLocalStore.getItem("userID");
                    if (userBytes != null) {
                        var userNameJS:String = userBytes.readUTFBytes(userBytes.length);
                    }
                    var passwordBytes:ByteArray = EncryptedLocalStore.getItem("password");
                    if (passwordBytes != null) {
                        var passwordJS:String = passwordBytes.readUTFBytes(passwordBytes.length);
                    }

                    // are user credentials already set in preferences?

                    if (userNameJS != null && "" != userNameJS && passwordJS != null && "" != passwordJS) {
                        currentState = "LoggingIn";
                        login(userNameJS, passwordJS);
                    } else {
                        currentState = "LoginState";
                        authService.channelSet = ServerConfig.getChannelSet(authService.destination);
                    }
                } else {
                    currentState = "GettingReport";
                }
            } else if (!available && connected) {
                connected = false;
                currentState = "Offline";
            }
        }

        private function onInitialize(event:UpdateEvent):void {
            addEventListener(KeyboardEvent.KEY_UP, onKeyUp);

            currentState = "Offline";
            var request:URLRequest = new URLRequest("https://www.easy-insight.com/app");
            monitor = new URLMonitor(request);
            monitor.addEventListener(StatusEvent.STATUS, onStatusEvent);
            monitor.start();
        }

        private function onMove(event:FlexNativeWindowBoundsEvent):void {
            var xString:String = String(nativeWindow.x);
            var yString:String = String(nativeWindow.y);
            var xBytes:ByteArray = new ByteArray();
            var yBytes:ByteArray = new ByteArray();
            xBytes.writeUTFBytes(xString);
            yBytes.writeUTFBytes(yString);
            EncryptedLocalStore.setItem("x", xBytes);
            EncryptedLocalStore.setItem("y", yBytes);
        }

        private function onResize(event:FlexNativeWindowBoundsEvent):void {
            var width:String = String(nativeWindow.width);
            var height:String = String(nativeWindow.height);
            var widthBytes:ByteArray = new ByteArray();
            var heightBytes:ByteArray = new ByteArray();
            widthBytes.writeUTFBytes(width);
            heightBytes.writeUTFBytes(height);
            EncryptedLocalStore.setItem("width", widthBytes);
            EncryptedLocalStore.setItem("height", heightBytes);
        }

        private function onCreationComplete():void {
            windowedApp = this;
            PrefixManager.prefix = "https://www.easy-insight.com";
            CredentialsCache.initialize(new AirCredentialsCache());
            if (NativeApplication.supportsSystemTrayIcon) {
                this.nativeApplication.icon.bitmaps = [ (new iconClass() as BitmapAsset )];
            }

            PopupMenuFactory.menuFactory = new AirMenuFactory();

            var xBytes:ByteArray = EncryptedLocalStore.getItem("x");
            var yBytes:ByteArray = EncryptedLocalStore.getItem("y");
            if (xBytes != null && yBytes != null) {
                var x:int = int(xBytes.readUTFBytes(xBytes.length));
                var y:int = int(yBytes.readUTFBytes(yBytes.length));
                nativeWindow.x = x;
                nativeWindow.y = y;
            }

            var widthArray:ByteArray = EncryptedLocalStore.getItem("width");
            var heightArray:ByteArray = EncryptedLocalStore.getItem("height");
            if (widthArray != null && heightArray != null) {
                var width:int = int(widthArray.readUTFBytes(widthArray.length));
                var height:int = int(heightArray.readUTFBytes(heightArray.length));
                nativeWindow.width = width;
                nativeWindow.height = height;
            }

            addEventListener(FlexNativeWindowBoundsEvent.WINDOW_MOVE, onMove);
            addEventListener(FlexNativeWindowBoundsEvent.WINDOW_MOVE, onResize);

            // do the updates stuff...

            updater.updateURL = "https://www.easy-insight.com/app/upgrade.xml";
            updater.isCheckForUpdateVisible = true;
            updater.isDownloadProgressVisible = true;
            updater.isDownloadUpdateVisible = true;
            updater.isInstallUpdateVisible = true;

            updater.addEventListener(UpdateEvent.INITIALIZED, onInitialize);

            updater.initialize();
        }

        private function handleAuthentication():void {
            loggingIn = false;
            var authResult:UserServiceResponse = authService.authenticate.lastResult as UserServiceResponse;
            var successful:Boolean = authResult.successful;
            if (successful) {
                User.initializeUser(authResult);                
                User.getInstance().userName = authResult.userName;
                removeEventListener(KeyboardEvent.KEY_UP, onKeyUp);
                if (currentState == "LoginState") {
                    var userBytes:ByteArray = new ByteArray();
                    userBytes.writeUTFBytes(userName.text);
                    var passwordBytes:ByteArray = new ByteArray();
                    passwordBytes.writeUTFBytes(password.text);
                    EncryptedLocalStore.setItem("userID", userBytes);
                    EncryptedLocalStore.setItem("password", passwordBytes);
                }
                currentState = "GettingReport";
            } else {
                currentState = "LoginState";
                failureMessageText = authResult.failureMessage;
            }
        }

        private function login(usernameStr:String, passwordStr:String):void {
            loggingIn = true;
            if (authService.channelSet == null) {
                authService.channelSet = ServerConfig.getChannelSet(authService.destination);
            }
            var token:AsyncToken = authService.channelSet.login(usernameStr, passwordStr);
            token.addResponder(new AsyncResponder(
                    function (event:ResultEvent, token:Object = null):void {
                        switch (event.result) {
                            case "success":
                                authService.authenticate.send(usernameStr, passwordStr, false);
                                break;
                            default:
                                Alert.show(String(event.result));
                                trace(event.result);
                        }
                    },
                    function (event:FaultEvent, token:Object = null):void {
                        switch (event.fault.faultCode) {
                            case "Client.Authentication":
                            default:
                                var failureMessage:String = event.fault.faultString;
                                failureMessageLabel.text = failureMessage;
                        }
                    }
                    ));
        }

        private function dependancies():void {
            var analysisDate:AnalysisDateDimension;
            var dim:AnalysisDimension;
            var measure:AnalysisMeasure;
            var temporal:TemporalAnalysisMeasure;
            var complex:ComplexAnalysisMeasure;
            var range:AnalysisRangeDimension;
            var list:AnalysisList;
            var hierarchy:AnalysisHierarchyItem;
            var step:AnalysisStep;
            var calculation:AnalysisCalculation;
            var sigma:SixSigmaMeasure;
        }
		]]>
	</mx:Script>
    <mx:RemoteObject id="authService" destination="login">
        <mx:method name="authenticate" result="handleAuthentication()"/>
    </mx:RemoteObject>
    <mx:Style source="com/easyinsight/skin/osx/OSX.css"/>
    <mx:VBox id="coreBox" width="100%" height="100%">
    </mx:VBox>
</mx:WindowedApplication>