<?xml version="1.0" ?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
                creationComplete="handleFlashVars()" xmlns:dashboard="com.easyinsight.dashboard.*"
                paddingTop="0" top="0" borderThickness="0" left="0" paddingLeft="0" right="0" paddingRight="0"
                bottom="0" paddingBottom="0" backgroundColor="#FFFFFF">
    <mx:Script>
		<![CDATA[
        import com.easyinsight.analysis.DefaultMenuFactory;
        import com.easyinsight.analysis.PopupMenuFactory;
        import com.easyinsight.framework.BasicInfo;
        import com.easyinsight.framework.Constants;
        import com.easyinsight.framework.TORegistry;
        import com.easyinsight.framework.User;
        import com.easyinsight.framework.UserServiceResponse;
        import com.easyinsight.report.EmbedReportContextMenuFactory;

        import mx.controls.Alert;
        import mx.messaging.config.ServerConfig;
        import mx.rpc.AsyncResponder;
        import mx.rpc.AsyncToken;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        [Bindable]
        private var urlKey:String;

        [Bindable]
        private var reportType:int;

        [Bindable]
        private var dataSourceID:int;

        [Bindable]
        private var reportName:String;

        private var userName:String;

        private var password:String;

        [Bindable]
        private var requestID:int;

        [Bindable]
        private var reportWidth:int;

        [Bindable]
        private var reportHeight:int;

        [Embed(source="/com/easyinsight/skin/osx/LucidaGrande.swf",fontName="Lucida Grande", fontStyle="normal")]
        private var myNormalLucida:Class;

        [Embed(source="/com/easyinsight/skin/osx/opensans.swf", fontName="Open Sans", fontStyle="normal")]
        private var openSans:Class;

        [Embed(source="/com/easyinsight/skin/osx/opensansbold.swf", fontName="Open Sans Bold", fontWeight="bold")]
        private var openSansBold:Class;

        private function handleFlashVars():void {
            Font.registerFont(myNormalLucida);
            Font.registerFont(openSans);
            Font.registerFont(openSansBold);
            Constants.setup();
            this.urlKey = String(Application.application.parameters.analysisID);
            this.reportType = int(Application.application.parameters.reportType);
            this.dataSourceID = int(Application.application.parameters.dataSourceID);
            this.reportName = String(Application.application.parameters.reportName);
            this.userName = String(Application.application.parameters.userName);
            this.password = String(Application.application.parameters.password);
            this.requestID = int(Application.application.parameters.seleniumID);
            this.reportWidth = int(Application.application.parameters.reportWidth);
            this.reportHeight = int(Application.application.parameters.reportHeight);
            showHeader = Application.application.parameters.showHeader == "true";
            // session check
            PopupMenuFactory.menuFactory = new DefaultMenuFactory();
            PopupMenuFactory.reportFactory = new EmbedReportContextMenuFactory();
            userService.getBuildPath.send();
        }

        [Bindable]
        private var showHeader:Boolean;

        private function gotBuildPath():void {
            var basicInfo:BasicInfo = userService.getBuildPath.lastResult as BasicInfo;
            Constants.instance().buildPath = basicInfo.version;
            Constants.instance().prefix = basicInfo.prefix;
            userService.seleniumCheck.send(userName, password);
        }

        private function dependancies():void {
            TORegistry.registerTypes();
        }

        private function authenticated():void {
            var authResult:UserServiceResponse = userService.seleniumCheck.lastResult as UserServiceResponse;
            var successful:Boolean = authResult.successful;
            if (successful) {

                if (userService.channelSet == null) {
                    userService.channelSet = ServerConfig.getChannelSet(userService.destination);
                }
                var token:AsyncToken = userService.channelSet.login(userName, password);
                token.addResponder(new AsyncResponder(
                    function (event:ResultEvent, token:Object = null):void {
                        switch (event.result) {
                            case "success":
                                User.initializeUser(authResult);
                                User.getInstance().userName = authResult.userName;
                                stackIndex = 1;                                
                                break;
                            default:
                                Alert.show("failed!");
                        }
                    },
                    function (event:FaultEvent, token:Object = null):void {
                        switch (event.fault.faultCode) {
                            case "Client.Authentication":
                            default:
                        Alert.show(event.fault.faultString);
                        }
                    }));
                }
        }

        [Bindable]
        private var stackIndex:int = 0;

		]]>
	</mx:Script>
    <mx:RemoteObject id="userService" destination="login">
        <mx:method name="seleniumCheck" result="authenticated()"/>
        <mx:method name="getBuildPath" result="gotBuildPath()"/>
    </mx:RemoteObject>
    <mx:Style source="com/easyinsight/skin/osx/OSX.css"/>
    <mx:ViewStack selectedIndex="{stackIndex}" width="100%" height="100%">
        <mx:Box/>
        <dashboard:SeleniumReport id="panel" urlKey="{urlKey}" reportName="{reportName}" seleniumID="{requestID}"
                                      dataSourceID="{dataSourceID}" reportType="{reportType}"
                                      reportWidth="{reportWidth}" reportHeight="{reportHeight}" showHeader="{showHeader}"/>
    </mx:ViewStack>
</mx:Application>