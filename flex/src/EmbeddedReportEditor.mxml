<?xml version="1.0" encoding="utf-8"?>
<easyinsight:EmbeddedBase xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:easyinsight="*" preloader="com.easyinsight.preloader.EIPreloader">
    <mx:Script>
		<![CDATA[
        import com.easyinsight.SimpleReportEditor;
        import com.easyinsight.analysis.AnalysisCloseEvent;
        import com.easyinsight.analysis.FeedResponse;
        import com.easyinsight.analysis.InsightResponse;
        import com.easyinsight.framework.PerspectiveFactory;
        import com.easyinsight.framework.PerspectiveFactoryHolder;
        import com.easyinsight.genredata.AnalyzeEvent;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.ProgressAlert;


        import mx.core.UIComponent;
        import mx.core.Application;

        [Bindable]
        private var urlKey:String;

        private var dataSourceURLKey:String;

        [Bindable]
        private var dataSourceID:int;


        private var _showToolbar:Boolean;

        private var _showHeader:Boolean;


        [Bindable(event="showHeaderChanged")]
        public function get showHeader():Boolean {
            return _showHeader;
        }

        public function set showHeader(value:Boolean):void {
            if (_showHeader == value) return;
            _showHeader = value;
            dispatchEvent(new Event("showHeaderChanged"));
        }

        [Bindable("showToolbarChanged")]
        public function get showToolbar():Boolean {
            return _showToolbar;
        }

        public function set showToolbar(value:Boolean):void {
            if (_showToolbar == value) return;
            _showToolbar = value;
            dispatchEvent(new Event("showToolbarChanged"));
        }

        [Bindable]
        private var showFilters:Boolean;

        override protected function childSetup():void {
            super.childSetup();
            PerspectiveFactoryHolder.factory = new PerspectiveFactory();
            this.urlKey = String(Application.application.parameters.analysisID);
            this.dataSourceURLKey = String(Application.application.parameters.dataSourceURLKey);
        }

        override protected function go():void {
            if (urlKey != null && urlKey != "undefined") {
                ProgressAlert.alert(this, "Retrieving report..." ,null, analysisService.openAnalysisIfPossible);
                analysisService.openAnalysisIfPossible.send(urlKey);
            } else {
                ProgressAlert.alert(this, "Retrieving..." ,null, feedService.openFeedIfPossible);
                feedService.openFeedIfPossible.send(dataSourceURLKey);
            }
        }

        private function gotReportInfo():void {
            var info:InsightResponse = analysisService.openAnalysisIfPossible.lastResult as InsightResponse;
            if (info.status == InsightResponse.SUCCESS) {
                insightDescriptor = info.insightDescriptor;
                toView();
            } else {
                toLogin();
            }
        }

        private function gotDataSourceInfo():void {
            var info:FeedResponse = feedService.openFeedIfPossible.lastResult as FeedResponse;
            if (info.status == FeedResponse.SUCCESS) {
                dataSourceDescriptor = info.feedDescriptor;
                dataSourceID = info.feedDescriptor.id;
                dataSourceURL = info.feedDescriptor.urlKey;
                toView();
            } else {
                toLogin();
            }
        }

        private var insightDescriptor:InsightDescriptor;
        private var dataSourceDescriptor:DataSourceDescriptor;

        private var dataSourceURL:String;

        override protected function createView():UIComponent {
            var simpleReportEditor:SimpleReportEditor = new SimpleReportEditor();
            simpleReportEditor.addEventListener(AnalysisCloseEvent.ANALYSIS_CLOSE, onClose);
            simpleReportEditor.addEventListener(AnalyzeEvent.ANALYZE, onAnalyzeEvent);
            simpleReportEditor.embedded = true;
            if (insightDescriptor != null) {
                simpleReportEditor.dataSourceID = insightDescriptor.dataFeedID;
                simpleReportEditor.reportID = insightDescriptor.id;
            } else if (dataSourceDescriptor != null) {
                simpleReportEditor.dataSourceID = dataSourceDescriptor.id;
            }

            return simpleReportEditor;
        }
        ]]>
	</mx:Script>
    <mx:Style source="com/easyinsight/skin/osx/OSX.css"/>
    <mx:RemoteObject destination="analysisDefinition" id="analysisService">
        <mx:method name="openAnalysisIfPossible" result="gotReportInfo()"/>
    </mx:RemoteObject>
    <mx:RemoteObject destination="feeds" id="feedService">
        <mx:method name="openFeedIfPossible" result="gotDataSourceInfo()"/>
    </mx:RemoteObject>
</easyinsight:EmbeddedBase>
