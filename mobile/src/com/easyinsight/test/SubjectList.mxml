<?xml version="1.0"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
        viewActivate="addListeners()">
    <fx:Script><![CDATA[
        import com.easyinsight.dashboard.DashboardDescriptor;
        import com.easyinsight.etl.LookupTableDescriptor;
        import com.easyinsight.framework.User;
        import com.easyinsight.listing.MyDataTree;
        import com.easyinsight.quicksearch.EIDescriptor;
        import com.easyinsight.reportviews.DashboardView;
        import com.easyinsight.reportviews.ReportMetadata;
        import com.easyinsight.reportviews.ReportView;
        import com.easyinsight.reportviews.ScorecardView;
        import com.easyinsight.scorecard.ScorecardDescriptor;
        import com.easyinsight.skin.ImageLoadEvent;
        import com.easyinsight.skin.ImageLoader;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.solutions.InsightDescriptor;

        import mx.collections.ArrayCollection;
        import mx.events.ItemClickEvent;
        import mx.rpc.events.FaultEvent;

        [Bindable]
        private var descList:ArrayCollection;

        private function gotTree():void {
            var tree:MyDataTree = uploadService.getFeedAnalysisTree.lastResult as MyDataTree;

            var descs:ArrayCollection = tree.objects;
            processData(descs);
            busy = false;
        }

        private function processData(descs:ArrayCollection):void {
            var list:ArrayCollection = new ArrayCollection();
            for each (var obj:Object in descs) {
                if (obj is LookupTableDescriptor) {
                    continue;
                }
                list.addItem(obj);
            }
            dataList.dataProvider = list;
        }

        private function addListeners():void {
            var dataModel:DataModel = data as DataModel;
            if (dataModel.localList == null) {
                dataList.dataProvider = dataModel.descriptors;
            } else {
                processData(dataModel.localList);
            }
            removeEventListener(ItemClickEvent.ITEM_CLICK, onItemClick);
            addEventListener(ItemClickEvent.ITEM_CLICK, onItemClick);
        }

        private function onItemClick(event:ItemClickEvent):void {
            var descriptor:EIDescriptor = dataList.dataProvider.getItemAt(event.index) as EIDescriptor;
            if (descriptor.getType() == EIDescriptor.REPORT) {
                var metadata:ReportMetadata = new ReportMetadata();
                metadata.descriptor = InsightDescriptor(descriptor);
                navigator.pushView(ReportView, metadata);
                //navigator.pushView(GaugeTest);
            } else if (descriptor.getType() == EIDescriptor.DATA_SOURCE) {
                var ds:DataSourceDescriptor = descriptor as DataSourceDescriptor;
                var childModel:DataModel = new DataModel();
                childModel.localList = ds.children;
                childModel.descriptors = DataModel(this.data).descriptors;
                navigator.pushView(SubjectList, childModel);
            } else if (descriptor.getType() == EIDescriptor.SCORECARD) {
                var sc:ScorecardDescriptor = descriptor as ScorecardDescriptor;
                navigator.pushView(ScorecardView, sc);
            }else if (descriptor.getType() == EIDescriptor.DASHBOARD) {
                var dash:DashboardDescriptor = descriptor as DashboardDescriptor;
                navigator.pushView(DashboardView, dash);
            }
        }

        [Bindable]
        private var busy:Boolean;

        private function refreshMyData():void {
            busy = true;
            uploadService.getFeedAnalysisTree.send(false);
        }

        private function onFault(event:FaultEvent):void {
            busy = false;
        }

        ]]></fx:Script>
    <fx:Declarations>
        <s:RemoteObject destination="userUpload" id="uploadService" endpoint="https://www.easy-insight.com/app/messagebroker/amfsecure">
            <s:method name="getFeedAnalysisTree" result="gotTree()" fault="onFault(event)"/>
        </s:RemoteObject>
    </fx:Declarations>
    <s:layout>
        <s:VerticalLayout gap="2" horizontalAlign="center"/>
    </s:layout>
    <s:navigationContent>
        <s:Button label="Back" click="navigator.popView()"/>
    </s:navigationContent>
    <s:titleContent>
        <s:Label text="My Data" color="#FFFFFF"/>
    </s:titleContent>
    <s:actionContent>
        <s:Button icon="@Embed('../../../../assets/01-refresh2.png')" click="refreshMyData()"/>
        <s:BusyIndicator visible="{busy}" id="busyIndicator" symbolColor="#FFFFFF"/>
    </s:actionContent>
    <s:VGroup width="100%" height="100%">
        <s:List labelField="name" width="100%" height="100%"
                itemRenderer="com.easyinsight.baseviews.DescriptorRenderer" id="dataList">

        </s:List>
    </s:VGroup>

</s:View>
