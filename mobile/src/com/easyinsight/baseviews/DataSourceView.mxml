<?xml version="1.0"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:datasources="com.easyinsight.datasources.*" viewActivate="onViewActivate()">
    <s:layout>
        <s:VerticalLayout horizontalAlign="center" gap="0"/>
    </s:layout>
    <fx:Script><![CDATA[
        import com.easyinsight.dashboard.DashboardDescriptor;
        import com.easyinsight.etl.LookupTableDescriptor;
        import com.easyinsight.quicksearch.EIDescriptor;
        import com.easyinsight.reportviews.DashboardView;
        import com.easyinsight.reportviews.ReportMetadata;
        import com.easyinsight.reportviews.ReportView;
        import com.easyinsight.scorecard.ScorecardDescriptor;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.ActionDashboardLog;
        import com.easyinsight.util.ActionDataSourceLog;
        import com.easyinsight.util.ActionLog;
        import com.easyinsight.util.ActionReportLog;
        import com.easyinsight.util.ActionScorecardLog;

        import mx.collections.ArrayCollection;
        import mx.events.ItemClickEvent;

        [Bindable]
        private var dataSource:DataSourceDescriptor;
        
        [Bindable]
        private var dataSourceName:String;
        
        private function onViewActivate():void {
            removeEventListener(ItemClickEvent.ITEM_CLICK, onItemClick);
            addEventListener(ItemClickEvent.ITEM_CLICK, onItemClick);
            var dataStuff:DataStuff = data as DataStuff;
            processData(dataStuff.descriptors);
            dataList.dataProvider = dataStuff.descriptors;
            this.dataSource = dataStuff.dataSource;
            dataSourceName = dataSource.name;
            actionGroup.removeAllElements();
            populateActions(dataStuff.actions);
        }

        private function processData(descriptors:ArrayCollection):void {
            var list:ArrayCollection = new ArrayCollection();
            for each (var obj:Object in descriptors) {
                if (obj is LookupTableDescriptor) {
                    continue;
                } else if (obj is ScorecardDescriptor) {
                    continue;
                }
                list.addItem(obj);
            }
            dataList.dataProvider = list;
            VerticalLayout(dataList.layout).requestedRowCount = list.length;
        }

        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
            scroller.height = this.height - 185;
        }

        private function onItemClick(event:ItemClickEvent):void {
            var descriptor:EIDescriptor = dataList.dataProvider.getItemAt(event.index) as EIDescriptor;
            if (descriptor.getType() == EIDescriptor.REPORT) {
                var metadata:ReportMetadata = new ReportMetadata();
                metadata.descriptor = InsightDescriptor(descriptor);
                navigator.pushView(ReportView, metadata);
            } else if (descriptor.getType() == EIDescriptor.DASHBOARD) {
                var dash:DashboardDescriptor = descriptor as DashboardDescriptor;
                navigator.pushView(DashboardView, dash);
            }
        }
        
        private function populateActions(recentActions:ArrayCollection):void {
            for each (var actionLog:ActionLog in recentActions) {
                if (actionLog is ActionDataSourceLog) {
                    continue;
                } else if (actionLog is ActionReportLog) {
                    if (actionLog.actionType == ActionReportLog.EDIT) {
                        continue;
                    }
                } else if (actionLog is ActionDashboardLog) {
                    if (actionLog.actionType == ActionDashboardLog.EDIT) {
                        continue;
                    }
                } else if (actionLog is ActionScorecardLog) {
                    if (actionLog.actionType == ActionScorecardLog.EDIT) {
                        continue;
                    }
                }
                var button:ActionButton = new ActionButton(actionLog, navigator);
                button.width = 300;
                actionGroup.addElement(button);
            }
        }

        ]]></fx:Script>
    <s:navigationContent>
        <s:Button label="Back" click="navigator.popView()"/>
    </s:navigationContent>
    <s:titleContent>
        <s:Label text="{dataSourceName}" color="#FFFFFF" textAlign="center" width="100%"/>
    </s:titleContent>
    <s:BorderContainer width="100%">
        <s:backgroundFill>
            <s:SolidColor color="0xf8f8f8" alpha="1"/>
        </s:backgroundFill>
        <datasources:MyDataSourceDisplay dataSource="{dataSource}"/>
    </s:BorderContainer>
    <s:BorderContainer width="100%" height="100%">
        <s:layout>
            <s:HorizontalLayout horizontalAlign="center" paddingTop="10"/>
        </s:layout>
        <s:backgroundFill>
            <s:SolidColor color="0x8992a6" alpha="1"/>
        </s:backgroundFill>
        <s:Spacer width="30"/>
        <s:BorderContainer cornerRadius="15" borderColor="#FFFFFF" borderAlpha="0" width="350">
            <s:layout>
                <s:VerticalLayout paddingLeft="10" paddingRight="10" paddingTop="10" gap="0"/>
            </s:layout>
            <s:backgroundFill>
                <s:SolidColor color="#FFFFFF" alpha=".5"/>
            </s:backgroundFill>
            <s:BorderContainer height="50" width="100%">
                <s:backgroundFill>
                    <s:SolidColor color="#333333" alpha="1"/>
                </s:backgroundFill>
                <s:HGroup width="100%" horizontalAlign="center" height="100%" verticalAlign="middle">
                    <s:Label text="Recent Actions" color="#FFFFFF" fontSize="18"/>
                </s:HGroup>
            </s:BorderContainer>
            <s:VGroup id="actionGroup" height="100%" paddingLeft="10" paddingRight="10" paddingTop="10"
                      paddingBottom="10" horizontalAlign="center">

            </s:VGroup>
        </s:BorderContainer>
        <s:Spacer width="30"/>
        <s:BorderContainer cornerRadius="15" borderColor="#FFFFFF" borderAlpha="0" width="100%">
            <s:layout>
                <s:VerticalLayout paddingLeft="10" paddingRight="10" paddingTop="10" gap="0"/>
            </s:layout>
            <s:backgroundFill>
                <s:SolidColor color="#FFFFFF" alpha=".5"/>
            </s:backgroundFill>
            <s:BorderContainer height="50" width="100%">
                <s:backgroundFill>
                    <s:SolidColor color="#333333" alpha="1"/>
                </s:backgroundFill>
                <s:HGroup width="100%" horizontalAlign="center" height="100%" verticalAlign="middle">
                    <s:Label text="Reports and Dashboards" color="#FFFFFF" fontSize="18"/>
                </s:HGroup>
            </s:BorderContainer>
            <s:Scroller id="scroller" width="100%" y="60" horizontalScrollPolicy="off">
                <s:VGroup paddingBottom="10" width="100%">
                    <s:List labelField="name" width="100%" height="100%"
                            itemRenderer="com.easyinsight.baseviews.DescriptorRenderer" id="dataList">
                    </s:List>
                </s:VGroup>
            </s:Scroller>
        </s:BorderContainer>
        <s:Spacer width="30"/>
    </s:BorderContainer>
</s:View>
