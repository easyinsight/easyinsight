<?xml version="1.0"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
        title="Home" viewActivate="onActivate()">
    <s:layout>
        <s:VerticalLayout gap="0" horizontalAlign="center"/>
    </s:layout>
    <fx:Script><![CDATA[
        import com.easyinsight.etl.LookupTableDescriptor;
        import com.easyinsight.framework.User;
        import com.easyinsight.listing.MyDataTree;
        import com.easyinsight.quicksearch.EIDescriptor;
        import com.easyinsight.solutions.DataSourceDescriptor;
        import com.easyinsight.test.DataModel;
        import com.easyinsight.util.ActionDashboardLog;
        import com.easyinsight.util.ActionDataSourceLog;
        import com.easyinsight.util.ActionLog;
        import com.easyinsight.util.ActionReportLog;
        import com.easyinsight.util.ActionScorecardLog;
        import com.easyinsight.util.ProgressAlert;

        import mx.collections.ArrayCollection;
        import mx.events.ItemClickEvent;
        import mx.messaging.ChannelSet;
        import mx.messaging.config.ServerConfig;
        import mx.rpc.AsyncResponder;
        import mx.rpc.AsyncToken;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        [Bindable]
        private var busy:Boolean = false;

        private function onActivate():void {
            /*if (User.getInstance().applicationSkin.coreAppBackgroundImage != null) {
                var headerBarLoader:ImageLoader = new ImageLoader();
                headerBarLoader.addEventListener(ImageLoadEvent.IMAGE_LOADED, function(event:ImageLoadEvent):void {
                    image.source = event.bitmap;
                    image.visible = true;
                });
                headerBarLoader.load(User.getInstance().applicationSkin.coreAppBackgroundImage.id, "https://www.easy-insight.com/app/messagebroker/amfsecure");
            }*/
            busy = true;
            removeEventListener(ItemClickEvent.ITEM_CLICK, onItemClick);
            addEventListener(ItemClickEvent.ITEM_CLICK, onItemClick);
            actionGroup.removeAllElements();
            loginText = "You're logged in as " + User.getInstance().firstName + " " + User.getInstance().getName() + " under the " + User.getInstance().accountName + " account.";
            ProgressAlert.alert(this, "Retrieving data...", null, adminService.getRecentActions, uploadService.getFeedAnalysisTree);
            adminService.getRecentActions.send();
            uploadService.getFeedAnalysisTree.send(false);
        }
        
        private var recentActions:ArrayCollection;

        private function gotRecentActions():void {
            recentActions = adminService.getRecentActions.lastResult as ArrayCollection;
            for each (var actionLog:ActionLog in recentActions) {
                if (actionLog is ActionDataSourceLog) {
                    continue;
                } else if (actionLog is ActionReportLog) {
                    if (actionLog.actionType == ActionReportLog.EDIT) {
                        continue;
                    }
                } else if (actionLog is ActionDashboardLog) {
                    if (actionLog.actionType == ActionDashboardLog.EDIT) {
                        continue;
                    }
                } else if (actionLog is ActionScorecardLog) {
                    if (actionLog.actionType == ActionScorecardLog.EDIT) {
                        continue;
                    }
                }
                var button:ActionButton = new ActionButton(actionLog, navigator);
                button.width = 300;
                actionGroup.addElement(button);
            }
            busy = false;
        }

        private function gotTree():void {
            var tree:MyDataTree = uploadService.getFeedAnalysisTree.lastResult as MyDataTree;
            var descs:ArrayCollection = tree.objects;
            processData(descs);
            busy = false;
        }

        private function processData(descs:ArrayCollection):void {
            var list:ArrayCollection = new ArrayCollection();
            for each (var obj:Object in descs) {
                if (obj is LookupTableDescriptor) {
                    continue;
                }
                list.addItem(obj);
            }
            //dataList.dataProvider = list;
            var dataModel:DataModel = new DataModel();
            dataModel.descriptors = list;
            allFields = list;
            dataList.dataProvider = list;
            VerticalLayout(dataList.layout).requestedRowCount = list.length;
            //navigator.pushView(SubjectList, dataModel);
        }

        private var allFields:ArrayCollection;

        [Bindable]
        private var faultMessage:String;

        private function onFault(event:FaultEvent):void {
            busy = false;
            faultMessage = event.fault.faultString;
        }

        private function onItemClick(event:ItemClickEvent):void {
            var descriptor:EIDescriptor = dataList.dataProvider.getItemAt(event.index) as EIDescriptor;
            if (descriptor.getType() == EIDescriptor.DATA_SOURCE) {
                var dataStuff:DataStuff = new DataStuff();
                dataStuff.actions = recentActions;
                dataStuff.dataSource = descriptor as DataSourceDescriptor;
                dataStuff.descriptors = DataSourceDescriptor(descriptor).children;
                navigator.pushView(DataSourceView, dataStuff);
            } 
        }

        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
            scroller.height = this.height - 185;
            //scroller.height = UIComponent(FlexGlobals.topLevelApplication).height - 185;
        }

        private function logout():void {
            User.destroy();
            var cs:ChannelSet = ServerConfig.getChannelSet("admin");
            var token:AsyncToken = cs.logout();
            token.addResponder(new AsyncResponder(logoutResultEvent, logoutFaultEvent));
        }

        private function logoutResultEvent(event:ResultEvent, token:Object = null):void {
            trace("...");
            navigator.replaceView(MobileLoginComponent);
        }

        private function logoutFaultEvent(event:FaultEvent, token:Object = null):void {
            trace("Failed to log out with " + event.fault.faultString);
        }

        [Bindable]
        private var loginText:String = "";

        [Bindable]
        [Embed(source="../../../../assets/06-magnify.png")]
        private var searchIcon:Class;
        ]]></fx:Script>
    <fx:Declarations>
        <s:Fade id="fadeOut" alphaFrom="1" alphaTo="0" duration="500"/>
        <s:Fade id="fadeIn" alphaFrom="0" alphaTo="1" duration="500"/>
    </fx:Declarations>
    <fx:Declarations>
        <s:RemoteObject id="adminService" destination="admin"
                        endpoint="https://www.easy-insight.com/app/messagebroker/amfsecure">
            <s:method name="getRecentActions" result="gotRecentActions()" fault="onFault(event)"/>
        </s:RemoteObject>
        <s:RemoteObject destination="userUpload" id="uploadService"
                        endpoint="https://www.easy-insight.com/app/messagebroker/amfsecure">
            <s:method name="getFeedAnalysisTree" result="gotTree()" fault="onFault(event)"/>
        </s:RemoteObject>
    </fx:Declarations>
    <s:titleContent>
        <s:HGroup width="100%" horizontalAlign="center">
            <s:Label text="Easy Insight" color="#FFFFFF" fontSize="16"/>
        </s:HGroup>
    </s:titleContent>
    <s:actionContent>
        <s:Button label="Log Out" click="logout()"/>
        <s:BusyIndicator visible="{busy}" id="busyIndicator" symbolColor="#FFFFFF"/>
    </s:actionContent>
    <s:VGroup width="100%" height="100%" top="0" paddingTop="0" gap="0">
        <s:BorderContainer width="100%" height="55" top="0">
            <s:backgroundFill>
                <s:SolidColor color="#333333" alpha="1"/>
            </s:backgroundFill>
            <s:layout>
                <s:HorizontalLayout paddingLeft="10" paddingRight="10" paddingTop="0" gap="0" verticalAlign="middle"/>
            </s:layout>
            <s:Label text="{loginText}" fontSize="16" color="#FFFFFF"/>
            <s:Spacer width="100%"/>
            <!--<s:BorderContainer cornerRadius="8" borderAlpha="1" borderColor="#C3C3C3" height="45" width="250">
                <s:layout>
                    <s:BasicLayout/>
                </s:layout>
                <s:backgroundFill>
                    <s:SolidColor color="#FFFFFF" alpha="1"/>
                </s:backgroundFill>
                <s:Image source="{searchIcon}" y="10" x="3"/>
                <s:TextInput id="searchInput" x="33" width="205" y="3"/>
            </s:BorderContainer>-->
        </s:BorderContainer>
        <s:BorderContainer width="100%" height="100%">
            <s:layout>
                <s:HorizontalLayout horizontalAlign="center" paddingTop="10"/>
            </s:layout>
            <s:backgroundFill>
                <s:SolidColor color="0x8992a6" alpha="1"/>
            </s:backgroundFill>
            <s:Spacer width="30"/>
            <s:BorderContainer cornerRadius="15" borderColor="#333333" width="350" dropShadowVisible="true">
                <s:layout>
                    <s:VerticalLayout paddingLeft="10" paddingRight="10" paddingTop="10" gap="0"/>
                </s:layout>
                <s:backgroundFill>
                    <s:SolidColor color="#FFFFFF" alpha=".5"/>
                </s:backgroundFill>
                <s:BorderContainer height="50" width="100%" cornerRadius="5">
                    <s:backgroundFill>
                        <s:SolidColor color="#333333" alpha="1"/>
                    </s:backgroundFill>
                    <s:HGroup width="100%" horizontalAlign="center" height="100%" verticalAlign="middle">
                        <s:Label text="Recent Actions" color="#FFFFFF" fontSize="18"/>
                    </s:HGroup>
                </s:BorderContainer>
                <s:VGroup id="actionGroup" height="100%" paddingLeft="10" paddingRight="10" paddingTop="10"
                          paddingBottom="10" horizontalAlign="center">

                </s:VGroup>
            </s:BorderContainer>
            <s:Spacer width="30"/>
            <s:BorderContainer cornerRadius="15" borderColor="#333333" width="100%" dropShadowVisible="true">
                <s:layout>
                    <s:VerticalLayout paddingLeft="10" paddingRight="10" paddingTop="10" gap="0"/>
                </s:layout>
                <s:backgroundFill>
                    <s:SolidColor color="#FFFFFF" alpha=".5"/>
                </s:backgroundFill>
                <s:BorderContainer height="50" width="100%" cornerRadius="5">
                    <s:backgroundFill>
                        <s:SolidColor color="#333333" alpha="1"/>
                    </s:backgroundFill>
                    <s:HGroup width="100%" horizontalAlign="center" height="100%" verticalAlign="middle">
                        <s:Label text="Data Sources" color="#FFFFFF" fontSize="18"/>
                    </s:HGroup>
                </s:BorderContainer>
                <s:Scroller id="scroller" width="100%" y="60">
                    <s:VGroup paddingBottom="10" width="100%">
                        <s:List labelField="name" width="100%" height="100%"
                                itemRenderer="com.easyinsight.baseviews.DescriptorRenderer" id="dataList">
                        </s:List>
                    </s:VGroup>
                </s:Scroller>
            </s:BorderContainer>
            <s:Spacer width="30"/>
        </s:BorderContainer>
    </s:VGroup>
</s:View>
