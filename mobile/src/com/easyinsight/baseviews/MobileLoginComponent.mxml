<?xml version="1.0"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
    title="Log In to Easy Insight" creationComplete="setup()">
    <fx:Script><![CDATA[
        import com.easyinsight.dashboard.DashboardDescriptor;
        import com.easyinsight.framework.UserServiceResponse;
        import com.easyinsight.reportviews.FixedDashboardView;
        import com.easyinsight.util.ProgressAlert;

        import mx.messaging.config.ServerConfig;

        import mx.rpc.AsyncResponder;
        import mx.rpc.AsyncToken;

        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import com.easyinsight.framework.User;



        private function setup():void {
            var storedUserName:ByteArray = EncryptedLocalStore.getItem("userName");
            if (storedUserName != null) {
                emailInput.text = storedUserName.readUTFBytes(storedUserName.length);
            }
            var storedPassword:ByteArray = EncryptedLocalStore.getItem("password");
            if (storedPassword != null) {
                passwordInput.text = storedPassword.readUTFBytes(storedPassword.length);
            }
        }

        private function login():void {
            failureMessage = null;

            ProgressAlert.alert(this, "Logging into Easy Insight...", null, authService.authenticate);
            authService.authenticate.send(emailInput.text, passwordInput.text, false);
        }

        private function loggedIn():void {
            var response:UserServiceResponse = authService.authenticate.lastResult as UserServiceResponse;
            trace(response.successful + " - " + response.failureMessage);
            if (response.successful) {

                var passwordBytes:ByteArray = new ByteArray();
                passwordBytes.writeUTFBytes(passwordInput.text);
                EncryptedLocalStore.setItem("password", passwordBytes);

                var userNameBytes:ByteArray = new ByteArray();
                userNameBytes.writeUTFBytes(emailInput.text);
                EncryptedLocalStore.setItem("userName", userNameBytes);

                if (authService.channelSet == null) {
                    authService.channelSet = ServerConfig.getChannelSet(authService.destination);
                }
                var token:AsyncToken = authService.channelSet.login(emailInput.text, passwordInput.text);
                token.addResponder(new AsyncResponder(
                        function (event:ResultEvent, token:Object = null):void {
                            switch (event.result) {
                                case "success":
                                    User.initializeUser(response);
                                    if (response.fixedDashboardID > 0) {
                                        var dash:DashboardDescriptor = new DashboardDescriptor();
                                        dash.id = response.fixedDashboardID;
                                        navigator.pushView(FixedDashboardView, dash);
                                    } else {
                                        navigator.replaceView(HomeScreen);
                                    }
                                    break;
                                default:
                                    failureMessage = String(event.result);
                                    trace(event.result);
                            }
                        },
                        function (event:FaultEvent, token:Object = null):void {
                            switch (event.fault.faultCode) {
                                case "Client.Authentication":
                                default:
                                    failureMessage = String(event.fault.faultString);
                                    trace("failed");
                            }
                        }
                ));
            } else {
                failureMessage = response.failureMessage;
            }

        }

        private function onKey(event:KeyboardEvent):void {
            if (event.keyCode == 13) {
                login();
            }
        }

        [Bindable]
        private var failureMessage:String;
        ]]></fx:Script>
    <fx:Declarations>
        <s:RemoteObject destination="login" id="authService" endpoint="https://www.easy-insight.com/app/messagebroker/amfsecure">
            <s:method name="authenticate" result="loggedIn()"/>
        </s:RemoteObject>
    </fx:Declarations>
    <s:BorderContainer width="100%" height="100%">
        <s:layout>
            <s:VerticalLayout horizontalAlign="center"/>
        </s:layout>
        <s:backgroundFill>
            <s:SolidColor color="#F8F8F8" alpha="1"/>
        </s:backgroundFill>
        <s:Spacer height="100%"/>
        <s:BorderContainer cornerRadius="20" dropShadowVisible="true">
            <s:layout>
                <s:VerticalLayout horizontalAlign="center" paddingBottom="15" paddingLeft="15" paddingTop="15" paddingRight="15"/>
            </s:layout>
            <s:backgroundFill>
                <s:SolidColor color="#FFFFFF" alpha="1"/>
            </s:backgroundFill>
            <s:Image source="@Embed('../../../../assets/logo.jpg')"/>
            <s:HGroup width="100%" verticalAlign="middle" paddingLeft="5" paddingRight="5">
                <s:Label text="Email:" width="300" textAlign="right"/>
                <s:TextInput id="emailInput" width="300" autoCapitalize="none" autoCorrect="false"/>
            </s:HGroup>
            <s:HGroup width="100%" verticalAlign="middle" paddingLeft="5" paddingRight="5">
                <s:Label text="Password:" width="300" textAlign="right"/>
                <s:TextInput id="passwordInput" displayAsPassword="true" width="300" returnKeyLabel="go" keyDown="onKey(event)"/>
            </s:HGroup>
            <s:HGroup>
                <s:Button label="Log In" click="login()" height="30"/>
            </s:HGroup>
            <s:Label text="Version: 0.9.0"/>
            <s:Label text="{failureMessage}" visible="{failureMessage != null}"/>
        </s:BorderContainer>
        <s:Spacer height="100%"/>
        <s:Spacer height="100%"/>
    </s:BorderContainer>
</s:View>
