<?xml version="1.0"?>
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
                           creationComplete="onCreation()" skinClass="com.easyinsight.reportviews.ContextSkin">
    <fx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDateDimension;
        import com.easyinsight.analysis.AnalysisHierarchyItem;
        import com.easyinsight.analysis.AnalysisItem;
        import com.easyinsight.analysis.AnalysisItemTypes;
        import com.easyinsight.analysis.DrillThrough;
        import com.easyinsight.analysis.DrillThroughEvent;
        import com.easyinsight.analysis.DrillThroughExecutor;
        import com.easyinsight.analysis.HierarchyDrilldownEvent;
        import com.easyinsight.analysis.HierarchyLevel;
        import com.easyinsight.analysis.HierarchyRollupEvent;
        import com.easyinsight.analysis.Link;
        import com.easyinsight.analysis.ReportWindowEvent;
        import com.easyinsight.analysis.URLLink;
        import com.easyinsight.filtering.FilterRawData;
        import com.easyinsight.filtering.FilterValueDefinition;
        import com.easyinsight.report.ReportNavigationEvent;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.analysis.AnalysisItemChangeEvent;

        import mx.collections.ArrayCollection;

        private var items:Array = [];

        private var _analysisItem:AnalysisItem;

        private var _passthroughFunction:Function;
        private var _passthroughObject:InteractiveObject;
        private var _data:Object;
        private var filterDefinitions:ArrayCollection;
        private var copyText:String;

        private var altKey:String;

        private var includeDrills:Boolean;
        private var additionalOptions:ArrayCollection;

        public function get passthroughFunction():Function {
            return _passthroughFunction;
        }

        public function set passthroughFunction(value:Function):void {
            _passthroughFunction = value;
        }

        public function get passthroughObject():InteractiveObject {
            return _passthroughObject;
        }

        public function set passthroughObject(value:InteractiveObject):void {
            _passthroughObject = value;
        }

        public function get data():Object {
            return _data;
        }

        public function set data(value:Object):void {
            _data = value;
        }

        public function get analysisItem():AnalysisItem {
            return _analysisItem;
        }

        public function set analysisItem(value:AnalysisItem):void {
            _analysisItem = value;
        }

        private function onMouseDown(event:MouseEvent):void {
            var result:Boolean = hitTestPoint(event.stageX, event.stageY);
            if (!result) {
                if (!result) {
                    stage.removeEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
                    this.close();
                }
            }
        }

        private function composeLink(link:Link):void {
            if (link is URLLink) {
                var url:URLLink = link as URLLink;
                var urlContextItem:MobileContextMenuItem = new MobileContextMenuItem(url.label);
                urlContextItem.addEventListener(MobileContextMenuEvent.MOBILE_CONTEXT_SELECT, function (event:MobileContextMenuEvent):void {
                    var key:String = altKey != null ? altKey : "";
                    var url:String = data[key + link.label + "_link"];
                    navigateToURL(new URLRequest(url), "_blank");
                    closeWindow();
                });
                items.push(urlContextItem);
            } else if (link is DrillThrough) {
                var drillThrough:DrillThrough = link as DrillThrough;
                var drillContextItem:MobileContextMenuItem = new MobileContextMenuItem(drillThrough.label);
                drillContextItem.addEventListener(MobileContextMenuEvent.MOBILE_CONTEXT_SELECT, function (event:MobileContextMenuEvent):void {
                    var executor:DrillThroughExecutor = new DrillThroughExecutor(drillThrough);
                    executor.addEventListener(DrillThroughEvent.DRILL_THROUGH, onDrill);
                    executor.send();
                    closeWindow();
                });
                items.push(drillContextItem);
            }
        }

        private function onDrill(event:DrillThroughEvent):void {
            var filters:ArrayCollection;
            if (filterDefinitions == null) {
                if (analysisItem.hasType(AnalysisItemTypes.DIMENSION)) {
                    var filterDefinition:FilterValueDefinition = new FilterValueDefinition();
                    filterDefinition.field = analysisItem;
                    filterDefinition.singleValue = true;
                    filterDefinition.filteredValues = new ArrayCollection([data[analysisItem.qualifiedName()]]);
                    filterDefinition.enabled = true;
                    filterDefinition.inclusive = true;
                    filters = new ArrayCollection([ filterDefinition ]);
                } else {
                    filters = new ArrayCollection();
                }
            } else {
                filters = filterDefinitions;
            }
            if (event.drillThrough.miniWindow) {
                onReport(new ReportWindowEvent(event.report.id, 0, 0, filters, InsightDescriptor(event.report).dataFeedID, InsightDescriptor(event.report).reportType));
            } else {
                onReport(new ReportNavigationEvent(ReportNavigationEvent.TO_REPORT, event.report, filters));
            }
            this.close();
        }

        private function onRollup(event:MobileContextMenuEvent):void {
            var hierarchyItem:AnalysisHierarchyItem = analysisItem as AnalysisHierarchyItem;
            var index:int = hierarchyItem.hierarchyLevels.getItemIndex(hierarchyItem.hierarchyLevel);
            if (index > 0) {
                hierarchyItem.hierarchyLevel = hierarchyItem.hierarchyLevels.getItemAt(index - 1) as HierarchyLevel;
                passthroughFunction.call(passthroughObject, new HierarchyRollupEvent(hierarchyItem.hierarchyLevel.analysisItem, hierarchyItem, index - 1));
            }
        }

        private function drill(event:MobileContextMenuEvent):void {
            var hierarchyItem:AnalysisHierarchyItem = analysisItem as AnalysisHierarchyItem;
            var index:int = hierarchyItem.hierarchyLevels.getItemIndex(hierarchyItem.hierarchyLevel);
            if (index < (hierarchyItem.hierarchyLevels.length - 1)) {
                var dataField:String = analysisItem.qualifiedName();
                var dataString:String = data[dataField];
                var filterRawData:FilterRawData = new FilterRawData();
                filterRawData.addPair(hierarchyItem.hierarchyLevel.analysisItem, dataString);
                hierarchyItem.hierarchyLevel = hierarchyItem.hierarchyLevels.getItemAt(index + 1) as HierarchyLevel;
                passthroughFunction.call(passthroughObject, new HierarchyDrilldownEvent(HierarchyDrilldownEvent.DRILLDOWN, filterRawData,
                        hierarchyItem, index + 1));
            }
        }

        private function onReport(event:Event):void {
            passthroughFunction.call(passthroughObject, event);
        }

        private function defineDateLink(targetLevel:int, label:String):MobileContextMenuItem {
            var item:MobileContextMenuItem = new MobileContextMenuItem(label);
            item.addEventListener(MobileContextMenuEvent.MOBILE_CONTEXT_SELECT, function (event:MobileContextMenuEvent):void {
                var date:AnalysisDateDimension = analysisItem as AnalysisDateDimension;
                date.dateLevel = targetLevel;
                passthroughFunction.call(passthroughObject, new AnalysisItemChangeEvent(date));
                closeWindow();
            });
            return item;
        }

        private function closeWindow():void {
            stage.removeEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
            this.close();
        }

        private function onCreation():void {
            if (analysisItem is AnalysisDateDimension) {
                var date:AnalysisDateDimension = analysisItem as AnalysisDateDimension;
                if (date.dateLevel == AnalysisItemTypes.YEAR_LEVEL) {
                    items.push(defineDateLink(AnalysisItemTypes.QUARTER_OF_YEAR, "Quarter of Year"));
                    items.push(defineDateLink(AnalysisItemTypes.MONTH_LEVEL, "Month of Year"));
                    items.push(defineDateLink(AnalysisItemTypes.WEEK_LEVEL, "Week of Year"));
                } else if (date.dateLevel == AnalysisItemTypes.QUARTER_OF_YEAR) {
                    items.push(defineDateLink(AnalysisItemTypes.YEAR_LEVEL, "Year"));
                    items.push(defineDateLink(AnalysisItemTypes.MONTH_LEVEL, "Month of Year"));
                } else if (date.dateLevel == AnalysisItemTypes.MONTH_LEVEL) {
                    items.push(defineDateLink(AnalysisItemTypes.YEAR_LEVEL, "Year"));
                    items.push(defineDateLink(AnalysisItemTypes.QUARTER_OF_YEAR, "Quarter of Year"));
                    items.push(defineDateLink(AnalysisItemTypes.WEEK_LEVEL, "Week of Year"));
                } else if (date.dateLevel == AnalysisItemTypes.WEEK_LEVEL) {
                    items.push(defineDateLink(AnalysisItemTypes.YEAR_LEVEL, "Year"));
                    items.push(defineDateLink(AnalysisItemTypes.QUARTER_OF_YEAR, "Quarter of Year"));
                    items.push(defineDateLink(AnalysisItemTypes.MONTH_LEVEL, "Month of Year"));
                    items.push(defineDateLink(AnalysisItemTypes.DAY_LEVEL, "Day of Year"));
                } else if (date.dateLevel == AnalysisItemTypes.DAY_LEVEL) {
                    items.push(defineDateLink(AnalysisItemTypes.MONTH_LEVEL, "Month of Year"));
                    items.push(defineDateLink(AnalysisItemTypes.WEEK_LEVEL, "Week of Year"));
                }
            }
            if (analysisItem.links.length > 0) {
                for each (var link:Link in analysisItem.links) {
                    composeLink(link);
                }
            }

            if (analysisItem is AnalysisHierarchyItem) {
                var hierarchy:AnalysisHierarchyItem = analysisItem as AnalysisHierarchyItem;
                if (includeDrills) {
                    var index:int = hierarchy.hierarchyLevels.getItemIndex(hierarchy.hierarchyLevel);
                    if (index < (hierarchy.hierarchyLevels.length - 1)) {
                        var drilldownContextItem:ContextMenuItem = new ContextMenuItem("Drilldown");
                        drilldownContextItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, drill);
                        items.push(drilldownContextItem);
                    }
                    if (index > 0) {
                        var rollupItem:ContextMenuItem = new ContextMenuItem("Rollup");
                        rollupItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onRollup);
                        items.push(rollupItem);
                    }
                }
                for each (var level:HierarchyLevel in hierarchy.hierarchyLevels) {
                    var childItem:AnalysisItem = level.analysisItem;
                    if (data[childItem.qualifiedName()]) {
                        for each (var hierarchyLink:Link in childItem.links) {
                            composeLink(hierarchyLink);
                        }
                    }
                }
            }


            if (additionalOptions != null) {
                for each (var additionalItem:ContextMenuItem in additionalOptions) {
                    items.push(additionalItem);
                }
            }
            
            this.contextOptions = new ArrayCollection(items);
            listLayout.requestedRowCount = items.length;

            stage.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown, false, 0, true);
            
            
        }

        [Bindable]
        private var contextOptions:ArrayCollection;
        ]]></fx:Script>
    <s:layout>
        <s:VerticalLayout/>
    </s:layout>
    <s:Label text="Context Options" width="100%" textAlign="center" fontWeight="bold"/>
    <s:List id="optionsList" dataProvider="{contextOptions}" labelField="label"
            itemRenderer="com.easyinsight.reportviews.MobileContextMenuItemRenderer">
        <s:layout>
            <s:VerticalLayout id="listLayout"/>
        </s:layout>
    </s:List>
    <!--<s:Label text="argh"/>-->
</s:SkinnablePopUpContainer>
