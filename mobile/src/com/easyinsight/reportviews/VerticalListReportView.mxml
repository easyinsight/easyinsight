<?xml version="1.0"?>
<s:Scroller xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
            implements="com.easyinsight.reportviews.IReportView">
    <fx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisItemTypes;
        import com.easyinsight.analysis.AnalysisMeasure;
        import com.easyinsight.analysis.Value;
        import com.easyinsight.analysis.verticallist.VerticalListDefinition;

        import mx.collections.ArrayCollection;
        import mx.core.FlexGlobals;
        import mx.formatters.Formatter;

        import spark.components.gridClasses.GridColumn;

        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
            this.width = FlexGlobals.topLevelApplication.width;
            this.height = FlexGlobals.topLevelApplication.height;
        }

        public function renderReport(data:ArrayCollection, report:AnalysisDefinition, additionalProperties:Object):void {
            var vert:VerticalListDefinition = report as VerticalListDefinition;
            var dColl:ArrayCollection = new ArrayCollection();
            var columns:Array = [];
            var labelColumn:SortableSparkGridColumn = new SortableSparkGridColumn(0, 0);
            labelColumn.sortable = false;
            labelColumn.width = 130;
            labelColumn.itemRenderer = new ClassFactory(SparkVerticalListRowHeaderRenderer);
            labelColumn.headerText = "";
            labelColumn.dataField = "Label";
            columns.push(labelColumn);
            var sortCriteria:int;
            var firstRow:Boolean = true;
            for each (var measure:AnalysisMeasure in vert.measures) {
                var formatter:Formatter = measure.getFormatter();
                var obj:Object = new Object();
                obj["Label"] = measure.display;
                obj["baseMeasure"] = measure;
                obj["measure"] = measure;
                var atLeastOneValue:Boolean = false;
                for each (var row:Object in data) {
                    var columnValue:String;
                    var val:Value;
                    if (vert.column == null) {
                        columnValue = vert.name == null ? "VertName" : vert.name;
                    } else {
                        val = row[vert.column.qualifiedName()];
                        columnValue = val.toString();
                    }
                    if (val != null && val.type() == Value.EMPTY) {
                        continue;
                    }
                    var measureValue:Value = row[measure.qualifiedName()];
                    if (measureValue != null && measureValue.toNumber() != 0) {
                        atLeastOneValue = true;
                    }
                    var text:String;
                    if (measureValue != null) {
                        var num:Number = measureValue.toNumber();
                        text = formatter.format(num);
                    } else {
                        text = "";
                    }
                    obj[columnValue] = text;
                    obj[columnValue + "measure"] = measure;
                    if (firstRow) {
                        var sortValue:Object;
                        if (vert.column == null) {
                            sortValue = 0;
                        } else if (val != null) {
                            if (vert.column.hasType(AnalysisItemTypes.DATE)) {
                                sortCriteria = Array.NUMERIC;
                                sortValue = val.toSortValue().toNumber();
                            } else {
                                sortCriteria = Array.CASEINSENSITIVE;
                                sortValue = columnValue;
                            }
                        }
                        var dataColumn:SortableSparkGridColumn = new SortableSparkGridColumn(1, sortValue);
                        dataColumn.headerText = columnValue;
                        dataColumn.dataField = columnValue;
                        dataColumn.width = 0;
                        var factory:ClassFactory = new ClassFactory(SparkVerticalListRenderer);
                        factory.properties = { qualifiedName: columnValue };
                        dataColumn.itemRenderer = factory;
                        dataColumn.sortable = false;
                        /*var headerFactory:ClassFactory = new ClassFactory(SparkVerticalListHeaderRenderer);
                         headerFactory.properties = { headerText: columnValue };*/
                        //dataColumn.headerRenderer = headerFactory;
                        columns.push(dataColumn);
                    }
                }
                if (firstRow) {
                    firstRow = false;
                }
                if (atLeastOneValue) {
                    dColl.addItem(obj);
                }
            }
            var perColSize:int = 100;
            var minSize:int = (columns.length - 1) * perColSize + 130;
            if (minSize < this.width) {
                perColSize += (this.width - minSize) / (columns.length - 1);
            }
            for each (var col:GridColumn in columns) {
                if (col.width == 0) {
                    col.width = perColSize;
                }
            }
            columns.sortOn(["reportIndex", "sortValue"], [Array.NUMERIC, sortCriteria]);
            dataGrid.columns = new ArrayCollection(columns);
            dataGrid.dataProvider = dColl;
            invalidateSize();
        }

        public function preserveValues():Boolean {
            return true;
        }
        ]]></fx:Script>
    <s:Group>
        <s:DataGrid
        selectionMode="none" rowHeight="20" fontSize="10"
        skinClass="com.easyinsight.reportviews.CustomDataGridSkin" chromeColor="#FFFFFF" id="dataGrid"/>
    </s:Group>
</s:Scroller>
