<?xml version="1.0"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
        viewActivate="onActivate()">
    <fx:Script><![CDATA[
        import com.easyinsight.datasources.DataSourceRefreshEvent;
        import com.easyinsight.datasources.DataSourceRefreshWindow;
        import com.easyinsight.filter.FilterFactory;
        import com.easyinsight.filtering.FilterDefinition;
        import com.easyinsight.report.ReportInfo;
        import com.easyinsight.report.ReportNavigationEvent;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.ActionReportLog;
        import com.easyinsight.util.ExportWindow;
        import com.easyinsight.util.FilterChangeEvent;
        import com.easyinsight.util.PopUpUtil;
        import com.easyinsight.util.ProgressAlert;
        import com.easyinsight.util.UserAudit;

        import mx.collections.ArrayCollection;
        import mx.core.FlexGlobals;
        import mx.core.UIComponent;
        import mx.events.FlexEvent;

        import org.flexlayouts.layouts.FlowLayout;

        import spark.components.Group;

        private function onActivate():void {
            var metadata:ReportMetadata = data as ReportMetadata;
            report = metadata.descriptor;
            reportName = report.name;
            UserAudit.instance().log(new ActionReportLog(ActionReportLog.VIEW, report.id));
            createReportDisplay();
            removeEventListener(ReportNavigationEvent.TO_REPORT, onReportNavigate);
            addEventListener(ReportNavigationEvent.TO_REPORT, onReportNavigate);
            stage.removeEventListener(StageOrientationEvent.ORIENTATION_CHANGE, onOrientationChange);
            stage.addEventListener(StageOrientationEvent.ORIENTATION_CHANGE, onOrientationChange, false, 0, true);
        }

        private function onReportNavigate(event:ReportNavigationEvent):void {
            var metadata:ReportMetadata = new ReportMetadata();
            metadata.descriptor = InsightDescriptor(event.descriptor);
            metadata.filters = event.filters;
            navigator.pushView(ReportView, metadata);
        }

        private var report:InsightDescriptor;

        private var reportView:IReportView;

        private var reportComponent:ReportComponent;

        private function gotReportInfo():void {
            var reportInfo:ReportInfo = analysisService.getReportInfo.lastResult as ReportInfo;
            reportComponent = new ReportComponent(report, this);
            reportView = reportComponent.getReportView();

            var component:UIComponent = reportView as UIComponent;

            reportFilters = reportInfo.report.filterDefinitions;
            if (reportFilters.length > 0) {
                var valid:Boolean = false;
                for each (var testFilter:FilterDefinition in reportFilters) {
                    if (testFilter.showOnReportView) {
                        valid = true;
                        break;
                    }
                }
                if (valid) {
                    hasFilters = true;
                    currentState = "filters";
                    var layout:FlowLayout = new FlowLayout();
                    layout.padding = 10;
                    filterGroup.layout = layout;
                    filterGroup.addEventListener(FlexEvent.UPDATE_COMPLETE, onUpdateComplete);
                    filterGroup.removeAllElements();
                    for each (var filter:FilterDefinition in reportFilters) {
                        if (filter.showOnReportView) {
                            var filterComp:UIComponent = FilterFactory.createTabletFilter(filter, report.dataFeedID);
                            if (filterComp != null) {
                                filterComp.addEventListener(FilterChangeEvent.FILTER_CHANGE, onFilterChange);
                                filterGroup.addElement(filterComp);
                            }
                        }
                    }
                }
            }
            reportTarget.removeAllElements();
            reportTarget.addElement(component);
            reportComponent.addEventListener(ReportComponentEvent.GOT_DATA, onData);
            ProgressAlert.alert(this, "Retrieving data...", null, reportComponent.operation());
            reportComponent.retrieveData(reportFilters);
        }

        private function refreshData():void {
            var dsRefreshWindow:DataSourceRefreshWindow = new DataSourceRefreshWindow();
            dsRefreshWindow.dataSourceID = report.dataFeedID;
            dsRefreshWindow.addEventListener(DataSourceRefreshEvent.DATA_SOURCE_REFRESH, onRefresh, false, 0, true);
            dsRefreshWindow.open(this, true);
            PopUpUtil.centerPopUp(dsRefreshWindow);
        }

        private function onRefresh(event:Event):void {
            ProgressAlert.alert(this, "Retrieving data...", null, reportComponent.operation());
            reportComponent.retrieveData(reportFilters);
        }

        private function createReportDisplay():void {
            var metadata:ReportMetadata = data as ReportMetadata;
            ProgressAlert.alert(this, "Retrieving report metadata...", null, analysisService.getReportInfo);
            analysisService.getReportInfo.send(metadata.descriptor.id);
        }

        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
            var application:UIComponent = FlexGlobals.topLevelApplication as UIComponent;
            if (filterGroup != null && currentState == 'filters') {
                filterGroup.width = application.width - 20;
                filterGroup.height = filterGroup.contentHeight;
            }
            scroller.width = FlexGlobals.topLevelApplication.width - 50;
            scroller.height = FlexGlobals.topLevelApplication.height - 150;
            trace("setting to " + scroller.width + " and " + scroller.height);
            if (reportComponent != null && UIComponent(reportComponent.getReportView()).parent) {
                //UIComponent(reportComponent.getReportView()).invalidateDisplayList();
                UIComponent(reportComponent.getReportView()).validateNow();
            }
        }

        private function onOrientationChange(event:Event):void {
            trace("orientation change...");
            invalidateDisplayList();
        }

        private var reportFilters:ArrayCollection;

        private function onFilterChange(event:FilterChangeEvent):void {
            ProgressAlert.alert(this, "Retrieving data...", null, reportComponent.operation());
            reportComponent.retrieveData(reportFilters);
        }



        private function onUpdateComplete(event:FlexEvent):void {
            var group:Group = Group(event.currentTarget);
            if (group.height != group.contentHeight) {
                group.height = group.contentHeight;
            }
        }

        //private var filterGroup:Group;

        private function onData(event:ReportComponentEvent):void {
            var metadata:ReportMetadata = data as ReportMetadata;
            if (metadata.report == null) {
                metadata.report = event.report;
            }
            if (event.reportFault != null) {

            } else if (event.data.length == 0) {
                hasData = false;
                if (hasFilters) {
                    currentState = "filtersNoData";
                } else {
                    currentState = "noData";
                }
            } else {
                hasData = true;
                if (currentState == "noData") {
                    if (hasFilters) {
                        currentState = "filters";
                    } else {
                        currentState = "";
                    }
                }
            }
        }

        private function toggleMenu():void {
            FlexGlobals.topLevelApplication.viewMenuOpen=!FlexGlobals.topLevelApplication.viewMenuOpen;
        }

        private function exportReport():void {
            var window:ExportWindow = new ExportWindow();
            window.report = reportComponent.actualReport;
            window.open(exportButton, true);
        }

        private function filter():void {
            var metadata:ReportMetadata = data as ReportMetadata;
            navigator.pushView(FilterView, metadata.report);
        }

        [Bindable]
        [Embed(source="../../../../assets/funnel.png")]
        private var filterIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/table.png")]
        private var exportIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/19-gear2.png")]
        private var gearIcon:Class;

        private var hasFilters:Boolean = false;
        private var hasData:Boolean = false;

        private function toggleFilters():void {
            if (hasFilters) {
                if (currentState == "" || currentState == "noFilters") {
                    if (hasData) {
                        currentState = "filters";
                    } else {
                        currentState = "filtersNoData";
                    }
                } else {
                    if (hasData) {
                        currentState = "noFilters";
                    } else {
                        currentState = "noData";
                    }
                }
            }
        }

        [Bindable]
        [Embed(source="../../../../assets/01-refresh2.png")]
        private var refreshIcon:Class;


        [Bindable]
        private var reportName:String;
        ]]></fx:Script>
    <fx:Declarations>
        <s:RemoteObject destination="analysisDefinition" id="analysisService" endpoint="https://www.easy-insight.com/app/messagebroker/amfsecure">
            <s:method name="getReportInfo" result="gotReportInfo()"/>
        </s:RemoteObject>
    </fx:Declarations>
    <s:navigationContent>
        <s:Button label="Back" click="navigator.popView()"/>
    </s:navigationContent>
    <s:titleContent>
        <s:Label text="{reportName}" color="#FFFFFF" textAlign="center" width="100%"/>
    </s:titleContent>
    <s:states>
        <s:State name="filters"/>
        <s:State name="noFilters"/>
        <s:State name="filtersNoData"/>
        <s:State name="noData"/>
    </s:states>
    <s:BorderContainer id="vgroup" width="100%" height="100%">
        <s:layout>
            <s:VerticalLayout/>
        </s:layout>
        <s:backgroundFill>
            <s:SolidColor color="#F8F8F8" alpha="1"/>
        </s:backgroundFill>
        <s:Group id="filterGroup" includeIn="filters, filtersNoData">

        </s:Group>
        <s:Group width="100%" height="100%">
            <s:layout>
                <s:HorizontalLayout paddingLeft="10" paddingRight="10"/>
            </s:layout>
            <s:BorderContainer width="100%" height="100%" excludeFrom="noData" borderColor="#666666"
                    cornerRadius="8" dropShadowVisible="true">
                <s:layout>
                    <s:HorizontalLayout horizontalAlign="center" paddingLeft="10" paddingRight="10" paddingTop="10"/>
                </s:layout>
                <s:backgroundFill>
                    <s:SolidColor color="#FFFFFF" alpha="1"/>
                </s:backgroundFill>
                <s:Scroller id="scroller">
                    <s:Group id="reportTarget"/>
                </s:Scroller>
            </s:BorderContainer>
            <s:BorderContainer width="100%" height="100%" includeIn="noData">
                <s:layout>
                    <s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
                </s:layout>
                <s:Label text="We didn't find any data for the fields and filters that you specified in the report."/>
            </s:BorderContainer>
        </s:Group>
        <s:BorderContainer width="100%" height="50" id="footerContainer">
            <s:layout>
                <s:HorizontalLayout paddingTop="5" paddingBottom="5"/>
            </s:layout>
            <s:backgroundFill>
                <s:SolidColor color="#000000" alpha="1"/>
            </s:backgroundFill>
            <s:Spacer width="100%"/>
            <s:Button icon="{refreshIcon}" label="Refresh" width="130" click="refreshData()" height="40"/>
            <s:Spacer width="100%"/>
            <s:Button icon="{exportIcon}" label="Export" width="130" id="exportButton" click="exportReport()" height="40"/>
            <s:Spacer width="100%"/>
            <s:Button icon="{filterIcon}" label="Toggle Filters" width="130" click="toggleFilters()" height="40"/>
            <s:Spacer width="100%"/>
        </s:BorderContainer>
    </s:BorderContainer>
</s:View>
