<?xml version="1.0"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
        viewActivate="onActivate()">
    <fx:Script><![CDATA[
        import com.easyinsight.filter.FilterFactory;
        import com.easyinsight.filtering.FilterDefinition;
        import com.easyinsight.report.ReportInfo;
        import com.easyinsight.solutions.InsightDescriptor;
        import com.easyinsight.util.ActionReportLog;
        import com.easyinsight.util.ExportWindow;
        import com.easyinsight.util.FilterChangeEvent;
        import com.easyinsight.util.UserAudit;

        import mx.collections.ArrayCollection;
        import mx.core.FlexGlobals;
        import mx.core.UIComponent;
        import mx.events.FlexEvent;

        import org.flexlayouts.layouts.FlowLayout;

        import spark.components.Group;

        private function onActivate():void {
            var metadata:ReportMetadata = data as ReportMetadata;
            report = metadata.descriptor;
            reportName = report.name;
            UserAudit.instance().log(new ActionReportLog(ActionReportLog.VIEW, report.id));
            createReportDisplay();
        }

        private var report:InsightDescriptor;

        private var reportView:IReportView;

        private var reportComponent:ReportComponent;

        private function gotReportInfo():void {
            var reportInfo:ReportInfo = analysisService.getReportInfo.lastResult as ReportInfo;
            reportComponent = new ReportComponent(report, this);
            reportView = reportComponent.getReportView();

            var component:UIComponent = reportView as UIComponent;

            reportFilters = reportInfo.report.filterDefinitions;
            if (reportFilters.length > 0) {
                var valid:Boolean = false;
                for each (var testFilter:FilterDefinition in reportFilters) {
                    if (testFilter.showOnReportView) {
                        valid = true;
                        break;
                    }
                }
                if (valid) {
                    hasFilters = true;
                    currentState = "filters";
                    var layout:FlowLayout = new FlowLayout();
                    layout.padding = 10;
                    filterGroup.layout = layout;
                    filterGroup.addEventListener(FlexEvent.UPDATE_COMPLETE, onUpdateComplete);
                    for each (var filter:FilterDefinition in reportFilters) {
                        if (filter.showOnReportView) {
                            var filterComp:UIComponent = FilterFactory.createTabletFilter(filter, report.dataFeedID);
                            if (filterComp != null) {
                                filterComp.addEventListener(FilterChangeEvent.FILTER_CHANGE, onFilterChange);
                                filterGroup.addElement(filterComp);
                            }
                        }
                    }
                }
            }
            reportTarget.addElement(component);
            reportComponent.addEventListener(ReportComponentEvent.GOT_DATA, onData);
            reportComponent.retrieveData(reportFilters);
        }

        private function refreshData():void {
            busy = true;
            reportComponent.retrieveData(reportFilters);
        }

        private function createReportDisplay():void {
            busy = true;
            var metadata:ReportMetadata = data as ReportMetadata;
            analysisService.getReportInfo.send(metadata.descriptor.id);
        }

        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
            var application:UIComponent = FlexGlobals.topLevelApplication as UIComponent;
            if (filterGroup != null && currentState == 'filters') {
                filterGroup.width = application.width - 20;
                filterGroup.height = filterGroup.contentHeight;
            }
        }

        private var reportFilters:ArrayCollection;

        private function onFilterChange(event:FilterChangeEvent):void {
            busy = true;
            reportComponent.retrieveData(reportFilters);
        }



        private function onUpdateComplete(event:FlexEvent):void {
            var group:Group = Group(event.currentTarget);
            if (group.height != group.contentHeight) {
                group.height = group.contentHeight;
            }
        }

        //private var filterGroup:Group;

        private function onData(event:ReportComponentEvent):void {
            busy = false;
            var metadata:ReportMetadata = data as ReportMetadata;
            if (metadata.report == null) {
                metadata.report = event.report;
            }
            if (event.reportFault != null) {

            } else if (event.data.length == 0) {
                hasData = false;
                if (hasFilters) {
                    currentState = "filtersNoData";
                } else {
                    currentState = "noData";
                }
            } else {
                hasData = true;
                if (currentState == "noData") {
                    if (hasFilters) {
                        currentState = "filters";
                    } else {
                        currentState = "";
                    }
                }
            }
        }

        private function toggleMenu():void {
            FlexGlobals.topLevelApplication.viewMenuOpen=!FlexGlobals.topLevelApplication.viewMenuOpen;
        }

        private function exportReport():void {
            /*
                    var comboBoxPopUp:ComboBoxPopUp = new ComboBoxPopUp();
            comboBoxPopUp.dataProvider = _dataProvider;
            comboBoxPopUp.labelField = _labelField;
            comboBoxPopUp.labelFunction = _labelFunction;
            comboBoxPopUp.addEventListener(FilterChangeEvent.FILTER_CHANGE, onFilterChange, false, 0, true);
            var point:Point = new Point(dropdownBox.x, dropdownBox.y);
            var global:Point = localToGlobal(point);
            comboBoxPopUp.x = global.x;
            comboBoxPopUp.y = global.y + 20;
            comboBoxPopUp.open(this, true);
                    */
            var window:ExportWindow = new ExportWindow();
            window.report = reportComponent.actualReport;
            var point:Point = new Point(exportButton.x, exportButton.y);
            var global:Point = footerContainer.localToGlobal(point);
            window.x = global.x;
            window.y = global.y - 370;
            window.open(this, true);
        }

        private function filter():void {
            var metadata:ReportMetadata = data as ReportMetadata;
            navigator.pushView(FilterView, metadata.report);
        }

        [Bindable]
        [Embed(source="../../../../assets/funnel.png")]
        private var filterIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/table.png")]
        private var exportIcon:Class;

        [Bindable]
        [Embed(source="../../../../assets/19-gear2.png")]
        private var gearIcon:Class;

        private var hasFilters:Boolean = false;
        private var hasData:Boolean = false;

        private function toggleFilters():void {
            if (hasFilters) {
                if (currentState == "") {
                    if (hasData) {
                        currentState = "filters";
                    } else {
                        currentState = "filtersNoData";
                    }
                } else {
                    if (hasData) {
                        currentState = "";
                    } else {
                        currentState = "noData";
                    }
                }
            }
        }

        [Bindable]
        [Embed(source="../../../../assets/01-refresh2.png")]
        private var refreshIcon:Class;

        [Bindable]
        private var busy:Boolean;

        [Bindable]
        private var reportName:String;
        ]]></fx:Script>
    <fx:Declarations>
        <s:RemoteObject destination="analysisDefinition" id="analysisService" endpoint="https://www.easy-insight.com/app/messagebroker/amfsecure">
            <s:method name="getReportInfo" result="gotReportInfo()"/>
        </s:RemoteObject>
    </fx:Declarations>
    <s:navigationContent>
        <s:Button label="Back" click="navigator.popView()"/>
    </s:navigationContent>
    <s:titleContent>
        <s:Label text="{reportName}" color="#FFFFFF"/>
    </s:titleContent>
    <s:actionContent>
        <!--<s:Button icon="{gearIcon}" click="toggleMenu()"/>-->
        <s:BusyIndicator visible="{busy}" id="busyIndicator" symbolColor="#FFFFFF"/>
    </s:actionContent>
    <!--<s:viewMenuItems>
        <s:ViewMenuItem label="Filter" click="filter()" icon="{filterIcon}"  iconPlacement="left" />
        <s:ViewMenuItem label="Export" click="exportReport()" icon="{exportIcon}" iconPlacement="left" />
    </s:viewMenuItems>-->
    <s:states>
        <s:State name="filters"/>
        <s:State name="filtersNoData"/>
        <s:State name="noData"/>
    </s:states>
    <s:VGroup id="vgroup" width="100%" height="100%" chromeColor="#FFFFFF">
        <s:Group id="filterGroup" includeIn="filters, filtersNoData">

        </s:Group>
        <s:BorderContainer id="reportTarget" width="100%" height="100%" borderAlpha="0" excludeFrom="noData">
            <s:layout>
                <s:HorizontalLayout horizontalAlign="center"/>
            </s:layout>
            <s:backgroundFill>
                <s:SolidColor color="#FFFFFF" alpha="1"/>
            </s:backgroundFill>
        </s:BorderContainer>
        <s:BorderContainer width="100%" height="100%" includeIn="noData">
            <s:layout>
                <s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
            </s:layout>
            <s:Label text="We didn't find any data for the fields and filters that you specified in the report."/>
        </s:BorderContainer>
        <s:BorderContainer width="100%" height="48" id="footerContainer">
            <s:layout>
                <s:HorizontalLayout/>
            </s:layout>
            <s:backgroundFill>
                <s:SolidColor color="#333333" alpha="1"/>
            </s:backgroundFill>
            <s:Spacer width="100%"/>
            <s:Button icon="{refreshIcon}" label="Refresh" width="130" click="refreshData()"/>
            <s:Spacer width="100%"/>
            <s:Button icon="{exportIcon}" label="Export" width="130" id="exportButton" click="exportReport()"/>
            <s:Spacer width="100%"/>
            <s:Button icon="{filterIcon}" label="Toggle Filters" width="130" click="toggleFilters()"/>
            <s:Spacer width="100%"/>
        </s:BorderContainer>
    </s:VGroup>
</s:View>
