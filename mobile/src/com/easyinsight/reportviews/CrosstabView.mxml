<?xml version="1.0"?>
<s:DataGrid xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
    implements="com.easyinsight.reportviews.IReportView" rowHeight="20" fontSize="14" initialize="columnHeaderGroup.height=0">
    <fx:Script><![CDATA[
        import com.easyinsight.analysis.AnalysisDefinition;
        import com.easyinsight.analysis.AnalysisMeasure;
        import com.easyinsight.analysis.crosstab.CrosstabDefinition;
        import com.easyinsight.analysis.crosstab.CrosstabMapWrapper;
        import com.easyinsight.analysis.crosstab.CrosstabValue;

        import mx.collections.ArrayCollection;
        import mx.formatters.Formatter;

        import spark.components.gridClasses.GridColumn;

        private var crosstabDefinition:CrosstabDefinition;

        public function renderReport(data:ArrayCollection, report:AnalysisDefinition, additionalProperties:Object):void {
            crosstabDefinition = report as CrosstabDefinition;
            if (data.length > 3) {
                var translated:ArrayCollection = new ArrayCollection();
                for (var k:int = 0; k < data.length; k++) {
                    var row:CrosstabMapWrapper = data.getItemAt(k) as CrosstabMapWrapper;
                    var obj:Object = row.map;
                    obj["row_index"] = k;
                    translated.addItem(obj);
                }
                var columnCount:int = additionalProperties["columnCount"];
                var columns:Array = [];

                var measureFormatter:Formatter = AnalysisMeasure(crosstabDefinition.measures.getItemAt(0)).getFormatter();

                for (var i:int = 0; i < columnCount; i++) {
                    var maxWidth:int = 0;
                    for each (var testRow:Object in translated) {
                        var crosstabValue:CrosstabValue = testRow[String(i)];
                        if (crosstabValue == null) {
                            continue;
                        }
                        var text:String;
                        if (crosstabValue.header == null) {
                            text = measureFormatter.format(crosstabValue.value);
                        } else if (crosstabValue.headerLabel) {
                            text = String(crosstabValue.value.getValue());
                        } else {
                            text = crosstabValue.header.getFormatter().format(crosstabValue.value);
                        }
                        var metrics:TextLineMetrics = measureText(text);
                        maxWidth = Math.max(metrics.width + metrics.x + metrics.x + 4, maxWidth);
                        maxWidth = Math.min(maxWidth, 300);
                    }
                    var column:GridColumn = new GridColumn();
                    var factory:ClassFactory = new ClassFactory(SparkCrosstabCellRenderer);
                    factory.properties = { formatter: measureFormatter, cellProperty: String(i), lastCol: (i == (columnCount - 1)) };
                    column.dataField = String(i);
                    column.width = maxWidth;
                    column.itemRenderer = factory;
                    columns.push(column);
                }
                this.columns = new ArrayCollection(columns);
                var reportWidth:int = 1;
                for each (var col:GridColumn in columns) {
                    reportWidth += (col.width + 1);
                }
                var endWidth:int = 0;
                if (reportWidth < this.width) {
                    var delta:int = (this.width - reportWidth);
                    delta = Math.min(delta, 300);
                    var perColumnAdd:int = (delta) / columns.length;
                    for each (var colAdd:GridColumn in columns) {
                        colAdd.width += perColumnAdd;
                        endWidth += colAdd.width;
                    }
                }
                this.height = translated.length * 20 + 4;
                dataProvider = translated;
            }
        }

        public function preserveValues():Boolean {
            return false;
        }
        ]]></fx:Script>
</s:DataGrid>
